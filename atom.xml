<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blow in the wind</title>
  
  <subtitle>just code for fun</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-15T16:46:26.682Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mike meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Leetcode】 167周比赛</title>
    <link href="http://yoursite.com/2019/12/16/112/"/>
    <id>http://yoursite.com/2019/12/16/112/</id>
    <published>2019-12-15T16:46:25.392Z</published>
    <updated>2019-12-15T16:46:26.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="166周比赛"><a href="#166周比赛" class="headerlink" title="166周比赛"></a>166周比赛</h1><p>题目比双周赛的题目好点，比较有特点的是二分查找法。</p><h2 id="5279-整数的各位积和之差"><a href="#5279-整数的各位积和之差" class="headerlink" title="5279. 整数的各位积和之差"></a>5279. 整数的各位积和之差</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个单链表的引用结点 head。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。<br>请你返回该链表所表示数字的 十进制值 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：二进制数 (<span class="number">101</span>) 转化为十进制数 (<span class="number">5</span>)</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">18880</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li>链表不为空。</li><li>链表的结点总数不超过 30。</li><li>每个结点的值不是 0 就是 1。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/convert-binary-number-in-a-linked-list-to-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/convert-binary-number-in-a-linked-list-to-integer</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接计算</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>依次计算即可<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDecimalValue</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head)&#123;</span><br><span class="line">            res = (res&lt;&lt;<span class="number">1</span>)+ head-&gt;val;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5124-顺次数"><a href="#5124-顺次数" class="headerlink" title="5124. 顺次数"></a>5124. 顺次数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>我们定义「顺次数」为：每一位上的数字都比前一位上的数字大 1 的整数。</p><p>请你返回由<code>[low, high]</code> 范围内所有顺次数组成的 有序 列表（从小到大排序）。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出：low = <span class="number">100</span>, high = <span class="number">300</span></span><br><span class="line">输出：[<span class="number">123</span>,<span class="number">234</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出：low = <span class="number">1000</span>, high = <span class="number">13000</span></span><br><span class="line">输出：[<span class="number">1234</span>,<span class="number">2345</span>,<span class="number">3456</span>,<span class="number">4567</span>,<span class="number">5678</span>,<span class="number">6789</span>,<span class="number">12345</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>10 &lt;= low &lt;= high &lt;= 10^9</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/sequential-digits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sequential-digits</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力枚举</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>数据量很小，直接暴力枚举就可以完成<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countNum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            res++;</span><br><span class="line">            n = n/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; generateSeq(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">string</span> start;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            start += to_string(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>-n; ++i)&#123;</span><br><span class="line">            res.push_back(stoi(start));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n;++j)&#123;</span><br><span class="line">                start[j] = start[j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sequentialDigits(<span class="keyword">int</span> low, <span class="keyword">int</span> high) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> l = countNum(low);</span><br><span class="line">        <span class="keyword">int</span> r = countNum(high);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums = generateSeq(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.size(); ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &gt;= low &amp;&amp; nums[j] &lt;= high)&#123;</span><br><span class="line">                    res.push_back(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5285-元素和小于等于阈值的正方形的最大边长"><a href="#5285-元素和小于等于阈值的正方形的最大边长" class="headerlink" title="5285. 元素和小于等于阈值的正方形的最大边长"></a>5285. 元素和小于等于阈值的正方形的最大边长</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个大小为<code>m x n</code>的矩阵<code>mat</code> 和一个整数阈值 <code>threshold</code>。<br>请你返回元素总和小于或等于阈值的正方形区域的最大边长；如果没有这样的正方形区域，则返回 0 。<br>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]], threshold = <span class="number">4</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：总和小于 <span class="number">4</span> 的正方形的最大边长为 <span class="number">2</span>，如图所示。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]], threshold = <span class="number">1</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]], threshold = <span class="number">6</span></span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">18</span>,<span class="number">70</span>],[<span class="number">61</span>,<span class="number">1</span>],[<span class="number">25</span>,<span class="number">85</span>],[<span class="number">14</span>,<span class="number">40</span>],[<span class="number">11</span>,<span class="number">96</span>],[<span class="number">97</span>,<span class="number">96</span>],[<span class="number">63</span>,<span class="number">45</span>]], threshold = <span class="number">40184</span></span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= m, n &lt;= 300</li><li>m == mat.length</li><li>n == mat[i].length</li><li>0 &lt;= mat[i][j] &lt;= 10000</li><li>0 &lt;= threshold &lt;= 10^5</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 二分查找</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>常规题目，先求出所有的子矩阵的和，然后利用二分查找最大边长。</li><li>二分查找的边界我还是处理的不太好，泪奔。。。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSide</span><span class="params">(<span class="keyword">int</span> r,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = sum.size();</span><br><span class="line">        <span class="keyword">int</span> col = sum[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(r == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = r; j &lt; col; ++j)&#123;</span><br><span class="line">                res = min(res,sum[i][j] - sum[i-r][j]- sum[i][j-r] + sum[i-r][j-r]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;                  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSideLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat, <span class="keyword">int</span> threshold)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = mat.size();</span><br><span class="line">        <span class="keyword">int</span> col = mat[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; sum(row+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*get sum of the matrix*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= col; ++j)&#123;</span><br><span class="line">                sum[i][j] = sum[i<span class="number">-1</span>][j] + sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>] + mat[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = min(row,col);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> curr = minSide(mid,sum);</span><br><span class="line">            <span class="keyword">if</span>(curr &lt;= threshold)&#123;</span><br><span class="line">                l = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5286-网格中的最短路径"><a href="#5286-网格中的最短路径" class="headerlink" title="5286. 网格中的最短路径"></a>5286. 网格中的最短路径</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个<code>m * n</code> 的网格，其中每个单元格不是 0（空）就是 1（障碍物）。每一步，您都可以在空白单元格中上、下、左、右移动。</p><p>如果您 最多 可以消除<code>k</code> 个障碍物，请找出从左上角<code>(0, 0)</code>到右下角<code>(m-1, n-1)</code> 的最短路径，并返回通过该路径所需的步数。如果找不到这样的路径，则返回 -1。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入： </span><br><span class="line">grid = </span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line"> [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]], </span><br><span class="line">k = <span class="number">1</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：</span><br><span class="line">不消除任何障碍的最短路径是 <span class="number">10</span>。</span><br><span class="line">消除位置 (<span class="number">3</span>,<span class="number">2</span>) 处的障碍后，最短路径是 <span class="number">6</span> 。该路径是 (<span class="number">0</span>,<span class="number">0</span>) -&gt; (<span class="number">0</span>,<span class="number">1</span>) -&gt; (<span class="number">0</span>,<span class="number">2</span>) -&gt; (<span class="number">1</span>,<span class="number">2</span>) -&gt; (<span class="number">2</span>,<span class="number">2</span>) -&gt; (<span class="number">3</span>,<span class="number">2</span>) -&gt; (<span class="number">4</span>,<span class="number">2</span>).</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">grid = </span><br><span class="line">[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]], </span><br><span class="line">k = <span class="number">1</span></span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：</span><br><span class="line">我们至少需要消除两个障碍才能找到这样的路径。</span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grid.length == m</span><br><span class="line">grid[<span class="number">0</span>].length == n</span><br><span class="line"><span class="number">1</span> &lt;= m, n &lt;= <span class="number">40</span></span><br><span class="line"><span class="number">1</span> &lt;= k &lt;= m*n</span><br><span class="line">grid[i][j] == <span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line">grid[<span class="number">0</span>][<span class="number">0</span>] == grid[m<span class="number">-1</span>][n<span class="number">-1</span>] == <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/shortest-path-in-a-grid-with-obstacles-elimination" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shortest-path-in-a-grid-with-obstacles-elimination</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>设<code>dist[i][j]</code>代表从坐标<code>0</code>到达<code>i</code>处时，还可以消除<code>j</code>个障碍物状态时的最小步骤。</li><li>类似于<code>dijistra</code>的最小距离的解法即可。</li><li>这种题目已经出了很多遍了，都是有套路的。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">shortestPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = grid.size();</span><br><span class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dist(row*col,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(k+<span class="number">1</span>,INT_MAX));</span><br><span class="line">        <span class="built_in">queue</span>&lt;pii&gt; qu;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*initial*/</span></span><br><span class="line">        dist[<span class="number">0</span>][k] = <span class="number">0</span>;</span><br><span class="line">        qu.push(make_pair(<span class="number">0</span>,k));</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = qu.front().first;</span><br><span class="line">            <span class="keyword">int</span> remove = qu.front().second;</span><br><span class="line">            qu.pop();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = (curr/col) + d[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> y = (curr%col) + d[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> next = x*col + y;</span><br><span class="line">                <span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; row &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; col)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[x][y] == <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(dist[next][remove] &gt; (dist[curr][remove]+<span class="number">1</span>))&#123;</span><br><span class="line">                            dist[next][remove] = dist[curr][remove]+<span class="number">1</span>;</span><br><span class="line">                            qu.push(make_pair(next,remove));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(remove &gt; <span class="number">0</span> &amp;&amp; dist[next][remove<span class="number">-1</span>] &gt; (dist[curr][remove]+<span class="number">1</span>))&#123;</span><br><span class="line">                            dist[next][remove<span class="number">-1</span>] = dist[curr][remove]+<span class="number">1</span>;</span><br><span class="line">                            qu.push(make_pair(next,remove<span class="number">-1</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">            res = min(res,dist[col*row<span class="number">-1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res == INT_MAX)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;166周比赛&quot;&gt;&lt;a href=&quot;#166周比赛&quot; class=&quot;headerlink&quot; title=&quot;166周比赛&quot;&gt;&lt;/a&gt;166周比赛&lt;/h1&gt;&lt;p&gt;题目比双周赛的题目好点，比较有特点的是二分查找法。&lt;/p&gt;&lt;h2 id=&quot;5279-整数的各位积和之差&quot;&gt;&lt;a href=&quot;#5279-整数的各位积和之差&quot; class=&quot;headerlink&quot; title=&quot;5279. 整数的各位积和之差&quot;&gt;&lt;/a&gt;5279. 整数的各位积和之差&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个单链表的引用结点 head。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。&lt;br&gt;请你返回该链表所表示数字的 十进制值 。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：head = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：二进制数 (&lt;span class=&quot;number&quot;&gt;101&lt;/span&gt;) 转化为十进制数 (&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：head = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：head = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 4：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：head = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;18880&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 5：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：head = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 15周双周比赛</title>
    <link href="http://yoursite.com/2019/12/16/111/"/>
    <id>http://yoursite.com/2019/12/16/111/</id>
    <published>2019-12-15T16:38:08.307Z</published>
    <updated>2019-12-15T16:38:08.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="15周比赛"><a href="#15周比赛" class="headerlink" title="15周比赛"></a>15周比赛</h1><p>题目很简单</p><h2 id="5126-有序数组中出现次数超过25-的元素"><a href="#5126-有序数组中出现次数超过25-的元素" class="headerlink" title="5126. 有序数组中出现次数超过25%的元素"></a>5126. 有序数组中出现次数超过25%的元素</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个非递减的 有序 整数数组，已知这个数组中恰好有一个整数，它的出现次数超过数组元素总数的 25%。<br>请你找到并返回这个整数<br>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= arr.length &lt;= 10^4</li><li>0 &lt;= arr[i] &lt;= 10^5</li></ul><a id="more"></a><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/element-appearing-more-than-25-in-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/element-appearing-more-than-25-in-sorted-array</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 送分题</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>统计次数</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findSpecialInteger</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; a : arr)&#123;</span><br><span class="line">            cnt[a]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it : cnt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(it.second &gt; (n/<span class="number">4</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> it.first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="5127-删除被覆盖区间"><a href="#5127-删除被覆盖区间" class="headerlink" title="5127. 删除被覆盖区间"></a>5127. 删除被覆盖区间</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个区间列表，请你删除列表中被其他区间所覆盖的区间。<br>只有当 <code>c &lt;= a 且 b &lt;= d</code>时，我们才认为区间 <code>[a,b)</code>被区间<code>[c,d)</code>覆盖。<br>在完成所有删除操作后，请你返回列表中剩余区间的数目。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">int</span>ervals = [[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">6</span>],[<span class="number">2</span>,<span class="number">8</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：区间 [<span class="number">3</span>,<span class="number">6</span>] 被区间 [<span class="number">2</span>,<span class="number">8</span>] 覆盖，所以它被删除了。</span><br></pre></td></tr></table></figure><br>提示：​​​​​​<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;= <span class="built_in">int</span>ervals.length &lt;= <span class="number">1000</span></span><br><span class="line"><span class="number">0</span> &lt;= <span class="built_in">int</span>ervals[i][<span class="number">0</span>] &lt; <span class="built_in">int</span>ervals[i][<span class="number">1</span>] &lt;= <span class="number">10</span>^<span class="number">5</span></span><br><span class="line">对于所有的 i != j：<span class="built_in">int</span>ervals[i] != <span class="built_in">int</span>ervals[j]</span><br></pre></td></tr></table></figure></p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/remove-covered-intervals" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-covered-intervals</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 删除重复区间</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>排序，然后暴力判断即可，数据量很小<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeCoveredIntervals</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> remove = <span class="number">0</span>;</span><br><span class="line">        sort(intervals.begin(),intervals.end(),cmp);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = intervals.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(intervals[i][<span class="number">0</span>] &gt;= intervals[j][<span class="number">0</span>] &amp;&amp; intervals[i][<span class="number">1</span>] &lt;= intervals[j][<span class="number">1</span>])&#123;</span><br><span class="line">                    remove++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> intervals.size() - remove;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5123-字母组合迭代器"><a href="#5123-字母组合迭代器" class="headerlink" title="5123. 字母组合迭代器"></a>5123. 字母组合迭代器</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3>请你设计一个迭代器类，包括以下内容：</li></ol></blockquote><p>一个构造函数，输入参数包括：一个 有序且字符唯一 的字符串<code>characters</code>（该字符串只包含小写英文字母）和一个数字 <code>combinationLength</code>。<br>函数 <code>next()</code> ，按 字典序 返回长度为<code>combinationLength</code> 的下一个字母组合。<br>函数 <code>hasNext()</code>，只有存在长度为 <code>combinationLength</code>的下一个字母组合时，才返回 <code>True</code>；否则，返回<code>False</code>。</p><p>示例：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CombinationIterator iterator = new CombinationIterator(<span class="string">"abc"</span>, <span class="number">2</span>); <span class="regexp">//</span> 创建迭代器 iterator</span><br><span class="line">iterator.<span class="keyword">next</span>(); <span class="regexp">//</span> 返回 <span class="string">"ab"</span></span><br><span class="line">iterator.hasNext(); <span class="regexp">//</span> 返回 <span class="literal">true</span></span><br><span class="line">iterator.<span class="keyword">next</span>(); <span class="regexp">//</span> 返回 <span class="string">"ac"</span></span><br><span class="line">iterator.hasNext(); <span class="regexp">//</span> 返回 <span class="literal">true</span></span><br><span class="line">iterator.<span class="keyword">next</span>(); <span class="regexp">//</span> 返回 <span class="string">"bc"</span></span><br><span class="line">iterator.hasNext(); <span class="regexp">//</span> 返回 <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;= combinationLength &lt;= characters.length &lt;= <span class="number">15</span></span><br><span class="line">每组测试数据最多包含 <span class="number">10</span>^<span class="number">4</span> 次函数调用。</span><br><span class="line">题目保证每次调用函数 next 时都存在下一个字母组合。</span><br></pre></td></tr></table></figure></p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/iterator-for-combination" target="_blank" rel="noopener">https://leetcode-cn.com/problems/iterator-for-combination</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 位图</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>我们可以看到按照字典序排序编码如下，长度为2，比如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">则字典序排序应该是:</span><br></pre></td></tr></table></figure>ab<br>ac<br>ad<br>bc<br>bd<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">刚好可以对应二进制数，从大到小:</span></span><br></pre></td></tr></table></figure>1100<br>1010<br>1001<br>0110<br>0101<br>0011<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">观察到以上规律，我们就可以避免求出所有的全排列组合，依次按照二进制编码从大到小的顺序，将所有的字符串依次求出即可。</span><br><span class="line"><span class="number">2.</span> 所谓的长度，只需要满足二进制编码中```<span class="number">1</span>```的个数满足要求即可，通过```n&amp;(n<span class="number">-1</span>)```这种快速的解法很容易求出```<span class="number">1</span>```的个数.</span><br><span class="line">### 代码</span><br><span class="line">```c++</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">CombinationIterator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CombinationIterator(<span class="built_in">string</span> characters, <span class="built_in">int</span> combinationLength) &#123;</span><br><span class="line">        reverse(characters.begin(),characters.end());</span><br><span class="line">        <span class="keyword">this</span>-&gt;key = characters;</span><br><span class="line">        <span class="keyword">this</span>-&gt;curr = (<span class="number">1</span>&lt;&lt;key.size())<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;sz = combinationLength;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> countOne(<span class="built_in">int</span> n)&#123;</span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            n = (n<span class="number">-1</span>) &amp; n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> next() &#123;    </span><br><span class="line">        <span class="keyword">while</span>(curr &gt;= <span class="number">0</span> &amp;&amp; countOne(curr) != sz)&#123;</span><br><span class="line">            curr--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; key.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>((curr&amp;(<span class="number">1</span>&lt;&lt;i))&gt;&gt;i)&#123; </span><br><span class="line">                res = key[i] + res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        curr--;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bool</span> hasNext() &#123;  </span><br><span class="line">        <span class="keyword">while</span>(curr &gt;= <span class="number">0</span> &amp;&amp; countOne(curr) != sz)&#123;curr--;&#125;</span><br><span class="line">        <span class="keyword">if</span>(curr &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">int</span> curr;</span><br><span class="line">    <span class="built_in">int</span> sz;</span><br><span class="line">    <span class="built_in">int</span> maxCnt;</span><br><span class="line">    <span class="built_in">string</span> key;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CombinationIterator object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CombinationIterator* obj = new CombinationIterator(characters, combinationLength);</span></span><br><span class="line"><span class="comment"> * string param_1 = obj-&gt;next();</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;hasNext();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5129-下降路径最小和-II"><a href="#5129-下降路径最小和-II" class="headerlink" title="5129. 下降路径最小和  II"></a>5129. 下降路径最小和  II</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数方阵<code>arr</code> ，定义「非零偏移下降路径」为：从 <code>arr</code> 数组中的每一行选择一个数字，且按顺序选出来的数字中，相邻数字不在原数组的同一列。<br>请你返回非零偏移下降路径数字和的最小值。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">输出：<span class="number">13</span></span><br><span class="line">解释：</span><br><span class="line">所有非零偏移下降路径包括：</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>], [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>], [<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>], [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>],</span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>], [<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>], [<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>], [<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>],</span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>], [<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>], [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>], [<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>]</span><br><span class="line">下降路径中数字和最小的是 [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>] ，所以答案是 <span class="number">13</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-falling-path-sum-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-falling-path-sum-ii</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DP</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>这个DP已经做了太多次了，懒得写解答了。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minFallingPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = arr.size();</span><br><span class="line">        <span class="keyword">int</span> col = arr[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(row,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col,INT_MAX));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; ++i)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = arr[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; col; ++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(k == j)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dp[i][j] = min(dp[i][j],dp[i<span class="number">-1</span>][k]+arr[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; ++i)&#123;</span><br><span class="line">            res = min(res,dp[row<span class="number">-1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;15周比赛&quot;&gt;&lt;a href=&quot;#15周比赛&quot; class=&quot;headerlink&quot; title=&quot;15周比赛&quot;&gt;&lt;/a&gt;15周比赛&lt;/h1&gt;&lt;p&gt;题目很简单&lt;/p&gt;&lt;h2 id=&quot;5126-有序数组中出现次数超过25-的元素&quot;&gt;&lt;a href=&quot;#5126-有序数组中出现次数超过25-的元素&quot; class=&quot;headerlink&quot; title=&quot;5126. 有序数组中出现次数超过25%的元素&quot;&gt;&lt;/a&gt;5126. 有序数组中出现次数超过25%的元素&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个非递减的 有序 整数数组，已知这个数组中恰好有一个整数，它的出现次数超过数组元素总数的 25%。&lt;br&gt;请你找到并返回这个整数&lt;br&gt;示例：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p&gt;提示：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= arr.length &amp;lt;= 10^4&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= arr[i] &amp;lt;= 10^5&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>《郭鹤年自传》读后感</title>
    <link href="http://yoursite.com/2019/12/12/109/"/>
    <id>http://yoursite.com/2019/12/12/109/</id>
    <published>2019-12-12T09:07:07.286Z</published>
    <updated>2019-12-12T09:07:09.488Z</updated>
    
    <content type="html"><![CDATA[<p>很高兴拿到了《郭鹤年自传》这本书，花了不到一个星期时间，将这本充满人生曲折经历和不一样价值观的书快速看完，想想受益匪浅，从中学到不少我认为是需要值得我们当代人学习的品质，以及思考的人生观和价值观，就像我自身的成长一样，越来越觉得在个人的成长过程中，人生观、价值观、性格、习惯等等这些看起来不可见的因素，越来越影响一个人的一生，包括他的工作事业、婚姻家庭、健康等等。</p><a id="more"></a><h3 id="少年时期"><a href="#少年时期" class="headerlink" title="少年时期"></a>少年时期</h3><ol><li>郭的少年其实挺不幸的，那时处于一个风雨巨变的时期，民国时期风起云涌，国内内战、日本侵略等等一系列的事件影响他的少年的成长，郭的父亲为了躲避战乱，也为了谋生，远赴南洋，十几岁就开始闯荡江湖，我想这些敢拼敢闯的基因是一出生都刻在闽南人身上。闽南人在海外的华侨最多，我推测肯定是有原因的。一方面，福建近海，那时主要的货运和贸易以海运为主，福建远在南方最先与外界进行交流，其次，福建远在南方处于政治的边缘地带，长期以来管控和约束较小，再次，南方在古代时全是蛮夷之地，作为犯人的流放之地，在这些种种因素的影响下，闽南人的祖祖辈辈身上已经遗传了那种敢拼敢闯敢冒险的基因，这也是为什么南方能够持续发达的原因，我觉得还是基因和文化的影响。郭先生也像祖辈那样，年少时便追随父亲，远赴南洋。</li><li>父亲当时已经在马拉西亚立足，郭在少年时期也度过一段快乐的时光，父亲资助其读最好的英文学校，接受最好的英式教育，如果没有后来的二战爆发，郭可能顺利的从政或者成为一名律师或者医生之类的职业者，然后大时代背景下，每个人的命运都是如此的渺小，在日本的侵略下，马来西亚也陷入了战争，他不得不中断学业，躲避战乱。当然塞翁失马焉知非福，在日本人从武力入侵各个国家，同时也带来了经济上的入侵，他得以有机会进入到日本的企业，从事正统的商业训练，正是日本人严谨的商业组织的训练，教会了他许多，教会了他如何经营企业，经营企业的基本要素等等。再加上他本人的刻苦奋斗和自己天生的商业天赋，在年轻时得以快速的成长，不得不说，他真是一位天才的商人。</li><li>后来，父亲过世后，他接受了父亲的商业，从头开始做起，从一开始虽然是家族企业，然后从一开始就已经有了现代的商业组织，比如股份制度。中间值得我们需要反思一下殖民的问题，虽然英国作为殖民国，虽然是给殖民国家带来了压迫和剥削，但同时英国政府也认为殖民地作为自己属地的一部分，也尽到了他的管理责任，给很多殖民国家带来了现代化的政府管理，司法，行政，民主选举，商业交易，货币政策等等一些列现代化的社会管理工具，我们不得不感慨，在五十年代我们国家还处于社会主义初级阶段时，作为殖民国的马拉西亚已经有了较为现代的政府管理体系，且在当时马拉西亚实际社会是要远远比中国大陆富裕和文明的。不得不说，改革开发的伟大，成了了大陆的巨大发展和腾飞。<h3 id="中年时期"><a href="#中年时期" class="headerlink" title="中年时期"></a>中年时期</h3>中年时期的郭先生，明显是一颗冉冉升起的商业巨星，在商界风生水起，凭借着他过人的交往能力，天生敏感的商业嗅觉，现代化的商业管理理念，在马来西亚商界一骑绝乘，先是从事大米交易，后来随着社会上生活水平的提高，糖的需求越来越大，他从其中看到糖业的高额利润，糖的价格本省比大米的价格波动大的多，因此它具有丰厚利润的空间，凭借着他在政界的人脉，很快在马来西亚建立了糖厂，扩大规模后，又扩展了糖业期货交易，在市场上大幅度获利，看他在书中的描述，他这一段真是顺风顺水，在60至70年代快速的扩展他的商业帝国.后来因为马来西亚在69年发生了内乱，不少华人遭到迫害，因此他就移民到了香港，继续在香港和新加坡扩展他的商业帝国。<br>我觉得这一段最精彩的描述莫过于他与外商打交道的经历和在政界打交道的能力，特别是重点描述了在印尼苏哈托总统的交往和商业，中间的政商关系虽然描述的特别露骨，其中不少借助政商关系大发横财的华人，但可见一斑当时东南亚的政府管理体系的腐败与落后，当然其中也描写了不少华人的狡黠，特别是在拉关系，政商关系处理上，华人的政商交际能力绝对是顶尖的。<h3 id="老年时期"><a href="#老年时期" class="headerlink" title="老年时期"></a>老年时期</h3>80年代以后着重描写的郭先生在国内和香港的投资，其产业也扩大到了商业抵偿投资，酒店旅游业拓展，以及后期的食用油行业的发展。由于中国的改革开发，大陆人民对物质需求的不断提升，大陆的市场不断开发，郭先生看到了大陆市场的广大前景，当然也有他天生爱冒险的营商基因。在香港和大陆的商业地产投资，使得其收益颇丰，由于其良好的高层关系，使得他在大陆的投资绝大部分较为顺利，也获得很好的收益，同时这些投资的项目也给他带来了良好的声誉，已经较为深厚的政府关系。当然不得不说，大陆在八九十年特有的营商环境，到处是商机，当然到处也是陷阱，那时的政府还不具有现代的管理制度和法制观念。许多投资表面上看起来很美好，实际充满了风险，贪污腐败的问题也很严重，所以商人不得不小心。酒店业的投资虽然并不是特别丰厚的利润，但是确实给其商业帝国带来了长期稳定的现金流，并且酒店行业也是一个很传统的行业，并不像其他新兴产业那样具有很大的波动性，他的香格里拉酒店确实让人深入人心，我觉得酒店行业不是为一个好的行业，但是他管理理念和观念特别重要，所有的酒店全部自营，所有酒店选址全部自己选，酒店大楼自己建，自己能够控制品质，不盲目扩张，我记得很重要的一句话是千万不要节省成本。<br>后期的食用油行业商业板块的拓展大部分都得益于其侄子郭孔丰，特别是郭氏集团控制的丰益国际，益海嘉里在食用油行业的板块基本上达到了垄断的地位，但是我们必须要反思，为什么我们国内这么大的市场，却没有经营好，拱手把这些传统行业的市场然给了别人。不得不说郭氏家族也作为华人，为什么能够保持传统的儒家文化，诚实守信的经营理念，能够把商业帝国持续的传承下去，我觉得华人的基因和文化肯定有其特别优秀的地方值得我们去学习和思考的。<h3 id="对经商的看法"><a href="#对经商的看法" class="headerlink" title="对经商的看法"></a>对经商的看法</h3>记得郭先生在自传里面的经商理念的阐述，特有的儒家文化，我觉得有几点观念是值得肯定的。</li></ol><ul><li>从事商业不仅仅是为了获得利益，更重要的是要尽到社会责任，对员工负责，对客户负责，对股东负责。他所从事的行业绝大部分并不是特别暴利的行业，而他从事所谓的民生行业，也并没有每次都去追求高额利润，有个重要的理念是他认为医院不应该成为产业，医院毕竟是为了救人，不能因为盈利的问题而拒绝救助濒死之人。</li><li>热爱自己的国家和民族，原因在他们危难时，伸出自己的援助之手。在书中描述了很多次，郭先生出手帮助政府解决了很多困难，特别是他担任部分企业的董事长，带领企业走上正轨的道路，很值得我们学习。大陆改革开发后，国家邀请他们来大陆投资，帮助政府解决外资的困难，当然这些良好的政商关系也给他带来很多好处和利益，比如在经商问题上的利益分享，政府也作为回馈会考虑实际出让部分利益给他。</li><li>善待自己的员工，能够与他们共同分享商业成长带来的利益，郭先生一直是一个富有胸怀和远见的商人，敢于分享利益给自己的员工，事情总是两面的，一方面出让部分股票给员工，但同时员工们更加努力的工作，带来了更大的回报。</li><li>对于出现的商业机会要果断，要敢于冒险。所有的商业机会不会百分百成功，但是只要看准了，虽然有一定风险，他的每次商业拓展，似乎都看起来顺利成章，眼光独到。特别是北京国贸商业地产的开发，可能是他所得的最大的收益吧。<h3 id="对政治的评论"><a href="#对政治的评论" class="headerlink" title="对政治的评论"></a>对政治的评论</h3></li><li>政治是危险的，但是作为商人，又不得不与政府打交道，需要时刻保持清醒。书中描写的政商关系值得探讨，而郭先生又作为一名正真的商人，改革开发初期对于大陆的政府管理颇有些不满。</li><li>作为商人，如果利用好政商关系，可以获得非常大利益和收获。<h3 id="对家庭的责任"><a href="#对家庭的责任" class="headerlink" title="对家庭的责任"></a>对家庭的责任</h3>郭先生在书中描述了自己对家庭的观念，特别是喜欢听从母亲的教诲，目前给了他很多忠告和建议。当然年轻时，他也因为忙于工作而疏忽了对自己的子女的教育，但是他的第一任妻子虽然没有丈夫的陪伴，却很好的照顾了自己的子女。我觉得这些都是都是非常值得思考的，一个人在一生中有一个稳定的后方是一个非常重要的因素，只有这样你才能更好的忙于事业。<br>而家庭也需要良好的家庭教育和文化传承，只有这样才能防止家庭的教育理念的传承和财富的传承。他在书中特别提到了他的堂哥的例子，父母没有做好榜样，也没有教育好自己的子女，而导致自己的子女后代为争夺家产而反目成仇，当然自己越长大越能体会到价值观对自己人生成长的影响，这个是无时无刻不在的。<h3 id="对社会和时代的看法"><a href="#对社会和时代的看法" class="headerlink" title="对社会和时代的看法"></a>对社会和时代的看法</h3>时代赋予了我们机遇，我们要感谢这个时代给我们的各种机会和创新，但同时人也会有贪念，有贪念不可怕，但不能无止境的贪念，为了所谓贪念导致各种道德沦丧，各种亲朋好友关系丧失，各种违法，这就是一个巨大的社会问题，然而今天来看，这些问题似乎都无解，只能随着时代进步，所有贪念造成的后果终将被历史遗忘。<h3 id="对人生的感悟"><a href="#对人生的感悟" class="headerlink" title="对人生的感悟"></a>对人生的感悟</h3>郭先生特别提到一个重要的观念，正确的价值观和健康的体魄，只有这两样才是自己最最重要的基本，没有健康的体魄谈何事业，所以他从一开始就特别注重自己的身体，而如今他到了95岁高龄。我想有许多很好的生活习惯和保养习惯是值得我们学习的，特别是他关于饮食、睡眠的阐述。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很高兴拿到了《郭鹤年自传》这本书，花了不到一个星期时间，将这本充满人生曲折经历和不一样价值观的书快速看完，想想受益匪浅，从中学到不少我认为是需要值得我们当代人学习的品质，以及思考的人生观和价值观，就像我自身的成长一样，越来越觉得在个人的成长过程中，人生观、价值观、性格、习惯等等这些看起来不可见的因素，越来越影响一个人的一生，包括他的工作事业、婚姻家庭、健康等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>【Pygame】连连看</title>
    <link href="http://yoursite.com/2019/12/12/110/"/>
    <id>http://yoursite.com/2019/12/12/110/</id>
    <published>2019-12-12T05:13:12.473Z</published>
    <updated>2019-12-12T05:20:27.325Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python制作连连看外挂"><a href="#python制作连连看外挂" class="headerlink" title="python制作连连看外挂"></a>python制作连连看外挂</h3><p>前几天看到<code>github</code>上的用<code>python</code>写的连连看外挂，最近几天一直在琢磨这个事情，昨天晚上弄到凌晨两点，终于把程序全部调通了，其中的关键部分算法全部重新写了一遍，其实原理非常简单。</p><ol><li>程序启动时，会自动从屏幕中进行截屏，找到连连看游戏窗口的起始坐标，根据坐标偏移，然后找到连连看的游戏区域.连连看最多可以放置的图片为<code>19*11</code>张。</li><li>按照约定图片的大小，游戏区域全部切分为<code>31*35</code>的小图片，然后将小图片按照不同的类别进行标记，具体的标记算法可以看源代码。我们设定<code>empty</code>背景为基准图片，然后计算所有图片与基准图片的像素之差的曼哈顿距离之和，按照距离的数值进行类别划分，且我们标记<code>empty</code>图片的类别为<code>0</code>。</li><li>将图片转换为标记矩阵后，我们就可以根据我们之前所知道的识别算法，来找到矩阵中的所有配对的坐标，然后驱动鼠标进行点击连接即可。<br><img src="http://q15r3bmu8.bkt.clouddn.com/screen.png" alt="1"><br>视频如下：<br><img src="http://q15r3bmu8.bkt.clouddn.com/4aebfe259467cbb33c61b72d037ffda9.gif" alt="2"></li><li>源代码：<br>github地址:<a href="https://github.com/mike-box/pygame/tree/master/autolink" target="_blank" rel="noopener">https://github.com/mike-box/pygame/tree/master/autolink</a></li></ol><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, time</span><br><span class="line"><span class="keyword">import</span> math, random</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> win32api</span><br><span class="line"><span class="keyword">import</span> win32gui</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">WINDOW_TITLE = <span class="string">"QQ游戏 - 连连看角色版"</span></span><br><span class="line">MARGIN_LEFT = <span class="number">14</span></span><br><span class="line">MARGIN_HEIGHT = <span class="number">181</span></span><br><span class="line">COL_NUM = <span class="number">19</span></span><br><span class="line">ROW_NUM = <span class="number">11</span></span><br><span class="line">SQUARE_WIDTH = <span class="number">31</span></span><br><span class="line">SQUARE_HEIGHT = <span class="number">35</span></span><br><span class="line">SUB_LT_X = <span class="number">4</span></span><br><span class="line">SUB_LT_Y = <span class="number">4</span></span><br><span class="line">SUB_RB_X = <span class="number">25</span></span><br><span class="line">SUB_RB_Y = <span class="number">29</span></span><br><span class="line">CLICK_POS_X = <span class="number">15</span></span><br><span class="line">CLICK_POS_Y = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TIME_INTERVAL</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.001</span></span><br><span class="line">    <span class="comment">#return 0.375+random.uniform(-0.075, 0.075)+0.13*progress</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TIME_INTERVAL_1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.001</span></span><br><span class="line">    <span class="comment">#return 0.375+random.uniform(-0.075, 0.075)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getGameWindowPosition</span><span class="params">()</span>:</span></span><br><span class="line">    window = win32gui.FindWindow(<span class="literal">None</span>, WINDOW_TITLE)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> window:</span><br><span class="line">        print(<span class="string">'unable to find window, try in 3 secs...'</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        window = win32gui.FindWindow(<span class="literal">None</span>, WINDOW_TITLE)</span><br><span class="line">    win32gui.SetForegroundWindow(window)</span><br><span class="line">    pos = win32gui.GetWindowRect(window)</span><br><span class="line">    print(<span class="string">"Window found at:"</span> + str(pos))</span><br><span class="line">    <span class="keyword">return</span> pos[<span class="number">0</span>], pos[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getScreenImage</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'capturing screenshot...'</span>)</span><br><span class="line">    scim = ImageGrab.grab()</span><br><span class="line">    scim.save(<span class="string">'screen.png'</span>)</span><br><span class="line">    <span class="keyword">return</span> cv2.imread(<span class="string">"screen.png"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllSquare</span><span class="params">(screen_image, game_pos)</span>:</span></span><br><span class="line">    print(<span class="string">'cutting pics...'</span>)</span><br><span class="line">    game_x = game_pos[<span class="number">0</span>] + MARGIN_LEFT</span><br><span class="line">    game_y = game_pos[<span class="number">1</span>] + MARGIN_HEIGHT</span><br><span class="line">    all_square = []</span><br><span class="line">    print(<span class="string">"width:"</span>,len(screen_image))</span><br><span class="line">    print(<span class="string">"height:"</span>,len(screen_image[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, COL_NUM):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>, ROW_NUM):</span><br><span class="line">            square = screen_image[game_y + y*SQUARE_HEIGHT:</span><br><span class="line">                                  game_y + (y+<span class="number">1</span>)*SQUARE_HEIGHT,</span><br><span class="line">                                  game_x + x*SQUARE_WIDTH:</span><br><span class="line">                                  game_x + (x+<span class="number">1</span>)*SQUARE_WIDTH]</span><br><span class="line">            all_square.append(square)</span><br><span class="line">    <span class="keyword">return</span> list(map(<span class="keyword">lambda</span> square:</span><br><span class="line">                    square[SUB_LT_Y:SUB_RB_Y, SUB_LT_X:SUB_RB_X], all_square))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subImageSquare</span><span class="params">(img1,img2)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(img1)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(img1[<span class="number">0</span>])):</span><br><span class="line">            res += abs(int(img1[i][j][<span class="number">0</span>]) - int(img2[i][j][<span class="number">0</span>])) + \</span><br><span class="line">                    abs(int(img1[i][j][<span class="number">1</span>]) - int(img2[i][j][<span class="number">1</span>])) + \</span><br><span class="line">                    abs(int(img1[i][j][<span class="number">2</span>]) - int(img2[i][j][<span class="number">2</span>]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllImageTypes</span><span class="params">(all_square)</span>:</span></span><br><span class="line">    print(<span class="string">"sorting pics..."</span>)</span><br><span class="line">    empty_img = cv2.imread(<span class="string">'empty.png'</span>)</span><br><span class="line">    types = set([<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> square <span class="keyword">in</span> all_square:</span><br><span class="line">        types.add(subImageSquare(empty_img,square))</span><br><span class="line">    <span class="keyword">return</span> sorted(list(types))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateMatrix</span><span class="params">(all_square,imgTypes)</span>:</span></span><br><span class="line">    mat = []</span><br><span class="line">    empty_img = cv2.imread(<span class="string">'empty.png'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> square <span class="keyword">in</span> all_square:</span><br><span class="line">        diff = subImageSquare(empty_img,square)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(imgTypes)):</span><br><span class="line">            <span class="keyword">if</span> diff == imgTypes[i]:</span><br><span class="line">                mat.append(i) </span><br><span class="line">    <span class="keyword">return</span> mat</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkConnect</span><span class="params">(x,y,mat)</span>:</span></span><br><span class="line">    width = COL_NUM</span><br><span class="line">    height = ROW_NUM</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> x[<span class="number">1</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> x[<span class="number">0</span>] &gt;= width <span class="keyword">or</span> x[<span class="number">1</span>] &gt;= height <span class="keyword">or</span>\</span><br><span class="line">       y[<span class="number">0</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> y[<span class="number">1</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> y[<span class="number">0</span>] &gt;= width <span class="keyword">or</span> y[<span class="number">1</span>] &gt;= width:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>] != y[<span class="number">0</span>] <span class="keyword">and</span> x[<span class="number">1</span>] != y[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#check row</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>] == y[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min(x[<span class="number">1</span>],y[<span class="number">1</span>])+<span class="number">1</span>,max(x[<span class="number">1</span>],y[<span class="number">1</span>])):</span><br><span class="line">            <span class="keyword">if</span> mat[x[<span class="number">0</span>]*height+i] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment">#check colum</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">1</span>] == y[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min(x[<span class="number">0</span>],y[<span class="number">0</span>])+<span class="number">1</span>,max(x[<span class="number">0</span>],y[<span class="number">0</span>])):</span><br><span class="line">            <span class="keyword">if</span> mat[i*height+x[<span class="number">1</span>]] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isCanLink</span><span class="params">(x,y,mat)</span>:</span></span><br><span class="line">    width = COL_NUM</span><br><span class="line">    height = ROW_NUM</span><br><span class="line"></span><br><span class="line">    <span class="comment">#check same value</span></span><br><span class="line">    <span class="keyword">if</span> mat[x[<span class="number">0</span>]*height+x[<span class="number">1</span>]] != mat[y[<span class="number">0</span>]*height+y[<span class="number">1</span>]]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment">#one step check</span></span><br><span class="line">    <span class="keyword">if</span> checkConnect(x,y,mat):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment">#two step check</span></span><br><span class="line">    <span class="keyword">if</span> mat[x[<span class="number">0</span>]*height+y[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> checkConnect(x,(x[<span class="number">0</span>],y[<span class="number">1</span>]),mat) <span class="keyword">and</span> \</span><br><span class="line">           checkConnect((x[<span class="number">0</span>],y[<span class="number">1</span>]),y,mat):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> mat[y[<span class="number">0</span>]*height+x[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> checkConnect(x,(y[<span class="number">0</span>],x[<span class="number">1</span>]),mat) <span class="keyword">and</span> \</span><br><span class="line">           checkConnect((y[<span class="number">0</span>],x[<span class="number">1</span>]),y,mat):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#three step check</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,height):</span><br><span class="line">        <span class="keyword">if</span> mat[x[<span class="number">0</span>]*height+i] == <span class="number">0</span> <span class="keyword">and</span> mat[y[<span class="number">0</span>]*height+i] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> checkConnect(x,(x[<span class="number">0</span>],i),mat) <span class="keyword">and</span> \</span><br><span class="line">               checkConnect((y[<span class="number">0</span>],i),y,mat) <span class="keyword">and</span> \</span><br><span class="line">               checkConnect((x[<span class="number">0</span>],i),(y[<span class="number">0</span>],i),mat):</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,width):</span><br><span class="line">        <span class="keyword">if</span> mat[i*height+x[<span class="number">1</span>]] == <span class="number">0</span> <span class="keyword">and</span> mat[i*height+y[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> checkConnect(x,(i,x[<span class="number">1</span>]),mat) <span class="keyword">and</span> \</span><br><span class="line">               checkConnect((i,y[<span class="number">1</span>]),y,mat) <span class="keyword">and</span> \</span><br><span class="line">               checkConnect((i,x[<span class="number">1</span>]),(i,y[<span class="number">1</span>]),mat):</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">autoMouseClick</span><span class="params">(pos,delay = <span class="number">0.001</span>)</span>:</span></span><br><span class="line">    win32api.SetCursorPos((pos[<span class="number">0</span>],pos[<span class="number">1</span>]))</span><br><span class="line">    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,pos[<span class="number">0</span>],pos[<span class="number">1</span>], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,pos[<span class="number">0</span>],pos[<span class="number">1</span>],<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    time.sleep(TIME_INTERVAL())</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">autoRemove</span><span class="params">(mat,game_pos)</span>:</span></span><br><span class="line">    game_x = game_pos[<span class="number">0</span>] + MARGIN_LEFT</span><br><span class="line">    game_y = game_pos[<span class="number">1</span>] + MARGIN_HEIGHT</span><br><span class="line">    width = COL_NUM</span><br><span class="line">    height = ROW_NUM</span><br><span class="line">    remove = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(width):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(height):</span><br><span class="line">            <span class="keyword">if</span> mat[i*height+j] &gt; <span class="number">0</span>:</span><br><span class="line">                remove += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> remove &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(mat)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(mat)):</span><br><span class="line">                <span class="keyword">if</span> i != j <span class="keyword">and</span> mat[i] == mat[j] <span class="keyword">and</span> mat[i] &gt; <span class="number">0</span>:</span><br><span class="line">                    px = (i//height,i%height)</span><br><span class="line">                    py = (j//height,j%height)</span><br><span class="line">                    <span class="keyword">if</span> isCanLink(px,py,mat):</span><br><span class="line">                        x1 = game_x + px[<span class="number">0</span>]*SQUARE_WIDTH</span><br><span class="line">                        y1 = game_y + px[<span class="number">1</span>]*SQUARE_HEIGHT</span><br><span class="line">                        x2 = game_x + py[<span class="number">0</span>]*SQUARE_WIDTH</span><br><span class="line">                        y2 = game_y + py[<span class="number">1</span>]*SQUARE_HEIGHT</span><br><span class="line">                        pos_x = (x1+CLICK_POS_X,y1+CLICK_POS_Y)</span><br><span class="line">                        pos_y = (x2+CLICK_POS_X,y2+CLICK_POS_Y)</span><br><span class="line">                        autoMouseClick(pos_x)</span><br><span class="line">                        autoMouseClick(pos_y)</span><br><span class="line">                        mat[i] = <span class="number">0</span></span><br><span class="line">                        mat[j] = <span class="number">0</span></span><br><span class="line">                        remove -= <span class="number">2</span></span><br><span class="line">                        print(px,py)</span><br><span class="line">                        print(<span class="string">"remove one pair:"</span>,pos_x,pos_y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    game_pos = getGameWindowPosition()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    screen_image = getScreenImage()</span><br><span class="line">    all_square_list = getAllSquare(screen_image, game_pos)</span><br><span class="line">    imgTypes = getAllImageTypes(all_square_list)</span><br><span class="line">    mat = generateMatrix(all_square_list,imgTypes)</span><br><span class="line">    autoRemove(mat,game_pos)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;python制作连连看外挂&quot;&gt;&lt;a href=&quot;#python制作连连看外挂&quot; class=&quot;headerlink&quot; title=&quot;python制作连连看外挂&quot;&gt;&lt;/a&gt;python制作连连看外挂&lt;/h3&gt;&lt;p&gt;前几天看到&lt;code&gt;github&lt;/code&gt;上的用&lt;code&gt;python&lt;/code&gt;写的连连看外挂，最近几天一直在琢磨这个事情，昨天晚上弄到凌晨两点，终于把程序全部调通了，其中的关键部分算法全部重新写了一遍，其实原理非常简单。&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;程序启动时，会自动从屏幕中进行截屏，找到连连看游戏窗口的起始坐标，根据坐标偏移，然后找到连连看的游戏区域.连连看最多可以放置的图片为&lt;code&gt;19*11&lt;/code&gt;张。&lt;/li&gt;
&lt;li&gt;按照约定图片的大小，游戏区域全部切分为&lt;code&gt;31*35&lt;/code&gt;的小图片，然后将小图片按照不同的类别进行标记，具体的标记算法可以看源代码。我们设定&lt;code&gt;empty&lt;/code&gt;背景为基准图片，然后计算所有图片与基准图片的像素之差的曼哈顿距离之和，按照距离的数值进行类别划分，且我们标记&lt;code&gt;empty&lt;/code&gt;图片的类别为&lt;code&gt;0&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将图片转换为标记矩阵后，我们就可以根据我们之前所知道的识别算法，来找到矩阵中的所有配对的坐标，然后驱动鼠标进行点击连接即可。&lt;br&gt;&lt;img src=&quot;http://q15r3bmu8.bkt.clouddn.com/screen.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;视频如下：&lt;br&gt;&lt;img src=&quot;http://q15r3bmu8.bkt.clouddn.com/4aebfe259467cbb33c61b72d037ffda9.gif&quot; alt=&quot;2&quot;&gt;&lt;/li&gt;
&lt;li&gt;源代码：&lt;br&gt;github地址:&lt;a href=&quot;https://github.com/mike-box/pygame/tree/master/autolink&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mike-box/pygame/tree/master/autolink&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://yoursite.com/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="pygame" scheme="http://yoursite.com/tags/pygame/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 166周比赛</title>
    <link href="http://yoursite.com/2019/12/08/108/"/>
    <id>http://yoursite.com/2019/12/08/108/</id>
    <published>2019-12-08T07:41:20.182Z</published>
    <updated>2019-12-08T07:59:23.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="166周比赛"><a href="#166周比赛" class="headerlink" title="166周比赛"></a>166周比赛</h1><p>下午继续补充本周周赛题解，最近几周的周赛都没有特别出彩的题目，让人眼前一亮,上午带老婆小孩去单位，回来差不多11点半了，仔细打开一看，周赛还没结束，吃饭前抢刷3道题目，最后一题吃完饭一看，感觉太简单了。</p><h2 id="5279-整数的各位积和之差"><a href="#5279-整数的各位积和之差" class="headerlink" title="5279. 整数的各位积和之差"></a>5279. 整数的各位积和之差</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数<code>n</code>，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">234</span></span><br><span class="line">输出：<span class="number">15</span> </span><br><span class="line">解释：</span><br><span class="line">各位数之积 = <span class="number">2</span> * <span class="number">3</span> * <span class="number">4</span> = <span class="number">24</span> </span><br><span class="line">各位数之和 = <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> = <span class="number">9</span> </span><br><span class="line">结果 = <span class="number">24</span> - <span class="number">9</span> = <span class="number">15</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4421</span></span><br><span class="line">输出：<span class="number">21</span></span><br><span class="line">解释： </span><br><span class="line">各位数之积 = <span class="number">4</span> * <span class="number">4</span> * <span class="number">2</span> * <span class="number">1</span> = <span class="number">32</span> </span><br><span class="line">各位数之和 = <span class="number">4</span> + <span class="number">4</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">11</span> </span><br><span class="line">结果 = <span class="number">32</span> - <span class="number">11</span> = <span class="number">21</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接暴力即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>求出该数的每一位，然后求每位数字的和与积，然后求差即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">subtractProductAndSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sub = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = n%<span class="number">10</span>;</span><br><span class="line">            n = n/<span class="number">10</span>;</span><br><span class="line">            sub = sub*num;</span><br><span class="line">            sum = sum +num;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sub - sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5280-用户分组"><a href="#5280-用户分组" class="headerlink" title="5280. 用户分组"></a>5280. 用户分组</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>有 n 位用户参加活动，他们的 ID 从 0 到 n - 1，每位用户都 恰好 属于某一用户组。给你一个长度为 n 的数组 <code>groupSizes</code>，其中包含每位用户所处的用户组的大小，请你返回用户分组情况（存在的用户组以及每个组中用户的 ID）。</p><p>你可以任何顺序返回解决方案，ID 的顺序也不受限制。此外，题目给出的数据保证至少存在一种解决方案。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：groupSizes = [<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：[[<span class="number">5</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>]]</span><br><span class="line">解释： </span><br><span class="line">其他可能的解决方案有 [[<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>],[<span class="number">5</span>],[<span class="number">0</span>,<span class="number">4</span>,<span class="number">3</span>]] 和 [[<span class="number">5</span>],[<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>]]。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：groupSizes = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">输出：[[<span class="number">1</span>],[<span class="number">0</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>groupSizes.length == n</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>1 &lt;= groupSizes[i] &lt;= n</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/group-the-people-given-the-group-size-they-belong-to" target="_blank" rel="noopener">https://leetcode-cn.com/problems/group-the-people-given-the-group-size-they-belong-to</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 对长度进行分组即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>将所有的id按照<code>group</code>的长度进行分组即可;</li><li>在每个分组中将其切分为对应长度的<code>n</code>个数组即可；<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; groupThePeople(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; groupSizes) &#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; group;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; groupSizes.size(); ++i)&#123;</span><br><span class="line">            group[groupSizes[i]].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; it : group)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> curr = it.second.begin(); curr != it.second.end(); curr += it.first)&#123;</span><br><span class="line">                res.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(curr,curr+it.first));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5281-使结果不超过阈值的最小除数"><a href="#5281-使结果不超过阈值的最小除数" class="headerlink" title="5281. 使结果不超过阈值的最小除数"></a>5281. 使结果不超过阈值的最小除数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3>给你一个整数数组<code>nums</code>和一个正整数<code>threshold</code> ，你需要选择一个正整数作为除数，然后将数组里每个数都除以它，并对除法结果求和。</li></ol></blockquote><p>请你找出能够使上述结果小于等于阈值<code>threshold</code>的除数中 最小 的那个。</p><p>每个数除以除数后都向上取整，比方说<code>7/3 = 3 ， 10/2 = 5</code>。</p><p>题目保证一定有解。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>], threshold = <span class="number">6</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：如果除数为 <span class="number">1</span> ，我们可以得到和为 <span class="number">17</span> （<span class="number">1</span>+<span class="number">2</span>+<span class="number">5</span>+<span class="number">9</span>）。</span><br><span class="line">如果除数为 <span class="number">4</span> ，我们可以得到和为 <span class="number">7</span> (<span class="number">1</span>+<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>) 。如果除数为 <span class="number">5</span> ，和为 <span class="number">5</span> (<span class="number">1</span>+<span class="number">1</span>+<span class="number">1</span>+<span class="number">2</span>)。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>], threshold = <span class="number">11</span></span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">19</span>], threshold = <span class="number">5</span></span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 5 * 10^4</code></li><li><code>1 &lt;= nums[i] &lt;= 10^6</code></li><li><code>nums.length &lt;= threshold &lt;= 10^6</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-the-smallest-divisor-given-a-threshold" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-smallest-divisor-given-a-threshold</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 二分查找</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>二分查找，每次进行check即可是否满足<code>threshold</code>，直到找到最大值;</li><li>时间复杂度为<code>O(nlgn)</code>,没啥好解释的;<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; nums,<span class="keyword">int</span> div)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.size(); ++i)&#123;</span><br><span class="line">            res += nums[i]/div + (nums[i]%div == <span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">smallestDivisor</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> threshold)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r = nums.back();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> curr = divSum(nums,mid);</span><br><span class="line">            <span class="keyword">if</span>(curr &gt; threshold)&#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r = mid;</span><br><span class="line">                res = r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5282-转化为全零矩阵的最少反转次数"><a href="#5282-转化为全零矩阵的最少反转次数" class="headerlink" title="5282. 转化为全零矩阵的最少反转次数"></a>5282. 转化为全零矩阵的最少反转次数</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个<code>m x n</code>的二进制矩阵<code>mat</code>。</p><p>每一步，你可以选择一个单元格并将它反转（反转表示 0 变 1 ，1 变 0 ）。如果存在和它相邻的单元格，那么这些相邻的单元格也会被反转。（注：相邻的两个单元格共享同一条边。）</p><p>请你返回将矩阵<code>mat</code>转化为全零矩阵的最少反转次数，如果无法转化为全零矩阵，请返回 -1 。</p><p>二进制矩阵的每一个格子要么是 0 要么是 1 。</p><p>全零矩阵是所有格子都为 0 的矩阵。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：一个可能的解是反转 (<span class="number">1</span>, <span class="number">0</span>)，然后 (<span class="number">0</span>, <span class="number">1</span>) ，最后是 (<span class="number">1</span>, <span class="number">1</span>) 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = <span class="string">[[0]]</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：给出的矩阵是全零矩阵，所以你不需要改变它。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：该矩阵无法转变成全零矩阵</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == mat.length</code></li><li><code>n == mat[0].length</code></li><li><code>1 &lt;= m &lt;= 3</code></li><li><code>1 &lt;= n &lt;= 3</code></li><li><code>mat[i][j] 是 0 或 1</code> 。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>由于题目中的矩阵的数据量非常小，所以可以用字符串或者位压缩即可表示当前的矩阵。</li><li>通过<code>BFS</code>遍历所有的矩阵的转移状态即可求出最小的反转次数。</li><li>这种题目已经出过很多遍了。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bitSet</span><span class="params">(<span class="keyword">int</span> &amp; mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        mask = mask|(<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bitTst</span><span class="params">(<span class="keyword">int</span> &amp; mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((mask&amp;(<span class="number">1</span>&lt;&lt;n))&gt;&gt;n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bitClr</span><span class="params">(<span class="keyword">int</span> &amp; mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        mask = mask&amp;(~(<span class="number">1</span>&lt;&lt;n));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bitRev</span><span class="params">(<span class="keyword">int</span> &amp; mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bitTst(mask,n))&#123;</span><br><span class="line">            bitClr(mask,n);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            bitSet(mask,n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minFlips</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = mat.size();</span><br><span class="line">        <span class="keyword">int</span> col = mat[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> mask = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>]  &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit(<span class="number">1</span>&lt;&lt;(row*col),<span class="literal">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; col; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    bitSet(mask,i*col + j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">        qu.push(mask);</span><br><span class="line">        visit[mask] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> sz = qu.size();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; sz; ++k)&#123;</span><br><span class="line">                <span class="keyword">int</span> curr = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                <span class="keyword">if</span>(curr == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> step;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; row*col; ++i)&#123;</span><br><span class="line">                    <span class="keyword">int</span> x = i/col;</span><br><span class="line">                    <span class="keyword">int</span> y = i%col;</span><br><span class="line">                    <span class="keyword">int</span> next = curr;</span><br><span class="line">                    bitRev(next,i);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j)&#123;</span><br><span class="line">                        <span class="keyword">int</span> x1 = x + d[j][<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">int</span> y1 = y + d[j][<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(x1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; row &amp;&amp; y1 &gt;= <span class="number">0</span> &amp;&amp; y1 &lt; col)&#123;</span><br><span class="line">                            bitRev(next,x1*col+y1);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!visit[next])&#123;</span><br><span class="line">                        qu.push(next);</span><br><span class="line">                        visit[next] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;166周比赛&quot;&gt;&lt;a href=&quot;#166周比赛&quot; class=&quot;headerlink&quot; title=&quot;166周比赛&quot;&gt;&lt;/a&gt;166周比赛&lt;/h1&gt;&lt;p&gt;下午继续补充本周周赛题解，最近几周的周赛都没有特别出彩的题目，让人眼前一亮,上午带老婆小孩去单位，回来差不多11点半了，仔细打开一看，周赛还没结束，吃饭前抢刷3道题目，最后一题吃完饭一看，感觉太简单了。&lt;/p&gt;&lt;h2 id=&quot;5279-整数的各位积和之差&quot;&gt;&lt;a href=&quot;#5279-整数的各位积和之差&quot; class=&quot;headerlink&quot; title=&quot;5279. 整数的各位积和之差&quot;&gt;&lt;/a&gt;5279. 整数的各位积和之差&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数&lt;code&gt;n&lt;/code&gt;，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Pygame】连连看</title>
    <link href="http://yoursite.com/2019/12/03/106/"/>
    <id>http://yoursite.com/2019/12/03/106/</id>
    <published>2019-12-03T15:14:57.894Z</published>
    <updated>2019-12-05T15:21:09.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连连看"><a href="#连连看" class="headerlink" title="连连看"></a>连连看</h2><p>最近突然闲聊时，突然发现某个thu的本科生用openCV来做练练看外挂，最近刚好在学习<code>pygame</code>，就想着刚好能够利用这个机会，也重新做一个新的练练看外挂出来试试。顺便把练练看的算法也了解了下。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>连连看小游戏的算法的核心在于检测选择的两个点是否连通，所谓的连通，是指最大只允许有两个转弯。仔细分析一下，因为最大允许两个转弯，因此最多也就只有4条直线构成相连的路径，只要我们确定其中的三个点，另外一个点也可以确认,所以我们只需要分别遍历上下左右四个方向上是否存在可能路径即可，算法复杂度为O(mn)。<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">               |</span></span><br><span class="line"><span class="code">               |</span></span><br><span class="line"><span class="code">               | </span></span><br><span class="line">---------------+------------------</span><br><span class="line"><span class="code">               |</span></span><br><span class="line"><span class="code">               |</span></span><br><span class="line"><span class="code">               |</span></span><br></pre></td></tr></table></figure></li><li>实际在处理时，我们肯定是优先找到最短路径，我们由图中可以看到，路径一般只有<code>1,2,4</code>这三种情况，我们在检测两个点能否相连时，只需要分别检测这三种情况即可。</li><li>最后实际上还可以优化许多，但是后面需要完成用<code>openCV</code>来完成练练看游戏的破解，目前就不再继续深入了。同时完成了自动连线的算法，视频如下:<br><img src="http://q15r3bmu8.bkt.clouddn.com/link.gif" alt="1"><br><a href="https://github.com/mike-box/pygame/tree/master/link" target="_blank" rel="noopener">github地址</a><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"> Name: 连连看游戏</span></span><br><span class="line"><span class="string"> Athor: mike-meng</span></span><br><span class="line"><span class="string"> Email: mml1106@126.com</span></span><br><span class="line"><span class="string"> Description: 连连看</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, time</span><br><span class="line"><span class="keyword">import</span> math, random</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">LIGHT = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)     <span class="comment"># free </span></span><br><span class="line">DARK = (<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>)      <span class="comment"># obstacle </span></span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)           <span class="comment"># line</span></span><br><span class="line">RED = (<span class="number">200</span>, <span class="number">30</span>, <span class="number">30</span>)         <span class="comment"># robot</span></span><br><span class="line">BGCOLOR = (<span class="number">40</span>, <span class="number">40</span>, <span class="number">60</span>)      <span class="comment"># back</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grid</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,width = <span class="number">40</span>,height = <span class="number">40</span>,max_key = <span class="number">9</span>)</span>:</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">        self.grid = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(width)] <span class="keyword">for</span> j <span class="keyword">in</span> range(height)]</span><br><span class="line">        self.max_key = max_key</span><br><span class="line">        self.init_grid()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_grid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,self.height<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,self.width<span class="number">-1</span>):</span><br><span class="line">                self.grid[i][j] = random.randint(<span class="number">1</span>,self.max_key)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_grid</span><span class="params">(self,pos,keys)</span>:</span></span><br><span class="line">        self.grid[pos[<span class="number">0</span>]][pos[<span class="number">1</span>]] = keys</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grid</span><span class="params">(self,pos)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.grid[pos[<span class="number">0</span>]][pos[<span class="number">1</span>]]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">all_grid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.grid</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_connect</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x[<span class="number">0</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> x[<span class="number">1</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> x[<span class="number">0</span>] &gt;= self.height <span class="keyword">or</span> x[<span class="number">1</span>] &gt;= self.width <span class="keyword">or</span>\</span><br><span class="line">           y[<span class="number">0</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> y[<span class="number">1</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> y[<span class="number">0</span>] &gt;= self.height <span class="keyword">or</span> y[<span class="number">1</span>] &gt;= self.width:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> x[<span class="number">0</span>] != y[<span class="number">0</span>] <span class="keyword">and</span> x[<span class="number">1</span>] != y[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#check row</span></span><br><span class="line">        <span class="keyword">if</span> x[<span class="number">0</span>] == y[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(min(x[<span class="number">1</span>],y[<span class="number">1</span>])+<span class="number">1</span>,max(x[<span class="number">1</span>],y[<span class="number">1</span>])):</span><br><span class="line">                <span class="keyword">if</span> self.grid[x[<span class="number">0</span>]][i] &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment">#check colum</span></span><br><span class="line">        <span class="keyword">if</span> x[<span class="number">1</span>] == y[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(min(x[<span class="number">0</span>],y[<span class="number">0</span>])+<span class="number">1</span>,max(x[<span class="number">0</span>],y[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> self.grid[i][x[<span class="number">1</span>]] &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mini_connect</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> self.grid[x[<span class="number">0</span>]][x[<span class="number">1</span>]] != self.grid[y[<span class="number">0</span>]][y[<span class="number">1</span>]]:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="comment">#one step check</span></span><br><span class="line">        <span class="keyword">if</span> self.check_connect(x,y):</span><br><span class="line">            res.append((x,y))</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="comment">#two step check</span></span><br><span class="line">        <span class="keyword">if</span> self.check_connect(x,(x[<span class="number">0</span>],y[<span class="number">1</span>])) <span class="keyword">and</span> self.check_connect((x[<span class="number">0</span>],y[<span class="number">1</span>]),y):</span><br><span class="line">            <span class="keyword">if</span> self.grid[x[<span class="number">0</span>]][y[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                res.append((x,(x[<span class="number">0</span>],y[<span class="number">1</span>])))</span><br><span class="line">                res.append(((x[<span class="number">0</span>],y[<span class="number">1</span>]),y))</span><br><span class="line">                <span class="keyword">return</span>  res</span><br><span class="line">        <span class="keyword">if</span> self.check_connect(x,(y[<span class="number">0</span>],x[<span class="number">1</span>])) <span class="keyword">and</span> self.check_connect((y[<span class="number">0</span>],x[<span class="number">1</span>]),y):</span><br><span class="line">            <span class="keyword">if</span> self.grid[y[<span class="number">0</span>]][x[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                res.append((x,(y[<span class="number">0</span>],x[<span class="number">1</span>])))</span><br><span class="line">                res.append(((y[<span class="number">0</span>],x[<span class="number">1</span>]),y))</span><br><span class="line">                <span class="keyword">return</span>  res</span><br><span class="line"></span><br><span class="line">        <span class="comment">#three step check</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min(x[<span class="number">1</span>],y[<span class="number">1</span>])+<span class="number">1</span>,max(x[<span class="number">1</span>],y[<span class="number">1</span>])):</span><br><span class="line">            <span class="keyword">if</span> self.check_connect(x,(x[<span class="number">0</span>],i)) <span class="keyword">and</span> self.grid[x[<span class="number">0</span>]][i] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> self.check_connect((x[<span class="number">0</span>],i),(y[<span class="number">0</span>],i)) <span class="keyword">and</span> \</span><br><span class="line">                   self.check_connect((y[<span class="number">0</span>],i),y):</span><br><span class="line">                    <span class="keyword">if</span> self.grid[x[<span class="number">0</span>]][i] == <span class="number">0</span> <span class="keyword">and</span> self.grid[y[<span class="number">0</span>]][i] == <span class="number">0</span>:</span><br><span class="line">                        res.append((x,(x[<span class="number">0</span>],i)))</span><br><span class="line">                        res.append(((x[<span class="number">0</span>],i),(y[<span class="number">0</span>],i)))</span><br><span class="line">                        res.append(((y[<span class="number">0</span>],i),y))</span><br><span class="line">                        <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min(x[<span class="number">0</span>],y[<span class="number">0</span>])+<span class="number">1</span>,max(x[<span class="number">0</span>],y[<span class="number">0</span>])):</span><br><span class="line">            <span class="keyword">if</span> self.check_connect(x,(i,x[<span class="number">1</span>])):</span><br><span class="line">                print(i,x[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">if</span> self.check_connect((i,x[<span class="number">1</span>]),(i,y[<span class="number">1</span>])) <span class="keyword">and</span> \</span><br><span class="line">                   self.check_connect((i,y[<span class="number">1</span>]),y):</span><br><span class="line">                    <span class="keyword">if</span> self.grid[i][x[<span class="number">1</span>]] == <span class="number">0</span> <span class="keyword">and</span> self.grid[i][y[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                        res.append((x,(i,x[<span class="number">1</span>])));</span><br><span class="line">                        res.append(((i,x[<span class="number">1</span>]),(i,y[<span class="number">1</span>])));</span><br><span class="line">                        res.append(((i,y[<span class="number">1</span>]),y))</span><br><span class="line">                        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#check row</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,self.width):</span><br><span class="line">            <span class="keyword">if</span> self.check_connect(x,(x[<span class="number">0</span>],i)):</span><br><span class="line">                <span class="keyword">if</span> self.check_connect((x[<span class="number">0</span>],i),(y[<span class="number">0</span>],i)) <span class="keyword">and</span> \</span><br><span class="line">                   self.check_connect((y[<span class="number">0</span>],i),y):</span><br><span class="line">                    <span class="keyword">if</span> self.grid[x[<span class="number">0</span>]][i] == <span class="number">0</span> <span class="keyword">and</span> self.grid[y[<span class="number">0</span>]][i] == <span class="number">0</span>:</span><br><span class="line">                        res.append((x,(x[<span class="number">0</span>],i)))</span><br><span class="line">                        res.append(((x[<span class="number">0</span>],i),(y[<span class="number">0</span>],i)))</span><br><span class="line">                        res.append(((y[<span class="number">0</span>],i),y))</span><br><span class="line">                        <span class="keyword">return</span> res</span><br><span class="line">        <span class="comment">#check colum</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,self.height):</span><br><span class="line">            <span class="keyword">if</span> self.check_connect(x,(i,x[<span class="number">1</span>])):</span><br><span class="line">                <span class="keyword">if</span> self.check_connect((i,x[<span class="number">1</span>]),(i,y[<span class="number">1</span>])) <span class="keyword">and</span> \</span><br><span class="line">                   self.check_connect((i,y[<span class="number">1</span>]),y):</span><br><span class="line">                    <span class="keyword">if</span> self.grid[i][x[<span class="number">1</span>]] == <span class="number">0</span> <span class="keyword">and</span> self.grid[i][y[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                        res.append((x,(i,x[<span class="number">1</span>])));</span><br><span class="line">                        res.append(((i,x[<span class="number">1</span>]),(i,y[<span class="number">1</span>])));</span><br><span class="line">                        res.append(((i,y[<span class="number">1</span>]),y))</span><br><span class="line">                        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,width = <span class="number">30</span>,height = <span class="number">30</span>)</span>:</span></span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">        self.element_num = <span class="number">9</span></span><br><span class="line">        self.grid = Grid(width,height,self.element_num)</span><br><span class="line">        self.grid_size = <span class="number">80</span></span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">        self.element = []</span><br><span class="line">        self.selected = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        self.isSelect = <span class="literal">False</span></span><br><span class="line">        self.autoDetect = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#init game</span></span><br><span class="line">        pygame.init()</span><br><span class="line">        pygame.mixer.init()</span><br><span class="line">        self.load_source()</span><br><span class="line">        self.screen = pygame.display.set_mode((self.width*self.grid_size, self.height*self.grid_size))</span><br><span class="line">        pygame.display.set_caption(<span class="string">'linkmatching'</span>)</span><br><span class="line">        self.clock = pygame.time.Clock()</span><br><span class="line">        self.game_draw()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_source</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,self.element_num+<span class="number">1</span>):</span><br><span class="line">            image_file = <span class="string">"D:\\106\\element"</span>+str(i)+<span class="string">".JPG"</span></span><br><span class="line">            image = pygame.image.load(image_file)</span><br><span class="line">            image = pygame.transform.scale(image,(self.grid_size,self.grid_size))</span><br><span class="line">            self.element.append(image)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen_draw()</span><br><span class="line">        self.picture_draw()</span><br><span class="line">        self.border_draw()</span><br><span class="line">        pygame.display.update()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">screen_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.fill(LIGHT)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">picture_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        arrays = self.grid.all_grid()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.height):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.width):</span><br><span class="line">                <span class="keyword">if</span> arrays[i][j] &gt; <span class="number">0</span>:</span><br><span class="line">                    self.screen.blit(self.element[arrays[i][j]<span class="number">-1</span>],(j*self.grid_size,i*self.grid_size))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">border_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.height):</span><br><span class="line">            p1 = (self.grid_size,i*self.grid_size)</span><br><span class="line">            p2 = ((self.width<span class="number">-1</span>)*self.grid_size,i*self.grid_size)</span><br><span class="line">            self.line_draw(p1,p2,LIGHT)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.width):</span><br><span class="line">            p1 = (i*self.grid_size,self.grid_size)</span><br><span class="line">            p2 = (i*self.grid_size,(self.height<span class="number">-1</span>)*self.grid_size)</span><br><span class="line">            self.line_draw(p1,p2,LIGHT)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># we will set the selected grid</span></span><br><span class="line">        <span class="keyword">if</span> self.isSelect:</span><br><span class="line">            x = self.selected[<span class="number">0</span>]</span><br><span class="line">            y = self.selected[<span class="number">1</span>]</span><br><span class="line">            p1 = (x*self.grid_size,y*self.grid_size)</span><br><span class="line">            p2 = ((x+<span class="number">1</span>)*self.grid_size,y*self.grid_size)</span><br><span class="line">            p3 = (x*self.grid_size,(y+<span class="number">1</span>)*self.grid_size)</span><br><span class="line">            p4 = ((x+<span class="number">1</span>)*self.grid_size,(y+<span class="number">1</span>)*self.grid_size)</span><br><span class="line">            self.line_draw(p1,p2,RED)</span><br><span class="line">            self.line_draw(p1,p3,RED)</span><br><span class="line">            self.line_draw(p2,p4,RED)</span><br><span class="line">            self.line_draw(p3,p4,RED)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">line_draw</span><span class="params">(self,p1,p2,color)</span>:</span></span><br><span class="line">        pygame.draw.line(self.screen,color,p1,p2,<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect_draw</span><span class="params">(self,path)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> path:</span><br><span class="line">            p1 = (p[<span class="number">0</span>][<span class="number">1</span>]*self.grid_size + self.grid_size//<span class="number">2</span>,\</span><br><span class="line">                    p[<span class="number">0</span>][<span class="number">0</span>]*self.grid_size + self.grid_size//<span class="number">2</span>)</span><br><span class="line">            p2 = (p[<span class="number">1</span>][<span class="number">1</span>]*self.grid_size + self.grid_size//<span class="number">2</span>,\</span><br><span class="line">                    p[<span class="number">1</span>][<span class="number">0</span>]*self.grid_size + self.grid_size//<span class="number">2</span>)</span><br><span class="line">            self.line_draw(p1,p2,RED)</span><br><span class="line">        pygame.display.update()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_valid</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x[<span class="number">0</span>] &lt;= <span class="number">0</span> <span class="keyword">or</span> x[<span class="number">0</span>] &gt;= self.height<span class="number">-1</span>  <span class="keyword">or</span> \</span><br><span class="line">           x[<span class="number">1</span>] &lt;= <span class="number">0</span> <span class="keyword">or</span> x[<span class="number">1</span>] &gt;= self.width<span class="number">-1</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_over</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.score == (self.width<span class="number">-1</span>)*(self.height<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">music_play</span><span class="params">(self)</span>:</span></span><br><span class="line">        pygame.mixer.music.load(<span class="string">"D:\\106\\connect.mp3"</span>)</span><br><span class="line">        pygame.mixer.music.play()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auto_detect</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,(self.height<span class="number">-1</span>)*(self.width<span class="number">-1</span>)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,(self.height<span class="number">-1</span>)*(self.width<span class="number">-1</span>)):</span><br><span class="line">                <span class="keyword">if</span> i != j:</span><br><span class="line">                    p1 = ((i//(self.width<span class="number">-1</span>))+<span class="number">1</span>,(i%(self.width<span class="number">-1</span>))+<span class="number">1</span>)</span><br><span class="line">                    p2 = ((j//(self.width<span class="number">-1</span>))+<span class="number">1</span>,(j%(self.width<span class="number">-1</span>))+<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span> self.grid.get_grid(p1) == self.grid.get_grid(p2) <span class="keyword">and</span> self.grid.get_grid(p1) &gt; <span class="number">0</span>:</span><br><span class="line">                        pa = self.grid.mini_connect(p1,p2)</span><br><span class="line">                        <span class="keyword">if</span> len(pa) &gt; <span class="number">0</span>:</span><br><span class="line">                            self.connect_draw(pa)</span><br><span class="line">                            self.music_play()</span><br><span class="line">                            self.grid.set_grid(p1,<span class="number">0</span>)</span><br><span class="line">                            self.grid.set_grid(p2,<span class="number">0</span>)</span><br><span class="line">                            self.score += <span class="number">2</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">                    <span class="keyword">if</span> event.type == QUIT:</span><br><span class="line">                        sys.exit()</span><br><span class="line">                    <span class="keyword">elif</span> event.type == KEYDOWN:</span><br><span class="line">                        <span class="keyword">if</span> event.key <span class="keyword">in</span> (K_w, K_UP):</span><br><span class="line">                            self.autoDetect = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">if</span> event.key <span class="keyword">in</span> (K_s, K_DOWN):</span><br><span class="line">                            self.autoDetect = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">elif</span> event.type == MOUSEBUTTONDOWN:</span><br><span class="line">                        pos = pygame.mouse.get_pos()</span><br><span class="line">                        x = pos[<span class="number">1</span>]//self.grid_size</span><br><span class="line">                        y = pos[<span class="number">0</span>]//self.grid_size</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> self.check_valid((x,y)) <span class="keyword">or</span> self.grid.get_grid((x,y)) == <span class="number">0</span>:</span><br><span class="line">                            self.isSelect = <span class="literal">False</span></span><br><span class="line">                            self.selected = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (y,x) == self.selected:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> self.isSelect:</span><br><span class="line">                            pa = self.grid.mini_connect((x,y),(self.selected[<span class="number">1</span>],self.selected[<span class="number">0</span>]))</span><br><span class="line">                            <span class="keyword">if</span> len(pa) &gt; <span class="number">0</span>:</span><br><span class="line">                                self.connect_draw(pa)</span><br><span class="line">                                self.music_play()</span><br><span class="line">                                self.grid.set_grid((x,y),<span class="number">0</span>)</span><br><span class="line">                                self.grid.set_grid((self.selected[<span class="number">1</span>],self.selected[<span class="number">0</span>]),<span class="number">0</span>)</span><br><span class="line">                                self.isSelect = <span class="literal">False</span></span><br><span class="line">                                self.score += <span class="number">2</span></span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                self.selected = (y,x)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">if</span> self.grid.get_grid((x,y)) &gt; <span class="number">0</span>:</span><br><span class="line">                                self.selected = (y,x)</span><br><span class="line">                                self.isSelect = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            self.game_draw()</span><br><span class="line">            time.sleep(<span class="number">0.04</span>)</span><br><span class="line">            <span class="keyword">if</span> self.autoDetect:</span><br><span class="line">                self.auto_detect()</span><br><span class="line"></span><br><span class="line">game = Game(<span class="number">15</span>,<span class="number">8</span>)</span><br><span class="line">game.run()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;连连看&quot;&gt;&lt;a href=&quot;#连连看&quot; class=&quot;headerlink&quot; title=&quot;连连看&quot;&gt;&lt;/a&gt;连连看&lt;/h2&gt;&lt;p&gt;最近突然闲聊时，突然发现某个thu的本科生用openCV来做练练看外挂，最近刚好在学习&lt;code&gt;pygame&lt;/code&gt;，就想着
      
    
    </summary>
    
    
      <category term="游戏" scheme="http://yoursite.com/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="pygame" scheme="http://yoursite.com/tags/pygame/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 165周比赛</title>
    <link href="http://yoursite.com/2019/12/01/105/"/>
    <id>http://yoursite.com/2019/12/01/105/</id>
    <published>2019-12-01T15:26:17.812Z</published>
    <updated>2019-12-02T00:44:52.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="165周比赛"><a href="#165周比赛" class="headerlink" title="165周比赛"></a>165周比赛</h1><p>比赛时正在带娃去医院，下午回来刷完题目，然后补充解题报告,没看参考答案，说明题目不是很变态。</p><h2 id="5275-找出井字棋的获胜者"><a href="#5275-找出井字棋的获胜者" class="headerlink" title="5275. 找出井字棋的获胜者"></a>5275. 找出井字棋的获胜者</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>A和B 在一个<code>3 x 3</code>的网格上玩井字棋。<br>井字棋游戏的规则如下：<br>玩家轮流将棋子放在空方格<code>(&quot; &quot;)</code> 上。<br>第一个玩家 A 总是用 “X” 作为棋子，而第二个玩家 B 总是用 “O” 作为棋子。<br>“X” 和 “O” 只能放在空方格中，而不能放在已经被占用的方格上。<br>只要有 3 个相同的（非空）棋子排成一条直线（行、列、对角线）时，游戏结束。<br>如果所有方块都放满棋子（不为空），游戏也会结束。<br>游戏结束后，棋子无法再进行任何移动。<br>给你一个数组<code>moves</code>，其中每个元素是大小为 2 的另一个数组（元素分别对应网格的行和列），它按照 A 和 B 的行动顺序（先 A 后 B）记录了两人各自的棋子位置。</p><a id="more"></a><p>如果游戏存在获胜者（A 或 B），就返回该游戏的获胜者；如果游戏以平局结束，则返回 <code>&quot;Draw&quot;</code>；如果仍会有行动（游戏未结束），则返回 <code>&quot;Pending&quot;</code>。</p><p>你可以假设 <code>moves</code> 都 有效（遵循井字棋规则），网格最初是空的，A 将先行动。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：moves = [[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="string">"A"</span></span><br><span class="line">解释：<span class="string">"A"</span> 获胜，他总是先走。</span><br><span class="line"><span class="string">"X  "</span>    <span class="string">"X  "</span>    <span class="string">"X  "</span>    <span class="string">"X  "</span>    <span class="string">"X  "</span></span><br><span class="line"><span class="string">"   "</span> -&gt; <span class="string">"   "</span> -&gt; <span class="string">" X "</span> -&gt; <span class="string">" X "</span> -&gt; <span class="string">" X "</span></span><br><span class="line"><span class="string">"   "</span>    <span class="string">"O  "</span>    <span class="string">"O  "</span>    <span class="string">"OO "</span>    <span class="string">"OOX"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：moves = [[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="string">"B"</span></span><br><span class="line">解释：<span class="string">"B"</span> 获胜。</span><br><span class="line"><span class="string">"X  "</span>    <span class="string">"X  "</span>    <span class="string">"XX "</span>    <span class="string">"XXO"</span>    <span class="string">"XXO"</span>    <span class="string">"XXO"</span></span><br><span class="line"><span class="string">"   "</span> -&gt; <span class="string">" O "</span> -&gt; <span class="string">" O "</span> -&gt; <span class="string">" O "</span> -&gt; <span class="string">"XO "</span> -&gt; <span class="string">"XO "</span> </span><br><span class="line"><span class="string">"   "</span>    <span class="string">"   "</span>    <span class="string">"   "</span>    <span class="string">"   "</span>    <span class="string">"   "</span>    <span class="string">"O  "</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：moves = [[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="string">"Draw"</span></span><br><span class="line">输出：由于没有办法再行动，游戏以平局结束。</span><br><span class="line"><span class="string">"XXO"</span></span><br><span class="line"><span class="string">"OOX"</span></span><br><span class="line"><span class="string">"XOX"</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：moves = <span class="string">[[0,0],[1,1]]</span></span><br><span class="line">输出：<span class="string">"Pending"</span></span><br><span class="line">解释：游戏还没有结束。</span><br><span class="line"><span class="string">"X  "</span></span><br><span class="line"><span class="string">" O "</span></span><br><span class="line"><span class="string">"   "</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= moves.length &lt;= 9</code></li><li><code>moves[i].length == 2</code></li><li><code>0 &lt;= moves[i][j] &lt;= 2</code></li><li><code>moves</code> 里没有重复的元素。</li><li><code>moves</code> 遵循井字棋的规则。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-winner-on-a-tic-tac-toe-game/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-winner-on-a-tic-tac-toe-game/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>每移动一次检查状态</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>暴力检查状态<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; grid)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*check row*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i*<span class="number">3</span>]&amp;&amp;grid[i*<span class="number">3</span>+<span class="number">1</span>]&amp;&amp;grid[i*<span class="number">3</span>+<span class="number">2</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*check colum*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i]&amp;&amp;grid[<span class="number">3</span>+i]&amp;&amp;grid[<span class="number">6</span>+i])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*check diag*/</span></span><br><span class="line">        <span class="keyword">if</span>(grid[<span class="number">0</span>]&amp;&amp;grid[<span class="number">4</span>]&amp;&amp;grid[<span class="number">8</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(grid[<span class="number">2</span>]&amp;&amp;grid[<span class="number">4</span>]&amp;&amp;grid[<span class="number">6</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">tictactoe</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; moves)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; playerA(<span class="number">9</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; playerB(<span class="number">9</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; moves.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                playerA[moves[i][<span class="number">0</span>]*<span class="number">3</span>+moves[i][<span class="number">1</span>]] = <span class="number">1</span>; </span><br><span class="line">                <span class="keyword">if</span>(check(playerA))&#123;<span class="keyword">return</span> <span class="string">"A"</span>;&#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                playerB[moves[i][<span class="number">0</span>]*<span class="number">3</span>+moves[i][<span class="number">1</span>]] = <span class="number">1</span>; </span><br><span class="line">                <span class="keyword">if</span>(check(playerB))&#123;<span class="keyword">return</span> <span class="string">"B"</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(moves.size() &gt;= <span class="number">9</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Draw"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Pending"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5276-不浪费原料的汉堡制作方案"><a href="#5276-不浪费原料的汉堡制作方案" class="headerlink" title="5276. 不浪费原料的汉堡制作方案"></a>5276. 不浪费原料的汉堡制作方案</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>圣诞活动预热开始啦，汉堡店推出了全新的汉堡套餐。为了避免浪费原料，请你帮他们制定合适的制作计划。</p><p>给你两个整数 <code>tomatoSlices</code> 和 <code>cheeseSlices</code>，分别表示番茄片和奶酪片的数目。不同汉堡的原料搭配如下：</p><p>巨无霸汉堡：4 片番茄和 1 片奶酪<br>小皇堡：2 片番茄和 1 片奶酪<br>请你以 <code>[total_jumbo, total_small]</code>（[巨无霸汉堡总数，小皇堡总数]）的格式返回恰当的制作方案，使得剩下的番茄片<code>tomatoSlices</code>和奶酪片<code>cheeseSlices</code> 的数量都是 0。</p><p>如果无法使剩下的番茄片<code>tomatoSlices</code>和奶酪片<code>cheeseSlices</code>的数量为 0，就请返回 []。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tomatoSlices = <span class="number">16</span>, cheeseSlices = <span class="number">7</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">6</span>]</span><br><span class="line">解释：制作 <span class="number">1</span> 个巨无霸汉堡和 <span class="number">6</span> 个小皇堡需要 <span class="number">4</span>*<span class="number">1</span> + <span class="number">2</span>*<span class="number">6</span> = <span class="number">16</span> 片番茄和 <span class="number">1</span> + <span class="number">6</span> = <span class="number">7</span> 片奶酪。不会剩下原料</span><br></pre></td></tr></table></figure></p><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tomatoSlices = <span class="number">17</span>, cheeseSlices = <span class="number">4</span></span><br><span class="line">输出：[]</span><br><span class="line">解释：只制作小皇堡和巨无霸汉堡无法用光全部原料。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tomatoSlices = <span class="number">4</span>, cheeseSlices = <span class="number">17</span></span><br><span class="line">输出：[]</span><br><span class="line">解释：制作 <span class="number">1</span> 个巨无霸汉堡会剩下 <span class="number">16</span> 片奶酪，制作 <span class="number">2</span> 个小皇堡会剩下 <span class="number">15</span> 片奶酪。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：tomatoSlices = <span class="number">0</span>, cheeseSlices = <span class="number">0</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br>示例 5:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：tomatoSlices = <span class="number">2</span>, cheeseSlices = <span class="number">1</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>0 &lt;= tomatoSlices &lt;= 10^7</code></li><li><code>0 &lt;= cheeseSlices &lt;= 10^7</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-burgers-with-no-waste-of-ingredients" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-burgers-with-no-waste-of-ingredients</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>解二元一次方程</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>解方程，并且保证结果均为正整数即可;<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numOfBurgers(<span class="keyword">int</span> tomatoSlices, <span class="keyword">int</span> cheeseSlices) &#123;        </span><br><span class="line">        <span class="keyword">if</span>((tomatoSlices%<span class="number">2</span>) == <span class="number">0</span> &amp;&amp; \</span><br><span class="line">           (tomatoSlices/<span class="number">2</span>) &gt;= cheeseSlices &amp;&amp; \</span><br><span class="line">           (tomatoSlices/<span class="number">2</span>) &lt;= <span class="number">2</span>*cheeseSlices)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;tomatoSlices/<span class="number">2</span>-cheeseSlices,<span class="number">2</span>*cheeseSlices-tomatoSlices/<span class="number">2</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5278-分割回文串-III"><a href="#5278-分割回文串-III" class="headerlink" title="5278. 分割回文串 III"></a>5278. 分割回文串 III</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3>给你一个由小写字母组成的字符串 s，和一个整数 k。</li></ol><p>请你按下面的要求分割字符串：</p><p>首先，你可以将 s 中的部分字符修改为其他的小写英文字母。<br>接着，你需要把 s 分割成 k 个非空且不相交的子串，并且每个子串都是回文串。<br>请返回以这种方式分割字符串所需修改的最少字符数。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"abc"</span>, k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：你可以把字符串分割成 <span class="string">"ab"</span> 和 <span class="string">"c"</span>，并修改 <span class="string">"ab"</span> 中的 <span class="number">1</span> 个字符，将它变成回文串。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aabbc"</span>, k = <span class="number">3</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：你可以把字符串分割成 <span class="string">"aa"</span>、<span class="string">"bb"</span> 和 <span class="string">"c"</span>，它们都是回文串。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"leetcode"</span>, k = <span class="number">8</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= k &lt;= s.length &lt;= 100</code></li><li><code>s 中只含有小写英文字母。</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/palindrome-partitioning-iii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-partitioning-iii</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>DP</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>看到类似题目，基本上就想到需要动态规划来解题；</li><li>设置<code>cost[i][j]</code>为字符串从<code>i</code>到<code>j</code>处替换为回文字符串所需要进行替换的最小次数，则递推公式为:<script type="math/tex; mode=display">cost[i][j] = \left\{\begin{aligned}cost[i+1][j-1]  &  \:\:(s[i] = s[j])\\cost[i+1][j-1] + 1 & \:\:(s[i] \neq s[j])\\\end{aligned}\right.</script></li><li>设置<code>dp[i][j]</code>为字符串从<code>0</code>到<code>i</code>分隔为<code>j</code>个回文串所需要进行替换的最小次数，则递推公式为:<script type="math/tex; mode=display">dp[i][j] = min(dp[i][j],dp[k][j-1] \: + \: cost[k+1][i])   \: \: (k\in(1...i-1))</script></li><li>基本上写出递推公式，<code>dp</code>这类的题目基本上就很套路了。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">palindromePartition</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cost(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(k+<span class="number">1</span>,n));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*calculate the cost*/</span>        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j+i &lt;= n; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[j<span class="number">-1</span>] == s[j+i<span class="number">-1</span>])&#123;</span><br><span class="line">                    cost[j][j+i] = (i == <span class="number">1</span>?<span class="number">0</span>:cost[j+<span class="number">1</span>][j+i<span class="number">-1</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cost[j][j+i] = (i == <span class="number">1</span>?<span class="number">1</span>:(cost[j+<span class="number">1</span>][j+i<span class="number">-1</span>]+<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = cost[<span class="number">1</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= min(k,i); ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m = j<span class="number">-1</span>; m &lt; i; ++m)&#123;</span><br><span class="line">                    dp[i][j] = min(dp[i][j],dp[m][j<span class="number">-1</span>]+cost[m+<span class="number">1</span>][i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n][k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5277-统计全为-1-的正方形子矩阵"><a href="#5277-统计全为-1-的正方形子矩阵" class="headerlink" title="5277. 统计全为 1 的正方形子矩阵"></a>5277. 统计全为 1 的正方形子矩阵</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个<code>m * n</code> 的矩阵，矩阵中的元素不是 0 就是 1，请你统计并返回其中完全由 1 组成的 正方形 子矩阵的个数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix =</span><br><span class="line">[</span><br><span class="line">  [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line">输出：<span class="number">15</span></span><br><span class="line">解释： </span><br><span class="line">边长为 <span class="number">1</span> 的正方形有 <span class="number">10</span> 个。</span><br><span class="line">边长为 <span class="number">2</span> 的正方形有 <span class="number">4</span> 个。</span><br><span class="line">边长为 <span class="number">3</span> 的正方形有 <span class="number">1</span> 个。</span><br><span class="line">正方形的总数 = <span class="number">10</span> + <span class="number">4</span> + <span class="number">1</span> = <span class="number">15.</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = </span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">]</span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：</span><br><span class="line">边长为 <span class="number">1</span> 的正方形有 <span class="number">6</span> 个。 </span><br><span class="line">边长为 <span class="number">2</span> 的正方形有 <span class="number">1</span> 个。</span><br><span class="line">正方形的总数 = <span class="number">6</span> + <span class="number">1</span> = <span class="number">7.</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 300</code></li><li><code>1 &lt;= arr[0].length &lt;= 300</code></li><li><code>0 &lt;= arr[i][j] &lt;= 1</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力<code>O（N^3）</code>,统计正方形中1的个数</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>求出所有的矩形中包含1的个数，直接统计所有正方形子矩阵中<code>1</code>的个数，如果<code>1</code>的个数等于边长的平方，则该正方形符合条件;</li><li>以<code>(i,j)</code>为右下顶点，且边长为<code>k</code>的正方形的<code>1</code>的个数的递推公式为:<script type="math/tex; mode=display">sum[i][j] = sum[i][j-1] + sum[i-1][j] - sum[i-1][j-1] + matrix[i-1][j-1]</script><script type="math/tex; mode=display">area[i][j][k] = sum[i][j] - sum[i-k][j] - sum[i][j-k] + sum[i-k][j-k]</script></li></ol></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countSquares</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = matrix.size();</span><br><span class="line">        <span class="keyword">int</span> c = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; sum(r+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(c+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*initial*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; ++j)&#123;</span><br><span class="line">                sum[i][j] += sum[i][j<span class="number">-1</span>] + sum[i<span class="number">-1</span>][j] - sum[i<span class="number">-1</span>][j<span class="number">-1</span>] + matrix[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        res += sum[r][c];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= min(i,j); ++k)&#123;</span><br><span class="line">                    <span class="keyword">int</span> area = sum[i][j] - sum[i-k][j] - sum[i][j-k] + sum[i-k][j-k];</span><br><span class="line">                    <span class="keyword">if</span>(area == k*k)&#123;</span><br><span class="line">                        res++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;165周比赛&quot;&gt;&lt;a href=&quot;#165周比赛&quot; class=&quot;headerlink&quot; title=&quot;165周比赛&quot;&gt;&lt;/a&gt;165周比赛&lt;/h1&gt;&lt;p&gt;比赛时正在带娃去医院，下午回来刷完题目，然后补充解题报告,没看参考答案，说明题目不是很变态。&lt;/p&gt;&lt;h2 id=&quot;5275-找出井字棋的获胜者&quot;&gt;&lt;a href=&quot;#5275-找出井字棋的获胜者&quot; class=&quot;headerlink&quot; title=&quot;5275. 找出井字棋的获胜者&quot;&gt;&lt;/a&gt;5275. 找出井字棋的获胜者&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;A和B 在一个&lt;code&gt;3 x 3&lt;/code&gt;的网格上玩井字棋。&lt;br&gt;井字棋游戏的规则如下：&lt;br&gt;玩家轮流将棋子放在空方格&lt;code&gt;(&amp;quot; &amp;quot;)&lt;/code&gt; 上。&lt;br&gt;第一个玩家 A 总是用 “X” 作为棋子，而第二个玩家 B 总是用 “O” 作为棋子。&lt;br&gt;“X” 和 “O” 只能放在空方格中，而不能放在已经被占用的方格上。&lt;br&gt;只要有 3 个相同的（非空）棋子排成一条直线（行、列、对角线）时，游戏结束。&lt;br&gt;如果所有方块都放满棋子（不为空），游戏也会结束。&lt;br&gt;游戏结束后，棋子无法再进行任何移动。&lt;br&gt;给你一个数组&lt;code&gt;moves&lt;/code&gt;，其中每个元素是大小为 2 的另一个数组（元素分别对应网格的行和列），它按照 A 和 B 的行动顺序（先 A 后 B）记录了两人各自的棋子位置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 12周双比赛</title>
    <link href="http://yoursite.com/2019/12/01/104/"/>
    <id>http://yoursite.com/2019/12/01/104/</id>
    <published>2019-12-01T15:26:17.812Z</published>
    <updated>2019-12-02T00:45:23.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12周双比赛"><a href="#12周双比赛" class="headerlink" title="12周双比赛"></a>12周双比赛</h1><h2 id="5112-十六进制魔术数字"><a href="#5112-十六进制魔术数字" class="headerlink" title="5112. 十六进制魔术数字"></a>5112. 十六进制魔术数字</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>你有一个十进制数字，请按照此规则将它变成「十六进制魔术数字」：首先将它变成字母大写的十六进制字符串，然后将所有的数字 0 变成字母 O ，将数字 1  变成字母 I 。</p><p>如果一个数字在转换后只包含 {“A”, “B”, “C”, “D”, “E”, “F”, “I”, “O”} ，那么我们就认为这个转换是有效的。</p><a id="more"></a><p>给你一个字符串 num ，它表示一个十进制数 N，如果它的十六进制魔术数字转换是有效的，请返回转换后的结果，否则返回 “ERROR” 。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="string">"257"</span></span><br><span class="line">输出：<span class="string">"IOI"</span></span><br><span class="line">解释：<span class="number">257</span> 的十六进制表示是 <span class="number">101</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">num</span> = <span class="string">"3"</span></span><br><span class="line">输出：<span class="string">"ERROR"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= N &lt;= 10^12</li><li>给定字符串不会有前导 0 。</li><li>结果中的所有字母都应该是大写字母。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/hexspeak" target="_blank" rel="noopener">https://leetcode-cn.com/problems/hexspeak</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>送分题</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>没啥好说的<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">toHexspeak</span><span class="params">(<span class="built_in">string</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> d[<span class="number">16</span>] = &#123;<span class="string">'O'</span>,<span class="string">'I'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>&#125;;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> curr = stol(num);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(curr &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = curr%<span class="number">16</span>;</span><br><span class="line">            curr = curr/<span class="number">16</span>;</span><br><span class="line">            <span class="keyword">if</span>(x &gt; <span class="number">1</span> &amp;&amp; x &lt; <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"ERROR"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            res = d[x] + res;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5113-删除区间"><a href="#5113-删除区间" class="headerlink" title="5113. 删除区间"></a>5113. 删除区间</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个 有序的 不相交区间列表 <code>intervals</code> 和一个要删除的区间<code>toBeRemoved</code>，<code>intervals</code>中的每一个区间 <code>intervals[i] = [a, b]</code>都表示满足<code>a &lt;= x &lt; b</code> 的所有实数  x 的集合。</p><p>我们将<code>intervals</code> 中任意区间与 <code>toBeRemoved</code>有交集的部分都删除。</p><p>返回删除所有交集区间后，<code>intervals</code> 剩余部分的 有序 列表。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">int</span>ervals = [[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">7</span>]], toBeRemoved = [<span class="number">1</span>,<span class="number">6</span>]</span><br><span class="line">输出：[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">6</span>,<span class="number">7</span>]]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：intervals = <span class="string">[[0,5]]</span>, toBeRemoved = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="string">[[0,2],[3,5]]</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= intervals.length &lt;= 10^4</code></li><li><code>-10^9 &lt;= intervals[i][0] &lt; intervals[i][1] &lt;= 10^9</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/remove-interval" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-interval</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>不在删除范围的保留即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>将不在删除区间的范围保留即可;<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; removeInterval(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; toBeRemoved) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; interval : intervals)&#123;</span><br><span class="line">            <span class="keyword">if</span>(interval[<span class="number">1</span>] &lt;= toBeRemoved[<span class="number">0</span>] || interval[<span class="number">0</span>] &gt;=  toBeRemoved[<span class="number">1</span>])&#123;</span><br><span class="line">                res.push_back(interval);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(toBeRemoved[<span class="number">0</span>] &gt; interval[<span class="number">0</span>] &amp;&amp; toBeRemoved[<span class="number">0</span>] &lt; interval[<span class="number">1</span>])&#123;</span><br><span class="line">                res.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;interval[<span class="number">0</span>],toBeRemoved[<span class="number">0</span>]&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(toBeRemoved[<span class="number">1</span>] &gt; interval[<span class="number">0</span>] &amp;&amp; toBeRemoved[<span class="number">1</span>] &lt; interval[<span class="number">1</span>])&#123;</span><br><span class="line">                res.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;toBeRemoved[<span class="number">1</span>],interval[<span class="number">1</span>]&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5114-删除树节点"><a href="#5114-删除树节点" class="headerlink" title="5114. 删除树节点"></a>5114. 删除树节点</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3>给你一棵以节点 <code>0</code>为根节点的树，定义如下：</li></ol><p>节点的总数为 <code>nodes</code> 个；<br>第 <code>i</code> 个节点的值为 <code>value[i]</code> ；<br>第 <code>i</code> 个节点的父节点是 <code>parent[i]</code> 。<br>请你删除节点值之和为 <code>0</code>的每一棵子树。<br>在完成所有删除之后，返回树中剩余节点的数目。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nodes = <span class="number">7</span>, parent = [<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>], value = [<span class="number">1</span>,<span class="number">-2</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nodes &lt;= 10^4</code></li><li><code>-10^5 &lt;= value[i] &lt;= 10^5</code></li><li><code>parent.length == nodes</code></li><li><code>parent[0] == -1 表示节点 0 是树的根</code>。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/palindrome-partitioning-iii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-partitioning-iii</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>DP</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>每次进行<code>dfs</code>时主要返回两个值，第一个值为当前子树所有的节点的和，第二个值为当前子树中不为和不为<code>0</code>的节点的个数;</li><li>每次进行递归合并即可;<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self,root,tree,value)</span>:</span></span><br><span class="line">        curr_sum = value[root]</span><br><span class="line">        curr_cnt = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> tree[root]:</span><br><span class="line">            child = self.helper(x,tree,value)</span><br><span class="line">            curr_sum += child[<span class="number">0</span>]</span><br><span class="line">            curr_cnt += child[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> curr_sum == <span class="number">0</span>:</span><br><span class="line">            curr_cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            curr_cnt += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (curr_sum,curr_cnt)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteTreeNodes</span><span class="params">(self, nodes: int, parent: List[int], value: List[int])</span> -&gt; int:</span></span><br><span class="line">        tree = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(nodes):</span><br><span class="line">            tree[i] = set()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,nodes):</span><br><span class="line">            tree[parent[i]].add(i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.helper(<span class="number">0</span>,tree,value)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="5136-矩形内船只的数目"><a href="#5136-矩形内船只的数目" class="headerlink" title="5136. 矩形内船只的数目"></a>5136. 矩形内船只的数目</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>在用笛卡尔坐标系表示的二维海平面上，有一些船。每一艘船都在一个整数点上，且每一个整数点最多只有 1 艘船。</p><p>有一个函数<code>Sea.hasShips(topRight, bottomLeft)</code>，输入参数为右上角和左下角两个点的坐标，当且仅当这两个点所表示的矩形区域（包含边界）内至少有一艘船时，这个函数才返回 true ，否则返回 false 。</p><p>给你矩形的右上角<code>topRight</code> 和左下角<code>bottomLeft</code> 的坐标，请你返回此矩形内船只的数目。题目保证矩形内 至多只有 10 艘船。</p><p>调用函数<code>hasShips</code> 超过400次 的提交将被判为 错误答案<code>（Wrong Answer）</code> 。同时，任何尝试绕过评测系统的行为都将被取消比赛资格。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">ships = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">5</span>]], topRight = [<span class="number">4</span>,<span class="number">4</span>], bottomLeft = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：在 [<span class="number">0</span>,<span class="number">0</span>] 到 [<span class="number">4</span>,<span class="number">4</span>] 的范围内总共有 <span class="number">3</span> 艘船。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>ships</code> 数组只用于评测系统内部初始化。你无法得知 <code>ships</code> 的信息，所以只能通过调用<code>hasShips</code>接口来求解。</li><li><code>0 &lt;= bottomLeft[0] &lt;= topRight[0] &lt;= 1000</code></li><li><code>0 &lt;= bottomLeft[1] &lt;= topRight[1] &lt;= 1000</code></li></ul><p>来源：力扣（LeetCode）<br>链接：<br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-ships-in-a-rectangle" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-ships-in-a-rectangle</a></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>典型的二分查找，难点在于边界处理；</li><li>由于题目中明确要求，不能重复调用，在进行二分查找时对于边界的切分要仔细审核，可以将图切分四份来递归，也可以切成两份来递归;</li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countShips</span><span class="params">(Sea sea, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; topRight, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bottomLeft)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lx = bottomLeft[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ly = bottomLeft[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> rx = topRight[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ry = topRight[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(lx &gt; rx || ly &gt; ry || !sea.hasShips(topRight,bottomLeft))&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(lx == rx &amp;&amp; ly == ry)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sea.hasShips(topRight,bottomLeft))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">int</span> midx = (rx+lx)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> midy = (ry+ly)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>((rx - lx) &gt; (ry - ly))&#123;</span><br><span class="line">            res += countShips(sea,topRight,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;midx+<span class="number">1</span>,ly&#125;));</span><br><span class="line">            res += countShips(sea,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;midx,ry&#125;),bottomLeft);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res += countShips(sea,topRight,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;lx,midy+<span class="number">1</span>&#125;));</span><br><span class="line">            res += countShips(sea,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;rx,midy&#125;),bottomLeft);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countShips</span><span class="params">(self, sea, P, Q)</span>:</span></span><br><span class="line">      res = <span class="number">0</span></span><br><span class="line">      <span class="keyword">if</span> P.x &gt;= Q.x <span class="keyword">and</span> P.y &gt;= Q.y <span class="keyword">and</span> sea.hasShips(P, Q):</span><br><span class="line">          <span class="keyword">if</span> P.x == Q.x <span class="keyword">and</span> P.y == Q.y: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">          mx, my = (P.x + Q.x) / <span class="number">2</span>, (P.y + Q.y) / <span class="number">2</span></span><br><span class="line">          res += self.countShips(sea, P, Point(mx + <span class="number">1</span>, my + <span class="number">1</span>))</span><br><span class="line">          res += self.countShips(sea, Point(mx, P.y), Point(Q.x, my + <span class="number">1</span>))</span><br><span class="line">          res += self.countShips(sea, Point(mx, my), Q)</span><br><span class="line">          res += self.countShips(sea, Point(P.x, my), Point(mx + <span class="number">1</span>, Q.y))</span><br><span class="line">      <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;12周双比赛&quot;&gt;&lt;a href=&quot;#12周双比赛&quot; class=&quot;headerlink&quot; title=&quot;12周双比赛&quot;&gt;&lt;/a&gt;12周双比赛&lt;/h1&gt;&lt;h2 id=&quot;5112-十六进制魔术数字&quot;&gt;&lt;a href=&quot;#5112-十六进制魔术数字&quot; class=&quot;headerlink&quot; title=&quot;5112. 十六进制魔术数字&quot;&gt;&lt;/a&gt;5112. 十六进制魔术数字&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;你有一个十进制数字，请按照此规则将它变成「十六进制魔术数字」：首先将它变成字母大写的十六进制字符串，然后将所有的数字 0 变成字母 O ，将数字 1  变成字母 I 。&lt;/p&gt;&lt;p&gt;如果一个数字在转换后只包含 {“A”, “B”, “C”, “D”, “E”, “F”, “I”, “O”} ，那么我们就认为这个转换是有效的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Pygame】 扫地机器人</title>
    <link href="http://yoursite.com/2019/11/29/103/"/>
    <id>http://yoursite.com/2019/11/29/103/</id>
    <published>2019-11-29T07:57:25.133Z</published>
    <updated>2019-11-29T09:04:45.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目-489-扫地机器人"><a href="#题目-489-扫地机器人" class="headerlink" title="题目 489. 扫地机器人"></a>题目 489. 扫地机器人</h2><p>房间（用格栅表示）中有一个扫地机器人。格栅中的每一个格子有空和障碍物两种可能。</p><p>扫地机器人提供4个API，可以向前进，向左转或者向右转。每次转弯90度。</p><p>当扫地机器人试图进入障碍物格子时，它的碰撞传感器会探测出障碍物，使它停留在原地。</p><p>请利用提供的4个API编写让机器人清理整个房间的算法。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="symbol">Robot</span> &#123;</span><br><span class="line">  <span class="comment">// 若下一个方格为空，则返回true，并移动至该方格</span></span><br><span class="line">  <span class="comment">// 若下一个方格为障碍物，则返回false，并停留在原地</span></span><br><span class="line">  <span class="built_in">bool</span>ean move();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在调用turnLeft/turnRight后机器人会停留在原位置</span></span><br><span class="line">  <span class="comment">// 每次转弯90度</span></span><br><span class="line">  <span class="built_in">void</span> turnLeft();</span><br><span class="line">  <span class="built_in">void</span> turnRight();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清理所在方格</span></span><br><span class="line">  <span class="built_in">void</span> clean();</span><br><span class="line">&#125;</span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">room = [</span><br><span class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">],</span><br><span class="line">row = <span class="number">1</span>,</span><br><span class="line">col = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">解析:</span><br><span class="line">房间格栅用<span class="number">0</span>或<span class="number">1</span>填充。<span class="number">0</span>表示障碍物，<span class="number">1</span>表示可以通过。</span><br><span class="line">机器人从row=<span class="number">1</span>，col=<span class="number">3</span>的初始位置出发。在左上角的一行以下，三列以右。</span><br></pre></td></tr></table></figure><br>注意:</p><a id="more"></a><ul><li>输入只用于初始化房间和机器人的位置。你需要“盲解”这个问题。换而言之，你必须在对房间和机器人 位置一无所知的情况下，只使用4个给出的API解决问题.</li><li>扫地机器人的初始位置一定是空地。</li><li>扫地机器人的初始方向向上。</li><li>所有可抵达的格子都是相连的，亦即所有标记为1的格子机器人都可以抵达。</li><li>可以假定格栅的四周都被墙包围。</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>通过模拟扫地机器的行动轨迹运行，运行界面如下：<br><img src="http://q15r3bmu8.bkt.clouddn.com/bandicam-2019-11-29-15-07-53-935.gif" alt="1"></p><h3 id="代码显示"><a href="#代码显示" class="headerlink" title="代码显示"></a>代码显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""扫地机器人"""</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">LIGHT = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)     <span class="comment"># free </span></span><br><span class="line">DARK = (<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>)      <span class="comment"># obstacle </span></span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)           <span class="comment"># line</span></span><br><span class="line">RED = (<span class="number">200</span>, <span class="number">30</span>, <span class="number">30</span>)         <span class="comment"># robot</span></span><br><span class="line">BGCOLOR = (<span class="number">40</span>, <span class="number">40</span>, <span class="number">60</span>)      <span class="comment"># back</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,room,pos)</span>:</span></span><br><span class="line">        self.w = len(room[<span class="number">0</span>])</span><br><span class="line">        self.h = len(room)</span><br><span class="line">        self.robot = pos</span><br><span class="line">        self.rooms = room</span><br><span class="line">        self.direction = <span class="string">'U'</span></span><br><span class="line">        self.sz = <span class="number">80</span></span><br><span class="line">        self.speed = <span class="number">1</span></span><br><span class="line">        self.visited = set()</span><br><span class="line">        self.lasttime = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#color</span></span><br><span class="line">        self.backGround = BGCOLOR</span><br><span class="line">        self.robotColor = RED</span><br><span class="line">        self.spaceColor = DARK</span><br><span class="line">        self.obstacleColor = RED</span><br><span class="line"></span><br><span class="line">        <span class="comment">#init game</span></span><br><span class="line">        pygame.init()</span><br><span class="line">        self.screen = pygame.display.set_mode((self.w*self.sz, self.h*self.sz))</span><br><span class="line">        pygame.display.set_caption(<span class="string">'Robot'</span>)</span><br><span class="line">        self.game_draw()</span><br><span class="line">        self.clock = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_room</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.visited.add(str(<span class="number">0</span>)+<span class="string">','</span>+str(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfsRobot</span><span class="params">(x,y,dir)</span>:</span></span><br><span class="line">            d = [(<span class="number">-1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">-1</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>)]</span><br><span class="line">            self.robot_clean()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                newDir = (dir+i)%<span class="number">4</span></span><br><span class="line">                x1 = x + d[newDir][<span class="number">0</span>]</span><br><span class="line">                y1 = y + d[newDir][<span class="number">1</span>]</span><br><span class="line">                key = str(x1)+<span class="string">','</span>+str(y1)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.visited <span class="keyword">and</span> self.robot_move():</span><br><span class="line">                    self.visited.add(key)</span><br><span class="line">                    dfsRobot(x1,y1,newDir)</span><br><span class="line">                    self.turn_left()</span><br><span class="line">                    self.turn_left()</span><br><span class="line">                    self.robot_move()</span><br><span class="line">                    self.turn_left()</span><br><span class="line">                    self.turn_left()</span><br><span class="line">                </span><br><span class="line">                self.turn_left()</span><br><span class="line">        </span><br><span class="line">        dfsRobot(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">          </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">robot_move</span><span class="params">(self)</span>:</span></span><br><span class="line">        d = &#123;<span class="string">'L'</span>:(<span class="number">0</span>,<span class="number">-1</span>),<span class="string">'R'</span>:(<span class="number">0</span>,<span class="number">1</span>),<span class="string">'U'</span>:(<span class="number">-1</span>,<span class="number">0</span>),<span class="string">'D'</span>:(<span class="number">1</span>,<span class="number">0</span>)&#125;</span><br><span class="line">        x = self.robot[<span class="number">0</span>] + d[self.direction][<span class="number">0</span>]</span><br><span class="line">        y = self.robot[<span class="number">1</span>] + d[self.direction][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= self.h <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= self.w:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.rooms[x][y] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        self.robot = (x,y)</span><br><span class="line">        self.game_draw()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">robot_clean</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.rooms[self.robot[<span class="number">0</span>]][self.robot[<span class="number">1</span>]] = <span class="number">1</span></span><br><span class="line">        self.game_draw()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn_left</span><span class="params">(self)</span>:</span></span><br><span class="line">        left_change = &#123;<span class="string">'L'</span>:<span class="string">'D'</span>,<span class="string">'R'</span>:<span class="string">'U'</span>,<span class="string">'U'</span>:<span class="string">'L'</span>,<span class="string">'D'</span>:<span class="string">'R'</span>&#125;</span><br><span class="line">        self.direction = left_change[self.direction]</span><br><span class="line">        self.game_draw()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn_right</span><span class="params">(self)</span>:</span></span><br><span class="line">        right_change = &#123;<span class="string">'L'</span>:<span class="string">'U'</span>,<span class="string">'R'</span>:<span class="string">'U'</span>,<span class="string">'U'</span>:<span class="string">'L'</span>,<span class="string">'D'</span>:<span class="string">'R'</span>&#125;</span><br><span class="line">        self.direction = <span class="string">'R'</span></span><br><span class="line">        self.game_draw()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">room_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.h):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.w):</span><br><span class="line">                <span class="keyword">if</span> self.rooms[i][j] == <span class="number">0</span>:</span><br><span class="line">                    pygame.draw.rect(self.screen,self.obstacleColor,(j*self.sz,i*self.sz,self.sz,self.sz),<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">elif</span> self.rooms[i][j] == <span class="number">1</span>:</span><br><span class="line">                    pygame.draw.rect(self.screen,self.spaceColor,(j*self.sz,i*self.sz,self.sz,self.sz),<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">elif</span> self.rooms[i][j] == <span class="number">-1</span>:</span><br><span class="line">                    img = pygame.image.load(<span class="string">"D:\\rush.bmp"</span>)</span><br><span class="line">                    self.screen.blit(img,(j*self.sz,i*self.sz)) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">robot_delay</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">                    <span class="keyword">if</span> event.type == QUIT:</span><br><span class="line">                        sys.exit()</span><br><span class="line">            curTime = time.time()</span><br><span class="line">            <span class="keyword">if</span> curTime - self.lasttime &gt; <span class="number">0.5</span>:</span><br><span class="line">                self.lasttime = curTime</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.clock.tick(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set robot</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">robot_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        d = &#123;<span class="string">'U'</span>:<span class="number">0</span>,<span class="string">'L'</span>:<span class="number">90</span>,<span class="string">'D'</span>:<span class="number">180</span>,<span class="string">'R'</span>:<span class="number">270</span>&#125;</span><br><span class="line">        img = pygame.image.load(<span class="string">"D:\\robot.bmp"</span>)</span><br><span class="line">        img = pygame.transform.rotate(img,d[self.direction])</span><br><span class="line">        pos = self.robot</span><br><span class="line">        self.screen.blit(img,(pos[<span class="number">1</span>]*self.sz,pos[<span class="number">0</span>]*self.sz))</span><br><span class="line">        <span class="comment">#pygame.draw.rect(self.screen,self.robotColor,(pos[1]*self.sz,pos[0]*self.sz,self.sz,self.sz),0)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.robot_delay()</span><br><span class="line">        self.screen_draw()</span><br><span class="line">        self.room_draw()</span><br><span class="line">        self.robot_draw()</span><br><span class="line">        self.line_draw()</span><br><span class="line">        pygame.display.update()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speed_up</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.speed &lt; <span class="number">0.1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.speed = self.speed - <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speed_down</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.speed = self.speed + <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># set background</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">screen_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.fill(self.backGround)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># line draw</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">line_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(self.w):</span><br><span class="line">            p1 = (x*self.sz,<span class="number">0</span>)</span><br><span class="line">            p2 = (x*self.sz, self.h*self.sz)</span><br><span class="line">            pygame.draw.line(self.screen, BLACK,p1, p2, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(self.h):</span><br><span class="line">            p1 = (<span class="number">0</span>,y*self.sz)</span><br><span class="line">            p2 = (self.w*self.sz, y*self.sz)</span><br><span class="line">            pygame.draw.line(self.screen, BLACK, p1, p2, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">rooms = [[<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>]]</span><br><span class="line">pos = (<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">rob = Robot(rooms,pos)</span><br><span class="line">rob.clean_room()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目-489-扫地机器人&quot;&gt;&lt;a href=&quot;#题目-489-扫地机器人&quot; class=&quot;headerlink&quot; title=&quot;题目 489. 扫地机器人&quot;&gt;&lt;/a&gt;题目 489. 扫地机器人&lt;/h2&gt;&lt;p&gt;房间（用格栅表示）中有一个扫地机器人。格栅中的每一个格子有空和障碍物两种可能。&lt;/p&gt;&lt;p&gt;扫地机器人提供4个API，可以向前进，向左转或者向右转。每次转弯90度。&lt;/p&gt;&lt;p&gt;当扫地机器人试图进入障碍物格子时，它的碰撞传感器会探测出障碍物，使它停留在原地。&lt;/p&gt;&lt;p&gt;请利用提供的4个API编写让机器人清理整个房间的算法。&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;Robot&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 若下一个方格为空，则返回true，并移动至该方格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 若下一个方格为障碍物，则返回false，并停留在原地&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;bool&lt;/span&gt;ean move();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 在调用turnLeft/turnRight后机器人会停留在原位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 每次转弯90度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt; turnLeft();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt; turnRight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 清理所在方格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt; clean();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;room = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;row = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;col = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解析:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;房间格栅用&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;或&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;填充。&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;表示障碍物，&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;表示可以通过。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;机器人从row=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;，col=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;的初始位置出发。在左上角的一行以下，三列以右。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;注意:&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://yoursite.com/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="pygame" scheme="http://yoursite.com/tags/pygame/"/>
    
  </entry>
  
  <entry>
    <title>【Pygame】 贪吃蛇</title>
    <link href="http://yoursite.com/2019/11/27/102/"/>
    <id>http://yoursite.com/2019/11/27/102/</id>
    <published>2019-11-27T05:24:52.082Z</published>
    <updated>2019-11-27T05:26:38.471Z</updated>
    
    <content type="html"><![CDATA[<p>最近在刷leetcode的时候，发现有几个涉及到游戏的题目，比较有意思，特别想把他们用界面能够展示出来，所以到网上搜了某个程序员github的源代码，然后照着改了一下，先把贪吃蛇这个小游戏做完成了，后续还会继续把扫地机器人这个小游戏用pygame做出来，模拟相关的算法来解题，我觉得还是挺有意思，用图形化的界面把游戏的过程展示出来.</p><a id="more"></a><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><h3 id="游戏功能"><a href="#游戏功能" class="headerlink" title="游戏功能"></a>游戏功能</h3><ol><li>设计的游戏的时候，把<code>snake</code>和<code>food</code>的逻辑全部剥离出来，跟游戏场景本身无关；</li><li>主要设计了两个类，一个为<code>snake</code>类，另一个为<code>game</code>类，<code>game</code>主要负责处理窗口初始化，刷新，键盘事件捕获，速度控制等等；<code>snake</code>全部独立与<code>game</code>,<code>snake</code>类全部负责蛇本身的行走，食物的处理逻辑.通过上下左右控制蛇的行走，通过+/-控制蛇的行走速度.</li><li>相关动画如下:<br><img src="http://q15r3bmu8.bkt.clouddn.com/102.gif" alt="1"><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">LIGHT = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">DARK = (<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>)      <span class="comment"># 蛇的颜色</span></span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)           <span class="comment"># 网格线颜色</span></span><br><span class="line">RED = (<span class="number">200</span>, <span class="number">30</span>, <span class="number">30</span>)         <span class="comment"># 红色，GAME OVER 的字体颜色</span></span><br><span class="line">BGCOLOR = (<span class="number">40</span>, <span class="number">40</span>, <span class="number">60</span>)      <span class="comment"># 背景色</span></span><br><span class="line">GAMEOVER = <span class="number">0</span></span><br><span class="line">GAMERUN = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,w,h)</span>:</span></span><br><span class="line">        self.speed = <span class="number">0.1</span></span><br><span class="line">        self.snake = [(<span class="number">0</span>,<span class="number">0</span>)]</span><br><span class="line">        self.body = set(self.snake)</span><br><span class="line">        self.head = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        self.direction = <span class="string">'R'</span></span><br><span class="line">        self.snakeColor = DARK</span><br><span class="line">        self.foodColor = RED</span><br><span class="line">        self.foods = set()</span><br><span class="line">        self.state = GAMERUN</span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">        self.w = w</span><br><span class="line">        self.h = h</span><br><span class="line">        <span class="comment">#initial add 10 foods</span></span><br><span class="line">        self.add_food()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_snake_color</span><span class="params">(self,rgb)</span>:</span></span><br><span class="line">        self.color = rgb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_snake_direction</span><span class="params">(self,dir)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (dir == <span class="string">'L'</span> <span class="keyword">and</span> self.direction == <span class="string">'R'</span>) <span class="keyword">or</span> \</span><br><span class="line">           (dir == <span class="string">'R'</span> <span class="keyword">and</span> self.direction == <span class="string">'L'</span>) <span class="keyword">or</span> \</span><br><span class="line">           (dir == <span class="string">'U'</span> <span class="keyword">and</span> self.direction == <span class="string">'D'</span>) <span class="keyword">or</span> \</span><br><span class="line">           (dir == <span class="string">'D'</span> <span class="keyword">and</span> self.direction == <span class="string">'U'</span>):</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.direction = dir</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.snake) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">snake_move</span><span class="params">(self)</span>:</span></span><br><span class="line">        d = &#123;<span class="string">"L"</span>:(<span class="number">0</span>,<span class="number">-1</span>),<span class="string">"R"</span>:(<span class="number">0</span>,<span class="number">1</span>),<span class="string">"U"</span>:(<span class="number">-1</span>,<span class="number">0</span>),<span class="string">"D"</span>:(<span class="number">1</span>,<span class="number">0</span>)&#125;</span><br><span class="line">        x = self.head[<span class="number">0</span>] + d[self.direction][<span class="number">0</span>]</span><br><span class="line">        y = self.head[<span class="number">1</span>] + d[self.direction][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span>  x &gt;= self.h <span class="keyword">or</span> y &gt;= self.w:</span><br><span class="line">            self.state = GAMEOVER</span><br><span class="line">            self.scroe = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        curr = (x,y)</span><br><span class="line">        self.head = (x,y)</span><br><span class="line">        self.snake.append(curr)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(self.foods) &gt; <span class="number">0</span> <span class="keyword">and</span> curr <span class="keyword">in</span> self.foods:</span><br><span class="line">            self.foods.remove(curr)</span><br><span class="line">            self.body.add(curr)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.body.remove(self.snake[<span class="number">0</span>])</span><br><span class="line">            self.snake.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> curr <span class="keyword">in</span> self.body:</span><br><span class="line">                self.state = GAMEOVER</span><br><span class="line">                self.scroe = <span class="number">-1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.body.add(curr)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(self.foods) == <span class="number">0</span>:</span><br><span class="line">            self.add_food()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len(self.snake)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_food</span><span class="params">(self)</span>:</span></span><br><span class="line">        nums = random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(nums):</span><br><span class="line">            self.foods.add(self.creat_food())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">creat_food</span><span class="params">(self)</span>:</span></span><br><span class="line">        food_x = random.randint(<span class="number">0</span>,self.h)</span><br><span class="line">        food_y = random.randint(<span class="number">0</span>,self.w)</span><br><span class="line">        <span class="keyword">while</span> (food_x, food_y) <span class="keyword">in</span> self.body <span class="keyword">or</span> (food_x, food_y)  <span class="keyword">in</span> self.foods:</span><br><span class="line">            <span class="comment"># 如果食物出现在蛇身上 ，则重来</span></span><br><span class="line">            food_x = random.randint(<span class="number">0</span>,self.w)</span><br><span class="line">            food_y = random.randint(<span class="number">0</span>,self.h)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (food_x,food_y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,w,h,sz = <span class="number">20</span>)</span>:</span></span><br><span class="line">        self.width = w</span><br><span class="line">        self.high = h</span><br><span class="line">        self.textHigh = <span class="number">2</span></span><br><span class="line">        self.sz = sz</span><br><span class="line">        self.line = <span class="number">1</span></span><br><span class="line">        self.backGround = BGCOLOR</span><br><span class="line">        self.snakeColor = DARK</span><br><span class="line">        self.foodColor = RED</span><br><span class="line">        self.textColor = RED</span><br><span class="line">        self.state = GAMERUN</span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">        self.speed = <span class="number">1.0</span></span><br><span class="line">        self.last_move_time = time.time()</span><br><span class="line">        self.snake = Snake(w,h-self.textHigh)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#init game</span></span><br><span class="line">        pygame.init()</span><br><span class="line">        self.screen = pygame.display.set_mode((w*sz, h*sz))</span><br><span class="line">        pygame.display.set_caption(<span class="string">'Gluttonous snake'</span>)</span><br><span class="line">        self.font1 = pygame.font.SysFont(<span class="string">'SimHei'</span>, <span class="number">24</span>)  <span class="comment"># 得分的字体</span></span><br><span class="line">        self.font2 = pygame.font.SysFont(<span class="string">'arial'</span>, <span class="number">72</span>)  <span class="comment"># GAME OVER 的字体</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">text_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        imgText = self.font1.render(<span class="string">f'speed: <span class="subst">&#123;int(<span class="number">1</span>/self.speed)&#125;</span>'</span>,<span class="literal">True</span>,pygame.Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">        self.screen.blit(imgText,(<span class="number">160</span>,<span class="number">10</span>))</span><br><span class="line">        imgText = self.font1.render(<span class="string">f'score: <span class="subst">&#123;self.score&#125;</span>'</span>,<span class="literal">True</span>,pygame.Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">        self.screen.blit(imgText,(self.width*self.sz<span class="number">-160</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen_draw()</span><br><span class="line">        self.snake_draw()</span><br><span class="line">        self.food_draw()</span><br><span class="line">        self.line_draw()</span><br><span class="line">        self.text_draw()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speed_up</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.speed &lt; <span class="number">0.1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.speed = self.speed - <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speed_down</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.speed = self.speed + <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># set background</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">screen_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.fill(self.backGround)        </span><br><span class="line"></span><br><span class="line">    <span class="comment"># set snake</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">snake_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x,y <span class="keyword">in</span> self.snake.body:</span><br><span class="line">            pygame.draw.rect(self.screen,self.snakeColor,(y*self.sz,(x+self.textHigh)*self.sz,self.sz,self.sz),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># line draw</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">line_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        pygame.draw.rect(self.screen,LIGHT,(<span class="number">0</span>,<span class="number">0</span>,self.width*self.sz,self.textHigh*self.sz),<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(self.width):</span><br><span class="line">            p1 = (x*self.sz,self.textHigh*self.sz)</span><br><span class="line">            p2 = (x*self.sz, self.high*self.sz)</span><br><span class="line">            pygame.draw.line(self.screen, BLACK,p1, p2, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(self.textHigh,self.high):</span><br><span class="line">            p1 = (<span class="number">0</span>,y*self.sz)</span><br><span class="line">            p2 = (self.width*self.sz, y*self.sz)</span><br><span class="line">            pygame.draw.line(self.screen, BLACK, p1, p2, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set food</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">food_draw</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> (x,y) <span class="keyword">in</span> self.snake.foods:</span><br><span class="line">            pygame.draw.rect(self.screen,self.foodColor,(y*self.sz,(x+self.textHigh)*self.sz,self.sz,self.sz),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set screen</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">scree_update</span><span class="params">(self)</span>:</span></span><br><span class="line">        pygame.display.update()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game_over</span><span class="params">(self)</span>:</span></span><br><span class="line">        imgText = self.font2.render(<span class="string">f'game over'</span>,<span class="literal">True</span>,pygame.Color(<span class="number">200</span>,<span class="number">30</span>,<span class="number">30</span>))</span><br><span class="line">        self.screen.blit(imgText,(self.width/<span class="number">2</span>*self.sz<span class="number">-100</span>,self.high/<span class="number">2</span>*self.sz))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.game_draw()</span><br><span class="line">            self.scree_update()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">                <span class="keyword">if</span> event.type == QUIT:</span><br><span class="line">                    sys.exit()</span><br><span class="line">                <span class="keyword">elif</span> event.type == KEYDOWN:</span><br><span class="line">                    <span class="keyword">if</span> event.key <span class="keyword">in</span> (K_w, K_UP):</span><br><span class="line">                        self.snake.set_snake_direction(<span class="string">'U'</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key <span class="keyword">in</span> (K_s, K_DOWN):</span><br><span class="line">                        self.snake.set_snake_direction(<span class="string">'D'</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key <span class="keyword">in</span> (K_a, K_LEFT):</span><br><span class="line">                        self.snake.set_snake_direction(<span class="string">'L'</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key <span class="keyword">in</span> (K_d, K_RIGHT):</span><br><span class="line">                        self.snake.set_snake_direction(<span class="string">'R'</span>)</span><br><span class="line">                    <span class="keyword">elif</span> event.key <span class="keyword">in</span> (K_PLUS, K_EQUALS):</span><br><span class="line">                        self.speed_up()</span><br><span class="line">                    <span class="keyword">elif</span> event.key <span class="keyword">in</span> (K_MINUS,K_UNDERSCORE):</span><br><span class="line">                        self.speed_down()</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> self.state <span class="keyword">is</span> <span class="keyword">not</span> GAMEOVER:</span><br><span class="line">                curTime = time.time()</span><br><span class="line">                <span class="keyword">if</span> curTime - self.last_move_time &gt; self.speed:</span><br><span class="line">                    res = self.snake.snake_move()</span><br><span class="line">                    <span class="keyword">if</span> res &lt; <span class="number">0</span>:</span><br><span class="line">                        self.state = GAMEOVER</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        self.last_move_time = curTime</span><br><span class="line">                        self.score = res </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.state == GAMEOVER:</span><br><span class="line">                self.game_over()</span><br><span class="line">                self.scree_update()</span><br><span class="line"></span><br><span class="line">game = Game(<span class="number">40</span>,<span class="number">30</span>)</span><br><span class="line">game.run()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在刷leetcode的时候，发现有几个涉及到游戏的题目，比较有意思，特别想把他们用界面能够展示出来，所以到网上搜了某个程序员github的源代码，然后照着改了一下，先把贪吃蛇这个小游戏做完成了，后续还会继续把扫地机器人这个小游戏用pygame做出来，模拟相关的算法来解题，我觉得还是挺有意思，用图形化的界面把游戏的过程展示出来.&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://yoursite.com/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="pygame" scheme="http://yoursite.com/tags/pygame/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 Block Queue</title>
    <link href="http://yoursite.com/2019/11/25/101/"/>
    <id>http://yoursite.com/2019/11/25/101/</id>
    <published>2019-11-25T08:52:24.502Z</published>
    <updated>2019-11-26T00:55:18.105Z</updated>
    
    <content type="html"><![CDATA[<ol><li>看了题目的解答才晓得怎么做，关键在于如何设计;</li><li>两个queue，一个queue用来存储即将需要进行请求的URL集合，另一个queue存储一个URL请求后的结果，主线程从queue中取出请求的结果进行保存;</li><li>由于<code>python</code>自带的<code>queue</code>本身为<code>block queue</code>,所以很容易想到用<code>queue</code>来解决;</li><li>关键点在于判断何时线程进行退出，用一个变量来进行统计确认，类似于生产消费的统计;</li></ol><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># """</span></span><br><span class="line"><span class="comment"># This is HtmlParser's API interface.</span></span><br><span class="line"><span class="comment"># You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"># """</span></span><br><span class="line"><span class="comment">#class HtmlParser(object):</span></span><br><span class="line"><span class="comment">#    def getUrls(self, url):</span></span><br><span class="line"><span class="comment">#        """</span></span><br><span class="line"><span class="comment">#        :type url: str</span></span><br><span class="line"><span class="comment">#        :rtype List[str]</span></span><br><span class="line"><span class="comment">#        """</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self, startUrl: str, htmlParser: <span class="string">'HtmlParser'</span>)</span> -&gt; List[str]:</span></span><br><span class="line">        domain = urlsplit(startUrl).netloc</span><br><span class="line">        requestQueue = queue.Queue()</span><br><span class="line">        resultQueue = queue.Queue()</span><br><span class="line">        requestQueue.put(startUrl)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            t = threading.Thread(target=self._crawl, </span><br><span class="line">                args=(domain, htmlParser, requestQueue, resultQueue))</span><br><span class="line">            t.daemon = <span class="literal">True</span></span><br><span class="line">            t.start()</span><br><span class="line">        running = <span class="number">1</span></span><br><span class="line">        visited = set([startUrl])</span><br><span class="line">        <span class="keyword">while</span> running &gt; <span class="number">0</span>:</span><br><span class="line">            urls = resultQueue.get()</span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">                <span class="keyword">if</span> url <span class="keyword">in</span> visited:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                visited.add(url)</span><br><span class="line">                requestQueue.put(url)</span><br><span class="line">                running += <span class="number">1</span></span><br><span class="line">            running -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> list(visited)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_crawl</span><span class="params">(self, domain, htmlParser, requestQueue, resultQueue)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            url = requestQueue.get()</span><br><span class="line">            urls = htmlParser.getUrls(url)</span><br><span class="line">            newUrls = []</span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">                u = urlsplit(url)</span><br><span class="line">                <span class="keyword">if</span> u.netloc == domain:</span><br><span class="line">                    newUrls.append(url)</span><br><span class="line">            resultQueue.put(newUrls)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>template <typename t></typename></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockingQueue</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  BlockingQueue() : head_(<span class="keyword">new</span> Node), tail_(head_) &#123;&#125;</span><br><span class="line">  ~BlockingQueue() &#123; <span class="keyword">delete</span> tail_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">const</span> T&amp; value)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lk(tail_mutex_);</span><br><span class="line">    tail_-&gt;value = value;</span><br><span class="line">    PushNewTail();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T&amp; <span class="title">Push</span><span class="params">(T&amp;&amp; value)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lk(tail_mutex_);</span><br><span class="line">    tail_-&gt;value = <span class="built_in">std</span>::move(value);</span><br><span class="line">    PushNewTail();</span><br><span class="line">    <span class="keyword">return</span> tail_-&gt;value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">TryPop</span><span class="params">(T&amp; value)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lk(head_mutex_);</span><br><span class="line">    <span class="keyword">if</span> (head_ == GetTail()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node* old_head = head_;</span><br><span class="line">    value = <span class="built_in">std</span>::move(old_head-&gt;value);</span><br><span class="line">    head_ = old_head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> old_head;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">Pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lk(head_mutex_);</span><br><span class="line">    cond_var_.wait(lk, [<span class="keyword">this</span>] &#123; <span class="keyword">return</span> head_ != GetTail(); &#125;);</span><br><span class="line"></span><br><span class="line">    Node* old_head = head_;</span><br><span class="line">    T value = <span class="built_in">std</span>::move(old_head-&gt;value);</span><br><span class="line">    head_ = old_head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> old_head;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;T&gt; PopFor(<span class="keyword">int</span> millisec) &#123;</span><br><span class="line">    <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lk(head_mutex_);</span><br><span class="line">    cond_var_.wait_for(lk, <span class="built_in">std</span>::chrono::milliseconds(millisec),</span><br><span class="line">                       [<span class="keyword">this</span>] &#123; <span class="keyword">return</span> head_ != GetTail(); &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head_ == GetTail()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node* old_head = head_;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;T&gt; value = <span class="built_in">std</span>::make_shared&lt;T&gt;(<span class="built_in">std</span>::move(old_head-&gt;value));</span><br><span class="line">    head_ = old_head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> old_head;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lk(head_mutex_);</span><br><span class="line">    <span class="keyword">return</span> head_ == GetTail();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PushNewTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node* new_tail = <span class="keyword">new</span> Node;</span><br><span class="line">    tail_-&gt;next = new_tail;</span><br><span class="line">    tail_ = new_tail;</span><br><span class="line">    cond_var_.notify_one();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">Node* <span class="title">GetTail</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lk(tail_mutex_);</span><br><span class="line">    <span class="keyword">return</span> tail_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    T value;</span><br><span class="line">    Node* next;</span><br><span class="line"></span><br><span class="line">    Node() &#123;&#125;</span><br><span class="line">    Node(<span class="keyword">const</span> T&amp; v) : value(v), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    Node(T&amp;&amp; v) : value(<span class="built_in">std</span>::move(v)), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::mutex head_mutex_;</span><br><span class="line">  <span class="keyword">mutable</span> <span class="built_in">std</span>::mutex tail_mutex_;</span><br><span class="line">  <span class="built_in">std</span>::condition_variable cond_var_;</span><br><span class="line">  Node* head_;</span><br><span class="line">  Node* tail_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; crawl(<span class="built_in">std</span>::<span class="built_in">string</span> start_url,</span><br><span class="line">                                 HtmlParser html_parser) &#123;</span><br><span class="line">    BlockingQueue&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; request_queue;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> host_name = GetHostName(start_url);</span><br><span class="line">    request_queue.Push(start_url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">std</span>::thread::hardware_concurrency();</span><br><span class="line">    <span class="built_in">std</span>::thread* threads[len];</span><br><span class="line">    <span class="keyword">int</span> running_mask = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::mutex mutex;</span><br><span class="line">    <span class="built_in">std</span>::condition_variable cond;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      <span class="built_in">std</span>::thread* t = <span class="keyword">new</span> <span class="built_in">std</span>::thread([&amp;, i, <span class="keyword">this</span>] &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lk(mutex);</span><br><span class="line">          cond.wait(</span><br><span class="line">              lk, [&amp;] &#123; <span class="keyword">return</span> !request_queue.Empty() || running_mask == <span class="number">0</span>; &#125;);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (running_mask == <span class="number">0</span> &amp;&amp; request_queue.Empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">std</span>::<span class="built_in">string</span> url = request_queue.Pop();</span><br><span class="line">          running_mask |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">          lk.unlock();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (GetHostName(url) == host_name &amp;&amp; TryInsertURL(url)) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; urls = html_parser.getUrls(url);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">string</span>&amp; sub_url : urls) &#123;</span><br><span class="line">              request_queue.Push(sub_url);</span><br><span class="line">              cond.notify_one();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          lk.lock();</span><br><span class="line">          running_mask &amp;= !(<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">          <span class="keyword">if</span> (running_mask == <span class="number">0</span> &amp;&amp; request_queue.Empty()) &#123;</span><br><span class="line">            cond.notify_all();</span><br><span class="line">          &#125;</span><br><span class="line">          lk.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      threads[i] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      threads[i]-&gt;join();</span><br><span class="line">      <span class="keyword">delete</span> threads[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; url : url_set_) &#123;</span><br><span class="line">      res.push_back(url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">GetHostName</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; url)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> parsed_url = url.substr(<span class="number">7</span>, url.size() - <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">int</span> index = parsed_url.find_first_of(<span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">return</span> index &gt; <span class="number">0</span> ? parsed_url.substr(<span class="number">0</span>, index) : parsed_url;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">TryInsertURL</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; url)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lk(url_set_mutex_);</span><br><span class="line">    <span class="keyword">if</span> (url_set_.find(url) != url_set_.end()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    url_set_.insert(url);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">unordered_set</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; url_set_;</span><br><span class="line">  <span class="built_in">std</span>::mutex url_set_mutex_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;看了题目的解答才晓得怎么做，关键在于如何设计;&lt;/li&gt;
&lt;li&gt;两个queue，一个queue用来存储即将需要进行请求的URL集合，另一个queue存储一个URL请求后的结果，主线程从queue中取出请求的结果进行保存;&lt;/li&gt;
&lt;li&gt;由于&lt;code&gt;python&lt;/code&gt;自带的&lt;code&gt;queue&lt;/code&gt;本身为&lt;code&gt;block queue&lt;/code&gt;,所以很容易想到用&lt;code&gt;queue&lt;/code&gt;来解决;&lt;/li&gt;
&lt;li&gt;关键点在于判断何时线程进行退出，用一个变量来进行统计确认，类似于生产消费的统计;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】概率题</title>
    <link href="http://yoursite.com/2019/11/25/91/"/>
    <id>http://yoursite.com/2019/11/25/91/</id>
    <published>2019-11-25T01:24:34.439Z</published>
    <updated>2019-10-29T02:51:30.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个盒子中总共有m个白球，每隔1分钟从盒子中取1个球，如果发现取出的球为白色，则将白球染成红色，然后将球放进盒子中，如果取出的红球，则直接将红球放回去。求在多少分钟内盒子中的所有的球都变为红色的期望。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>该题为概率题，分为以下情况。假设在第<code>t</code>分钟时，盒子中有<code>n</code>个球为红球，则<code>t+1</code>分钟的时候，取出的球为白色的概率为</p><a id="more"></a><script type="math/tex; mode=display">f(t,n) = f(t-1,n-1)\frac{m-n+1}{m} + f(t-1,n)\frac{n}{m}</script><p>根据动态规划的递归公式可以很块的求出期望；</p><script type="math/tex; mode=display">E(t) = \sum_{i=m}^{\infty}f(i,m)*i</script><p>但是如何计算概率，需要通过数学递推公式来计算。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;一个盒子中总共有m个白球，每隔1分钟从盒子中取1个球，如果发现取出的球为白色，则将白球染成红色，然后将球放进盒子中，如果取出的红球，则直接将红球放回去。求在多少分钟内盒子中的所有的球都变为红色的期望。&lt;/p&gt;&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;该题为概率题，分为以下情况。假设在第&lt;code&gt;t&lt;/code&gt;分钟时，盒子中有&lt;code&gt;n&lt;/code&gt;个球为红球，则&lt;code&gt;t+1&lt;/code&gt;分钟的时候，取出的球为白色的概率为&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】159周比赛</title>
    <link href="http://yoursite.com/2019/11/25/86/"/>
    <id>http://yoursite.com/2019/11/25/86/</id>
    <published>2019-11-25T01:24:34.436Z</published>
    <updated>2019-11-25T02:33:17.463Z</updated>
    
    <content type="html"><![CDATA[<h3 id="159周比赛"><a href="#159周比赛" class="headerlink" title="159周比赛"></a>159周比赛</h3><p>今天时间太紧张了，时间根本不够用。两道题目的目标没有达成。</p><h2 id="5230-缀点成线"><a href="#5230-缀点成线" class="headerlink" title="5230. 缀点成线"></a>5230. 缀点成线</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在一个 XY 坐标系中有一些点，我们用数组 coordinates 来分别记录它们的坐标，其中 coordinates[i] = [x, y] 表示横坐标为 x、纵坐标为 y 的点。</p><p>请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 <font color="#c7254e" face="Menlo, Monaco, Consolas, Courier New, monospace">true</font>，否则请返回 <font color="#c7254e" face="Menlo, Monaco, Consolas, Courier New, monospace">false</font>。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coordinates = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">6</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coordinates = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> &lt;= coordinates.length &lt;= <span class="number">1000</span></span><br><span class="line">coordinates[i].length == <span class="number">2</span></span><br><span class="line"><span class="number">-10</span>^<span class="number">4</span> &lt;= coordinates[i][<span class="number">0</span>], coordinates[i][<span class="number">1</span>] &lt;= <span class="number">10</span>^<span class="number">4</span></span><br><span class="line">coordinates 中不含重复的点</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/check-if-it-is-a-straight-line" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-if-it-is-a-straight-line</a>                </p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 给定点的集合是否在一条直线上</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>依次比较相邻三个点构成的斜率是否相等，因为相邻的两个点有公共的交点，如果斜率相等，则认为其在一条直线上。</li><li>由于可能存在斜率无限大的情况，这时我们避免用除法，斜率用<code>(x,y)</code>表示，如果两个斜率相等则可以用等式判断<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 代码</span><br><span class="line">c++</span><br></pre></td></tr></table></figure>class Solution {<br>public:<br> bool checkStraightLine(vector<vector<int>&gt;&amp; coordinates) {<pre><code> int n = coordinates.size();          int x = coordinates[1][0] - coordinates[0][0];  int y = coordinates[1][1] - coordinates[0][1]; </code></pre></vector<int></li></ol></blockquote><pre><code>    for(int i = 1; i &lt; n; ++i){        int x1 = coordinates[i][0] - coordinates[i-1][0];         int y1 = coordinates[i][1] - coordinates[i-1][1];         if(y1*x != x1*y){            return false;        }    }    return true;}</code></pre><p>};<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## 5231. 删除子文件夹</span></span><br><span class="line"><span class="comment">### 题目</span></span><br><span class="line">你是一位系统管理员，手里有一份文件夹列表 <span class="built_in">folder</span>，你的任务是要删除该列表中的所有 子文件夹，并以 任意顺序 返回剩下的文件夹。</span><br><span class="line"></span><br><span class="line">我们这样定义「子文件夹」：</span><br><span class="line"></span><br><span class="line">如果文件夹 <span class="built_in">folder</span>[i] 位于另一个文件夹 <span class="built_in">folder</span>[j] 下，那么 <span class="built_in">folder</span>[i] 就是 <span class="built_in">folder</span>[j] 的子文件夹。</span><br><span class="line">文件夹的「路径」是由一个或多个按以下格式串联形成的字符串：</span><br><span class="line"></span><br><span class="line">/ 后跟一个或者多个小写英文字母。</span><br><span class="line">例如，/leetcode 和 /leetcode/problems 都是有效的路径，而空字符串和 / 不是。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br></pre></td></tr></table></figure><br>输入：folder = [“/a”,”/a/b”,”/c/d”,”/c/d/e”,”/c/f”]<br>输出：[“/a”,”/c/d”,”/c/f”]<br>解释：”/a/b/“ 是 “/a” 的子文件夹，而 “/c/d/e” 是 “/c/d” 的子文件夹。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><br>输入：folder = [“/a”,”/a/b/c”,”/a/b/d”]<br>输出：[“/a”]<br>解释：文件夹 “/a/b/c” 和 “/a/b/d/“ 都会被删除，因为它们都是 “/a” 的子文件夹。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">3</span>：</span><br></pre></td></tr></table></figure><br>输入：folder = [“/a/b/c”,”/a/b/d”,”/a/b/ca”]<br>输出：[“/a/b/c”,”/a/b/ca”,”/a/b/d”]<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 地址</span><br><span class="line"><span class="attribute">https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem</span></span><br><span class="line">### 题意</span><br><span class="line">&gt;  删除子文件夹</span><br><span class="line">### 思路</span><br><span class="line">1. 本题首先看到题目可以用trie树来解决，仔细分析一下，题目中明确说明了全部为小写字母和'\',也比平常的trie树多了一个字符而已；</span><br><span class="line">2. 将文件夹名称按照字典序进行排序，这样保证根文件夹最先插入到字典树中，这样我们就可以保证子文件在进行查询时，能够判断是否存在父文件夹。</span><br><span class="line">3. 利用trie的特性，标记每个文件夹的结束。当进行插入操作时，发现当前遇到的前缀中存在文件夹时，则这时认为当前的文件为子文件，需要进行删除。</span><br><span class="line">### 代码</span><br></pre></td></tr></table></figure><br>cstruct TrieNode{<br>    bool isfolder;<br>    TrieNode * next[27];<br>    TrieNode(){<br>        this-&gt;isfolder = false;<br>        for(int i = 0;i &lt; 27; ++i){<br>            this-&gt;next[i] = NULL;<br>        }<br>    }<br>};</p><p>bool insertTrie(TrieNode * root,string word){<br>    if(!root){<br>        return false;<br>    }</p><pre><code>TrieNode * node = root;for(auto c : word){    if(c == &#39;/&#39;){        if(!node-&gt;next[26]){            node-&gt;next[26] = new TrieNode();        }        node = node-&gt;next[26];     }else{        if(!node-&gt;next[c-&#39;a&#39;]){            node-&gt;next[c-&#39;a&#39;] = new TrieNode();        }        node = node-&gt;next[c-&#39;a&#39;];    }}node-&gt;isfolder = true;return true;</code></pre><p>}</p><p>bool isSubFolder(TrieNode * root,string folder){<br>    if(!root){<br>        return false;<br>    }</p><pre><code>TrieNode * node = root;for(int i = 0;i &lt; folder.size(); ++i){    if(folder[i] == &#39;/&#39;){        if(!node-&gt;next[26]){            return false;        }        node = node-&gt;next[26];     }else{        if(!node-&gt;next[folder[i]-&#39;a&#39;]){            return false;        }        node = node-&gt;next[folder[i]-&#39;a&#39;];    }    if(node-&gt;isfolder &amp;&amp; folder[i+1] == &#39;/&#39;){        return true;    }}return false;</code></pre><p>}</p><p>class Solution {<br>public:<br>    vector<string> removeSubfolders(vector<string>&amp; folder) {<br>        vector<string> res;<br>        sort(folder.begin(),folder.end());</string></string></string></p><pre><code>    TrieNode * root = new TrieNode();    for(auto s : folder){        if(!isSubFolder(root,s)){            res.push_back(s);            insertTrie(root,s);        }    }    return res;}</code></pre><p>};</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 5232. 替换子串得到平衡字符串</span><br><span class="line">### 题目</span><br><span class="line">有一个只含有 'Q', 'W', 'E', 'R' 四种字符，且长度为 n 的字符串。</span><br><span class="line"></span><br><span class="line">假如在该字符串中，这四个字符都恰好出现 n/4 次，那么它就是一个「平衡字符串」。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">给你一个这样的字符串 s，请通过「替换子串」的方式，使原字符串 s 变成一个「平衡字符串」。</span><br><span class="line"></span><br><span class="line">你可以用和「待替换子串」长度相同的 任何 其他字符串来完成替换。</span><br><span class="line"></span><br><span class="line">请返回待替换子串的最小可能长度。</span><br><span class="line"></span><br><span class="line">如果原字符串自身就是一个平衡字符串，则返回 0。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br></pre></td></tr></table></figure><p>输入：s = “QWER”<br>输出：0<br>解释：s 已经是平衡的了。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><br>输入：s = “QQWE”<br>输出：1<br>解释：我们需要把一个 ‘Q’ 替换成 ‘R’，这样得到的 “RQWE” (或 “QRWE”) 是平衡的。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">3</span>：</span><br></pre></td></tr></table></figure><br>输入：s = “QQQW”<br>输出：2<br>解释：我们可以把前面的 “QQ” 替换成 “ER”。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">4</span>：</span><br></pre></td></tr></table></figure><br>输入：s = “QQQQ”<br>输出：3<br>解释：我们可以替换后 3 个 ‘Q’，使 s = “QWER”。<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 地址</span><br><span class="line"><span class="attribute">https://leetcode-cn.com/problems/replace-the-substring-for-balanced-string</span></span><br><span class="line">### 题意</span><br><span class="line">&gt;  滑动窗口</span><br><span class="line">### 思路</span><br><span class="line">1. 这个题目非常不错且非常典型的滑动窗口.</span><br><span class="line">2. 我们通过滑动窗口，保证在窗口外部的字符串统计数字都小于平均数，通过双指针算法进行逐步扩展即可。</span><br><span class="line">### 代码</span><br><span class="line"><span class="attribute">c++</span></span><br></pre></td></tr></table></figure><br>class Solution {<br>public:<br>    int balancedString(string s) {<br>        int n = s.size();<br>        int aver = n/4;<br>        int res = n;<br>        unordered_map<char,int> cnt;<br>        for(int i = 0; i &lt; s.size(); ++i){<br>            cnt[s[i]]++;<br>        }</char,int></p><pre><code>    bool balance = true;    for(auto c : cnt){        if(c.second &gt; aver){            balance = false;        }    }    if(balance){        return 0;    }    int l = 0;    int r = 0;    for(r = 0 ; r &lt; n; ++r){        cnt[s[r]]--;        while(l &lt; n &amp;&amp; l &lt;= r &amp;&amp;               cnt[&#39;Q&#39;] &lt;= aver&amp;&amp; \               cnt[&#39;W&#39;] &lt;= aver&amp;&amp; \               cnt[&#39;E&#39;] &lt;= aver&amp;&amp; \               cnt[&#39;R&#39;] &lt;= aver){               res = min(res,r-l+1);               cnt[s[l]]++;               l++;                   }    }    return res;}</code></pre><p>};<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## <span class="number">5233.</span> 规划兼职工作</span><br><span class="line">### 题目</span><br><span class="line">你打算利用空闲时间来做兼职工作赚些零花钱。</span><br><span class="line"></span><br><span class="line">这里有 n 份兼职工作，每份工作预计从 startTime[i] 开始到 endTime[i] 结束，报酬为 profit[i]。</span><br><span class="line"></span><br><span class="line">给你一份兼职工作表，包含开始时间 startTime，结束时间 endTime 和预计报酬 profit 三个数组，请你计算并返回可以获得的最大报酬。</span><br><span class="line"></span><br><span class="line">注意，时间上出现重叠的 <span class="number">2</span> 份工作不能同时进行。</span><br><span class="line"></span><br><span class="line">如果你选择的工作在时间 X 结束，那么你可以立刻进行在时间 X 开始的下一份工作。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br></pre></td></tr></table></figure></p><p>输入：startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]<br>输出：120<br>解释：<br>我们选出第 1 份和第 4 份工作，<br>时间范围是 [1-3]+[3-6]，共获得报酬 120 = 50 + 70。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure></p><p>输入：startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]<br>输出：150<br>解释：<br>我们选择第 1，4，5 份工作。<br>共获得报酬 150 = 20 + 70 + 60。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">3</span>：</span><br></pre></td></tr></table></figure><br>输入：startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]<br>输出：6<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 地址</span><br><span class="line"><span class="title">https:</span>//leetcode-cn.com/problems/maximum-profit-in-job-scheduling</span><br><span class="line">### 题意</span><br><span class="line">&gt;  动态规划</span><br><span class="line">### 思路</span><br><span class="line"><span class="number">1</span>. 按照开始时间的大小进行排序,开始时间大的在前面,并且收益高的工作排序在前；</span><br><span class="line"><span class="number">2</span>. 设置动态规划递推公式```dp[t]```,代表从时间```t```开始工作能够取得的最大收益.</span><br><span class="line"><span class="number">3</span>. 递推公式如下,对于工作```i```花费的时间为```job[i]```,取得收益为```profit[i]```,则递推公式为:</span><br><span class="line">```dp[t] = max(dp[t],dp[t-job[i]] + profit[i])```.</span><br><span class="line"><span class="number">4</span>. 可以利用TreeMap的特性，进行二分查找，总的时间复杂度为O(nlgn).</span><br><span class="line">### 代码</span><br><span class="line">c++</span><br></pre></td></tr></table></figure><br>static bool cmp(vector<int> &amp; a,vector<int> &amp;b){<br>    if(a[0] == b[0]){<br>        return a[2] &gt; b[2];<br>    }</int></int></p><pre><code>return a[0] &gt; b[0];</code></pre><p>}</p><p>class Solution {<br>public:<br>    int jobScheduling(vector<int>&amp; startTime, vector<int>&amp; endTime, vector<int>&amp; profit) {<br>        int n = startTime.size();<br>        int res = 0;<br>        vector<vector<int>&gt; work(n);<br>        map<int,int> dp;</int,int></vector<int></int></int></int></p><pre><code>    for(int i = 0;i &lt; n; ++i){        work[i].push_back(startTime[i]);        work[i].push_back(endTime[i]);        work[i].push_back(profit[i]);    }    /*start time sort*/    sort(work.begin(),work.end(),cmp);    /*dp*/    for(int i = 0; i &lt; n; ++i){        auto it1 = dp.lower_bound(work[i][0]);        auto it2 = dp.lower_bound(work[i][1]);        if(it1 != dp.end()){            dp[work[i][0]] = max(it1-&gt;second,work[i][2]);        }        if(it2 != dp.end()){            dp[work[i][0]] = max(dp[work[i][0]],it2-&gt;second+work[i][2]);        }        dp[work[i][0]] = max(work[i][2],dp[work[i][0]]);        res = max(res,dp[work[i][0]]);    }    return res;}</code></pre><p>};<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">另外附上lee215的解答，需要仔细的消化和吸收.</span><br></pre></td></tr></table></figure><br>def jobScheduling(self, startTime, endTime, profit):<br>        jobs = sorted(zip(startTime, endTime, profit), key=lambda v: v[1])<br>        dp = [[0, 0]]<br>        for s, e, p in jobs:<br>            i = bisect.bisect(dp, [s + 1]) - 1<br>            if dp[i][1] + p &gt; dp[-1][1]:<br>                dp.append([e, dp[i][1] + p])<br>        return dp[-1][1]<br>```</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;159周比赛&quot;&gt;&lt;a href=&quot;#159周比赛&quot; class=&quot;headerlink&quot; title=&quot;159周比赛&quot;&gt;&lt;/a&gt;159周比赛&lt;/h3&gt;&lt;p&gt;今天时间太紧张了，时间根本不够用。两道题目的目标没有达成。&lt;/p&gt;&lt;h2 id=&quot;5230-缀点成线&quot;&gt;&lt;a href=&quot;#5230-缀点成线&quot; class=&quot;headerlink&quot; title=&quot;5230. 缀点成线&quot;&gt;&lt;/a&gt;5230. 缀点成线&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;在一个 XY 坐标系中有一些点，我们用数组 coordinates 来分别记录它们的坐标，其中 coordinates[i] = [x, y] 表示横坐标为 x、纵坐标为 y 的点。&lt;/p&gt;&lt;p&gt;请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 &lt;font color=&quot;#c7254e&quot; face=&quot;Menlo, Monaco, Consolas, Courier New, monospace&quot;&gt;true&lt;/font&gt;，否则请返回 &lt;font color=&quot;#c7254e&quot; face=&quot;Menlo, Monaco, Consolas, Courier New, monospace&quot;&gt;false&lt;/font&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】11周双周比赛</title>
    <link href="http://yoursite.com/2019/11/25/84/"/>
    <id>http://yoursite.com/2019/11/25/84/</id>
    <published>2019-11-25T01:24:34.436Z</published>
    <updated>2019-11-25T03:17:47.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="11周双周比赛"><a href="#11周双周比赛" class="headerlink" title="11周双周比赛"></a>11周双周比赛</h3><p>今天时间太紧张了，时间根本不够用。两道题目的目标没有达成。</p><h2 id="5088-等差数列中缺失的数字"><a href="#5088-等差数列中缺失的数字" class="headerlink" title="5088. 等差数列中缺失的数字"></a>5088. 等差数列中缺失的数字</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>有一个数组，其中的值符合等差数列的数值规律，也就是说：</p><p>在 0 &lt;= i &lt; arr.length - 1 的前提下，arr[i+1] - arr[i] 的值都相等。<br>我们会从该数组中删除一个 既不是第一个 也 不是最后一个的值，得到一个新的数组  arr。</p><a id="more"></a><p>给你这个缺值的数组 arr，请你帮忙找出被删除的那个数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line">输出：<span class="number">9</span></span><br><span class="line">解释：原来的数组是 [<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>]。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">15</span>,<span class="number">13</span>,<span class="number">12</span>]</span><br><span class="line">输出：<span class="number">14</span></span><br><span class="line">解释：原来的数组是 [<span class="number">15</span>,<span class="number">14</span>,<span class="number">13</span>,<span class="number">12</span>]。</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/missing-number-in-arithmetic-progression" target="_blank" rel="noopener">https://leetcode-cn.com/problems/missing-number-in-arithmetic-progression</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 寻找等差序列中缺失的一个数</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>此题比较简单，寻找等差序列中缺少的关键数字；</li><li><p>先求出等差序列的等差<code>add = (arr[n-1] - arr[0])/n</code>,如果发现当前数字减去序列中的前一个数字与等差不相等，则表明该数字之前缺失一个数，缺失的数字为</p><figure class="highlight plain"><figcaption><span>+ add```.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 代码</span><br><span class="line">c++</span><br></pre></td></tr></table></figure><p>class Solution {<br>public:<br> int missingNumber(vector<int>&amp; arr) {</int></p><pre><code> int n = arr.size(); int add = (arr[n-1] - arr[0])/n; for(int i = 1; i &lt; n; ++i){     if(arr[i] - arr[i-1] != add){         return arr[i-1] + add;     } } return 0;</code></pre><p> }<br>};</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## 5089. 安排会议日程</span></span><br><span class="line"><span class="comment">### 题目</span></span><br><span class="line">你是一名行政助理，手里有两位客户的空闲时间表：slots1 和 slots2，以及会议的预计持续时间 duration，请你为他们安排合适的会议时间。</span><br><span class="line"></span><br><span class="line">「会议时间」是两位客户都有空参加，并且持续时间能够满足预计时间 duration 的 最早的时间间隔。</span><br><span class="line"></span><br><span class="line">如果没有满足要求的会议时间，就请返回一个 空数组。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">「空闲时间」的格式是 [start, end]，由开始时间 start 和结束时间 <span class="keyword">end</span> 组成，表示从 start 开始，到 <span class="keyword">end</span> 结束。 </span><br><span class="line"></span><br><span class="line">题目保证数据有效：同一个人的空闲时间不会出现交叠的情况，也就是说，对于同一个人的两个空闲时间 [start1, <span class="keyword">end</span>1] 和 [start2, <span class="keyword">end</span>2]，要么 start1 &gt; <span class="keyword">end</span>2，要么 start2 &gt; <span class="keyword">end</span>1。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">示例 <span class="number">1</span>：</span><br></pre></td></tr></table></figure><p>输入：slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8<br>输出：[60,68]</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><p>输入：slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12<br>输出：[]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提示：</span><br></pre></td></tr></table></figure><p>1 &lt;= slots1.length, slots2.length &lt;= 10^4<br>slots1[i].length, slots2[i].length == 2<br>slots1[i][0] &lt; slots1[i][1]<br>slots2[i][0] &lt; slots2[i][1]<br>0 &lt;= slots1[i][j], slots2[i][j] &lt;= 10^9<br>1 &lt;= duration &lt;= 10^6 </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 地址</span><br><span class="line"><span class="attribute">https://leetcode-cn.com/problems/meeting-scheduler</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">### 题意</span><br><span class="line">&gt;  本质求区间的相交区域能够满足题目要求</span><br><span class="line"></span><br><span class="line">### 思路</span><br><span class="line">1. 双指针问题，求两个区域中是否有相交的区间，如果存在相交的区间则判断是否存在能够满足题目要求的空间；</span><br><span class="line">2. 每次最左侧的区域指针加1，如果两个区域的截止时间一样，则同时进行加1操作，双指针进行交替叠加。</span><br><span class="line"></span><br><span class="line">### 代码</span><br><span class="line"><span class="attribute">c++</span></span><br></pre></td></tr></table></figure><p>class Solution {<br>public:<br> static bool cmp(vector<int> &amp; a,vector<int> &amp; b){</int></int></p><pre><code> return a[0] &lt; b[0];</code></pre><p> }</p><p> vector<int> minAvailableDuration(vector<vector<int>&gt;&amp; slots1, vector<vector<int>&gt;&amp; slots2, int duration) {</vector<int></vector<int></int></p><pre><code> int i = 0; int j = 0; sort(slots1.begin(),slots1.end(),cmp); sort(slots2.begin(),slots2.end(),cmp); while(i &lt; slots1.size() &amp;&amp; j &lt; slots2.size()){     int a = max(slots1[i][0],slots2[j][0]);     int b = min(slots1[i][1],slots2[j][1]);     if(b - a &gt;= duration){         return vector&lt;int&gt;({a,a+duration});     }     if(b == slots1[i][1]){         ++i;     }     if(b == slots2[j][1]){         ++j;     } } return vector&lt;int&gt;({});</code></pre><p> }<br>};</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 5090. 抛掷硬币</span><br><span class="line">### 题目</span><br><span class="line">有一些不规则的硬币。在这些硬币中，prob[i] 表示第 i 枚硬币正面朝上的概率。</span><br><span class="line"></span><br><span class="line">请对每一枚硬币抛掷 一次，然后返回正面朝上的硬币数等于 target 的概率。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br></pre></td></tr></table></figure><p>输入：prob = [0.4], target = 1<br>输出：0.40000<br>示例 2：</p></li></ol><p>输入：prob = [0.5,0.5,0.5,0.5,0.5], target = 0<br>输出：0.03125<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">1 &lt;= prob.length &lt;= 1000</span><br><span class="line">0 &lt;= prob[i] &lt;= 1</span><br><span class="line">0 &lt;= target &lt;= prob.length</span><br><span class="line">如果答案与标准答案的误差在 10^<span class="number">-5</span> 内，则被视为正确答案。</span><br><span class="line"></span><br><span class="line">### 地址</span><br><span class="line">https://leetcode-cn.com/contest/biweekly-contest<span class="number">-11</span>/problems/toss-strange-coins/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 题意</span><br><span class="line">&gt;  动态规划</span><br><span class="line"></span><br><span class="line">### 思路</span><br><span class="line"><span class="number">1.</span> 每个硬币的抛掷都为独立事件，如果每个硬币正面朝上的概率相等，则可以利用排列组合，有n个硬币正面朝上的概率为<span class="symbol">``</span><span class="symbol">`C(m,n)p^(n)(1-p)^(m-n)`</span><span class="symbol">``</span>；</span><br><span class="line"><span class="number">2.</span> 本题中每个硬币向上的概率不同，如果用排列组合，就会非常麻烦；</span><br><span class="line"><span class="number">3.</span> 设动态规划的递推公式<span class="symbol">``</span><span class="symbol">`dp[n][i]`</span><span class="symbol">``</span>代表前<span class="symbol">``</span><span class="symbol">`n`</span><span class="symbol">``</span>个硬币中有<span class="symbol">``</span><span class="symbol">`i`</span><span class="symbol">``</span>个硬币正面朝上的概率。则递推公式为<span class="symbol">``</span><span class="symbol">`dp[n][i] = p[i]*dp[n-1][i-1] + (1-p[i])*dp[n-1][i]`</span><span class="symbol">``</span>.</span><br><span class="line"></span><br><span class="line">### 代码</span><br><span class="line">c++</span><br></pre></td></tr></table></figure><br>class Solution {<br>public:<br>    double probabilityOfHeads(vector<double>&amp; prob, int target) {<br>        int n = prob.size();<br>        vector<vector<double>&gt; dp(n+1,vector<double>(n+1,0));</double></vector<double></double></p><pre><code>    dp[1][0] = 1 - prob[0];    dp[1][1] = prob[0];    for(int i = 2; i &lt;= n; ++i){        for(int j = 0; j &lt;= i; ++j){            if(j &gt; 0){                dp[i][j] += prob[i-1]*dp[i-1][j-1];            }            if(i-1 &gt;= j){                dp[i][j] += (1-prob[i-1])*dp[i-1][j];            }        }    }    return dp[n][target];}</code></pre><p>};</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## <span class="number">5111.</span> 分享巧克力</span><br><span class="line">### 题目</span><br><span class="line">你有一大块巧克力，它由一些甜度不完全相同的小块组成。我们用数组 sweetness 来表示每一小块的甜度。</span><br><span class="line"></span><br><span class="line">你打算和 K 名朋友一起分享这块巧克力，所以你需要将切割 K 次才能得到 K+<span class="number">1</span> 块，每一块都由一些 连续 的小块组成。</span><br><span class="line"></span><br><span class="line">为了表现出你的慷慨，你将会吃掉 总甜度最小 的一块，并将其余几块分给你的朋友们。</span><br><span class="line"></span><br><span class="line">请找出一个最佳的切割策略，使得你所分得的巧克力 总甜度最大，并返回这个 最大总甜度。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>：</span><br></pre></td></tr></table></figure><p>输入：sweetness = [1,2,3,4,5,6,7,8,9], K = 5<br>输出：6<br>解释：你可以把巧克力分成 [1,2,3], [4,5], [6], [7], [8], [9]。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><br>输入：sweetness = [5,6,7,8,9,1,2,3,4], K = 8<br>输出：1<br>解释：只有一种办法可以把巧克力分成 9 块。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">3</span>：</span><br></pre></td></tr></table></figure><br>输入：sweetness = [1,2,2,1,2,2,1,2,2], K = 2<br>输出：5<br>解释：你可以把巧克力分成 [1,2,2], [1,2,2], [1,2,2]。<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 地址</span><br><span class="line"><span class="title">https:</span>//leetcode-cn.com/problems/divide-chocolate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 题意</span><br><span class="line">&gt;  划分数组成为```k+<span class="number">1</span>```个连续子数组，保证子数组中的最小值的尽可能的大，求这个最大值</span><br><span class="line"></span><br><span class="line">### 思路</span><br><span class="line"><span class="number">1</span>. 刚开始准备用dp，结果dp的算法也写出来了，发现最后时间复杂度为```O(n^<span class="number">3</span>)```，最后超时。</span><br><span class="line">```dp[n][i] = max(dp[n][i],min(dp[n-k][i-<span class="number">1</span>],sum(n-k+<span class="number">1</span>,i)))  (k &gt;= j-<span class="number">1</span>  <span class="literal">and</span>  k &lt;= n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><ol><li>用二分查找法,如果测试发现当前的值能够满足将数组切分为<code>k+1</code>个子数组时，则这时应将当前的值进行增加，如果测试发现当前设置的最大值不能满足刚好将数组切分成为小于<code>K+1</code>个子数组，则表示当前测试的值设置过大，应将测试数进行缩小。</li><li>通过本题，特别是如何设计二分法，再次重新学习一边需要经常练习。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>c++<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">bool</span> check(vector&lt;<span class="built_in">int</span>&gt;&amp; nums,<span class="built_in">int</span> K,<span class="built_in">int</span> sz)&#123;</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            <span class="keyword">if</span>(sum &gt;= sz)&#123;</span><br><span class="line">                tot++;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(tot &gt; K)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> maximizeSweetness(vector&lt;<span class="built_in">int</span>&gt;&amp; a, <span class="built_in">int</span> K) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = a.size();</span><br><span class="line">        <span class="built_in">int</span> l = a[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> r = a[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            l = min(l,a[i]);</span><br><span class="line">            r += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="built_in">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(a,K,mid))&#123;</span><br><span class="line">                res = mid;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;11周双周比赛&quot;&gt;&lt;a href=&quot;#11周双周比赛&quot; class=&quot;headerlink&quot; title=&quot;11周双周比赛&quot;&gt;&lt;/a&gt;11周双周比赛&lt;/h3&gt;&lt;p&gt;今天时间太紧张了，时间根本不够用。两道题目的目标没有达成。&lt;/p&gt;&lt;h2 id=&quot;5088-等差数列中缺失的数字&quot;&gt;&lt;a href=&quot;#5088-等差数列中缺失的数字&quot; class=&quot;headerlink&quot; title=&quot;5088. 等差数列中缺失的数字&quot;&gt;&lt;/a&gt;5088. 等差数列中缺失的数字&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;有一个数组，其中的值符合等差数列的数值规律，也就是说：&lt;/p&gt;&lt;p&gt;在 0 &amp;lt;= i &amp;lt; arr.length - 1 的前提下，arr[i+1] - arr[i] 的值都相等。&lt;br&gt;我们会从该数组中删除一个 既不是第一个 也 不是最后一个的值，得到一个新的数组  arr。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Python】30s学习python小技巧</title>
    <link href="http://yoursite.com/2019/11/25/80/"/>
    <id>http://yoursite.com/2019/11/25/80/</id>
    <published>2019-11-25T01:24:34.433Z</published>
    <updated>2019-11-25T02:32:19.239Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python小技巧（一）"><a href="#python小技巧（一）" class="headerlink" title="python小技巧（一）"></a>python小技巧（一）</h3><h4 id="1-判断list中的所有元素是否相等"><a href="#1-判断list中的所有元素是否相等" class="headerlink" title="1.判断list中的所有元素是否相等"></a>1.判断list中的所有元素是否相等</h4><p>比较list的前n-1个数是否与后n-1个数相等；<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_equal</span><span class="params">(lst)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure></p><h4 id="2-判断list中的元素是否有相同元素"><a href="#2-判断list中的元素是否有相同元素" class="headerlink" title="2. 判断list中的元素是否有相同元素"></a>2. 判断list中的元素是否有相同元素</h4><p>比较list的长度和list构造的集合的长度<br><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">def</span> <span class="function"><span class="title">all_unique</span>(<span class="variable">lst</span>):</span></span><br><span class="line"><span class="function"><span class="variable">return</span> <span class="title">len</span>(<span class="variable">lst</span>) == <span class="title">len</span>(<span class="title">set</span>(<span class="variable">lst</span>))</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="3-掌握enumerate的使用"><a href="#3-掌握enumerate的使用" class="headerlink" title="3.掌握enumerate的使用"></a>3.掌握enumerate的使用</h4><p>enumerate会自动为lst生成索引，使用该函数可以同时访问list的索引和元素<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lst</span></span><br></pre></td></tr></table></figure></p><h4 id="4-分类"><a href="#4-分类" class="headerlink" title="4.分类"></a>4.分类</h4><p>比如如下的函数奇数和偶数进行分类<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def bifurcate_by(lst,fn):</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">    [x <span class="keyword">for</span> x <span class="keyword">in</span> lst <span class="keyword">if</span> fn(x) <span class="keyword">is</span> True],</span><br><span class="line">    [x <span class="keyword">for</span> x <span class="keyword">in</span> lst <span class="keyword">if</span> fn(x) <span class="keyword">is</span> <span class="keyword">not</span> True]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">def isOdd(n):</span><br><span class="line">    <span class="keyword">return</span> n%<span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(bifurcate_by(lst,isOdd))</span><br></pre></td></tr></table></figure></p><h4 id="5-对list进行分组"><a href="#5-对list进行分组" class="headerlink" title="5.对list进行分组"></a>5.对list进行分组</h4><p>将list进行切片操作<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from math <span class="keyword">import</span> <span class="built_in">ceil</span></span><br><span class="line"></span><br><span class="line">def chunk(lst, <span class="built_in">size</span>):</span><br><span class="line">  <span class="keyword">return</span> list(</span><br><span class="line">    <span class="built_in">map</span>(lambda x: lst[x * <span class="built_in">size</span>:x * <span class="built_in">size</span> + <span class="built_in">size</span>],</span><br><span class="line">      list(range(<span class="number">0</span>, <span class="built_in">ceil</span>(len(lst) / <span class="built_in">size</span>)))))</span><br></pre></td></tr></table></figure></p><h4 id="6-lambda表达式"><a href="#6-lambda表达式" class="headerlink" title="6.lambda表达式"></a>6.lambda表达式</h4><p>利用map来做数字统计<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def count_by(lst,fn = lambda x:x):</span><br><span class="line">    key = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> map(fn,lst):</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> key:</span><br><span class="line">            key[x] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            key[x] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">100</span>]</span><br><span class="line">print(count_by(lst))</span><br></pre></td></tr></table></figure></p><h4 id="7-统计次数"><a href="#7-统计次数" class="headerlink" title="7.统计次数"></a>7.统计次数</h4><p>比如统计list中的某个数字出现的次数，可以用一行代码搞定<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def count_occurences(lst,<span class="keyword">val</span>):</span><br><span class="line">    <span class="keyword">return</span> len([x <span class="keyword">for</span> x <span class="keyword">in</span> lst <span class="keyword">if</span> x == <span class="keyword">val</span> <span class="keyword">and</span> <span class="class"><span class="keyword">type</span></span>(x) == <span class="class"><span class="keyword">type</span></span>(<span class="keyword">val</span>)])</span><br><span class="line"></span><br><span class="line">lst =[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="symbol">'a</span>',<span class="symbol">'a</span>',<span class="symbol">'b</span>',<span class="symbol">'b</span>',<span class="symbol">'c</span>',<span class="symbol">'c</span>']</span><br><span class="line">print(count_occurences(lst,<span class="number">1</span>))</span><br><span class="line">print(count_occurences(lst,<span class="symbol">'a</span>'))</span><br></pre></td></tr></table></figure></p><h4 id="8-list深度展开"><a href="#8-list深度展开" class="headerlink" title="8.list深度展开"></a>8.list深度展开</h4><p>利用lambda和map进行深度展开，确实比较难理解<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def spread(arg):</span><br><span class="line">  <span class="keyword">ret</span> = []</span><br><span class="line">  <span class="keyword">for</span> i in <span class="keyword">ar</span><span class="variable">g:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(i, <span class="keyword">list</span>):</span><br><span class="line">      <span class="keyword">ret</span>.<span class="built_in">extend</span>(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">ret</span>.<span class="keyword">append</span>(i)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line">def deep_flatten(lst):</span><br><span class="line">  result = []</span><br><span class="line">  result.<span class="built_in">extend</span>(</span><br><span class="line">    spread(<span class="keyword">list</span>(<span class="keyword">map</span>(lambda <span class="keyword">x</span>: deep_flatten(<span class="keyword">x</span>) <span class="keyword">if</span> <span class="built_in">type</span>(<span class="keyword">x</span>) == <span class="keyword">list</span> <span class="keyword">else</span> <span class="keyword">x</span>, lst))))</span><br><span class="line">  <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></p><h4 id="9-找出两个list的不同的元素"><a href="#9-找出两个list的不同的元素" class="headerlink" title="9.找出两个list的不同的元素"></a>9.找出两个list的不同的元素</h4><p>利用 for语句，python的语法解析确实非常强大。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def difference(a,b):</span><br><span class="line">    _a = <span class="keyword">set</span>(a)</span><br><span class="line">    <span class="keyword">return</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> b <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> _a]</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,]</span><br><span class="line">print(difference(b,a))</span><br></pre></td></tr></table></figure></p><h4 id="10-all函数的应用"><a href="#10-all函数的应用" class="headerlink" title="10.all函数的应用"></a>10.all函数的应用</h4><p>python里面all函数的使用，<br>all() 函数用于判断给定的可迭代参数 iterable 中的所有元素是否都为 TRUE，如果是返回 True，否则返回 False。元素除了是 0、空、None、False 外都算 True。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def every(lst,fn = lambda x:x%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">    <span class="keyword">return</span> all(map(fn,lst))</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">l2 = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>]</span><br><span class="line">print(every(l1))</span><br><span class="line">print(every(l2))</span><br><span class="line">print(every(l2,lambda x: x &gt; <span class="number">1</span>))</span><br><span class="line">print(every(l2,lambda x: x &lt; <span class="number">10</span>))</span><br></pre></td></tr></table></figure></p><h3 id="11-union的使用"><a href="#11-union的使用" class="headerlink" title="11.union的使用"></a>11.union的使用</h3><p>通过set来过滤掉相同的元素<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">c = <span class="type">list</span>(set(a+b))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;python小技巧（一）&quot;&gt;&lt;a href=&quot;#python小技巧（一）&quot; class=&quot;headerlink&quot; title=&quot;python小技巧（一）&quot;&gt;&lt;/a&gt;python小技巧（一）&lt;/h3&gt;&lt;h4 id=&quot;1-判断list中的所有元素是否相等&quot;&gt;&lt;a href=&quot;#1-判断list中的所有元素是否相等&quot; class=&quot;headerlink&quot; title=&quot;1.判断list中的所有元素是否相等&quot;&gt;&lt;/a&gt;1.判断list中的所有元素是否相等&lt;/h4&gt;&lt;p&gt;比较list的前n-1个数是否与后n-1个数相等；&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;all_equal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lst)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;&lt;h4 id=&quot;2-判断list中的元素是否有相同元素&quot;&gt;&lt;a href=&quot;#2-判断list中的元素是否有相同元素&quot; class=&quot;headerlink&quot; title=&quot;2. 判断list中的元素是否有相同元素&quot;&gt;&lt;/a&gt;2. 判断list中的元素是否有相同元素&lt;/h4&gt;&lt;p&gt;比较list的长度和list构造的集合的长度&lt;br&gt;&lt;figure class=&quot;highlight isbl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;all_unique&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;lst&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;	&lt;span class=&quot;variable&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;lst&lt;/span&gt;) == &lt;span class=&quot;title&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;lst&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】158周比赛</title>
    <link href="http://yoursite.com/2019/11/25/76/"/>
    <id>http://yoursite.com/2019/11/25/76/</id>
    <published>2019-11-25T01:24:34.431Z</published>
    <updated>2019-11-25T03:17:35.216Z</updated>
    
    <content type="html"><![CDATA[<h3 id="158周双周比赛"><a href="#158周双周比赛" class="headerlink" title="158周双周比赛"></a>158周双周比赛</h3><h2 id="5222-分割平衡字符串"><a href="#5222-分割平衡字符串" class="headerlink" title="5222. 分割平衡字符串"></a>5222. 分割平衡字符串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在一个「平衡字符串」中，’L’ 和 ‘R’ 字符的数量是相同的。</p><p>给出一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。</p><p>返回可以通过分割得到的平衡字符串的最大数量。</p><p>示例 1：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"RLRRLLRLRL"</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：s 可以分割为 <span class="string">"RL"</span>, <span class="string">"RRLL"</span>, <span class="string">"RL"</span>, <span class="string">"RL"</span>, 每个子字符串中都包含相同数量的 'L' 和 'R'。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"RLLLLRRRLR"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：s 可以分割为 <span class="string">"RL"</span>, <span class="string">"LLLRRR"</span>, <span class="string">"LR"</span>, 每个子字符串中都包含相同数量的 'L' 和 'R'。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"LLLLRRRR"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：s 只能保持原样 <span class="string">"LLLLRRRR"</span>.</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings" target="_blank" rel="noopener">https://leetcode-cn.com/problems/split-a-string-in-balanced-strings</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 分隔平衡字符串，类似于分隔括号</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>送分题</p><ol><li>题目中明确说明字符串本身即为平衡字符串,非常简单。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> balancedStringSplit(<span class="built_in">string</span> s) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = s.size();</span><br><span class="line">        <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'L'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5223-可以攻击国王的皇后"><a href="#5223-可以攻击国王的皇后" class="headerlink" title="5223. 可以攻击国王的皇后"></a>5223. 可以攻击国王的皇后</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>在一个 8x8 的棋盘上，放置着若干「黑皇后」和一个「白国王」。</p><p>「黑皇后」在棋盘上的位置分布用整数坐标数组 queens 表示，「白国王」的坐标用数组 king 表示。</p><p>「黑皇后」的行棋规定是：横、直、斜都可以走，步数不受限制，但是，不能越子行棋。</p><p>请你返回可以直接攻击到「白国王」的所有「黑皇后」的坐标（任意顺序）。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：queens = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">4</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">4</span>]], king = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">3</span>]]</span><br><span class="line">解释： </span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>] 的皇后可以攻击到国王，因为他们在同一行上。 </span><br><span class="line">[<span class="number">1</span>,<span class="number">0</span>] 的皇后可以攻击到国王，因为他们在同一列上。 </span><br><span class="line">[<span class="number">3</span>,<span class="number">3</span>] 的皇后可以攻击到国王，因为他们在同一条对角线上。 </span><br><span class="line">[<span class="number">0</span>,<span class="number">4</span>] 的皇后无法攻击到国王，因为她被位于 [<span class="number">0</span>,<span class="number">1</span>] 的皇后挡住了。 </span><br><span class="line">[<span class="number">4</span>,<span class="number">0</span>] 的皇后无法攻击到国王，因为她被位于 [<span class="number">1</span>,<span class="number">0</span>] 的皇后挡住了。 </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>] 的皇后无法攻击到国王，因为她和国王不在同一行/列/对角线上。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：queens = [[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>]], king = [<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">输出：[[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure><p>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：queens = [[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">6</span>],[<span class="number">5</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">7</span>],[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">6</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">6</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">4</span>],[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">7</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">7</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">6</span>],[<span class="number">6</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">6</span>],[<span class="number">4</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">7</span>]], king = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：[[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">7</span>],[<span class="number">4</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>]]</span><br></pre></td></tr></table></figure></p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/queens-that-can-attack-the-king" target="_blank" rel="noopener">https://leetcode-cn.com/problems/queens-that-can-attack-the-king</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 非常简单的边界问题。</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>上下左右，左上、右上、左下、右下8个方向扩展，遇到第一个<code>queen</code>即为目标。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt; queensAttacktheKing(vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt;&amp; queens, vector&lt;<span class="built_in">int</span>&gt;&amp; king) &#123;</span><br><span class="line">        <span class="built_in">int</span> r = <span class="number">8</span>;</span><br><span class="line">        <span class="built_in">int</span> c = <span class="number">8</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt; res;</span><br><span class="line">        vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt; grid(<span class="number">8</span>,vector&lt;<span class="built_in">int</span>&gt;(<span class="number">8</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">int</span> d[<span class="number">8</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; queens.size(); ++i)&#123;</span><br><span class="line">            grid[queens[i][<span class="number">0</span>]][queens[i][<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*left*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)&#123;</span><br><span class="line">            <span class="built_in">int</span> x = king[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">int</span> y = king[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span>(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; <span class="number">8</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; <span class="number">8</span>)&#123;</span><br><span class="line">                x += d[i][<span class="number">0</span>];</span><br><span class="line">                y += d[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; <span class="number">8</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; <span class="number">8</span> &amp;&amp; grid[x][y] == <span class="number">1</span>)&#123;</span><br><span class="line">                    res.push_back(vector&lt;<span class="built_in">int</span>&gt;(&#123;x,y&#125;));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5224-掷骰子模拟"><a href="#5224-掷骰子模拟" class="headerlink" title="5224. 掷骰子模拟"></a>5224. 掷骰子模拟</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>有一个骰子模拟器会每次投掷的时候生成一个 1 到 6 的随机数。</p><p>不过我们在使用它时有个约束，就是使得投掷骰子时，连续 掷出数字 i 的次数不能超过 rollMax[i]（i 从 1 开始编号）。</p><p>现在，给你一个整数数组 rollMax 和一个整数 n，请你来计算掷 n 次骰子可得到的不同点数序列的数量。</p><p>假如两个序列中至少存在一个元素不同，就认为这两个序列是不同的。由于答案可能很大，所以请返回 模 10^9 + 7 之后的结果。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, rollMax = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">34</span></span><br><span class="line">解释：我们掷 <span class="number">2</span> 次骰子，如果没有约束的话，共有 <span class="number">6</span> * <span class="number">6</span> = <span class="number">36</span> 种可能的组合。但是根据 rollMax 数组，数字 <span class="number">1</span> 和 <span class="number">2</span> 最多连续出现一次，所以不会出现序列 (<span class="number">1</span>,<span class="number">1</span>) 和 (<span class="number">2</span>,<span class="number">2</span>)。因此，最终答案是 <span class="number">36</span><span class="number">-2</span> = <span class="number">34</span>。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, rollMax = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">30</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span>, rollMax = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">181</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/dice-roll-simulation" target="_blank" rel="noopener">https://leetcode-cn.com/problems/dice-roll-simulation</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排列组合问题。</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>原题目在此:<br><a href="https://leetcode.com/discuss/interview-question/393226/akuna-capital-oa-2019-quant/355681" target="_blank" rel="noopener">题目链接</a></li><li>动态规划，设置<code>dp[n][i]</code>表示长度为<code>n</code>，且最后结尾的数为<code>i</code>的组合数量。</li><li><code>dp[n][i]</code>等于所有长度为n且第<code>(n-1,n-2...,n-rollmax[i])</code>位不为i的组合之和。<script type="math/tex; mode=display">f(n,i) = \sum_{j=1}^{6}\sum_{k=1}^{rollMax(j)}f(n-k,j)  \:\:\:\: (i!=j)</script></li><li>结果需要取模。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> dieSimulator(<span class="built_in">int</span> n, vector&lt;<span class="built_in">int</span>&gt;&amp; rollMax) &#123;</span><br><span class="line">        vector&lt;vector&lt;long long&gt;&gt; dp(n+<span class="number">1</span>,vector&lt;long long&gt;(<span class="number">7</span>,<span class="number">0</span>));</span><br><span class="line">        long long mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        long long res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*initial*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= min(n,rollMax[i<span class="number">-1</span>]); ++j)&#123;</span><br><span class="line">                dp[j][i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*dp*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">2</span>;i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> k = <span class="number">1</span>; k &lt;= min(rollMax[j<span class="number">-1</span>],i); ++k)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="built_in">int</span> l = <span class="number">1</span>; l &lt;= <span class="number">6</span>; ++l)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(j == l)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                        dp[i][j] = (dp[i][j] + dp[i-k][l])%mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">6</span>; ++i)&#123;</span><br><span class="line">            res = (res + dp[n][i])%mod;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5225-最大相等频率"><a href="#5225-最大相等频率" class="headerlink" title="5225. 最大相等频率"></a>5225. 最大相等频率</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3>给出一个正整数数组 nums，请你帮忙从该数组中找出能满足下面要求的 最长 前缀，并返回其长度：</li></ol><p>从前缀中 删除一个 元素后，使得所剩下的每个数字的出现次数相同。<br>如果删除这个元素后没有剩余元素存在，仍可认为每个数字都具有相同的出现次数（也就是 0 次）。</p><p>示例 1：</p><p>输入：nums = [2,2,1,1,5,3,3,5]<br>输出：7<br>解释：对于长度为 7 的子数组 [2,2,1,1,5,3,3]，如果我们从中删去 nums[4]=5，就可以得到 [2,2,1,1,3,3]，里面每个数字都出现了两次。<br>示例 2：</p><p>输入：nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]<br>输出：13<br>示例 3：</p><p>输入：nums = [1,1,1,2,2,2]<br>输出：5<br>示例 4：</p><p>输入：nums = [10,2,8,9,3,8,1,5,2,3,7,6]<br>输出：8</p><p>来源：力扣（LeetCode）<br>链接：<br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-equal-frequency" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-equal-frequency</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  求满足题意的最长前缀长度</p></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>不知道这个题目想考什么知识点，用了比较奇怪的解法解出来了。</li><li>统计前缀中的数字出现的次数，同时统计某个次数出现的数字的数目，比较蛋疼。</li><li>最终有4种情况下，满足条件中删除一个元素后，剩下的数字出现的次数相同。</li><li>第一种情况，前缀数字的数字的次数只有两种，且第二类数字的次数刚好比第一类数字的次数大于1，并且第二类数字只有1个，比如下面的数列:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></li><li>第二种情况，前缀数字的数字的次数只有两种，且第一类数字的次数只有1个，并且第一类数字只有1个，比如下面的数列:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></li><li>第三种情况，前缀数字的数字的次数只有一种，且次数全为1，比如下面的数列:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure></li><li>第四种情况，前缀数字的数字的次数只有一种，前缀数字的所有数字全部相等，即相同次数的数字只有1个:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>将以上四种情况分别找出来，即可找到满足题目要求的最长前缀。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 代码</span><br></pre></td></tr></table></figure><p>class Solution {<br>public:<br> int maxEqualFreq(vector<int>&amp; nums) {</int></p><pre><code> int n = nums.size(); map&lt;int,int&gt; count; map&lt;int,int&gt; left; int res = 2; for(int i = 0;i &lt; n; ++i){     if(left.count(count[nums[i]])){         left[count[nums[i]]]--;         if(left[count[nums[i]]] == 0){             left.erase(count[nums[i]]);         }     }     count[nums[i]]++;     left[count[nums[i]]]++;     if(left.size() == 2){         auto it1 = left.begin();         int num1 = it1-&gt;first;         int cnt1 = it1-&gt;second;         it1++;         int num2 = it1-&gt;first;         int cnt2 = it1-&gt;second;         if((num2-num1 == 1 &amp;&amp; cnt2 == 1)||            (num1 == 1 &amp;&amp; cnt1 == 1)){             res = max(res,i+1);         }     }else if(left.size() == 1){         auto it = left.begin();         int num = it-&gt;first;         int cnt = it-&gt;second;         if(cnt == 1||num == 1){             res = max(res,i+1);         }     } } return res;</code></pre><p> }<br>};<br>```</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;158周双周比赛&quot;&gt;&lt;a href=&quot;#158周双周比赛&quot; class=&quot;headerlink&quot; title=&quot;158周双周比赛&quot;&gt;&lt;/a&gt;158周双周比赛&lt;/h3&gt;&lt;h2 id=&quot;5222-分割平衡字符串&quot;&gt;&lt;a href=&quot;#5222-分割平衡字符串&quot; class=&quot;headerlink&quot; title=&quot;5222. 分割平衡字符串&quot;&gt;&lt;/a&gt;5222. 分割平衡字符串&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;在一个「平衡字符串」中，’L’ 和 ‘R’ 字符的数量是相同的。&lt;/p&gt;&lt;p&gt;给出一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。&lt;/p&gt;&lt;p&gt;返回可以通过分割得到的平衡字符串的最大数量。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：s = &lt;span class=&quot;string&quot;&gt;&quot;RLRRLLRLRL&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：s 可以分割为 &lt;span class=&quot;string&quot;&gt;&quot;RL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;RRLL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;RL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;RL&quot;&lt;/span&gt;, 每个子字符串中都包含相同数量的 &#39;L&#39; 和 &#39;R&#39;。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：s = &lt;span class=&quot;string&quot;&gt;&quot;RLLLLRRRLR&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：s 可以分割为 &lt;span class=&quot;string&quot;&gt;&quot;RL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;LLLRRR&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;LR&quot;&lt;/span&gt;, 每个子字符串中都包含相同数量的 &#39;L&#39; 和 &#39;R&#39;。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：s = &lt;span class=&quot;string&quot;&gt;&quot;LLLLRRRR&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：s 只能保持原样 &lt;span class=&quot;string&quot;&gt;&quot;LLLLRRRR&quot;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】第10周双周比赛</title>
    <link href="http://yoursite.com/2019/11/25/71/"/>
    <id>http://yoursite.com/2019/11/25/71/</id>
    <published>2019-11-25T01:24:34.426Z</published>
    <updated>2019-11-25T03:17:25.751Z</updated>
    
    <content type="html"><![CDATA[<h3 id="10周双周比赛"><a href="#10周双周比赛" class="headerlink" title="10周双周比赛"></a>10周双周比赛</h3><h2 id="5079-三个有序数组的交集"><a href="#5079-三个有序数组的交集" class="headerlink" title="5079. 三个有序数组的交集"></a>5079. 三个有序数组的交集</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给出三个均为 严格递增排列 的整数数组 arr1，arr2 和 arr3。</p><p>返回一个由 仅 在这三个数组中 同时出现 的整数所构成的有序数组。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>], arr3 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">解释: 只有 <span class="number">1</span> 和 <span class="number">5</span> 同时在这三个数组中出现.</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/intersection-of-three-sorted-arrays" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-three-sorted-arrays</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 统计在三个数组中都出现的值</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>送分题</p><ol><li>题目中明确说了三个数组都为严格递增，因此每个数组中的元素不存在重复元素；</li><li>我们只需要统计三个数组中的元素的次数即可，元素出现的次数为3次的肯定表明该元素在三个数组中都出现；</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arraysIntersection(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr2, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr3) &#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; count;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> a : arr1)&#123;</span><br><span class="line">            count[a]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> a : arr2)&#123;</span><br><span class="line">            count[a]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> a : arr3)&#123;</span><br><span class="line">            count[a]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; it : count)&#123;</span><br><span class="line">            <span class="keyword">if</span>(it.second == <span class="number">3</span>)&#123;</span><br><span class="line">                res.push_back(it.first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5080-查找两棵二叉搜索树之和"><a href="#5080-查找两棵二叉搜索树之和" class="headerlink" title="5080. 查找两棵二叉搜索树之和"></a>5080. 查找两棵二叉搜索树之和</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给出两棵二叉搜索树，请你从两棵树中各找出一个节点，使得这两个节点的值之和等于目标值 Target。</p><p>如果可以找到返回 True，否则返回 False。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root1 = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>], root2 = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>], target = <span class="number">5</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：<span class="number">2</span> 加 <span class="number">3</span> 和为 <span class="number">5</span> 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：root1 = [<span class="number">0</span>,<span class="number">-10</span>,<span class="number">10</span>], root2 = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>], target = <span class="number">18</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/two-sum-bsts/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum-bsts/</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 双指针问题。</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>最直接的解法，因为二叉排序树按照中序遍历为有序的，我们通过遍历树将二叉树转化为数组，然后利用双指针解法即可；</li><li>另一种解法，利用二叉树查找的特性可以在O(lgn)时间复杂度内找到目标值，我们遍历二叉树1中的每个节点的值val，然后在二叉树2中查找是否存在target-val即可，时间复杂度为O(nlgn)；</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">bool</span> find<span class="constructor">Target(TreeNode <span class="operator">*</span> <span class="params">root</span>,<span class="params">int</span> <span class="params">target</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            return <span class="literal">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root-&gt;<span class="keyword">val</span><span class="operator"> == </span>target)&#123;</span><br><span class="line">            return <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;<span class="keyword">val</span> &gt; target)&#123;</span><br><span class="line">            return find<span class="constructor">Target(<span class="params">root</span>-&gt;<span class="params">left</span>,<span class="params">target</span>)</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            return find<span class="constructor">Target(<span class="params">root</span>-&gt;<span class="params">right</span>,<span class="params">target</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">bool</span> two<span class="constructor">SumBSTs(TreeNode<span class="operator">*</span> <span class="params">root1</span>, TreeNode<span class="operator">*</span> <span class="params">root2</span>, <span class="params">int</span> <span class="params">target</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root1)&#123;</span><br><span class="line">            return <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(find<span class="constructor">Target(<span class="params">root2</span>,<span class="params">target</span>-<span class="params">root1</span>-&gt;<span class="params">val</span>)</span>)&#123;</span><br><span class="line">            return <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            return two<span class="constructor">SumBSTs(<span class="params">root1</span>-&gt;<span class="params">left</span>,<span class="params">root2</span>,<span class="params">target</span>)</span><span class="pattern-match"><span class="operator">||</span> \</span></span><br><span class="line"><span class="pattern-match">                   two<span class="constructor">SumBSTs(<span class="params">root1</span>-&gt;<span class="params">right</span>,<span class="params">root2</span>,<span class="params">target</span>)</span>;</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="5081-步进数"><a href="#5081-步进数" class="headerlink" title="5081. 步进数"></a>5081. 步进数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>如果一个整数上的每一位数字与其相邻位上的数字的绝对差都是 1，那么这个数就是一个「步进数」。</p><p>例如，321 是一个步进数，而 421 不是。</p><p>给你两个整数，low 和 high，请你找出在 [low, high] 范围内的所有步进数，并返回 排序后 的结果。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：low = <span class="number">0</span>, high = <span class="number">21</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">21</span>]</span><br></pre></td></tr></table></figure></p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/stepping-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/stepping-numbers</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p>求出所有符合要求的数。</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>因为按照题目要求，步进数最多也就在2^10次方的数量级，完全可以暴力求解出来；</li><li>利用BFS将所有大于等于low且小于等于high的求出来即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt; countSteppingNumbers(<span class="built_in">int</span> low, <span class="built_in">int</span> high) &#123;</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; res;</span><br><span class="line">        queue&lt;<span class="built_in">int</span>&gt; qu;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> &gt;= low)&#123;</span><br><span class="line">            res.push_back(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)&#123;</span><br><span class="line">            qu.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            long long curr = qu.front();</span><br><span class="line">            qu.pop();</span><br><span class="line">            <span class="keyword">if</span>(curr &gt;= low &amp;&amp; curr &lt;= high)&#123;</span><br><span class="line">                res.push_back(curr);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            long long now = (curr*<span class="number">10</span>) + (curr%<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span>((curr%<span class="number">10</span>) &lt; <span class="number">9</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(now + <span class="number">1</span> &lt;= high)&#123;</span><br><span class="line">                    qu.push(now+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((curr%<span class="number">10</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(now - <span class="number">1</span> &lt;= high)&#123;</span><br><span class="line">                    qu.push(now<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(res.begin(),res.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5099-验证回文字符串-III"><a href="#5099-验证回文字符串-III" class="headerlink" title="5099. 验证回文字符串 III"></a>5099. 验证回文字符串 III</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3>给出一个字符串 s 和一个整数 k，请你帮忙判断这个字符串是不是一个「K 回文」。</li></ol><p>所谓「K 回文」：如果可以通过从字符串中删去最多 k 个字符将其转换为回文，那么这个字符串就是一个「K 回文」。</p><p>示例：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"abcdeca"</span>, <span class="attr">k</span> = <span class="number">2</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：删除字符 “b” 和 “e”。</span><br></pre></td></tr></table></figure></p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/valid-palindrome-iii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-palindrome-iii</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  求该字符串的最长回文字符串长度</p></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>求该字符串的最长回文字串长度，用dp即可实现，非常简单。</li><li>如果最长回文字符串长度大于<code>n-k</code>,则该字符串可以在删掉k个字符的前提下变为回文字符串。</li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isValidPalindrome(string s, int k) &#123;</span><br><span class="line">        int n = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; dp(n,vector&lt;int&gt;(n,<span class="number">1</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">1</span>; <span class="built_in">i</span> &lt; n; ++<span class="built_in">i</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(int <span class="built_in">j</span> = <span class="number">0</span>;<span class="built_in">j</span> &lt; n-<span class="built_in">i</span>; ++<span class="built_in">j</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[<span class="built_in">j</span>] == s[<span class="built_in">j</span>+<span class="built_in">i</span>])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">i</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                        dp[<span class="built_in">j</span>][<span class="built_in">j</span>+<span class="built_in">i</span>] = <span class="number">2</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        dp[<span class="built_in">j</span>][<span class="built_in">j</span>+<span class="built_in">i</span>] = dp[<span class="built_in">j</span>+<span class="number">1</span>][<span class="built_in">j</span>+<span class="built_in">i</span><span class="number">-1</span>] + <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[<span class="built_in">j</span>][<span class="built_in">j</span>+<span class="built_in">i</span>] = <span class="built_in">max</span>(dp[<span class="built_in">j</span>][<span class="built_in">j</span>+<span class="built_in">i</span><span class="number">-1</span>],dp[<span class="built_in">j</span>+<span class="number">1</span>][<span class="built_in">j</span>+<span class="built_in">i</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(dp[<span class="number">0</span>][n<span class="number">-1</span>] + k &gt;= n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;10周双周比赛&quot;&gt;&lt;a href=&quot;#10周双周比赛&quot; class=&quot;headerlink&quot; title=&quot;10周双周比赛&quot;&gt;&lt;/a&gt;10周双周比赛&lt;/h3&gt;&lt;h2 id=&quot;5079-三个有序数组的交集&quot;&gt;&lt;a href=&quot;#5079-三个有序数组的交集&quot; class=&quot;headerlink&quot; title=&quot;5079. 三个有序数组的交集&quot;&gt;&lt;/a&gt;5079. 三个有序数组的交集&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给出三个均为 严格递增排列 的整数数组 arr1，arr2 和 arr3。&lt;/p&gt;&lt;p&gt;返回一个由 仅 在这三个数组中 同时出现 的整数所构成的有序数组。&lt;/p&gt;&lt;p&gt;示例：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: arr1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;], arr2 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;], arr3 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 只有 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 和 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; 同时在这三个数组中出现.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】Akuna Capital</title>
    <link href="http://yoursite.com/2019/11/25/70/"/>
    <id>http://yoursite.com/2019/11/25/70/</id>
    <published>2019-11-25T01:24:34.418Z</published>
    <updated>2019-11-25T03:17:14.737Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Akuna-Capital-OA-2019-Quant"><a href="#Akuna-Capital-OA-2019-Quant" class="headerlink" title="Akuna Capital | OA 2019 | Quant"></a>Akuna Capital | OA 2019 | Quant</h3><h2 id="Q-1-Hashed-Ports"><a href="#Q-1-Hashed-Ports" class="headerlink" title="Q-1:- Hashed Ports"></a>Q-1:- Hashed Ports</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="http://q15r3bmu8.bkt.clouddn.com/70-1.png" alt="1"></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode.com/discuss/interview-question/393226/akuna-capital-oa-2019-quant/355681" target="_blank" rel="noopener">https://leetcode.com/discuss/interview-question/393226/akuna-capital-oa-2019-quant/355681</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 题目有部分细节没有说清楚</p></blockquote><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def hashedPorts(n, T, packet_id):</span><br><span class="line">    ans, t = [], 1</span><br><span class="line">    avail = [0] * n</span><br><span class="line">   <span class="built_in"> queue </span>= collections.deque()</span><br><span class="line">    <span class="keyword">for</span> pid <span class="keyword">in</span> packet_id:</span><br><span class="line">        # pop <span class="keyword">from</span><span class="built_in"> queue </span><span class="keyword">if</span> the<span class="built_in"> port </span>is available</span><br><span class="line">        <span class="keyword">while</span><span class="built_in"> queue </span><span class="keyword">and</span> avail[queue[0]] &lt;= t:</span><br><span class="line">            queue.popleft()</span><br><span class="line">        # <span class="keyword">if</span> <span class="literal">no</span> ports available, wait until there is one available</span><br><span class="line">        <span class="keyword">if</span> len(queue) == n:</span><br><span class="line">            t = avail[queue.popleft()]</span><br><span class="line">        # try<span class="built_in"> port </span>until <span class="builtin-name">find</span> one available</span><br><span class="line">       <span class="built_in"> port </span>= pid % n</span><br><span class="line">        <span class="keyword">while</span> avail[port] &gt; t:</span><br><span class="line">           <span class="built_in"> port </span>= (port + 1) % n</span><br><span class="line">        # send packet, update available time <span class="keyword">for</span> the port</span><br><span class="line">        avail[port] = t + T</span><br><span class="line">        queue.append(port)</span><br><span class="line">        ans.append(port)</span><br><span class="line">        t += 1</span><br><span class="line">    return ans</span><br></pre></td></tr></table></figure><h2 id="Q-2-Biased-Die-Simulator"><a href="#Q-2-Biased-Die-Simulator" class="headerlink" title="Q-2:- Biased Die Simulator"></a>Q-2:- Biased Die Simulator</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给一个筛子，且限定该筛子的每一面最多能够连续出现的最大次数，给定数目N求，最多有多少种不同的序列组合。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：N = <span class="number">2</span>, rollMax = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">33</span></span><br><span class="line">解释：我们可知<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>不能连续出现超过<span class="number">1</span>次，因此序列[<span class="number">1</span> <span class="number">1</span>],[<span class="number">3</span> <span class="number">3</span>],[<span class="number">5</span> <span class="number">5</span>]不能出现。</span><br></pre></td></tr></table></figure></p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode.com/discuss/interview-question/393226/akuna-capital-oa-2019-quant/355681" target="_blank" rel="noopener">https://leetcode.com/discuss/interview-question/393226/akuna-capital-oa-2019-quant/355681</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 求最大的不同的组合序列</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>动态规划即可</li><li>设置<code>dp[n][i]</code>表示长度为<code>n</code>，且最后结尾的数为<code>i</code>组合数目。</li><li></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> dieSimulator(<span class="built_in">int</span> n,vector&lt;<span class="built_in">int</span>&gt; &amp; rollMax)&#123;</span><br><span class="line">    vector&lt;vector&lt;long long&gt;&gt; dp(n+<span class="number">1</span>,vector&lt;long long&gt;(<span class="number">7</span>,<span class="number">0</span>));</span><br><span class="line">    long long mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    long long res = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*initial*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= min(n,rollMax[i<span class="number">-1</span>]); ++j)&#123;</span><br><span class="line">            dp[j][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*dp*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">2</span>;i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> k = <span class="number">1</span>; k &lt;= min(rollMax[j<span class="number">-1</span>],i); ++k)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> l = <span class="number">1</span>; l &lt;= <span class="number">6</span>; ++l)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j == l)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                    dp[i][j] = (dp[i][j] + dp[i-k][l])%mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">6</span>; ++i)&#123;</span><br><span class="line">        res = (res + dp[n][i])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q-3-Tunrstile"><a href="#Q-3-Tunrstile" class="headerlink" title="Q-3 Tunrstile"></a>Q-3 Tunrstile</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>A university has exactly one turnstile. Unforutnately many people want to pass through the turnstile in different directions. The ith person comes to turnstile at times[i] and wants to either exit the university(direction=1) or enter the university(direction=0).People form 2 queues, one to exit one to enter. They are ordered by the time they came to turnstile and if the times are equal by their indices. </p><p>If someone wants to enter the university and other person wants to exit at the same time, there are 3 cases. </p><ul><li>if in previous second turnstile was not used (maybe it was used before not in the previous second)then the person who wants to leave goes first. </li><li>if in previous second the turnstile was used to exit then the person who wants to exit goes first.</li><li>if in previous second the turnstile was used as entrance then the person who wants to enter goes first </li></ul><p>Passint throught the turnstile takes 1 second. For each person return the time at which they pass through the turnstile. </p><p>Example:- n = 4 (there are 4 people).<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">times = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>] (Given <span class="keyword">in</span> sorted order) It means that person <span class="number">0</span> <span class="keyword">and</span> person <span class="number">1</span> come to turnstile at <span class="number">0</span>th second. </span><br><span class="line">direction  = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>] (Person <span class="number">0</span> wants to enter <span class="keyword">while</span> person <span class="number">1</span> wants to exit)</span><br><span class="line"></span><br><span class="line">Output = [<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">Explanation:- Person <span class="number">0</span> <span class="keyword">and</span> person <span class="number">1</span> comes to turnstile at $<span class="number">0</span>th second.  Turnstile was <span class="keyword">not</span> previously used hence person <span class="number">1</span> passes through turntile first. Hence ans[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Now person <span class="number">0</span> <span class="keyword">and</span> person <span class="number">3</span> are at turnstile <span class="keyword">for</span> second <span class="number">1.</span> But since turnstile was used to exit previously <span class="keyword">and</span> person <span class="number">3</span> wants to exit it will pass through turnstile at <span class="number">1.</span> Hence ans[<span class="number">2</span>]=<span class="number">1.</span> And so on..</span><br></pre></td></tr></table></figure></p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode.com/discuss/interview-question/393226/akuna-capital-oa-2019-quant/355681" target="_blank" rel="noopener">https://leetcode.com/discuss/interview-question/393226/akuna-capital-oa-2019-quant/355681</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 求进出校园的时间。</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>利用两个队列，一个队列为<code>exit</code>，另一个队列为<code>enter</code>。</li><li>记录当前可以进行门开放的时间，如果两个队列都大于开方的时间，如果两个队列的队头都小于开放的时间。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#define STATE_EXITED <span class="number">1</span></span><br><span class="line">    #define STATE_ENTERED <span class="number">0</span></span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt; pii;</span><br><span class="line">    </span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt; moveOrder(vector&lt;<span class="built_in">int</span>&gt; &amp; times,vector&lt;<span class="built_in">int</span>&gt; &amp; directions)&#123;</span><br><span class="line">        vector&lt;pii&gt; inQ;</span><br><span class="line">        vector&lt;pii&gt; outQ;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">in</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">out</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> n = times.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; times.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(directions[i] == STATE_ENTERED)&#123;</span><br><span class="line">                inQ.push_back(make_pair(times[i],i)); </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                outQ.push_back(make_pair(times[i],i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> curr = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">int</span> state = <span class="number">-1</span>;</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; res(n,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">in</span> &lt; inQ.size() &amp;&amp; <span class="keyword">out</span> &lt; outQ.size())&#123;</span><br><span class="line">            <span class="built_in">int</span> timeIn = inQ[<span class="keyword">in</span>].first;</span><br><span class="line">            <span class="built_in">int</span> timeOut = outQ[<span class="keyword">out</span>].first;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(timeIn &lt;= curr &amp;&amp; timeOut &lt;= curr)&#123;</span><br><span class="line">                <span class="keyword">if</span>(state == STATE_ENTERED)&#123;</span><br><span class="line">                    res[inQ[<span class="keyword">in</span>].second] = curr;</span><br><span class="line">                    <span class="keyword">in</span>++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    res[outQ[<span class="keyword">out</span>].second] = curr;</span><br><span class="line">                    <span class="keyword">out</span>++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(timeIn == timeOut)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(state == STATE_ENTERED)&#123;</span><br><span class="line">                        res[inQ[<span class="keyword">in</span>].second] = curr;</span><br><span class="line">                        <span class="keyword">in</span>++;</span><br><span class="line">                        state = STATE_ENTERED;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        res[outQ[<span class="keyword">out</span>].second] = curr;</span><br><span class="line">                        <span class="keyword">out</span>++;</span><br><span class="line">                        state = STATE_EXITED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(timeIn &lt; timeOut)&#123;</span><br><span class="line">                    res[inQ[<span class="keyword">in</span>].second] = curr;</span><br><span class="line">                    <span class="keyword">in</span>++;</span><br><span class="line">                    state = STATE_ENTERED;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(timeIn &gt; timeOut)&#123;</span><br><span class="line">                    res[outQ[<span class="keyword">out</span>].second] = curr;</span><br><span class="line">                    <span class="keyword">out</span>++;</span><br><span class="line">                    state = STATE_EXITED;</span><br><span class="line">                &#125;                           </span><br><span class="line">            &#125;</span><br><span class="line">            curr++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="keyword">in</span>; i &lt; inQ.size(); ++i)&#123;</span><br><span class="line">            curr = max(curr,inQ[i].first);</span><br><span class="line">            res[inQ[i].second] = curr;</span><br><span class="line">            curr++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="keyword">out</span>; i &lt; outQ.size(); ++i)&#123;</span><br><span class="line">            curr = max(curr,<span class="keyword">out</span>[i].first);</span><br><span class="line">            res[outQ[i].second] = curr;</span><br><span class="line">            curr++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="跳表的实现"><a href="#跳表的实现" class="headerlink" title="跳表的实现"></a>跳表的实现</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define MAX_LEVEL 16</span></span><br><span class="line">struct SkipListNode&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> maxLevel;</span><br><span class="line">    SkipListNode * next[MAX_LEVEL];</span><br><span class="line">    SkipListNode(<span class="keyword">int</span> x)&#123;</span><br><span class="line">        this-&gt;val = x;</span><br><span class="line">        this-&gt;maxLevel = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; MAX_LEVEL; ++i)&#123;</span><br><span class="line">            this-&gt;next[i] = <span class="keyword">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Skiplist</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Skiplist() &#123;</span><br><span class="line">        head = <span class="keyword">new</span> SkipListNode(<span class="number">-1</span>);</span><br><span class="line">        this-&gt;maxLevel = <span class="number">0</span>;</span><br><span class="line">        this-&gt;maxLevelNode = <span class="number">0</span>;</span><br><span class="line">        srand(time(<span class="keyword">NULL</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> randomLevel()&#123;</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; MAX_LEVEL; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rand()%<span class="number">2</span>)&#123;</span><br><span class="line">                level++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> search(<span class="keyword">int</span> target) &#123;</span><br><span class="line">        SkipListNode * curr = this-&gt;head;</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;<span class="string">"search: "</span>&lt;&lt;target&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = this-&gt;maxLevel<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(curr-&gt;next[i]&amp;&amp;curr-&gt;next[i]-&gt;val &lt; target)&#123;</span><br><span class="line">                curr = curr-&gt;next[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(curr-&gt;next[<span class="number">0</span>]&amp;&amp;curr-&gt;next[<span class="number">0</span>]-&gt;val == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void add(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        SkipListNode * node = <span class="keyword">new</span> SkipListNode(num);</span><br><span class="line">        node-&gt;maxLevel = randomLevel();</span><br><span class="line">        </span><br><span class="line">        cout&lt;&lt;<span class="string">"add:"</span>&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*insert*/</span></span><br><span class="line">        SkipListNode * curr = this-&gt;head;</span><br><span class="line">        SkipListNode * next = <span class="keyword">NULL</span>;</span><br><span class="line">        SkipListNode * update[MAX_LEVEL];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = node-&gt;maxLevel<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(curr-&gt;next[i] &amp;&amp; curr-&gt;next[i]-&gt;val &lt; num)&#123;</span><br><span class="line">                curr = curr-&gt;next[i];</span><br><span class="line">            &#125;</span><br><span class="line">            update[i] = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*update the next pointer of new node*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; node-&gt;maxLevel; ++i)&#123;</span><br><span class="line">            node-&gt;next[i] = update[i]-&gt;next[i];</span><br><span class="line">            update[i]-&gt;next[i] = node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(this-&gt;maxLevel &lt; node-&gt;maxLevel)&#123;</span><br><span class="line">            this-&gt;maxLevel = node-&gt;maxLevel;</span><br><span class="line">            this-&gt;maxLevelNode = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(this-&gt;maxLevel == node-&gt;maxLevel)&#123;</span><br><span class="line">            this-&gt;maxLevelNode++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        debug();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> erase(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        SkipListNode * curr = <span class="keyword">NULL</span>;</span><br><span class="line">        SkipListNode * update[MAX_LEVEL];</span><br><span class="line">        </span><br><span class="line">        cout&lt;&lt;<span class="string">"erase:"</span>&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">        <span class="comment">/*search the target*/</span></span><br><span class="line">        curr = this-&gt;head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = this-&gt;maxLevel<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(curr-&gt;next[i]&amp;&amp;curr-&gt;next[i]-&gt;val &lt; num)&#123;</span><br><span class="line">                curr = curr-&gt;next[i];</span><br><span class="line">            &#125;</span><br><span class="line">            update[i] = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!curr-&gt;next[<span class="number">0</span>]||curr-&gt;next[<span class="number">0</span>]-&gt;val != num)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        curr = curr-&gt;next[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(curr &amp;&amp; curr-&gt;val == num &amp;&amp; curr-&gt;maxLevel == this-&gt;maxLevel)&#123;</span><br><span class="line">            curr = curr-&gt;next[<span class="number">0</span>];</span><br><span class="line">            this-&gt;maxLevelNode--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = this-&gt;maxLevel<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            SkipListNode * next = update[i]-&gt;next[i];</span><br><span class="line">            <span class="keyword">while</span>(next &amp;&amp; next-&gt;val == num)&#123;</span><br><span class="line">                next = next-&gt;next[i];</span><br><span class="line">            &#125;</span><br><span class="line">            update[i]-&gt;next[i] = next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(this-&gt;maxLevelNode == <span class="number">0</span>)&#123;</span><br><span class="line">            curr = this-&gt;head;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = this-&gt;maxLevel<span class="number">-2</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">                <span class="keyword">while</span>(curr-&gt;next[i])&#123;</span><br><span class="line">                    this-&gt;maxLevelNode++;</span><br><span class="line">                    curr = curr-&gt;next[i];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(this-&gt;maxLevelNode &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    this-&gt;maxLevel = i+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    this-&gt;maxLevel = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        debug();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void debug()&#123;</span><br><span class="line">        SkipListNode * node = <span class="keyword">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = this-&gt;maxLevel<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"level:"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            node = this-&gt;head-&gt;next[i];</span><br><span class="line">            <span class="keyword">while</span>(node)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">"["</span>&lt;&lt;node-&gt;val&lt;&lt;<span class="string">"]-&gt;"</span>;</span><br><span class="line">                node = node-&gt;next[i];</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    SkipListNode * head;</span><br><span class="line">    <span class="keyword">int</span> maxLevel;</span><br><span class="line">    <span class="keyword">int</span> maxLevelNode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Skiplist object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Skiplist* obj = new Skiplist();</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;search(target);</span></span><br><span class="line"><span class="comment"> * obj-&gt;add(num);</span></span><br><span class="line"><span class="comment"> * bool param_3 = obj-&gt;erase(num);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>优秀代码的实现<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Skiplist</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SkipNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        SkipNode() : SkipNode(<span class="number">0</span>, <span class="number">-1</span>) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        SkipNode(<span class="keyword">int</span> level, <span class="keyword">int</span> num)</span><br><span class="line">          : num(num)</span><br><span class="line">          , nexts(level) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">vector</span>&lt;SkipNode *&gt; nexts;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Skiplist()</span><br><span class="line">      : gen_((random_device())())</span><br><span class="line">      , len_(<span class="number">0</span>)</span><br><span class="line">      , head_(<span class="keyword">new</span> SkipNode()) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~Skiplist() &#123;</span><br><span class="line">        <span class="keyword">if</span> (head_-&gt;nexts.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> curr = head_-&gt;nexts[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            <span class="keyword">auto</span> next = curr-&gt;nexts[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">delete</span> curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> target)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(target, find_prev_nodes(target)) != <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> node = <span class="keyword">new</span> SkipNode(random_level(), num);</span><br><span class="line">        <span class="keyword">if</span> (head_-&gt;nexts.size() &lt; node-&gt;nexts.size()) &#123;</span><br><span class="line">            head_-&gt;nexts.resize(node-&gt;nexts.size());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> prevs = find_prev_nodes(num);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; node-&gt;nexts.size(); ++i) &#123;</span><br><span class="line">            node-&gt;nexts[i] = prevs[i]-&gt;nexts[i];</span><br><span class="line">            prevs[i]-&gt;nexts[i] = node;</span><br><span class="line">        &#125;</span><br><span class="line">        ++len_;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> prevs = find_prev_nodes(num);</span><br><span class="line">        <span class="keyword">auto</span> curr = find(num, prevs);</span><br><span class="line">        <span class="keyword">if</span> (!curr) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        --len_;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = curr-&gt;nexts.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            prevs[i]-&gt;nexts[i] = curr-&gt;nexts[i];</span><br><span class="line">            <span class="keyword">if</span> (!head_-&gt;nexts[i]) &#123;</span><br><span class="line">                head_-&gt;nexts.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> curr;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> len_;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">SkipNode *<span class="title">find</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;SkipNode *&gt;&amp; prevs)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!prevs.empty()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> candidate = prevs[<span class="number">0</span>]-&gt;nexts[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (candidate &amp;&amp; candidate-&gt;num == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> candidate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;SkipNode *&gt; find_prev_nodes(<span class="keyword">int</span> num) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;SkipNode *&gt; prevs(head_-&gt;nexts.size());</span><br><span class="line">        <span class="keyword">auto</span> curr = head_;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head_-&gt;nexts.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (curr-&gt;nexts[i] &amp;&amp; curr-&gt;nexts[i]-&gt;num &lt; num) &#123;</span><br><span class="line">                curr = curr-&gt;nexts[i];</span><br><span class="line">            &#125;</span><br><span class="line">            prevs[i] = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prevs;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">random_level</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> P_NUMERATOR = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> P_DENOMINATOR = <span class="number">2</span>;  <span class="comment">// P = 1/4 in redis implementation</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAX_LEVEL = <span class="number">32</span>;  <span class="comment">// enough for 2^32 elements</span></span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (uniform_int_distribution&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>, P_DENOMINATOR&#125;(gen_) &lt;= P_NUMERATOR &amp;&amp;</span><br><span class="line">               level &lt; MAX_LEVEL) &#123;</span><br><span class="line">            ++level;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_list</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head_-&gt;nexts.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> curr = head_-&gt;nexts[i];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; curr-&gt;num;</span><br><span class="line">            curr = curr-&gt;nexts[i];</span><br><span class="line">            <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span> &lt;&lt; curr-&gt;num;</span><br><span class="line">                curr = curr-&gt;nexts[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    default_random_engine gen_;</span><br><span class="line">    <span class="keyword">int</span> len_;</span><br><span class="line">    SkipNode *head_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Skiplist object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Skiplist* obj = new Skiplist();</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;search(target);</span></span><br><span class="line"><span class="comment"> * obj-&gt;add(num);</span></span><br><span class="line"><span class="comment"> * bool param_3 = obj-&gt;erase(num);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Akuna-Capital-OA-2019-Quant&quot;&gt;&lt;a href=&quot;#Akuna-Capital-OA-2019-Quant&quot; class=&quot;headerlink&quot; title=&quot;Akuna Capital | OA 2019 | Quant&quot;&gt;&lt;/a&gt;Akuna Capital | OA 2019 | Quant&lt;/h3&gt;&lt;h2 id=&quot;Q-1-Hashed-Ports&quot;&gt;&lt;a href=&quot;#Q-1-Hashed-Ports&quot; class=&quot;headerlink&quot; title=&quot;Q-1:- Hashed Ports&quot;&gt;&lt;/a&gt;Q-1:- Hashed Ports&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://q15r3bmu8.bkt.clouddn.com/70-1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;地址&quot;&gt;&lt;a href=&quot;#地址&quot; class=&quot;headerlink&quot; title=&quot;地址&quot;&gt;&lt;/a&gt;地址&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/discuss/interview-question/393226/akuna-capital-oa-2019-quant/355681&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/discuss/interview-question/393226/akuna-capital-oa-2019-quant/355681&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; 题目有部分细节没有说清楚&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】第157周比赛</title>
    <link href="http://yoursite.com/2019/11/25/69/"/>
    <id>http://yoursite.com/2019/11/25/69/</id>
    <published>2019-11-25T01:24:34.417Z</published>
    <updated>2019-11-25T03:15:57.548Z</updated>
    
    <content type="html"><![CDATA[<h3 id="157周比赛"><a href="#157周比赛" class="headerlink" title="157周比赛"></a>157周比赛</h3><h2 id="5213-玩筹码"><a href="#5213-玩筹码" class="headerlink" title="5213. 玩筹码"></a>5213. 玩筹码</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。</p><p>你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：</p><p>将第 i 个筹码向左或者右移动 2 个单位，代价为 0。<br>将第 i 个筹码向左或者右移动 1 个单位，代价为 1。<br>最开始的时候，同一位置上也可能放着两个或者更多的筹码。</p><a id="more"></a><p>返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。</p><p>示例 1：</p><p>输入：chips = [1,2,3]<br>输出：1<br>解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。<br>示例 2：</p><p>输入：chips = [2,2,2,3,3]<br>输出：2<br>解释：第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。</p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/play-with-chips" target="_blank" rel="noopener">https://leetcode-cn.com/problems/play-with-chips</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 筹码移位的最小大家</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>送分题</p><ol><li>我们知道如果筹码移动奇数个位置，则代价为1，移动偶数个位置，则代价为0；</li><li>我们知道最终位置如果为偶数，则筹码位置为偶数的则移动的代价为0，筹码位置为奇数则移动代价为1，反之则相反，所以其实本题实际与筹码位置的奇偶相关。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> minCostToMoveChips(vector&lt;<span class="built_in">int</span>&gt;&amp; chips) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = chips.size();</span><br><span class="line">        <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> even = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> odd = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chips[i]%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                odd++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                even++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> min(odd,even);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5214-最长定差子序列"><a href="#5214-最长定差子序列" class="headerlink" title="5214. 最长定差子序列"></a>5214. 最长定差子序列</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 arr 和一个整数 difference，请你找出 arr 中所有相邻元素之间的差等于给定 difference 的等差子序列，并返回其中最长的等差子序列的长度。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], difference = <span class="number">1</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最长的等差子序列是 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>], difference = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：最长的等差子序列是任意单个元素。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>], difference = <span class="number">-2</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最长的等差子序列是 [<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>]。</span><br></pre></td></tr></table></figure></p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 最长等差序列长度。</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>首先看到本题肯定是DP问题，仔细分析一下题目，发现本题实际之前已经做过。</li><li>设置动态规划递推公式如下,dp[x]代表以x为结尾的等差序列的最大长度，已知差值为<code>difference</code>,递推公式为<code>dp[x] = dp[x-difference] + 1</code></li><li>我们用map存储即可。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> longestSubsequence(vector&lt;<span class="built_in">int</span>&gt;&amp; arr, <span class="built_in">int</span> difference) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = arr.size();</span><br><span class="line">        <span class="built_in">int</span> res = <span class="number">1</span>;</span><br><span class="line">        map&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt; left;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left.count(arr[i]-difference))&#123;</span><br><span class="line">                left[arr[i]] = left[arr[i]-difference] + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left[arr[i]] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = max(res,left[arr[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5215-黄金矿工"><a href="#5215-黄金矿工" class="headerlink" title="5215. 黄金矿工"></a>5215. 黄金矿工</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 m * n 的网格 grid 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 0。</p><p>为了使收益最大化，矿工需要按以下规则来开采黄金：</p><p>每当矿工进入一个单元，就会收集该单元格中的所有黄金。<br>矿工每次可以从当前位置向上下左右四个方向走。<br>每个单元格只能被开采（进入）一次。<br>不得开采（进入）黄金数目为 0 的单元格。<br>矿工可以从网格中 任意一个 有黄金的单元格出发或者是停止。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>],[<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>],[<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">24</span></span><br><span class="line">解释：</span><br><span class="line">[[<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>],</span><br><span class="line"> [<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>]]</span><br><span class="line">一种收集最多黄金的路线是：<span class="number">9</span> -&gt; <span class="number">8</span> -&gt; <span class="number">7</span>。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">0</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>],[<span class="number">9</span>,<span class="number">0</span>,<span class="number">20</span>]]</span><br><span class="line">输出：<span class="number">28</span></span><br><span class="line">解释：</span><br><span class="line">[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">7</span>],</span><br><span class="line"> [<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>],</span><br><span class="line"> [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line"> [<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">9</span>,<span class="number">0</span>,<span class="number">20</span>]]</span><br><span class="line">一种收集最多黄金的路线是：<span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; <span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">7</span>。</span><br></pre></td></tr></table></figure></p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/path-with-maximum-gold" target="_blank" rel="noopener">https://leetcode-cn.com/problems/path-with-maximum-gold</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 求所有路径的权值。</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>利用DFS找到所有路径的权值即可，由于本题中不能倒退。</li><li>从每一点开始寻找所有的路径即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">bool</span> dfs(vector&lt;vector&lt;<span class="built_in">bool</span>&gt;&gt; &amp; visit,<span class="built_in">int</span> x,<span class="built_in">int</span> y,vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt; &amp; grid,<span class="built_in">int</span> curr,<span class="built_in">int</span> &amp; res)&#123;</span><br><span class="line">        <span class="built_in">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">int</span> r = grid.size();</span><br><span class="line">        <span class="built_in">int</span> c = grid[<span class="number">0</span>].size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(visit[x][y] || grid[x][y] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        visit[x][y] = <span class="literal">true</span>;</span><br><span class="line">        curr += grid[x][y];</span><br><span class="line">        res = max(curr,res);</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">            <span class="built_in">int</span> x1 = x + d[i][<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">int</span> y1 = y + d[i][<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(x1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; r &amp;&amp; </span><br><span class="line">               y1 &gt;= <span class="number">0</span> &amp;&amp; y1 &lt; c &amp;&amp;</span><br><span class="line">               !visit[x1][y1] &amp;&amp; grid[x1][y1] != <span class="number">0</span>)&#123;</span><br><span class="line">                dfs(visit,x1,y1,grid,curr,res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visit[x][y] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> getMaximumGold(vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt;&amp; grid) &#123;</span><br><span class="line">        <span class="built_in">int</span> r = grid.size();</span><br><span class="line">        <span class="built_in">int</span> c = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="built_in">bool</span>&gt;&gt; visit(r,vector&lt;<span class="built_in">bool</span>&gt;(c,<span class="literal">false</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; r; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>;j &lt; c; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                   dfs(visit,i,j,grid,<span class="number">0</span>,res); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5216-统计元音字母序列的数目"><a href="#5216-统计元音字母序列的数目" class="headerlink" title="5216. 统计元音字母序列的数目"></a>5216. 统计元音字母序列的数目</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 n，请你帮忙统计一下我们可以按下述规则形成多少个长度为 n 的字符串：</p><p>字符串中的每个字符都应当是小写元音字母（’a’, ‘e’, ‘i’, ‘o’, ‘u’）<br>每个元音 ‘a’ 后面都只能跟着 ‘e’<br>每个元音 ‘e’ 后面只能跟着 ‘a’ 或者是 ‘i’<br>每个元音 ‘i’ 后面 不能 再跟着另一个 ‘i’<br>每个元音 ‘o’ 后面只能跟着 ‘i’ 或者是 ‘u’<br>每个元音 ‘u’ 后面只能跟着 ‘a’<br>由于答案可能会很大，所以请你返回 模 10^9 + 7 之后的结果。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：所有可能的字符串分别是：<span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"i"</span> , <span class="string">"o"</span> 和 <span class="string">"u"</span>。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">10</span></span><br><span class="line">解释：所有可能的字符串分别是：<span class="string">"ae"</span>, <span class="string">"ea"</span>, <span class="string">"ei"</span>, <span class="string">"ia"</span>, <span class="string">"ie"</span>, <span class="string">"io"</span>, <span class="string">"iu"</span>, <span class="string">"oi"</span>, <span class="string">"ou"</span> 和 <span class="string">"ua"</span>。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span></span><br><span class="line">输出：<span class="number">68</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-vowels-permutation" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-vowels-permutation</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  求多少种不同的序列，用dp</p></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>非常简单的dp即可，不知道为啥是hard难度。</li><li><code>dp[n][i]</code>代表长度为<code>n</code>,且以第<code>i</code>个字母结尾的序列的数量，递推公式如下：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/<span class="emphasis">*a前面可以为e,u,i*</span>/</span><br><span class="line">dp[<span class="string">i</span>][<span class="symbol">0</span>] = (dp[<span class="string">i-1</span>][<span class="symbol">1</span>] + dp[<span class="string">i-1</span>][<span class="symbol">2</span>] + dp[<span class="string">i-1</span>][<span class="symbol">4</span>])%mod;</span><br><span class="line">/<span class="emphasis">*e前面可以为a,i*</span>/</span><br><span class="line">dp[<span class="string">i</span>][<span class="symbol">1</span>] = (dp[<span class="string">i-1</span>][<span class="symbol">0</span>] + dp[<span class="string">i-1</span>][<span class="symbol">2</span>])%mod;</span><br><span class="line">/<span class="emphasis">*i前面可以为e,o,*</span>/</span><br><span class="line">dp[<span class="string">i</span>][<span class="symbol">2</span>] = (dp[<span class="string">i-1</span>][<span class="symbol">1</span>] + dp[<span class="string">i-1</span>][<span class="symbol">3</span>])%mod;</span><br><span class="line">/<span class="emphasis">*o前面可以为i*</span>/</span><br><span class="line">dp[<span class="string">i</span>][<span class="symbol">3</span>] = dp[<span class="string">i-1</span>][<span class="symbol">2</span>];</span><br><span class="line">/<span class="emphasis">*u前面可以为i*</span>/</span><br><span class="line">dp[<span class="string">i</span>][<span class="symbol">4</span>] = (dp[<span class="string">i-1</span>][<span class="symbol">2</span>] + dp[<span class="string">i-1</span>][<span class="symbol">3</span>])%mod;</span><br></pre></td></tr></table></figure></li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> countVowelPermutation(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">        long long res = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;long long&gt;&gt; dp(n+<span class="number">1</span>,vector&lt;long long&gt;(<span class="number">5</span>,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*initial*/</span></span><br><span class="line">        <span class="comment">/*'a':0, 'e':1, 'i':2, 'o':3, 'u':4*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>; ++i)&#123;</span><br><span class="line">            dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            </span><br><span class="line">            dp[i][<span class="number">0</span>] = (dp[i<span class="number">-1</span>][<span class="number">1</span>] + dp[i<span class="number">-1</span>][<span class="number">2</span>] + dp[i<span class="number">-1</span>][<span class="number">4</span>])%mod;</span><br><span class="line">            <span class="comment">/*e前面可以为a,i*/</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = (dp[i<span class="number">-1</span>][<span class="number">0</span>] + dp[i<span class="number">-1</span>][<span class="number">2</span>])%mod;</span><br><span class="line">            <span class="comment">/*i前面可以为e,o,*/</span></span><br><span class="line">            dp[i][<span class="number">2</span>] = (dp[i<span class="number">-1</span>][<span class="number">1</span>] + dp[i<span class="number">-1</span>][<span class="number">3</span>])%mod;</span><br><span class="line">            <span class="comment">/*o前面可以为i*/</span></span><br><span class="line">            dp[i][<span class="number">3</span>] = dp[i<span class="number">-1</span>][<span class="number">2</span>];</span><br><span class="line">            <span class="comment">/*u前面可以为i*/</span></span><br><span class="line">            dp[i][<span class="number">4</span>] = (dp[i<span class="number">-1</span>][<span class="number">2</span>] + dp[i<span class="number">-1</span>][<span class="number">3</span>])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)&#123;</span><br><span class="line">            res = (res + dp[n][i])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;157周比赛&quot;&gt;&lt;a href=&quot;#157周比赛&quot; class=&quot;headerlink&quot; title=&quot;157周比赛&quot;&gt;&lt;/a&gt;157周比赛&lt;/h3&gt;&lt;h2 id=&quot;5213-玩筹码&quot;&gt;&lt;a href=&quot;#5213-玩筹码&quot; class=&quot;headerlink&quot; title=&quot;5213. 玩筹码&quot;&gt;&lt;/a&gt;5213. 玩筹码&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。&lt;/p&gt;&lt;p&gt;你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：&lt;/p&gt;&lt;p&gt;将第 i 个筹码向左或者右移动 2 个单位，代价为 0。&lt;br&gt;将第 i 个筹码向左或者右移动 1 个单位，代价为 1。&lt;br&gt;最开始的时候，同一位置上也可能放着两个或者更多的筹码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】LCP比赛</title>
    <link href="http://yoursite.com/2019/11/25/68/"/>
    <id>http://yoursite.com/2019/11/25/68/</id>
    <published>2019-11-25T01:24:34.416Z</published>
    <updated>2019-11-25T03:15:47.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LCP比赛"><a href="#LCP比赛" class="headerlink" title="LCP比赛"></a>LCP比赛</h3><h2 id="LCP-1-猜数字"><a href="#LCP-1-猜数字" class="headerlink" title="LCP 1. 猜数字"></a>LCP 1. 猜数字</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>小A 和 小B 在玩猜数字。小B 每次从 1, 2, 3 中随机选择一个，小A 每次也从 1, 2, 3 中选择一个猜。他们一共进行三次这个游戏，请返回 小A 猜对了几次？</p><p>输入的guess数组为 小A 每次的猜测，answer数组为 小B 每次的选择。guess和answer的长度都等于3。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：guess = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], answer = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：小A 每次都猜对了。</span><br></pre></td></tr></table></figure></p><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：guess = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], answer = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：小A 只猜对了第二次。</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/guess-numbers/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/guess-numbers/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 送分题</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>送分题</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> game(vector&lt;<span class="built_in">int</span>&gt;&amp; guess, vector&lt;<span class="built_in">int</span>&gt;&amp; answer) &#123;</span><br><span class="line">        <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; guess.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(guess[i] == answer[i])&#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LCP-2-分式化简"><a href="#LCP-2-分式化简" class="headerlink" title="LCP 2. 分式化简"></a>LCP 2. 分式化简</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>有一个同学在学习分式。他需要将一个连分数化成最简分数，你能帮助他吗？</p><p>连分数是形如上图的分式。在本题中，所有系数都是大于等于0的整数。</p><p>输入的cont代表连分数的系数（cont[0]代表上图的a0，以此类推）。返回一个长度为2的数组[n, m]，使得连分数的值等于n / m，且n, m最大公约数为1。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：cont = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">13</span>, <span class="number">4</span>]</span><br><span class="line">解释：原连分数等价于<span class="number">3</span> + (<span class="number">1</span> / (<span class="number">2</span> + (<span class="number">1</span> / (<span class="number">0</span> + <span class="number">1</span> / <span class="number">2</span>))))。注意[<span class="number">26</span>, <span class="number">8</span>], [<span class="number">-13</span>, <span class="number">-4</span>]都不是正确答案。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：cont = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">解释：如果答案是整数，令分母为<span class="number">1</span>即可。</span><br></pre></td></tr></table></figure></p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/deep-dark-fraction/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/deep-dark-fraction/</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 分式化解。</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>合并，约分即可。或者用递归实现即可</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt; fraction(vector&lt;<span class="built_in">int</span>&gt;&amp; cont) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = cont.size();</span><br><span class="line">        <span class="built_in">int</span> up = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> down = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> vector&lt;<span class="built_in">int</span>&gt;(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> vector&lt;<span class="built_in">int</span>&gt;(&#123;cont[<span class="number">0</span>],<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        down = cont[n<span class="number">-1</span>];</span><br><span class="line">        up = <span class="number">1</span> + cont[n<span class="number">-2</span>]*down;</span><br><span class="line">        <span class="built_in">int</span> idx = n<span class="number">-3</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(idx &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            swap(down,up);</span><br><span class="line">            up = up + down*cont[idx];</span><br><span class="line">            cout&lt;&lt;up&lt;&lt;<span class="string">"/"</span>&lt;&lt;down&lt;&lt;endl;</span><br><span class="line">            idx--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        down = down/__gcd(up,down);</span><br><span class="line">        up = up/__gcd(up,down);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> vector&lt;<span class="built_in">int</span>&gt;(&#123;up,down&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LCP-3-机器人大冒险"><a href="#LCP-3-机器人大冒险" class="headerlink" title="LCP 3. 机器人大冒险"></a>LCP 3. 机器人大冒险</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>力扣团队买了一个可编程机器人，机器人初始位置在原点(0, 0)。小伙伴事先给机器人输入一串指令command，机器人就会无限循环这条指令的步骤进行移动。指令有两种：</p><p>U: 向y轴正方向移动一格<br>R: 向x轴正方向移动一格。<br>不幸的是，在 xy 平面上还有一些障碍物，他们的坐标用obstacles表示。机器人一旦碰到障碍物就会被损毁。</p><p>给定终点坐标(x, y)，返回机器人能否完好地到达终点。如果能，返回true；否则返回false。</p><p>示例 1：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：command = <span class="string">"URR"</span>, obstacles = [], x = <span class="number">3</span>, y = <span class="number">2</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：U<span class="function"><span class="params">(<span class="number">0</span>, <span class="number">1</span>)</span> -&gt;</span> R<span class="function"><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span> -&gt;</span> R<span class="function"><span class="params">(<span class="number">2</span>, <span class="number">1</span>)</span> -&gt;</span> U<span class="function"><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span> -&gt;</span> R(<span class="number">3</span>, <span class="number">2</span>)。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：command = <span class="string">"URR"</span>, obstacles = [[<span class="number">2</span>, <span class="number">2</span>]], x = <span class="number">3</span>, y = <span class="number">2</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：机器人在到达终点前会碰到(<span class="number">2</span>, <span class="number">2</span>)的障碍物。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：command = <span class="string">"URR"</span>, obstacles = <span class="string">[[4, 2]]</span>, x = <span class="number">3</span>, y = <span class="number">2</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：到达终点后，再碰到障碍物也不影响返回结果。</span><br></pre></td></tr></table></figure></p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/programmable-robot/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/programmable-robot/</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  。</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>找到规律即可，所有的步骤都有重复规律 x = k<em>r+i, y= k</em>u + j。</li><li>r和u分别为在一个完整的command中的right和up的数量。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">bool</span> robot(<span class="built_in">string</span> command, vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt;&amp; obstacles, <span class="built_in">int</span> x, <span class="built_in">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">set</span>&lt;pii&gt; steps;</span><br><span class="line">        <span class="built_in">int</span> tu = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> tr = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; command.size(); ++i)&#123;</span><br><span class="line">            steps.insert(make_pair(tr,tu));</span><br><span class="line">            <span class="keyword">if</span>(command[i] == <span class="string">'R'</span>)&#123;</span><br><span class="line">                tr++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tu++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*check we can reach to the obstacles*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; obstacles.size(); ++i)&#123;</span><br><span class="line">            <span class="built_in">int</span> minStep = min(obstacles[i][<span class="number">0</span>]/tr,obstacles[i][<span class="number">1</span>]/tu);</span><br><span class="line">            <span class="built_in">int</span> r = obstacles[i][<span class="number">0</span>] - minStep*tr;</span><br><span class="line">            <span class="built_in">int</span> u = obstacles[i][<span class="number">1</span>] - minStep*tu;</span><br><span class="line">            <span class="keyword">if</span>(steps.count(make_pair(r,u))&amp;&amp;</span><br><span class="line">               obstacles[i][<span class="number">0</span>] &lt;= x &amp;&amp; </span><br><span class="line">               obstacles[i][<span class="number">1</span>] &lt;= y)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> minStep = min(x/tr,y/tu);</span><br><span class="line">        <span class="built_in">int</span> r = x - minStep*tr;</span><br><span class="line">        <span class="built_in">int</span> u = y - minStep*tu;</span><br><span class="line">        <span class="keyword">if</span>(steps.count(make_pair(r,u)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="LCP-4-覆盖"><a href="#LCP-4-覆盖" class="headerlink" title="LCP 4. 覆盖"></a>LCP 4. 覆盖</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>你有一块棋盘，棋盘上有一些格子已经坏掉了。你还有无穷块大小为1 * 2的多米诺骨牌，你想把这些骨牌不重叠地覆盖在完好的格子上，请找出你最多能在棋盘上放多少块骨牌？这些骨牌可以横着或者竖着放。</p><p>输入：n, m代表棋盘的大小；broken是一个b * 2的二维数组，其中每个元素代表棋盘上每一个坏掉的格子的位置。</p><p>输出：一个整数，代表最多能在棋盘上放的骨牌数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, m = <span class="number">3</span>, broken = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：我们最多可以放两块骨牌：[[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]]以及[[<span class="number">0</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]]。（见下图）</span><br></pre></td></tr></table></figure></p><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span>, m = <span class="number">3</span>, broken = []</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：下图是其中一种可行的摆放方式</span><br></pre></td></tr></table></figure></p><p>限制：</p><p>1 &lt;= n &lt;= 8<br>1 &lt;= m &lt;= 8<br>0 &lt;= b &lt;= n * m</p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/broken-board-dominoes/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/broken-board-dominoes/</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>将各个相邻的点进行二分，使用二分图最大匹配算法即可。</li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt; E[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">int</span> used[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">int</span> matched[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bool</span> dfs(<span class="built_in">int</span> u) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> next : E[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (used[next]) <span class="keyword">continue</span>;</span><br><span class="line">            used[next] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (matched[next] == <span class="number">-1</span> || dfs(matched[next])) &#123;</span><br><span class="line">                matched[next] = u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> domino(<span class="built_in">int</span> n, <span class="built_in">int</span> m, vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt;&amp; broken) &#123;</span><br><span class="line">        <span class="built_in">int</span> br[n][m] = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">auto</span>&amp; b : broken) br[b[<span class="number">0</span>]][b[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; start;</span><br><span class="line">        <span class="built_in">int</span> delta[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i%<span class="number">2</span>; j &lt; m; j+=<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (br[i][j] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                start.push_back(i*m+j);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                    <span class="built_in">int</span> y = i + delta[k];</span><br><span class="line">                    <span class="built_in">int</span> x = j + delta[k+<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (y == <span class="number">-1</span> || y == n || x == <span class="number">-1</span> || x == m || br[y][x] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    E[i*m+j].push_back(y*m+x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        memset(matched, <span class="number">-1</span>, sizeof(matched));</span><br><span class="line">        <span class="built_in">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i : start) &#123;</span><br><span class="line">            memset(used, <span class="number">0</span>, sizeof(used));</span><br><span class="line">            <span class="keyword">if</span> (dfs(i)) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LCP-5-覆盖"><a href="#LCP-5-覆盖" class="headerlink" title="LCP 5. 覆盖"></a>LCP 5. 覆盖</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>力扣决定给一个刷题团队发LeetCoin作为奖励。同时，为了监控给大家发了多少LeetCoin，力扣有时候也会进行查询。</p><p>该刷题团队的管理模式可以用一棵树表示：</p><p>团队只有一个负责人，编号为1。除了该负责人外，每个人有且仅有一个领导（负责人没有领导）；<br>不存在循环管理的情况，如A管理B，B管理C，C管理A。</p><p>力扣想进行的操作有以下三种：</p><p>给团队的一个成员（也可以是负责人）发一定数量的LeetCoin；<br>给团队的一个成员（也可以是负责人），以及他/她管理的所有人（即他/她的下属、他/她下属的下属，……），发一定数量的LeetCoin；<br>查询某一个成员（也可以是负责人），以及他/她管理的所有人被发到的LeetCoin之和。</p><p>输入：</p><p>N表示团队成员的个数（编号为1～N，负责人为1）；<br>leadership是大小为(N - 1) * 2的二维数组，其中每个元素[a, b]代表b是a的下属；<br>operations是一个长度为Q的二维数组，代表以时间排序的操作，格式如下：<br>operations[i][0] = 1: 代表第一种操作，operations[i][1]代表成员的编号，operations[i][2]代表LeetCoin的数量；<br>operations[i][0] = 2: 代表第二种操作，operations[i][1]代表成员的编号，operations[i][2]代表LeetCoin的数量；<br>operations[i][0] = 3: 代表第三种操作，operations[i][1]代表成员的编号；<br>输出：</p><p>返回一个数组，数组里是每次查询的返回值（发LeetCoin的操作不需要任何返回值）。由于发的LeetCoin很多，请把每次查询的结果模1e9+7 (1000000007)。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：N = <span class="number">6</span>, leadership = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">6</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">4</span>]], operations = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">500</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">50</span>], [<span class="number">3</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">15</span>], [<span class="number">3</span>, <span class="number">1</span>]]</span><br><span class="line">输出：[<span class="number">650</span>, <span class="number">665</span>]</span><br><span class="line">解释：团队的管理关系见下图。</span><br><span class="line">第一次查询时，每个成员得到的LeetCoin的数量分别为（按编号顺序）：<span class="number">500</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">0</span>;</span><br><span class="line">第二次查询时，每个成员得到的LeetCoin的数量分别为（按编号顺序）：<span class="number">500</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">15.</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-4"><a href="#地址-4" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/coin-bonus/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/coin-bonus/</a></p><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><blockquote></blockquote><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ol><li>每个人设置有四个属性变量，分别为管理者，本人当前所拥有的币数，本人所拥有的subcoins，本人所管理的对象的数目。</li><li>对其进行建树，以1根根几点，子节点为所管理的对象，但我们只需要记住管理的对象的数目即可。</li><li>三种操作进行分发时，第一种操作时，对节点所拥有的coin进行叠加，然后一直上传到根节点。第二种操作时，对节点的subcoins进行叠加，同时将整个子树所增加的数目上传至根节点，查询时，先累加自身所拥有的节点数目</li></ol><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">people</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> parent;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> coins;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> subCoins;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> child;</span><br><span class="line">    people()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;parent = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;coins = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;subCoins = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;child = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> idx,<span class="built_in">vector</span>&lt;people&gt; &amp; graph,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; node[idx].size(); ++i)&#123;</span><br><span class="line">            graph[idx].child += buildTree(node[idx][i],graph,node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> graph[idx].child;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bonus(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; leadership, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; operations) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;people&gt; graph(n+<span class="number">1</span>,people());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; node(n+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> r : leadership)&#123;</span><br><span class="line">            node[r[<span class="number">0</span>]].push_back(r[<span class="number">1</span>]);</span><br><span class="line">            graph[r[<span class="number">1</span>]].parent = r[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        buildTree(<span class="number">1</span>,graph,node);       </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> op : operations)&#123;</span><br><span class="line">            <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> f = op[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> add = op[<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">while</span>(f)&#123;</span><br><span class="line">                    graph[f].coins = (graph[f].coins + op[<span class="number">2</span>])%mod;</span><br><span class="line">                    f = graph[f].parent;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="number">2</span>)&#123;</span><br><span class="line">                graph[op[<span class="number">1</span>]].subCoins = (graph[op[<span class="number">1</span>]].subCoins + op[<span class="number">2</span>])%mod;</span><br><span class="line">                <span class="keyword">int</span> f = op[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> add = graph[op[<span class="number">1</span>]].child*op[<span class="number">2</span>]%mod;</span><br><span class="line">                <span class="keyword">while</span>(f)&#123;</span><br><span class="line">                    graph[f].coins = (graph[f].coins + add)%mod;</span><br><span class="line">                    f = graph[f].parent;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> count = graph[op[<span class="number">1</span>]].coins;</span><br><span class="line">                <span class="keyword">int</span> f = graph[op[<span class="number">1</span>]].parent;</span><br><span class="line">                <span class="keyword">while</span>(f)&#123;</span><br><span class="line">                    count = (count + graph[op[<span class="number">1</span>]].child*graph[f].subCoins)%mod;</span><br><span class="line">                    f = graph[f].parent;</span><br><span class="line">                &#125;</span><br><span class="line">                ans.push_back(count%mod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">class <span class="symbol">TreeNode</span>:</span><br><span class="line">    def <span class="symbol">__init__</span>(self):</span><br><span class="line">        self.child = <span class="number">1</span></span><br><span class="line">        self.parent = <span class="number">0</span></span><br><span class="line">        self.coins = <span class="number">0</span></span><br><span class="line">        self.subCoins = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">class <span class="symbol">Solution</span>:</span><br><span class="line">    def bonus(self, n: int, leadership: <span class="symbol">List</span>[<span class="symbol">List</span>[int]], operations: <span class="symbol">List</span>[<span class="symbol">List</span>[int]]) -&gt; <span class="symbol">List</span>[int]:</span><br><span class="line">        graph = [<span class="symbol">TreeNode</span>() for <span class="symbol">_</span> in range(n+<span class="number">1</span>)]</span><br><span class="line">        node = [[] for <span class="symbol">_</span> in range(n+<span class="number">1</span>)]</span><br><span class="line">        mod = <span class="number">1000000007</span></span><br><span class="line">        </span><br><span class="line">        for i in range(len(leadership)):</span><br><span class="line">            graph[leadership[i][<span class="number">1</span>]].parent = leadership[i][<span class="number">0</span>]</span><br><span class="line">            node[leadership[i][<span class="number">0</span>]].append(leadership[i][<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        def buildTree(idx):</span><br><span class="line">            for i in range(len(node[idx])):</span><br><span class="line">                graph[idx].child += buildTree(node[idx][i])</span><br><span class="line">            return graph[idx].child</span><br><span class="line">        </span><br><span class="line">        buildTree(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        ans = []</span><br><span class="line">        for i in range(len(operations)):</span><br><span class="line">            if operations[i][<span class="number">0</span>] == <span class="number">1</span>:</span><br><span class="line">                graph[operations[i][<span class="number">1</span>]].coins += operations[i][<span class="number">2</span>]</span><br><span class="line">                f = graph[operations[i][<span class="number">1</span>]].parent</span><br><span class="line">                while f != <span class="number">0</span>:</span><br><span class="line">                    graph[f].coins += operations[i][<span class="number">2</span>]</span><br><span class="line">                    f = graph[f].parent</span><br><span class="line">                    </span><br><span class="line">            elif operations[i][<span class="number">0</span>] == <span class="number">2</span>:</span><br><span class="line">                graph[operations[i][<span class="number">1</span>]].subCoins += operations[i][<span class="number">2</span>]</span><br><span class="line">                add = graph[operations[i][<span class="number">1</span>]].child*operations[i][<span class="number">2</span>]</span><br><span class="line">                f = operations[i][<span class="number">1</span>]</span><br><span class="line">                while f != <span class="number">0</span>:</span><br><span class="line">                    graph[f].coins += add</span><br><span class="line">                    f = graph[f].parent</span><br><span class="line">                    </span><br><span class="line">            elif operations[i][<span class="number">0</span>] == <span class="number">3</span>:</span><br><span class="line">                res = graph[operations[i][<span class="number">1</span>]].coins</span><br><span class="line">                f = graph[operations[i][<span class="number">1</span>]].parent</span><br><span class="line">                while f != <span class="number">0</span>:</span><br><span class="line">                    res += (graph[f].subCoins*graph[operations[i][<span class="number">1</span>]].child)<span class="comment">%mod</span></span><br><span class="line">                    f = graph[f].parent</span><br><span class="line">                ans.append(res<span class="comment">%mod)</span></span><br><span class="line">                </span><br><span class="line">        return ans</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;LCP比赛&quot;&gt;&lt;a href=&quot;#LCP比赛&quot; class=&quot;headerlink&quot; title=&quot;LCP比赛&quot;&gt;&lt;/a&gt;LCP比赛&lt;/h3&gt;&lt;h2 id=&quot;LCP-1-猜数字&quot;&gt;&lt;a href=&quot;#LCP-1-猜数字&quot; class=&quot;headerlink&quot; title=&quot;LCP 1. 猜数字&quot;&gt;&lt;/a&gt;LCP 1. 猜数字&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;小A 和 小B 在玩猜数字。小B 每次从 1, 2, 3 中随机选择一个，小A 每次也从 1, 2, 3 中选择一个猜。他们一共进行三次这个游戏，请返回 小A 猜对了几次？&lt;/p&gt;&lt;p&gt;输入的guess数组为 小A 每次的猜测，answer数组为 小B 每次的选择。guess和answer的长度都等于3。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
