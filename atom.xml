<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blow in the wind</title>
  
  <subtitle>just code for fun</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-29T08:39:01.257Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mike meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Codeforces】 C. NEKO&#39;s Maze Game</title>
    <link href="http://yoursite.com/2020/01/29/128/"/>
    <id>http://yoursite.com/2020/01/29/128/</id>
    <published>2020-01-29T04:27:07.557Z</published>
    <updated>2020-01-29T08:39:01.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codeforces"><a href="#codeforces" class="headerlink" title="codeforces"></a>codeforces</h1><p>题目比leetcode质量高多了。</p><h2 id="C-NEKO’s-Maze-Game"><a href="#C-NEKO’s-Maze-Game" class="headerlink" title="C. NEKO’s Maze Game"></a>C. NEKO’s Maze Game</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>NEKO#ΦωΦ has just got a new maze game on her PC!</p><p>The game’s main puzzle is a maze, in the forms of a <code>2×n</code> rectangle grid. NEKO’s task is to lead a Nekomimi girl from cell<code>(1,1)</code> to the gate at <code>(2,n)</code> and escape the maze. The girl can only move between cells sharing a common side.</p><a id="more"></a><p>However, at some moments during the game, some cells may change their state: either from normal ground to lava (which forbids movement into that cell), or vice versa (which makes that cell passable again). Initially all cells are of the ground type.</p><p>After hours of streaming, NEKO finally figured out there are only q such moments: the i-th moment toggles the state of cell<code>(ri,ci)</code> (either from ground to lava or vice versa).</p><p>Knowing this, NEKO wonders, after each of the q moments, whether it is still possible to move from cell <code>(1,1)</code> to cell<code>(2,n)</code> without going through any lava cells.</p><p>Although NEKO is a great streamer and gamer, she still can’t get through quizzes and problems requiring large amount of Brain Power. Can you help her?</p><p>Input<br>The first line contains integers<code>n, q (2≤n≤1e5, 1≤q≤1e5)</code>.</p><p>The i-th of q following lines contains two integers ri, ci <code>(1≤ri≤2, 1≤ci≤n)</code>, denoting the coordinates of the cell to be flipped at the i-th moment.</p><p>It is guaranteed that cells<code>(1,1)</code>and <code>(2,n)</code>never appear in the query list.</p><p>Output<br>For each moment, if it is possible to travel from cell <code>(1,1)</code> to cell <code>(2,n)</code>, print “Yes”, otherwise print “No”. There should be exactly q answers, one after every update.</p><p>You can print the words in any case (either lowercase, uppercase or mixed).</p><p>Example<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">input</span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line">output</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">No</span><br><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Note</span><br></pre></td></tr></table></figure><br>We’ll crack down the example test here:</p><p>After the first query, the girl still able to reach the goal. One of the shortest path ways should be: <code>(1,1)→(1,2)→(1,3)→(1,4)→(1,5)→(2,5)</code>.<br>After the second query, it’s impossible to move to the goal, since the farthest cell she could reach is<code>(1,3)</code>.<br>After the fourth query, the<code>(2,3)</code> is not blocked, but now all the<code>4-th</code>column is blocked, so she still can’t reach the goal.<br>After the fifth query, the column barrier has been lifted, thus she can go to the final goal again.</p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://codeforces.com/contest/1293/problem/C" target="_blank" rel="noopener">https://codeforces.com/contest/1293/problem/C</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 给定一个<code>2xn</code>矩阵，每次输入数据对矩阵元素进行翻转</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>统计所有能够构成阻塞的关键节点的数量。</li><li>每次通过周围四个方向来判断，新加入的方块是否构成切断路径的关键节点。</li><li>如果存在关键节点，则此次路径就不通，否则路径是可达的。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max_col,count;</span><br><span class="line">    <span class="keyword">int</span> bad_neighbors = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">set</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; cells;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;max_col,&amp;count);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> row,col;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;row,&amp;col);</span><br><span class="line">        row--;</span><br><span class="line">        col--;</span><br><span class="line">        <span class="keyword">bool</span> was_forbidden  = cells.count(make_pair(row,col));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r = row - <span class="number">1</span>; r &lt;= row + <span class="number">1</span> ; r++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = col - <span class="number">1</span>; c &lt;= col + <span class="number">1</span>; c++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(r &lt; <span class="number">0</span> || r &gt;= <span class="number">2</span> || c &lt; <span class="number">0</span> || c &gt;= max_col) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(r == row) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(cells.count(make_pair(r,c)))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(was_forbidden)&#123;</span><br><span class="line">                        bad_neighbors--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        bad_neighbors++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(was_forbidden)&#123;</span><br><span class="line">            cells.erase(make_pair(row,col));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cells.insert(make_pair(row,col));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bad_neighbors &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;codeforces&quot;&gt;&lt;a href=&quot;#codeforces&quot; class=&quot;headerlink&quot; title=&quot;codeforces&quot;&gt;&lt;/a&gt;codeforces&lt;/h1&gt;&lt;p&gt;题目比leetcode质量高多了。&lt;/p&gt;&lt;h2 id=&quot;C-NEKO’s-Maze-Game&quot;&gt;&lt;a href=&quot;#C-NEKO’s-Maze-Game&quot; class=&quot;headerlink&quot; title=&quot;C. NEKO’s Maze Game&quot;&gt;&lt;/a&gt;C. NEKO’s Maze Game&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;NEKO#ΦωΦ has just got a new maze game on her PC!&lt;/p&gt;&lt;p&gt;The game’s main puzzle is a maze, in the forms of a &lt;code&gt;2×n&lt;/code&gt; rectangle grid. NEKO’s task is to lead a Nekomimi girl from cell&lt;code&gt;(1,1)&lt;/code&gt; to the gate at &lt;code&gt;(2,n)&lt;/code&gt; and escape the maze. The girl can only move between cells sharing a common side.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="codeforces" scheme="http://yoursite.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 18 场周赛</title>
    <link href="http://yoursite.com/2020/01/27/127/"/>
    <id>http://yoursite.com/2020/01/27/127/</id>
    <published>2020-01-27T07:19:06.186Z</published>
    <updated>2020-01-27T15:41:17.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18场双周比赛"><a href="#18场双周比赛" class="headerlink" title="18场双周比赛"></a>18场双周比赛</h1><p>最后一题不太会做</p><h2 id="5155-数组序号转换"><a href="#5155-数组序号转换" class="headerlink" title="5155. 数组序号转换"></a>5155. 数组序号转换</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code> ，请你将数组中的每个元素替换为它们排序后的序号。</p><p>序号代表了一个元素有多大。序号编号的规则如下：</p><p>序号从 1 开始编号。<br>一个元素越大，那么序号越大。如果两个元素相等，那么它们的序号相同。<br>每个数字的序号都应该尽可能地小。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">40</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">解释：<span class="number">40</span> 是最大的元素。 <span class="number">10</span> 是最小的元素。 <span class="number">20</span> 是第二小的数字。 <span class="number">30</span> 是第三小的数字。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">解释：所有元素有相同的序号。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">37</span>,<span class="number">12</span>,<span class="number">28</span>,<span class="number">9</span>,<span class="number">100</span>,<span class="number">56</span>,<span class="number">80</span>,<span class="number">5</span>,<span class="number">12</span>]</span><br><span class="line">输出：[<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li><code>0 &lt;= arr.length &lt;= 105</code></li><li><code>-109 &lt;= arr[i] &lt;= 109</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/rank-transform-of-an-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rank-transform-of-an-array</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>排序即可，为了方便用了<code>map</code>自动排序功能。</li><li>排序然后依次输出即可确定排序位置。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrayRankTransform(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; count;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            count[arr[i]].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; x : count)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; curr : count[x.first])&#123;</span><br><span class="line">                res[curr] = idx;</span><br><span class="line">            &#125;</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5151-破坏回文串"><a href="#5151-破坏回文串" class="headerlink" title="5151. 破坏回文串"></a>5151. 破坏回文串</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个回文字符串 <code>palindrome</code> ，请你将其中 一个 字符用任意小写英文字母替换，使得结果字符串的字典序最小，且 不是 回文串。</p><p>请你返回结果字符串。如果无法做到，则返回一个空串。</p><p>示例 1：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">palindrome</span> = <span class="string">"abccba"</span></span><br><span class="line">输出：<span class="string">"aaccba"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">palindrome</span> = <span class="string">"a"</span></span><br><span class="line">输出：<span class="string">""</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= palindrome.length &lt;= 1000</code></li><li><code>palindrome</code>只包含小写英文字母。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/break-a-palindrome" target="_blank" rel="noopener">https://leetcode-cn.com/problems/break-a-palindrome</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 替换</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>题目中要求字典序最小，我们只需要找到第一个不为<code>a</code>的元素进行替换成<code>a</code>即可。</li><li>如果所有的回文元素都为<code>a</code>的话，我们替换字符串最后一个字符为<code>b</code>即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">breakPalindrome</span><span class="params">(<span class="built_in">string</span> palindrome)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = palindrome.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(palindrome.size() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">while</span>(l &lt; r &amp;&amp; palindrome[l] == <span class="string">'a'</span>)&#123;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">            palindrome[l] = <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">return</span> palindrome;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            palindrome[palindrome.size()<span class="number">-1</span>] = <span class="string">'b'</span>;</span><br><span class="line">            <span class="keyword">return</span> palindrome;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1329-将矩阵按对角线排序"><a href="#1329-将矩阵按对角线排序" class="headerlink" title="1329. 将矩阵按对角线排序"></a>1329. 将矩阵按对角线排序</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个 <code>m * n</code> 的整数矩阵 <code>mat</code> ，请你将同一条对角线上的元素（从左上到右下）按升序排序后，返回排好序的矩阵。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li><li><code>1 &lt;= mat[i][j] &lt;= 100</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/sort-the-matrix-diagonally" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sort-the-matrix-diagonally</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 按照对角线进行访问即可</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>将每个对角线元素取出，然后排序；排序之后再将元素按照从小到大放回去即可；<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; diagonalSort(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat) &#123;</span><br><span class="line">        <span class="keyword">int</span> row = mat.size();</span><br><span class="line">        <span class="keyword">int</span> col = mat[<span class="number">0</span>].size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; line;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = i,y = <span class="number">0</span>; x &lt; row &amp;&amp; y &lt; col;x++,y++)&#123;</span><br><span class="line">                line.push_back(mat[x][y]);</span><br><span class="line">            &#125;</span><br><span class="line">            sort(line.begin(),line.end());</span><br><span class="line">            <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = i,y = <span class="number">0</span>; x &lt; row &amp;&amp; y &lt; col;x++,y++)&#123;</span><br><span class="line">                mat[x][y] = line[curr];</span><br><span class="line">                curr++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; col; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; line;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>,y = i; x &lt; row &amp;&amp; y &lt; col;x++,y++)&#123;</span><br><span class="line">                line.push_back(mat[x][y]);</span><br><span class="line">            &#125;</span><br><span class="line">            sort(line.begin(),line.end());</span><br><span class="line">            <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>,y = i; x &lt; row &amp;&amp; y &lt; col;x++,y++)&#123;</span><br><span class="line">                mat[x][y] = line[curr];</span><br><span class="line">                curr++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5154-翻转子数组得到最大的数组值"><a href="#5154-翻转子数组得到最大的数组值" class="headerlink" title="5154. 翻转子数组得到最大的数组值"></a>5154. 翻转子数组得到最大的数组值</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums</code> 。「 数组值」定义为所有满足<code>0 &lt;= i &lt; nums.length-1</code>的 <code>|nums[i]-nums[i+1]|</code> 的和。</p><p>你可以选择给定数组的任意子数组，并将该子数组翻转。但你只能执行这个操作 一次 。</p><p>请你找到可行的最大 数组值 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">10</span></span><br><span class="line">解释：通过翻转子数组 [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>] ，数组变成 [<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>] ，数组值为 <span class="number">10</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">24</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="number">68</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 3*10^4</code></li><li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/reverse-subarray-to-maximize-array-value" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-subarray-to-maximize-array-value</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 对绝对值进行展开，题目确实不怎么会，主要是数学问题。</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>对绝对值进行展开之后的符号运算。</li><li>首先我们我们可以很容易算出，如果数组不进行翻转或者直接从<code>0~n-1</code>进行反转，则这时数组的数组值为：<script type="math/tex; mode=display">F(N) = \sum^{n}_{i=1}abs(nums[i]-nums[i-1])</script></li><li>如果数组中第i个元素与第j个元素之间进行了翻转，则数组的值为：<script type="math/tex; mode=display">F(i,j) = F(N) - abs(nums[i+1]-nums[i]) - abs(nums[j+1]-nums[j]) + abs(nums[j+1]-nums[i]) + abs(nums[j]-nums[i-1])</script></li><li>我们所需要做的时确定<code>i</code>和<code>j</code>.我们实际上把后缀式进行数学符号展开，去掉绝对值。<script type="math/tex; mode=display">S = abs(nums[j+1]-nums[i]) + abs(nums[j]-nums[i-1]) \\S1 = nums[j+1] - nums[i] + nums[j] - nums[i-1] \\S2 = -nums[j+1] + nums[i] + nums[j] - nums[i-1] \\S3 = nums[j+1] - nums[i]  - nums[j] + nums[i-1] \\S4 = -nums[j+1] + nums[i] - nums[j] + nums[i-1] \\</script>对上述的多项式进行合并:<script type="math/tex; mode=display">S11 = (nums[j+1] + nums[j]) - (nums[i] + nums[i-1]) \\S21 = (-nums[j+1] + nums[j]) -(-nums[i] + nums[i-1]) \\S31 = (nums[j+1] - nums[j]) - (nums[i]  - nums[i-1]) \\S41 = (-nums[j+1] - nums[j]) - (-nums[i] - nums[i-1]) \\</script>求上述四种多项式的最大值即可。</li><li>我们只需要求出前数组前<code>j-1</code>项中所列的四种多项式的最大值即可。与我们当前的式子进行相加。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxValueAfterReverse</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            ans += <span class="built_in">abs</span>(nums[i] - nums[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        ll raw = ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            ans = max(ans,raw+<span class="built_in">abs</span>(nums[n<span class="number">-1</span>]-nums[i<span class="number">-1</span>])-<span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            ans = max(ans,raw+<span class="built_in">abs</span>(nums[i+<span class="number">1</span>]-nums[<span class="number">0</span>])-<span class="built_in">abs</span>(nums[i+<span class="number">1</span>]-nums[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> mx1 = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> mx2 = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> mx3 = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> mx4 = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            ans = max(ans,raw + mx1 + nums[i] + nums[i<span class="number">-1</span>] - <span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            ans = max(ans,raw + mx2 - nums[i] + nums[i<span class="number">-1</span>] - <span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            ans = max(ans,raw + mx3 + nums[i] - nums[i<span class="number">-1</span>] - <span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            ans = max(ans,raw + mx4 - nums[i] - nums[i<span class="number">-1</span>] - <span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            mx1 = max(mx1,-(nums[i]+nums[i<span class="number">-1</span>])-<span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            mx2 = max(mx2,-(-nums[i]+nums[i<span class="number">-1</span>])-<span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            mx3 = max(mx3,-(nums[i]-nums[i<span class="number">-1</span>])-<span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            mx4 = max(mx4,-(-nums[i]-nums[i<span class="number">-1</span>])-<span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">        &#125; </span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;18场双周比赛&quot;&gt;&lt;a href=&quot;#18场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;18场双周比赛&quot;&gt;&lt;/a&gt;18场双周比赛&lt;/h1&gt;&lt;p&gt;最后一题不太会做&lt;/p&gt;&lt;h2 id=&quot;5155-数组序号转换&quot;&gt;&lt;a href=&quot;#5155-数组序号转换&quot; class=&quot;headerlink&quot; title=&quot;5155. 数组序号转换&quot;&gt;&lt;/a&gt;5155. 数组序号转换&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/code&gt; ，请你将数组中的每个元素替换为它们排序后的序号。&lt;/p&gt;&lt;p&gt;序号代表了一个元素有多大。序号编号的规则如下：&lt;/p&gt;&lt;p&gt;序号从 1 开始编号。&lt;br&gt;一个元素越大，那么序号越大。如果两个元素相等，那么它们的序号相同。&lt;br&gt;每个数字的序号都应该尽可能地小。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt; 是最大的元素。 &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; 是最小的元素。 &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; 是第二小的数字。 &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt; 是第三小的数字。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：所有元素有相同的序号。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;56&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 173 场周赛</title>
    <link href="http://yoursite.com/2020/01/26/126/"/>
    <id>http://yoursite.com/2020/01/26/126/</id>
    <published>2020-01-26T14:38:04.582Z</published>
    <updated>2020-01-27T15:37:51.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="173场双周比赛"><a href="#173场双周比赛" class="headerlink" title="173场双周比赛"></a>173场双周比赛</h1><p>题目整体比较简单，不如昨天的题目难。</p><h2 id="5319-删除回文子序列"><a href="#5319-删除回文子序列" class="headerlink" title="5319. 删除回文子序列"></a>5319. 删除回文子序列</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>s</code>，它仅由字母<code>&#39;a&#39;</code> 和<code>&#39;b&#39;</code>组成。每一次删除操作都可以从 <code>s</code>中删除一个回文 子序列。</p><p>返回删除给定字符串中所有字符（字符串为空）的最小删除次数。</p><p>「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。</p><a id="more"></a><p>「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"ababa"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：字符串本身就是回文序列，只需要删除一次。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"abb"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="string">"abb"</span> -&gt; <span class="string">"bb"</span> -&gt; <span class="string">""</span>. </span><br><span class="line">先删除回文子序列 <span class="string">"a"</span>，然后再删除 <span class="string">"bb"</span>。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"baabb"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="string">"baabb"</span> -&gt; <span class="string">"b"</span> -&gt; <span class="string">""</span>. </span><br><span class="line">先删除回文子序列 <span class="string">"baab"</span>，然后再删除 <span class="string">"b"</span>。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">""</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>0 &lt;= s.length &lt;= 1000</code></li><li><code>s 仅包含字母 &#39;a&#39;  和 &#39;b&#39;</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/remove-palindromic-subsequences" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-palindromic-subsequences</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 题目比较混淆</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>题目描述有点问题，容易造成混淆，回文子串和回文子序列。</li><li>字符串中只包括<code>a</code>和<code>b</code>,只有三种情况，字符串为空，只需要0次即可；</li><li>字符串为回文字符串，只需要<code>1</code>次，否则只需要两次，一次删除<code>a</code>,一次删除<code>b</code>.</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removePalindromeSub</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> rev = s;</span><br><span class="line">        reverse(rev.begin(),rev.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(s == rev) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5320-餐厅过滤器"><a href="#5320-餐厅过滤器" class="headerlink" title="5320. 餐厅过滤器"></a>5320. 餐厅过滤器</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个餐馆信息数组 <code>restaurants</code>，其中  <code>restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]</code>。你必须使用以下三个过滤器来过滤这些餐馆信息。</p><p>其中素食者友好过滤器 <code>veganFriendly</code> 的值可以为 <code>true</code> 或者 <code>false</code>，如果为 true 就意味着你应该只包括 <code>veganFriendlyi</code>为 true 的餐馆，为 false 则意味着可以包括任何餐馆。此外，我们还有最大价格<code>maxPrice</code>和最大距离 maxDistance 两个过滤器，它们分别考虑餐厅的价格因素和距离因素的最大值。</p><p>过滤后返回餐馆的 id，按照 <code>rating</code> 从高到低排序。如果 rating 相同，那么按 id 从高到低排序。简单起见， veganFriendlyi 和 <code>veganFriendly</code>为 true 时取值为 1，为 false 时，取值为 0 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：restaurants = [[<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">40</span>,<span class="number">10</span>],[<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">30</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">15</span>,<span class="number">1</span>]], veganFriendly = <span class="number">1</span>, maxPrice = <span class="number">50</span>, maxDistance = <span class="number">10</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>] </span><br><span class="line">解释： </span><br><span class="line">这些餐馆为：</span><br><span class="line">餐馆 <span class="number">1</span> [id=<span class="number">1</span>, rating=<span class="number">4</span>, veganFriendly=<span class="number">1</span>, price=<span class="number">40</span>, distance=<span class="number">10</span>]</span><br><span class="line">餐馆 <span class="number">2</span> [id=<span class="number">2</span>, rating=<span class="number">8</span>, veganFriendly=<span class="number">0</span>, price=<span class="number">50</span>, distance=<span class="number">5</span>]</span><br><span class="line">餐馆 <span class="number">3</span> [id=<span class="number">3</span>, rating=<span class="number">8</span>, veganFriendly=<span class="number">1</span>, price=<span class="number">30</span>, distance=<span class="number">4</span>]</span><br><span class="line">餐馆 <span class="number">4</span> [id=<span class="number">4</span>, rating=<span class="number">10</span>, veganFriendly=<span class="number">0</span>, price=<span class="number">10</span>, distance=<span class="number">3</span>]</span><br><span class="line">餐馆 <span class="number">5</span> [id=<span class="number">5</span>, rating=<span class="number">1</span>, veganFriendly=<span class="number">1</span>, price=<span class="number">15</span>, distance=<span class="number">1</span>] </span><br><span class="line">在按照 veganFriendly = <span class="number">1</span>, maxPrice = <span class="number">50</span> 和 maxDistance = <span class="number">10</span> 进行过滤后，我们得到了餐馆 <span class="number">3</span>, 餐馆 <span class="number">1</span> 和 餐馆 <span class="number">5</span>（按评分从高到低排序）。</span><br><span class="line">``` </span><br><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><br>输入：restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10<br>输出：[4,3,2,1,5]<br>解释：餐馆与示例 1 相同，但在 veganFriendly = 0 的过滤条件下，应该考虑所有餐馆.<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 <span class="number">3</span>：</span><br></pre></td></tr></table></figure><br>输入：restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3<br>输出：[4,5]<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">+ ```<span class="number">1</span> &lt;= restaurants.length &lt;= <span class="number">10</span>^<span class="number">4</span></span><br></pre></td></tr></table></figure></p><ul><li><code>restaurants[i].length == 5</code></li><li><code>1 &lt;= idi, ratingi, pricei, distancei &lt;= 10^5</code></li><li><code>1 &lt;= maxPrice, maxDistance &lt;= 10^5</code></li><li><code>veganFriendlyi</code> 和 <code>veganFriendly</code> 的值为 0 或 1 所有 idi 各不相同。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance" target="_blank" rel="noopener">https://leetcode-cn.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>按照题目要求过滤，然后就行排序即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>] == b[<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; filterRestaurants(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; restaurants, <span class="keyword">int</span> veganFriendly, <span class="keyword">int</span> maxPrice, <span class="keyword">int</span> maxDistance) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; filter;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : restaurants)&#123;</span><br><span class="line">            <span class="keyword">if</span>(veganFriendly&amp;&amp;v[<span class="number">2</span>])||!veganFriendly</span><br><span class="line">            <span class="keyword">if</span>(veganFriendly == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(v[<span class="number">2</span>] == <span class="number">1</span> &amp;&amp; v[<span class="number">3</span>] &lt;= maxPrice &amp;&amp; v[<span class="number">4</span>] &lt;= maxDistance)&#123;</span><br><span class="line">                    filter.push_back(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(v[<span class="number">3</span>] &lt;= maxPrice &amp;&amp; v[<span class="number">4</span>] &lt;= maxDistance)&#123;</span><br><span class="line">                    filter.push_back(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        sort(filter.begin(),filter.end(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : filter)&#123;</span><br><span class="line">            res.push_back(v[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5321-阈值距离内邻居最少的城市"><a href="#5321-阈值距离内邻居最少的城市" class="headerlink" title="5321. 阈值距离内邻居最少的城市"></a>5321. 阈值距离内邻居最少的城市</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>有 n 个城市，按从 0 到 n-1 编号。给你一个边数组<code>edges</code>，其中 <code>edges[i] = [fromi, toi, weighti]</code>代表 <code>fromi</code>和 <code>toi</code>两个城市之间的双向加权边，距离阈值是一个整数 <code>distanceThreshold</code>。</p><p>返回能通过某些路径到达其他城市数目最少、且路径距离 最大 为 <code>distanceThreshold</code>的城市。如果有多个这样的城市，则返回编号最大的城市。</p><p>注意，连接城市 i 和 j 的路径的距离等于沿该路径的所有边的权重之和。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, edges = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]], distanceThreshold = <span class="number">4</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：城市分布图如上。</span><br><span class="line">每个城市阈值距离 distanceThreshold = <span class="number">4</span> 内的邻居城市分别是：</span><br><span class="line">城市 <span class="number">0</span> -&gt; [城市 <span class="number">1</span>, 城市 <span class="number">2</span>] </span><br><span class="line">城市 <span class="number">1</span> -&gt; [城市 <span class="number">0</span>, 城市 <span class="number">2</span>, 城市 <span class="number">3</span>] </span><br><span class="line">城市 <span class="number">2</span> -&gt; [城市 <span class="number">0</span>, 城市 <span class="number">1</span>, 城市 <span class="number">3</span>] </span><br><span class="line">城市 <span class="number">3</span> -&gt; [城市 <span class="number">1</span>, 城市 <span class="number">2</span>] </span><br><span class="line">城市 <span class="number">0</span> 和 <span class="number">3</span> 在阈值距离 <span class="number">4</span> 以内都有 <span class="number">2</span> 个邻居城市，但是我们必须返回城市 <span class="number">3</span>，因为它的编号最大。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, edges = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>]], distanceThreshold = <span class="number">2</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：城市分布图如上。 </span><br><span class="line">每个城市阈值距离 distanceThreshold = <span class="number">2</span> 内的邻居城市分别是：</span><br><span class="line">城市 <span class="number">0</span> -&gt; [城市 <span class="number">1</span>] </span><br><span class="line">城市 <span class="number">1</span> -&gt; [城市 <span class="number">0</span>, 城市 <span class="number">4</span>] </span><br><span class="line">城市 <span class="number">2</span> -&gt; [城市 <span class="number">3</span>, 城市 <span class="number">4</span>] </span><br><span class="line">城市 <span class="number">3</span> -&gt; [城市 <span class="number">2</span>, 城市 <span class="number">4</span>]</span><br><span class="line">城市 <span class="number">4</span> -&gt; [城市 <span class="number">1</span>, 城市 <span class="number">2</span>, 城市 <span class="number">3</span>] </span><br><span class="line">城市 <span class="number">0</span> 在阈值距离 <span class="number">4</span> 以内只有 <span class="number">1</span> 个邻居城市。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>2 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li><li><code>edges[i].length == 3</code></li><li><code>0 &lt;= fromi &lt; toi &lt; n</code></li><li><code>1 &lt;= weighti, distanceThreshold &lt;= 10^4</code>所有 <code>(fromi, toi)</code>都是不同的。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li><code>dijistra</code>,求每个顶点到其他顶点的最短距离。</li><li><code>BFS</code>即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTheCity</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges, <span class="keyword">int</span> distanceThreshold)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;pii&gt;&gt; graph;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minConnect = n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : edges)&#123;</span><br><span class="line">            graph[v[<span class="number">0</span>]].push_back(make_pair(v[<span class="number">1</span>],v[<span class="number">2</span>]));</span><br><span class="line">            graph[v[<span class="number">1</span>]].push_back(make_pair(v[<span class="number">0</span>],v[<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; distance(n,INT_MAX);</span><br><span class="line">            <span class="built_in">queue</span>&lt;pii&gt; qu;</span><br><span class="line">            qu.push(make_pair(i,<span class="number">0</span>));</span><br><span class="line">            distance[i] = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">                pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; curr = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : graph[curr.first])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(curr.second + v.second &gt; distanceThreshold) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(distance[v.first] &gt; curr.second + v.second)&#123;</span><br><span class="line">                        distance[v.first] = curr.second + v.second;</span><br><span class="line">                        qu.push(make_pair(v.first,distance[v.first]));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> connect = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(distance[j] &lt; INT_MAX)&#123;</span><br><span class="line">                    connect++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connect &lt;= minConnect)&#123;</span><br><span class="line">                minConnect = connect;</span><br><span class="line">                res = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5322-工作计划的最低难度"><a href="#5322-工作计划的最低难度" class="headerlink" title="5322. 工作计划的最低难度"></a>5322. 工作计划的最低难度</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>你需要制定一份 d 天的工作计划表。工作之间存在依赖，要想执行第 i 项工作，你必须完成全部 j 项工作<code>（ 0 &lt;= j &lt; i）。</code></p><p>你每天 至少 需要完成一项任务。工作计划的总难度是这 d 天每一天的难度之和，而一天的工作难度是当天应该完成工作的最大难度。</p><p>给你一个整数数组 <code>jobDifficulty</code> 和一个整数 d，分别代表工作难度和需要计划的天数。第 i 项工作的难度是<code>jobDifficulty[i]</code>。</p><p>返回整个工作计划的 最小难度 。如果无法制定工作计划，则返回 -1 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：jobDifficulty = [<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>], d = <span class="number">2</span></span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：第一天，您可以完成前 <span class="number">5</span> 项工作，总难度 = <span class="number">6.</span></span><br><span class="line">第二天，您可以完成最后一项工作，总难度 = <span class="number">1.</span></span><br><span class="line">计划表的难度 = <span class="number">6</span> + <span class="number">1</span> = <span class="number">7</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：jobDifficulty = [<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>], d = <span class="number">4</span></span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：就算你每天完成一项工作，仍然有一天是空闲的，你无法制定一份能够满足既定工作时间的计划表。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：jobDifficulty = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], d = <span class="number">3</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：工作计划为每天一项工作，总难度为 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：jobDifficulty = [<span class="number">7</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">1</span>], d = <span class="number">3</span></span><br><span class="line">输出：<span class="number">15</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：jobDifficulty = [<span class="number">11</span>,<span class="number">111</span>,<span class="number">22</span>,<span class="number">222</span>,<span class="number">33</span>,<span class="number">333</span>,<span class="number">44</span>,<span class="number">444</span>], d = <span class="number">6</span></span><br><span class="line">输出：<span class="number">843</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= jobDifficulty.length &lt;= 300</code></li><li><code>0 &lt;= jobDifficulty[i] &lt;= 1000</code></li><li><code>1 &lt;= d &lt;= 10</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-difficulty-of-a-job-schedule" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-difficulty-of-a-job-schedule</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DP</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>常规的<code>dp</code>,基本上递推公式即可，类似的题目不少。</li><li><code>dp[i][j]</code>代表前<code>i</code>项任务在<code>j</code>天内完成的最低难度，<code>cost[i][j]</code>代表数组区间从<code>i</code>到<code>j</code>的最大值。<script type="math/tex; mode=display">cost[i][j] = max(cost[i][j-1],jobDifficulty[j]) \\dp[i][j] = min(dp[i][j],dp[k][j-1]+cost[k+1][i]) \:\: (i-1\ge k\ge j-1)</script><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDifficulty</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; jobDifficulty, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = jobDifficulty.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(d+<span class="number">1</span>,INT_MAX));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n &lt; d)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = max(dp[i<span class="number">-1</span>][<span class="number">1</span>],jobDifficulty[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= d; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; ++j)&#123;</span><br><span class="line">                <span class="keyword">int</span> mx = jobDifficulty[j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j<span class="number">-1</span>; k &gt;= i<span class="number">-1</span>; --k)&#123;</span><br><span class="line">                    dp[j][i] = min(dp[j][i],dp[k][i<span class="number">-1</span>] + mx);</span><br><span class="line">                    mx = max(mx,jobDifficulty[k<span class="number">-1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n][d];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;173场双周比赛&quot;&gt;&lt;a href=&quot;#173场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;173场双周比赛&quot;&gt;&lt;/a&gt;173场双周比赛&lt;/h1&gt;&lt;p&gt;题目整体比较简单，不如昨天的题目难。&lt;/p&gt;&lt;h2 id=&quot;5319-删除回文子序列&quot;&gt;&lt;a href=&quot;#5319-删除回文子序列&quot; class=&quot;headerlink&quot; title=&quot;5319. 删除回文子序列&quot;&gt;&lt;/a&gt;5319. 删除回文子序列&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt;，它仅由字母&lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt; 和&lt;code&gt;&amp;#39;b&amp;#39;&lt;/code&gt;组成。每一次删除操作都可以从 &lt;code&gt;s&lt;/code&gt;中删除一个回文 子序列。&lt;/p&gt;&lt;p&gt;返回删除给定字符串中所有字符（字符串为空）的最小删除次数。&lt;/p&gt;&lt;p&gt;「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>CollisionSystem</title>
    <link href="http://yoursite.com/2020/01/21/125/"/>
    <id>http://yoursite.com/2020/01/21/125/</id>
    <published>2020-01-21T07:44:24.707Z</published>
    <updated>2020-01-23T14:51:12.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CollisionSystem"><a href="#CollisionSystem" class="headerlink" title="CollisionSystem"></a>CollisionSystem</h3><p>最近一直在学习<code>princeton</code>的算法课程一，已经坚持刷了两个星期了，完成了四个<code>project</code>整体感觉难度很大，比一般工作中遇到的<code>project</code>难度大多了，让我这种工作了几年的老鸟，吭哧吭哧的啃了半天，一个<code>project</code>也要花上两三天才能完成，感觉很多问题都想不到，感觉国外的课程还真是难的一比。<br>印象比较深的就是这个粒子碰撞仿真系统，这个星期弄了一个星期，先把<code>java</code>版本的调好，然后把java版本的代码写了<code>python</code>版本，基本上全部调试好了，但是碰撞时的计算由于是浮点数的计算，涉及到阈值的处理，没有处理好，所以一直有问题。<br>两个粒子在碰撞时，由于计算误差的原因，导致在很短的时间出现二次碰撞，因此计算时一直存在一定的误差需要我们来解决这个问题。<br>1.22日对该<code>project</code>又进行调试，解决了该bug，目前已经可以正常显示画面。</p><a id="more"></a><h4 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h4><ol><li><p>定义粒子：每个粒子都有6个基本的属性，粒子当前位置的<code>(rx,ry)</code>,粒子当前的速度<code>(vx,vy)</code>,粒子的质量<code>mass</code>,粒子的半径<code>radius</code>.<br>每个粒子在<code>t</code>时刻的位置，并以一定的速度匀速前进。两个粒子进行碰撞时，由于碰撞而产生一定的推力，改变两个粒子的运动方向，则利用牛顿第二定理来进行分解和计算出粒子碰撞后的速度。</p></li><li><p>但实际进行计算时，最难的关键点，在于如何确认检测碰撞的时间，如果检测碰撞设置时间太大或者太小，都会产生与实际状态不符合的情况。比如下面这种情况：<br><img src="https://s2.ax1x.com/2020/01/21/1kPZL9.png" alt="1"><br><img src="https://s2.ax1x.com/2020/01/21/1kPEM4.png" alt="2"></p></li><li>我们在实际进行计算时，则将每个粒子与其他粒子碰撞的事件和该粒子与x轴、y轴碰撞的事件按照时间大小进行排序，每次取时间最快发生的碰撞时间，然后跟新该粒子本身、碰撞粒子的速度，同时跟新在经过$\delta t$后所有粒子的位置。从优先级队列中取出最新的事件检测时，则会检测该粒子是否有过碰撞，如果之前有过碰撞则认为该事件无效。<br><img src="https://s2.ax1x.com/2020/01/21/1kPkzF.png" alt="3"></li><li>每次取出事件后，进行跟新状态，并同时更新所有球的位置,所有粒子的半径和颜色、位置、初始速度全部为随机。模拟系统运行显示如下：<br><img src="http://chuantu.xyz/t6/713/1579677694x2073530527.gif" alt="4"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">LIGHT = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">DARK = (<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>)      <span class="comment"># 蛇的颜色</span></span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)           <span class="comment"># 网格线颜色</span></span><br><span class="line">RED = (<span class="number">200</span>, <span class="number">30</span>, <span class="number">30</span>)         <span class="comment"># 红色，GAME OVER 的字体颜色</span></span><br><span class="line">BGCOLOR = (<span class="number">40</span>, <span class="number">40</span>, <span class="number">60</span>)      <span class="comment"># 背景色</span></span><br><span class="line">WIDTH = <span class="number">1000</span></span><br><span class="line">HEIGHT = <span class="number">800</span></span><br><span class="line">NUMBER = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Particle</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.radius = random.randint(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">        self.rx = random.uniform(self.radius,WIDTH)</span><br><span class="line">        self.ry = random.uniform(self.radius,HEIGHT)</span><br><span class="line">        self.vx = random.uniform(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">        self.vy = random.uniform(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.mass = <span class="number">0.5</span></span><br><span class="line">        r = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">        g = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">        b = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">        self.color = (r,g,b)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_argment</span><span class="params">(self,inRx,inRy,inVx,inVy,inradius,inMass,inColor)</span>:</span></span><br><span class="line">        self.rx = inRx</span><br><span class="line">        self.ry = inRy</span><br><span class="line">        self.vx = inVx</span><br><span class="line">        self.vy = inVy</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.radius = inradius</span><br><span class="line">        self.mass = inMass</span><br><span class="line">        self.color = inColor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self,dt)</span>:</span></span><br><span class="line">        self.rx += self.vx*dt</span><br><span class="line">        self.ry += self.vy*dt</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.count</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">time_to_hit</span><span class="params">(self,that)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.rx == that.rx <span class="keyword">and</span> self.ry == that.ry:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">        dx = that.rx - self.rx</span><br><span class="line">        dy = that.ry - self.ry</span><br><span class="line">        dvx = that.vx - self.vx</span><br><span class="line">        dvy = that.vy - self.vy</span><br><span class="line">        dvdr = dx * dvx + dy * dvy</span><br><span class="line">        <span class="keyword">if</span> dvdr &gt; <span class="number">0.0</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">        dvdv = dvx * dvx + dvy * dvy</span><br><span class="line">        <span class="keyword">if</span> dvdv == <span class="number">0.0</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line">        drdr = dx * dx + dy * dy</span><br><span class="line">        sigma = self.radius + that.radius</span><br><span class="line">        d = (dvdr * dvdr) - dvdv * (drdr - sigma * sigma)</span><br><span class="line">        <span class="keyword">if</span> d &lt; <span class="number">0.0</span>: </span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line">        </span><br><span class="line">        time = -(dvdr + math.sqrt(d))/dvdv</span><br><span class="line">        <span class="keyword">if</span> time &lt;= <span class="number">0.2</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> time</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">time_to_hit_verticalwall</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.vx &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (WIDTH - self.radius - self.rx)/self.vx</span><br><span class="line">        <span class="keyword">elif</span> self.vx &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (self.radius - self.rx)/self.vx</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">time_to_hit_horizontalwall</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.vy &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (HEIGHT - self.radius - self.ry)/self.vy</span><br><span class="line">        <span class="keyword">elif</span> self.vy &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (self.radius - self.ry)/self.vy</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bounce_off</span><span class="params">(self,that)</span>:</span></span><br><span class="line">        dx = that.rx - self.rx</span><br><span class="line">        dy = that.ry - self.ry</span><br><span class="line">        dvx = that.vx - self.vx</span><br><span class="line">        dvy = that.vy - self.vy</span><br><span class="line">        <span class="comment"># dv dot dr</span></span><br><span class="line">        dvdr = dx * dvx + dy * dvy </span><br><span class="line">        <span class="comment"># distance between particle centers at collison            </span></span><br><span class="line">        dist = self.radius + that.radius       </span><br><span class="line"></span><br><span class="line">        <span class="comment"># magnitude of normal force</span></span><br><span class="line">        magnitude = <span class="number">2</span> * self.mass * that.mass * dvdr / ((self.mass + that.mass) * dist)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># normal force, and in x and y directions</span></span><br><span class="line">        fx = magnitude * dx / dist</span><br><span class="line">        fy = magnitude * dy / dist</span><br><span class="line"></span><br><span class="line">        <span class="comment"># update velocities according to normal force</span></span><br><span class="line">        self.vx += fx / self.mass</span><br><span class="line">        self.vy += fy / self.mass</span><br><span class="line">        that.vx -= fx / that.mass</span><br><span class="line">        that.vy -= fy / that.mass</span><br><span class="line"></span><br><span class="line">        <span class="comment"># update collision counts</span></span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">        that.count += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bounce_off_verticalwall</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.vx = -self.vx</span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bounce_off_horizontalwall</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.vy = -self.vy</span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kinetic_energy</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span>*self.mass * (self.vx * self.vx + self.vy * self.vy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,t,pa,pb,countA,countB)</span>:</span></span><br><span class="line">        self.countA = countA</span><br><span class="line">        self.countB = countB</span><br><span class="line">        self.a = pa</span><br><span class="line">        self.b = pb</span><br><span class="line">        self.time = t</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.time &gt; other.time</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.time &gt;= other.time</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.time &lt;= other.time</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.time &lt; other.time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollisionSystem</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,particles)</span>:</span></span><br><span class="line">        self.t = <span class="number">0.0</span></span><br><span class="line">        self.HZ = <span class="number">0.1</span></span><br><span class="line">        self.particles = []</span><br><span class="line">        self.pq = []</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> particles:</span><br><span class="line">            self.particles.append(p)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#init game</span></span><br><span class="line">        pygame.init()</span><br><span class="line">        self.screen = pygame.display.set_mode((WIDTH,HEIGHT))</span><br><span class="line">        pygame.display.set_caption(<span class="string">'Collision System'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self,event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.a &gt;= <span class="number">0</span> <span class="keyword">and</span> event.countA != self.particles[event.a].get_count():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> event.b &gt;= <span class="number">0</span> <span class="keyword">and</span> event.countB != self.particles[event.b].get_count():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self,index,limit)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= len(self.particles):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.particles)):</span><br><span class="line">            <span class="keyword">if</span> i == index:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            dt = self.particles[index].time_to_hit(self.particles[i])</span><br><span class="line">            <span class="keyword">if</span> self.t + dt &lt;= limit:</span><br><span class="line">                event = Event(self.t + dt,index,i,self.particles[index].get_count(), self.particles[i].get_count())</span><br><span class="line">                heappush(self.pq,event)</span><br><span class="line">        </span><br><span class="line">        dtx = self.particles[index].time_to_hit_verticalwall()</span><br><span class="line">        dty = self.particles[index].time_to_hit_horizontalwall()</span><br><span class="line">        <span class="keyword">if</span> dtx + self.t &lt;= limit:</span><br><span class="line">            event = Event(self.t + dtx,index,<span class="number">-1</span>,self.particles[index].get_count(),<span class="number">0</span>)</span><br><span class="line">            heappush(self.pq,event)</span><br><span class="line">        <span class="keyword">if</span> dty + self.t &lt;= limit:</span><br><span class="line">            event = Event(self.t + dty,<span class="number">-1</span>,index,<span class="number">0</span>,self.particles[index].get_count())</span><br><span class="line">            heappush(self.pq,event)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cycle_draw</span><span class="params">(self,particle)</span>:</span></span><br><span class="line">        pygame.draw.circle(self.screen,particle.color,((int)(particle.rx),(int)(particle.ry)),(int)(particle.radius))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">redraw</span><span class="params">(self,limit)</span>:</span></span><br><span class="line">        self.screen.fill(DARK)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.particles)):</span><br><span class="line">            self.cycle_draw(self.particles[i])</span><br><span class="line"></span><br><span class="line">        pygame.display.update()</span><br><span class="line">        self.delay()</span><br><span class="line">        <span class="keyword">if</span> self.t &lt; limit:</span><br><span class="line">            event = Event(self.t + <span class="number">1</span>/self.HZ,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            heappush(self.pq,event)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delay</span><span class="params">(self)</span>:</span></span><br><span class="line">        lasttime = time.time()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">                <span class="keyword">if</span> event.type == QUIT:</span><br><span class="line">                    sys.exit()</span><br><span class="line">            curTime = time.time()</span><br><span class="line">            <span class="keyword">if</span> curTime - lasttime &gt; <span class="number">0.05</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">simulate</span><span class="params">(self,limit)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.particles)):</span><br><span class="line">            self.predict(i,limit)</span><br><span class="line">        event = Event(<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        heappush(self.pq,event)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> self.pq:</span><br><span class="line">            curr = heappop(self.pq)</span><br><span class="line">            <span class="keyword">if</span> self.isValid(curr) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.particles)):</span><br><span class="line">                self.particles[i].move(curr.time - self.t)</span><br><span class="line">            </span><br><span class="line">            self.t = curr.time</span><br><span class="line">            px = curr.a</span><br><span class="line">            py = curr.b</span><br><span class="line">            <span class="keyword">if</span> px &gt;= <span class="number">0</span> <span class="keyword">and</span> py &gt;= <span class="number">0</span>:</span><br><span class="line">                self.particles[px].bounce_off(self.particles[py])</span><br><span class="line">            <span class="keyword">elif</span> px &gt;= <span class="number">0</span> <span class="keyword">and</span> py &lt; <span class="number">0</span>:</span><br><span class="line">                self.particles[px].bounce_off_verticalwall()</span><br><span class="line">            <span class="keyword">elif</span> px &lt; <span class="number">0</span>  <span class="keyword">and</span> py &gt;= <span class="number">0</span>:</span><br><span class="line">                self.particles[py].bounce_off_horizontalwall()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.redraw(limit)</span><br><span class="line">            </span><br><span class="line">            self.predict(px,limit)</span><br><span class="line">            self.predict(py,limit)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    particles = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(NUMBER):</span><br><span class="line">        particles.append(Particle())</span><br><span class="line">    cs = CollisionSystem(particles)</span><br><span class="line">    cs.simulate(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CollisionSystem&quot;&gt;&lt;a href=&quot;#CollisionSystem&quot; class=&quot;headerlink&quot; title=&quot;CollisionSystem&quot;&gt;&lt;/a&gt;CollisionSystem&lt;/h3&gt;&lt;p&gt;最近一直在学习&lt;code&gt;princeton&lt;/code&gt;的算法课程一，已经坚持刷了两个星期了，完成了四个&lt;code&gt;project&lt;/code&gt;整体感觉难度很大，比一般工作中遇到的&lt;code&gt;project&lt;/code&gt;难度大多了，让我这种工作了几年的老鸟，吭哧吭哧的啃了半天，一个&lt;code&gt;project&lt;/code&gt;也要花上两三天才能完成，感觉很多问题都想不到，感觉国外的课程还真是难的一比。&lt;br&gt;印象比较深的就是这个粒子碰撞仿真系统，这个星期弄了一个星期，先把&lt;code&gt;java&lt;/code&gt;版本的调好，然后把java版本的代码写了&lt;code&gt;python&lt;/code&gt;版本，基本上全部调试好了，但是碰撞时的计算由于是浮点数的计算，涉及到阈值的处理，没有处理好，所以一直有问题。&lt;br&gt;两个粒子在碰撞时，由于计算误差的原因，导致在很短的时间出现二次碰撞，因此计算时一直存在一定的误差需要我们来解决这个问题。&lt;br&gt;1.22日对该&lt;code&gt;project&lt;/code&gt;又进行调试，解决了该bug，目前已经可以正常显示画面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="coursera" scheme="http://yoursite.com/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 172 场周赛</title>
    <link href="http://yoursite.com/2020/01/19/124/"/>
    <id>http://yoursite.com/2020/01/19/124/</id>
    <published>2020-01-19T08:29:30.831Z</published>
    <updated>2020-01-19T08:32:36.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="172场双周比赛"><a href="#172场双周比赛" class="headerlink" title="172场双周比赛"></a>172场双周比赛</h1><p>最后一题还有意思意外，其余的题目都很水，特别是第二题，很奇葩。</p><h2 id="5143-maximum-69-number"><a href="#5143-maximum-69-number" class="headerlink" title="5143. maximum-69-number"></a>5143. maximum-69-number</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个仅由数字 6 和 9 组成的正整数 <code>num</code>。<br>你最多只能翻转一位数字，将 <code>6</code> 变成 9，或者把 9 变成 6 。<br>请返回你可以得到的最大数字。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">9669</span></span><br><span class="line">输出：<span class="number">9969</span></span><br><span class="line">解释：</span><br><span class="line">改变第一位数字可以得到 <span class="number">6669</span> 。</span><br><span class="line">改变第二位数字可以得到 <span class="number">9969</span> 。</span><br><span class="line">改变第三位数字可以得到 <span class="number">9699</span> 。</span><br><span class="line">改变第四位数字可以得到 <span class="number">9666</span> 。</span><br><span class="line">其中最大的数字是 <span class="number">9969</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">9996</span></span><br><span class="line">输出：<span class="number">9999</span></span><br><span class="line">解释：将最后一位从 <span class="number">6</span> 变到 <span class="number">9</span>，其结果 <span class="number">9999</span> 是最大的数。</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">9999</span></span><br><span class="line">输出：<span class="number">9999</span></span><br><span class="line">解释：无需改变就已经是最大的数字了。</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>1 &lt;= num &lt;= 10^4</li><li>num 每一位上的数字都是 6 或者 9 。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-69-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-69-number</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接循环</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>把第一个6替换成9即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximum69Number</span> <span class="params">(self, num: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> int(str(num).replace(<span class="string">'6'</span>,<span class="string">'9'</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="55316-竖直打印单词"><a href="#55316-竖直打印单词" class="headerlink" title="55316. 竖直打印单词"></a>55316. 竖直打印单词</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 s。请你按照单词在 s 中的出现顺序将它们全部竖直返回。<br>单词应该以字符串列表的形式返回，必要时用空格补位，但输出尾部的空格需要删除（不允许尾随空格）。<br>每个单词只能放在一列上，每一列中也只能有一个单词。</p><p>示例 1：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"HOW ARE YOU"</span></span><br><span class="line">输出：[<span class="string">"HAY"</span>,<span class="string">"ORO"</span>,<span class="string">"WEU"</span>]</span><br><span class="line">解释：每个单词都应该竖直打印。 </span><br><span class="line"> <span class="string">"HAY"</span></span><br><span class="line"> <span class="string">"ORO"</span></span><br><span class="line"> <span class="string">"WEU"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"TO BE OR NOT TO BE"</span></span><br><span class="line">输出：[<span class="string">"TBONTB"</span>,<span class="string">"OEROOE"</span>,<span class="string">"   T"</span>]</span><br><span class="line">解释：题目允许使用空格补位，但不允许输出末尾出现空格。</span><br><span class="line"><span class="string">"TBONTB"</span></span><br><span class="line"><span class="string">"OEROOE"</span></span><br><span class="line"><span class="string">"   T"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"CONTEST IS COMING"</span></span><br><span class="line">输出：[<span class="string">"CIC"</span>,<span class="string">"OSO"</span>,<span class="string">"N M"</span>,<span class="string">"T I"</span>,<span class="string">"E N"</span>,<span class="string">"S G"</span>,<span class="string">"T"</span>]</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>1 &lt;= s.length &lt;= 200</li><li>s 仅含大写英文字母。</li><li>题目数据保证两个单词之间只有一个空格。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/print-words-vertically" target="_blank" rel="noopener">https://leetcode-cn.com/problems/print-words-vertically</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>题目就是细节处理而已<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; printVertically(<span class="built_in">string</span> s) &#123;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">        <span class="built_in">string</span> tmp;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs;</span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (getline(ss, tmp, <span class="string">' '</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                max_len = max(max_len, (<span class="keyword">int</span>)tmp.size());</span><br><span class="line">                vs.push_back(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vs.size(); i++) &#123;</span><br><span class="line">            tmp = vs[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp.size() &lt; max_len) &#123;</span><br><span class="line">                <span class="keyword">int</span> cs = max_len - tmp.size();</span><br><span class="line">                <span class="keyword">while</span> (cs--) vs[i] += <span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max_len; i++) &#123;</span><br><span class="line">            tmp = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vs.size(); j++) &#123;</span><br><span class="line">                tmp += vs[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> nm = tmp.size();</span><br><span class="line">            <span class="keyword">while</span> (nm &gt; <span class="number">0</span> &amp;&amp; tmp[nm - <span class="number">1</span>] == <span class="string">' '</span>) nm--;</span><br><span class="line">            tmp = tmp.substr(<span class="number">0</span>, nm);</span><br><span class="line">            </span><br><span class="line">            res.push_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5317-删除给定值的叶子节点"><a href="#5317-删除给定值的叶子节点" class="headerlink" title="5317. 删除给定值的叶子节点"></a>5317. 删除给定值的叶子节点</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一棵以 <code>root</code> 为根的二叉树和一个整数 target ，请你删除所有值为 <code>target</code> 的 叶子节点 。</p><p>注意，一旦删除值为 <code>target</code> 的叶子节点，它的父节点就可能变成叶子节点；如果新叶子节点的值恰好也是 target ，那么这个节点也应该被删除。</p><p>也就是说，你需要重复此过程直到不能继续删除。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">4</span>], target = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">4</span>]</span><br><span class="line">解释：</span><br><span class="line">上面左边的图中，绿色节点为叶子节点，且它们的值与 target 相同（同为 <span class="number">2</span> ），它们会被删除，得到中间的图。</span><br><span class="line">有一个新的节点变成了叶子节点且它的值与 target 相同，所以将再次进行删除，从而得到最右边的图。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>], target = <span class="number">3</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">2</span>], target = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1</span>]</span><br><span class="line">解释：每一步都删除一个绿色的叶子节点（值为 <span class="number">2</span>）。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], target = <span class="number">1</span></span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], target = <span class="number">1</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= target &lt;= 1000</li><li>每一棵树最多有 3000 个节点。</li><li>每一个节点值的范围是 [1, 1000] 。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/delete-leaves-with-a-given-value" target="_blank" rel="noopener">https://leetcode-cn.com/problems/delete-leaves-with-a-given-value</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>DFS.<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">removeLeafNodes</span><span class="params">(TreeNode* root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">NULL</span>;        </span><br><span class="line">        root-&gt;left = removeLeafNodes(root-&gt;left,target);</span><br><span class="line">        root-&gt;right = removeLeafNodes(root-&gt;right,target);</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right &amp;&amp; root-&gt;val == target) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5318-灌溉花园的最少水龙头数目"><a href="#5318-灌溉花园的最少水龙头数目" class="headerlink" title="5318. 灌溉花园的最少水龙头数目"></a>5318. 灌溉花园的最少水龙头数目</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>在 x 轴上有一个一维的花园。花园长度为 n，从点 0 开始，到点 n 结束。</p><p>花园里总共有<code>n + 1</code>个水龙头，分别位于 <code>[0, 1, ..., n]</code> 。</p><p>给你一个整数 n 和一个长度为 n + 1 的整数数组<code>ranges</code> ，其中 <code>ranges[i]</code> （下标从 0 开始）表示：如果打开点 i 处的水龙头，可以灌溉的区域为 <code>[i -  ranges[i], i + ranges[i]]</code>。</p><p>请你返回可以灌溉整个花园的 最少水龙头数目 。如果花园始终存在无法灌溉到的地方，请你返回 -1 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, ranges = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：</span><br><span class="line">点 <span class="number">0</span> 处的水龙头可以灌溉区间 [<span class="number">-3</span>,<span class="number">3</span>]</span><br><span class="line">点 <span class="number">1</span> 处的水龙头可以灌溉区间 [<span class="number">-3</span>,<span class="number">5</span>]</span><br><span class="line">点 <span class="number">2</span> 处的水龙头可以灌溉区间 [<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">点 <span class="number">3</span> 处的水龙头可以灌溉区间 [<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">点 <span class="number">4</span> 处的水龙头可以灌溉区间 [<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">点 <span class="number">5</span> 处的水龙头可以灌溉区间 [<span class="number">5</span>,<span class="number">5</span>]</span><br><span class="line">只需要打开点 <span class="number">1</span> 处的水龙头即可灌溉整个花园 [<span class="number">0</span>,<span class="number">5</span>] 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span>, ranges = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：即使打开所有水龙头，你也无法灌溉整个花园。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span>, ranges = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">8</span>, ranges = [<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">8</span>, ranges = [<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= n &lt;= 10^4</li><li>ranges.length == n + 1</li><li>0 &lt;= ranges[i] &lt;= 100</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-number-of-taps-to-open-to-water-a-garden" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-number-of-taps-to-open-to-water-a-garden</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 字符串hash</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>此题即为线段覆盖问题，找出最少的线段覆盖区间为<code>[0,n]</code>;</li><li>设<code>dp[x]</code>表示覆盖从<code>[0,x]</code>最少需要多少个线段，<code>dp[0] = 0</code>,覆盖区间<code>[0,0]</code>只需要<code>0</code>个线段即可；</li><li>将所有的线段按照左端点大小进行排序。对于新加入的线段<code>[x,y]</code>,首先检查有右边界<code>y</code>有没有被覆盖，如果被覆盖，则改线段不需要再加入；检查左边界<code>x</code>有没有被覆盖，如果没有被则返回<code>-1</code>;<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minTaps</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ranges)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; seg;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cost;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            seg.push_back(&#123;i-ranges[i],i+ranges[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(seg.begin(),seg.end(),cmp);</span><br><span class="line">        cost[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : seg)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cost.rbegin()-&gt;first &gt;= v[<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(cost.rbegin()-&gt;first &lt; v[<span class="number">0</span>])  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            cost[v[<span class="number">1</span>]] = cost.lower_bound(v[<span class="number">0</span>])-&gt;second + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(v[<span class="number">1</span>] &gt;= n) <span class="keyword">return</span> cost[v[<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;172场双周比赛&quot;&gt;&lt;a href=&quot;#172场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;172场双周比赛&quot;&gt;&lt;/a&gt;172场双周比赛&lt;/h1&gt;&lt;p&gt;最后一题还有意思意外，其余的题目都很水，特别是第二题，很奇葩。&lt;/p&gt;&lt;h2 id=&quot;5143-maximum-69-number&quot;&gt;&lt;a href=&quot;#5143-maximum-69-number&quot; class=&quot;headerlink&quot; title=&quot;5143. maximum-69-number&quot;&gt;&lt;/a&gt;5143. maximum-69-number&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个仅由数字 6 和 9 组成的正整数 &lt;code&gt;num&lt;/code&gt;。&lt;br&gt;你最多只能翻转一位数字，将 &lt;code&gt;6&lt;/code&gt; 变成 9，或者把 9 变成 6 。&lt;br&gt;请返回你可以得到的最大数字。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：num = &lt;span class=&quot;number&quot;&gt;9669&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;9969&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;改变第一位数字可以得到 &lt;span class=&quot;number&quot;&gt;6669&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;改变第二位数字可以得到 &lt;span class=&quot;number&quot;&gt;9969&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;改变第三位数字可以得到 &lt;span class=&quot;number&quot;&gt;9699&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;改变第四位数字可以得到 &lt;span class=&quot;number&quot;&gt;9666&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;其中最大的数字是 &lt;span class=&quot;number&quot;&gt;9969&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：num = &lt;span class=&quot;number&quot;&gt;9996&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;9999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：将最后一位从 &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; 变到 &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;，其结果 &lt;span class=&quot;number&quot;&gt;9999&lt;/span&gt; 是最大的数。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 17场双周比赛</title>
    <link href="http://yoursite.com/2020/01/13/123/"/>
    <id>http://yoursite.com/2020/01/13/123/</id>
    <published>2020-01-13T04:50:22.614Z</published>
    <updated>2020-01-13T04:58:22.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17场双周比赛"><a href="#17场双周比赛" class="headerlink" title="17场双周比赛"></a>17场双周比赛</h1><p>不如周赛题目经典</p><h2 id="5143-解压缩编码列表"><a href="#5143-解压缩编码列表" class="headerlink" title="5143. 解压缩编码列表"></a>5143. 解压缩编码列表</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个以行程长度编码压缩的整数列表 nums 。</p><p>考虑每相邻两个元素 <code>[a, b] = [nums[2*i], nums[2*i+1]]</code>（其中 i &gt;= 0 ），每一对都表示解压后有 a 个值为 b 的元素。</p><p>请你返回解压后的列表。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li>2 &lt;= nums.length &lt;= 100</li><li>nums.length % 2 == 0</li><li>1 &lt;= nums[i] &lt;= 100</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/decompress-run-length-encoded-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/decompress-run-length-encoded-list</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接循环</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接添加一定数量的数即可<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; decompressRLElist(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i += <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t(nums[i],nums[i+<span class="number">1</span>]);</span><br><span class="line">            res.insert(res.end(),t.begin(),t.end());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5144-矩阵区域和"><a href="#5144-矩阵区域和" class="headerlink" title="5144. 矩阵区域和"></a>5144. 矩阵区域和</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个 <code>m * n</code>的矩阵 mat 和一个整数 K ，请你返回一个矩阵 <code>answer</code>，其中每个 <code>answer[i][j]</code>是所有满足下述条件的元素<code>mat[r][c]</code>的和： </p><p><code>i - K &lt;= r &lt;= i + K, j - K &lt;= c &lt;= j + K</code><br><code>(r, c)</code>在矩阵内。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]], K = <span class="number">1</span></span><br><span class="line">输出：[[<span class="number">12</span>,<span class="number">21</span>,<span class="number">16</span>],[<span class="number">27</span>,<span class="number">45</span>,<span class="number">33</span>],[<span class="number">24</span>,<span class="number">39</span>,<span class="number">28</span>]]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]], K = <span class="number">2</span></span><br><span class="line">输出：[[<span class="number">45</span>,<span class="number">45</span>,<span class="number">45</span>],[<span class="number">45</span>,<span class="number">45</span>,<span class="number">45</span>],[<span class="number">45</span>,<span class="number">45</span>,<span class="number">45</span>]]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= m, n, K &lt;= 100</code></li><li><code>1 &lt;= mat[i][j] &lt;= 100</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/matrix-block-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/matrix-block-sum</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 利用或的特性即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>矩阵的前缀和，利用等式即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; matrixBlockSum(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat, <span class="keyword">int</span> K) &#123;</span><br><span class="line">        <span class="keyword">int</span> r = mat.size();</span><br><span class="line">        <span class="keyword">int</span> c = mat[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; sum(r+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(c+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res(r,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(c,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; ++j)&#123;</span><br><span class="line">                sum[i][j] = sum[i<span class="number">-1</span>][j] + sum[i][j<span class="number">-1</span>] - sum[i<span class="number">-1</span>][j<span class="number">-1</span>] + mat[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; ++j)&#123;</span><br><span class="line">                <span class="keyword">int</span> x1 = max(<span class="number">0</span>,i-K);</span><br><span class="line">                <span class="keyword">int</span> y1 = max(<span class="number">0</span>,j-K);</span><br><span class="line">                <span class="keyword">int</span> x2 = min(r<span class="number">-1</span>,i+K) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> y2 = min(c<span class="number">-1</span>,j+K) + <span class="number">1</span>;</span><br><span class="line">                res[i][j] = sum[x2][y2] - sum[x1][y2] - sum[x2][y1] + sum[x1][y1];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5145-祖父节点值为偶数的节点和"><a href="#5145-祖父节点值为偶数的节点和" class="headerlink" title="5145. 祖父节点值为偶数的节点和"></a>5145. 祖父节点值为偶数的节点和</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一棵二叉树，请你返回满足以下条件的所有节点的值之和：</p><p>该节点的祖父节点的值为偶数。（一个节点的祖父节点是指该节点的父节点的父节点。）<br>如果不存在祖父节点值为偶数的节点，那么返回 0 。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">18</span></span><br><span class="line">解释：图中红色节点的祖父节点的值为偶数，蓝色节点为这些红色节点的祖父节点。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>树中节点的数目在 1 到 10^4 之间。</li><li>每个节点的值在 1 到 100 之间。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/sum-of-nodes-with-even-valued-grandparent" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sum-of-nodes-with-even-valued-grandparent</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>DFS，将父亲节点和祖父节点都进行传递。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TreeNode * root,<span class="keyword">int</span> fa, <span class="keyword">int</span>  gfa,<span class="keyword">int</span> &amp;res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(gfa &gt; <span class="number">0</span> &amp;&amp; gfa%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            res += root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root-&gt;left,root-&gt;val,fa,res);</span><br><span class="line">        dfs(root-&gt;right,root-&gt;val,fa,res);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumEvenGrandparent</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        dfs(root,<span class="number">0</span>,<span class="number">0</span>,res);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5146-不同的循环子字符串"><a href="#5146-不同的循环子字符串" class="headerlink" title="5146. 不同的循环子字符串"></a>5146. 不同的循环子字符串</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 text ，请你返回满足下述条件的 不同 非空子字符串的数目：</p><p>可以写成某个字符串与其自身相连接的形式。<br>例如，abcabc 就是 abc 和它自身连接形成的。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text = <span class="string">"abcabcabc"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：<span class="number">3</span> 个子字符串分别为 <span class="string">"abcabc"</span> ， <span class="string">"bcabca"</span> 和 <span class="string">"cabcab"</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text = <span class="string">"leetcodeleetcode"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="number">2</span> 个子字符串为 <span class="string">"ee"</span> 和 <span class="string">"leetcodeleetcode"</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= text.length &lt;= 2000</code></li><li><code>text 只包含小写英文字母。</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/distinct-echo-substrings" target="_blank" rel="noopener">https://leetcode-cn.com/problems/distinct-echo-substrings</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 字符串hash</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>题目本身就需要进行<code>O(n^2)</code>次比较，但是关键在于如何优化比较字符串的算法。</li><li>如果按照常规的顺序比较的话，则时间复杂度为<code>O(n^3)</code>,我们需要可以通过快速的hash算法，可以在<code>O(1)</code>时间内对字符进行hash运算与比较。</li><li>关于字符串的hash算法，以前确实很少碰到，但是必须要对这种解法非常非常熟练，特别是hash函数的使用。</li><li>字符串的<code>hash</code>算法解释如下:</li></ol><ul><li>将字符串中的每一个字母都看做是一个数字（例：从a-z，视为1-26）；</li><li>选取两个合适的互质常数<code>B，H ( b &lt; h )</code>(互质，有用；b &lt; h,建议取 b和h均为质数);</li><li>定义哈希函数:<script type="math/tex; mode=display">hash(C)= (C_{1}*B^{m-1} + C_{2}*B^{m-2} + . . . + C_{0}*B^{0})mod(H)</script></li></ul></blockquote><ol><li>C代表一个字符串，用<code>C=c1 c2 c3 c4..cm</code>;表示该字符串，其中 ci 表示从前向后数的第 i 个字符；</li></ol><ul><li><p>方括号[ ]内的表达式：<code>c1*b^(m-1) + c2*b^(m-2) + . . . + c0*b^0</code>意为将字符串C当做 b进制数 来处理，b是基数；</p></li><li><p>关于对<code>h</code>取模，若<code>b，h</code>有公因子，那么不同的字符串取余之后的结果发生冲突的几率将大大大增加</p></li><li><p>计算上一步H(C)的过程是递归实现的：<code>H(i,j)</code>为从第<code>i</code>个字符到第<code>j</code>个字符构成的字符串的哈希值，<code>（i &lt;= j）</code>：</p><script type="math/tex; mode=display">H(i,j)= H(j) - H(i-1)*B^{j-i+1}</script></li></ul><ol><li>实际的计算过程如下：<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hash<span class="string">[L]</span> = hash<span class="string">[0]</span> * BASE^(L-<span class="number">1</span>) + hash<span class="string">[1]</span> * BASE^(L-<span class="number">2</span>) + ... + hash<span class="string">[L-1]</span> * BASE </span><br><span class="line">hash<span class="string">[r]</span> = hash<span class="string">[0]</span> * BASE^(r-<span class="number">1</span>) + hash<span class="string">[1]</span> * BASE^(r-<span class="number">2</span>) + ... + hash<span class="string">[L]</span> * BASE^(r-L) + ... + hash<span class="string">[r]</span> * BASE </span><br><span class="line">key(l,r) = hash<span class="string">[r]</span> - hash<span class="string">[L]</span> * pow<span class="string">[r - L]</span></span><br></pre></td></tr></table></figure><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll B = <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">distinctEchoSubstrings</span><span class="params">(<span class="built_in">string</span> text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = text.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt; h(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt; p(n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;ll&gt; same;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            h[i+<span class="number">1</span>] = (h[i]*B + text[i])%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            p[i+<span class="number">1</span>] = p[i]*B%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> get = [&amp;](<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;</span><br><span class="line">            <span class="keyword">return</span> (h[y] - h[x<span class="number">-1</span>]*p[y-x+<span class="number">1</span>]%MOD + MOD)%MOD;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= n; j += <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> len = (j-i+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> k = i + len - <span class="number">1</span>;</span><br><span class="line">                ll l = get(i,k);</span><br><span class="line">                ll r = get(k+<span class="number">1</span>,j);</span><br><span class="line">                <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">                    same.insert(l);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> same.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;17场双周比赛&quot;&gt;&lt;a href=&quot;#17场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;17场双周比赛&quot;&gt;&lt;/a&gt;17场双周比赛&lt;/h1&gt;&lt;p&gt;不如周赛题目经典&lt;/p&gt;&lt;h2 id=&quot;5143-解压缩编码列表&quot;&gt;&lt;a href=&quot;#5143-解压缩编码列表&quot; class=&quot;headerlink&quot; title=&quot;5143. 解压缩编码列表&quot;&gt;&lt;/a&gt;5143. 解压缩编码列表&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个以行程长度编码压缩的整数列表 nums 。&lt;/p&gt;&lt;p&gt;考虑每相邻两个元素 &lt;code&gt;[a, b] = [nums[2*i], nums[2*i+1]]&lt;/code&gt;（其中 i &amp;gt;= 0 ），每一对都表示解压后有 a 个值为 b 的元素。&lt;/p&gt;&lt;p&gt;请你返回解压后的列表。&lt;/p&gt;&lt;p&gt;示例：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 171周比赛</title>
    <link href="http://yoursite.com/2020/01/12/122/"/>
    <id>http://yoursite.com/2020/01/12/122/</id>
    <published>2020-01-12T15:46:02.882Z</published>
    <updated>2020-01-13T06:27:20.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="170比赛"><a href="#170比赛" class="headerlink" title="170比赛"></a>170比赛</h1><p>今天的题目非常不错，水平很高</p><h2 id="5307-将整数转换为两个无零整数的和"><a href="#5307-将整数转换为两个无零整数的和" class="headerlink" title="5307. 将整数转换为两个无零整数的和"></a>5307. 将整数转换为两个无零整数的和</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>「无零整数」是十进制表示中 不含任何 0 的正整数。</p><p>给你一个整数 n，请你返回一个 由两个整数组成的列表 [A, B]，满足：</p><p>A 和 B 都是无零整数，<code>A + B = n</code><br>题目数据保证至少有一个有效的解决方案。</p><p>如果存在多个有效解决方案，你可以返回其中任意一个。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">解释：A = <span class="number">1</span>, B = <span class="number">1.</span> A + B = n 并且 A 和 B 的十进制表示形式都不包含任何 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">11</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">10000</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">9999</span>]</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">69</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">68</span>]</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1010</span></span><br><span class="line">输出：[<span class="number">11</span>,<span class="number">999</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>2 &lt;= n &lt;= 10^4</li><li>在真实的面试中遇到过这道题？</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 数据量很小，暴力解决即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接判断即可<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isNotZero</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n = n/<span class="number">10</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getNoZeroIntegers(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n/<span class="number">2</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isNotZero(i)&amp;&amp;isNotZero(n-i))&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;i,n-i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5308-或运算的最小翻转次数"><a href="#5308-或运算的最小翻转次数" class="headerlink" title="5308. 或运算的最小翻转次数"></a>5308. 或运算的最小翻转次数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你三个正整数 a、b 和 c。</p><p>你可以对 a 和 b 的二进制表示进行位翻转操作，返回能够使按位或运算   a OR b == c  成立的最小翻转次数。</p><p>「位翻转操作」是指将一个数的二进制表示任何单个位上的 1 变成 0 或者 0 变成 1 。</p><p>示例 1：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="selector-tag">a</span> = <span class="number">2</span>, <span class="selector-tag">b</span> = <span class="number">6</span>, c = <span class="number">5</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：翻转后 <span class="selector-tag">a</span> = <span class="number">1</span> , <span class="selector-tag">b</span> = <span class="number">4</span> , c = <span class="number">5</span> 使得 <span class="selector-tag">a</span> OR <span class="selector-tag">b</span> == c</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = <span class="number">4</span>, b = <span class="number">2</span>, c = <span class="number">7</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= a &lt;= 10^9</li><li>1 &lt;= b &lt;= 10^9</li><li>1 &lt;= c &lt;= 10^9</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-flips-to-make-a-or-b-equal-to-c" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-flips-to-make-a-or-b-equal-to-c</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 利用或的特性即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>直接按位取即可，唯一需要注意的是，当或的结果为0时，要求两个数也必须都为0，则需要反转两次<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minFlips</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> bitC = ((c&amp;(<span class="number">1</span>&lt;&lt;i))&gt;&gt;i);</span><br><span class="line">            <span class="keyword">int</span> bitA = ((a&amp;(<span class="number">1</span>&lt;&lt;i))&gt;&gt;i);</span><br><span class="line">            <span class="keyword">int</span> bitB = ((b&amp;(<span class="number">1</span>&lt;&lt;i))&gt;&gt;i);</span><br><span class="line">            <span class="keyword">if</span>(bitC != (bitA|bitB))&#123;</span><br><span class="line">                <span class="keyword">if</span>(bitC == <span class="number">1</span>)&#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    res += bitA;</span><br><span class="line">                    res += bitB;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5309-连通网络的操作次数"><a href="#5309-连通网络的操作次数" class="headerlink" title="5309. 连通网络的操作次数"></a>5309. 连通网络的操作次数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>用以太网线缆将 n 台计算机连接成一个网络，计算机的编号从 0 到 n-1。线缆用 connections 表示，其中 connections[i] = [a, b] 连接了计算机 a 和 b。</p><p>网络中的任何一台计算机都可以通过网络直接或者间接访问同一个网络中其他任意一台计算机。</p><p>给你这个计算机网络的初始布线 connections，你可以拔开任意两台直连计算机之间的线缆，并用它连接一对未直连的计算机。请你计算并返回使所有计算机都连通所需的最少操作次数。如果不可能，则返回 -1 。 </p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, connections = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：拔下计算机 <span class="number">1</span> 和 <span class="number">2</span> 之间的线缆，并将它插到计算机 <span class="number">1</span> 和 <span class="number">3</span> 上。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：n = <span class="number">6</span>, connections = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">6</span>, connections = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：线缆数量不足。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, connections = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= n &lt;= 10^5</li><li>1 &lt;= connections.length &lt;= min(n*(n-1)/2, 10^5)</li><li>connections[i].length == 2</li><li>0 &lt;= connections[i][0], connections[i][1] &lt; n</li><li>connections[i][0] != connections[i][1]</li><li>没有重复的连接。</li><li>两台计算机不会通过多条线缆连接。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 并查集</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>将图分成几个集合，如果要求集合全部相连则需要集合的数目减一根线即可完成全部相连。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(x != f[x])&#123;</span><br><span class="line">            x = f[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">uni</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x1 = find(x,f);</span><br><span class="line">        <span class="keyword">int</span> y1 = find(y,f);</span><br><span class="line">        <span class="keyword">if</span>(x1 == y1)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        f[x1] = y1;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">makeConnected</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; connections)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f(n);</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; roots;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; c : connections)&#123;</span><br><span class="line">            uni(c[<span class="number">0</span>],c[<span class="number">1</span>],f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            roots.insert(find(i,f));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connections.size() &lt; n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> roots.size()<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5310-二指输入的的最小距离"><a href="#5310-二指输入的的最小距离" class="headerlink" title="5310. 二指输入的的最小距离"></a>5310. 二指输入的的最小距离</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>二指输入法定制键盘在 XY 平面上的布局如上图所示，其中每个大写英文字母都位于某个坐标处，例如字母 A 位于坐标 (0,0)，字母 B 位于坐标 (0,1)，字母 P 位于坐标 (2,3) 且字母 Z 位于坐标 (4,1)。</p><p>给你一个待输入字符串 word，请你计算并返回在仅使用两根手指的情况下，键入该字符串需要的最小移动总距离。坐标 (x1,y1) 和 (x2,y2) 之间的距离是 |x1 - x2| + |y1 - y2|。 </p><p>注意，两根手指的起始位置是零代价的，不计入移动总距离。你的两根手指的起始位置也不必从首字母或者前两个字母开始。</p><p>示例 1：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：word = <span class="string">"CAKE"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释： </span><br><span class="line">使用两根手指输入 <span class="string">"CAKE"</span> 的最佳方案之一是： </span><br><span class="line">手指 <span class="number">1</span> 在字母 <span class="string">'C'</span> 上 -&gt; 移动距离 = <span class="number">0</span> </span><br><span class="line">手指 <span class="number">1</span> 在字母 <span class="string">'A'</span> 上 -&gt; 移动距离 = 从字母 <span class="string">'C'</span> 到字母 <span class="string">'A'</span> 的距离 = <span class="number">2</span> </span><br><span class="line">手指 <span class="number">2</span> 在字母 <span class="string">'K'</span> 上 -&gt; 移动距离 = <span class="number">0</span> </span><br><span class="line">手指 <span class="number">2</span> 在字母 <span class="string">'E'</span> 上 -&gt; 移动距离 = 从字母 <span class="string">'K'</span> 到字母 <span class="string">'E'</span> 的距离  = <span class="number">1</span> </span><br><span class="line">总距离 = <span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：word = <span class="string">"HAPPY"</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释： </span><br><span class="line">使用两根手指输入 <span class="string">"HAPPY"</span> 的最佳方案之一是：</span><br><span class="line">手指 <span class="number">1</span> 在字母 <span class="string">'H'</span> 上 -&gt; 移动距离 = <span class="number">0</span></span><br><span class="line">手指 <span class="number">1</span> 在字母 <span class="string">'A'</span> 上 -&gt; 移动距离 = 从字母 <span class="string">'H'</span> 到字母 <span class="string">'A'</span> 的距离 = <span class="number">2</span></span><br><span class="line">手指 <span class="number">2</span> 在字母 <span class="string">'P'</span> 上 -&gt; 移动距离 = <span class="number">0</span></span><br><span class="line">手指 <span class="number">2</span> 在字母 <span class="string">'P'</span> 上 -&gt; 移动距离 = 从字母 <span class="string">'P'</span> 到字母 <span class="string">'P'</span> 的距离 = <span class="number">0</span></span><br><span class="line">手指 <span class="number">1</span> 在字母 <span class="string">'Y'</span> 上 -&gt; 移动距离 = 从字母 <span class="string">'A'</span> 到字母 <span class="string">'Y'</span> 的距离 = <span class="number">4</span></span><br><span class="line">总距离 = <span class="number">6</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">word</span> = <span class="string">"NEW"</span></span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">word</span> = <span class="string">"YEAR"</span></span><br><span class="line">输出：<span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>2 &lt;= word.length &lt;= 300</li><li>每个 word[i] 都是一个大写英文字母。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-distance-to-type-a-word-using-two-fingers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-distance-to-type-a-word-using-two-fingers</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>本题的<code>dp</code>不错，思路很新颖，当时没做出来，下来之后想出来。</li><li>两种解法都非常典型。</li><li>设<code>dp[i][j]</code>代表当前已经输入到了前<code>i</code>个字符，这时其中有一个手指的最后位置位于<code>j</code>处，另外一个手指最后位置处于<code>i</code>处的位置到达终点的最小距离。</li><li>我们需要采用从最终状态往前推的算法，最终状态为已经全部输完了所有的字符，且其中有一个手指可能随机位于字符串的位置，我们设这些状态全部为<code>0</code>;</li><li>我们可以这样递推，比如当前已经输入了前<code>i</code>个字符，必然有一个手指位于第<code>i</code>处。假设第1个手指位于<code>i</code>处，第二个手指位于第<code>j</code>处，则我们下一个动作肯定会输入第<code>i+1</code>个字符，则这时第<code>i+1</code>个字符，可以由第<code>1</code>个手指来输入，可以由第<code>2</code>个手指仍然处于第<code>j</code>个位置，所需的花费即为从第<code>i</code>个字符到第<code>i+1</code>个字符的距离,则这时状态转移方程为：<script type="math/tex; mode=display">dp[i][j] = dp[i+1][j] + move[i][i+1]</script>可以由第<code>2</code>个手指来输入，可以由第<code>1</code>个手指处于第<code>i</code>个位置，第二个手指则从第<code>j</code>个位置转移到第<code>i+1</code>处，则所需的花费即为从第<code>j</code>个字符到第<code>i+1</code>个字符的距离,则这时状态转移方程为：<script type="math/tex; mode=display">dp[i][j] = dp[i+1][i] + move[j][i+1]</script></li><li>我们采用从后往前推，<code>n</code>个字符全部输入完成为最终状态，只有<code>1</code>个字符输入为初始状态，且有一个手指为未输入状态<code>0</code>,所以最终返回<script type="math/tex; mode=display">dp[1][0]</script></li><li>设<code>dp[k][l][r]</code>为输入<code>k</code>个字符，两个手指的最后的字符位置。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">char</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = x - <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">int</span> n = y - <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(m/<span class="number">6</span>-n/<span class="number">6</span>) + <span class="built_in">abs</span>((m%<span class="number">6</span>)-(n%<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = word.size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>,INT_MAX));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            dp[n][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">                dp[i][j] = min(dp[i][j],dp[i+<span class="number">1</span>][j] + move(word[i<span class="number">-1</span>],word[i]));</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j] = min(dp[i][j],dp[i+<span class="number">1</span>][i]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = min(dp[i][j],dp[i+<span class="number">1</span>][i] + move(word[j<span class="number">-1</span>],word[i]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = word.size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; move(<span class="number">30</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">30</span>,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; ++j)&#123;</span><br><span class="line">                move[i][j] = <span class="built_in">abs</span>((i/<span class="number">6</span>)-(j/<span class="number">6</span>)) + <span class="built_in">abs</span>((i%<span class="number">6</span>)-(j%<span class="number">6</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; ++i)&#123;</span><br><span class="line">            move[<span class="number">26</span>][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">26</span>][<span class="number">26</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">26</span>][<span class="number">26</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> idx = word[i<span class="number">-1</span>] - <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">26</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">26</span>; ++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j][k] != <span class="number">0x3f3f3f3f</span>)&#123;</span><br><span class="line">                        dp[i][idx][k] = min(dp[i][idx][k],dp[i<span class="number">-1</span>][j][k] + move[j][idx]);</span><br><span class="line">                        dp[i][j][idx] = min(dp[i][j][idx],dp[i<span class="number">-1</span>][j][k] + move[k][idx]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> last = word.back() - <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            res = min(res,min(dp[n][last][i],dp[n][i][last]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>参考lee的答案<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">step</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">26</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(x/<span class="number">6</span>-y/<span class="number">6</span>) + <span class="built_in">abs</span>((x%<span class="number">6</span>)-(y%<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = word.size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(<span class="number">27</span>,INT_MAX);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*initial state*/</span></span><br><span class="line">        dp[<span class="number">26</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = word[i<span class="number">-2</span>] - <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">int</span> y = word[i<span class="number">-1</span>] - <span class="string">'A'</span>;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp1(<span class="number">27</span>,INT_MAX);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">26</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j] != INT_MAX)&#123;</span><br><span class="line">                    dp1[j] = min(dp1[j],dp[j] + step(x,y));</span><br><span class="line">                    dp1[x] = min(dp1[x],dp[j] + step(j,y)); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp = dp1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            res = min(res,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">step</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">26</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(x/<span class="number">6</span>-y/<span class="number">6</span>) + <span class="built_in">abs</span>((x%<span class="number">6</span>)-(y%<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = word.size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">27</span>,INT_MAX));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*initial state*/</span></span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">26</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = word[i<span class="number">-2</span>] - <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">int</span> y = word[i<span class="number">-1</span>] - <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">26</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j] != INT_MAX)&#123;</span><br><span class="line">                    dp[i][j] = min(dp[i][j],dp[i<span class="number">-1</span>][j] + step(x,y));</span><br><span class="line">                    dp[i][x] = min(dp[i][x],dp[i<span class="number">-1</span>][j] + step(j,y)); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            res = min(res,dp[n][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;170比赛&quot;&gt;&lt;a href=&quot;#170比赛&quot; class=&quot;headerlink&quot; title=&quot;170比赛&quot;&gt;&lt;/a&gt;170比赛&lt;/h1&gt;&lt;p&gt;今天的题目非常不错，水平很高&lt;/p&gt;&lt;h2 id=&quot;5307-将整数转换为两个无零整数的和&quot;&gt;&lt;a href=&quot;#5307-将整数转换为两个无零整数的和&quot; class=&quot;headerlink&quot; title=&quot;5307. 将整数转换为两个无零整数的和&quot;&gt;&lt;/a&gt;5307. 将整数转换为两个无零整数的和&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;「无零整数」是十进制表示中 不含任何 0 的正整数。&lt;/p&gt;&lt;p&gt;给你一个整数 n，请你返回一个 由两个整数组成的列表 [A, B]，满足：&lt;/p&gt;&lt;p&gt;A 和 B 都是无零整数，&lt;code&gt;A + B = n&lt;/code&gt;&lt;br&gt;题目数据保证至少有一个有效的解决方案。&lt;/p&gt;&lt;p&gt;如果存在多个有效解决方案，你可以返回其中任意一个。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Cousera】how to Learn</title>
    <link href="http://yoursite.com/2020/01/06/119/"/>
    <id>http://yoursite.com/2020/01/06/119/</id>
    <published>2020-01-06T15:33:57.869Z</published>
    <updated>2020-01-06T15:34:34.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《how-to-learn》课程总结"><a href="#《how-to-learn》课程总结" class="headerlink" title="《how to learn》课程总结"></a>《how to learn》课程总结</h2><ul><li>很久没有这么认真的去学习一门课程了，通过这样的持续的课程学习，对自己的心态和学习的方法突然有了很大的触动，对于学习的技巧上有了想法。现在想想为什么从小到大很少有国人去科学的了解大脑的学习过程，以及如何制定科学的学习计划。不管如何，学习能力对一个人的一生的影响时非常重大的，因为任何一个岗位都需要快速的学习能力和技巧的掌握能力，如何才能快速的掌握一门技能或者掌握一种知识都会对自身的职业生涯带来非常大的影响，在当今这个快速变化的社会，如何保持自身的竞争力，快速的学习能力是职场上必不可少的竞争力，而我们的学校和社会却很少开设这样的课程，非常庆幸能够生活在这样一个互联网时代，能够让人快速而又方便的获取知识。我觉得这样的科普知识非常的重要，而国内的学校和老师很少去灌输这样的技巧，全都靠学生们去自己摸索。</li></ul><a id="more"></a><h4 id="大脑的工作原理"><a href="#大脑的工作原理" class="headerlink" title="大脑的工作原理"></a>大脑的工作原理</h4><ul><li><code>两种思维方式</code>：研究发现大脑一般的思维有两种模式，一种为专注模式，一种为发散模式。专注模式适合处理数学计算、文字编辑、手工制作；发散模式适合处理艺术想象、科研、设计、创造等技巧；总的概括来说，专注模式适合需要注意力和经验的方式学习和工作，发散模式适合需要用创造性思维去解决问题的方式学习和工作。我们的大脑工作时，一般不可能同时工作在两种模式之下，但可以在不同的工作模式下进行切换，所以我们在学习时，如果遇到需要创造性思维去解决和理解一些很难的题目或者理论时，这时我们应当尽量的利用大脑的发散思维模式，处于发散思维模式下的大脑，创造力会非常强；而在专注模式下适合去处理一些机械性不需要技巧和学习的任务，比如运动、写作、计算等任务技巧。进入专注模式非常容易，比如我们在一个没有外界打扰的环境下，大脑很容易在短时间的25分钟内，很容易进入专注模式去工作，一旦进入专注模式，思维就不容易被外界打断，进入高效率的机械工作模式，我们在日常的学习中要习惯快速的去进入高效的专注模式，比如用噪声耳机防止外界打扰，或者用所谓的番茄计时法，倒计时25分钟左右，即可进入快速的专注模式进行快速的学习；当我们进行科研和艺术创造时，这时候发散思维就非常重要，因为此时可能遇到很难的问题一时间没有想到解法，或者需要灵感才能继续下去的时候，这时就需要充分的去发挥你的想象力和发散思维，这时候就需要进入发散模式下才能够解决出该问题和答案，这时我们进入发散模式的方法也有很多种，比如我们可以带着问题去外出进行散步或者运动，或者下午茶这种放松模式，或者我们带着问题进行稍微休息一下，十五到二十分钟足以，但是时间不宜过长。如何才能高效的利用大脑和开发大脑的功能，才能我们需要长时间去尝试的。课程中提到一个重要的观点即要注重劳逸结合的方式去工作和学习，因为一旦大脑用脑过度，反而很难进入发散模式去创造性的解决一些难题。在工作和学习时需要用脑子去做事情，而不是机械的像一个工具一样，不经思考和总结的人永远得不到成长。</li><li><code>大脑思考的方式</code>：本次课程中详细的描述了人的大脑的学习和思考的过程，大脑的结构其实类似于人一样倾向于惰性思维，遇到所谓的输入信息后，就像机器一样不加思索便得出结论，这种思考方式在被称为”zoombin”僵尸模式。所谓的固化思维便是如此，人的大脑的思考方式也是通过不断的学习新的事物，然后对新的事物进行加工，形成新的神经处理链路，然后固话在大脑的内部中，以方便未来遇到类似的事情或者信息输入时，直接使用已经固化的神经链路来进行机械化的处理即可，避免过度的思考而浪费能量，因为大脑本身思考的过程时需要消耗非常多的能量。这种所谓的固化思维模式可以带来很多好处，有时被我们称为所谓的直觉的东西就是大脑固化形成的思维链路而已，这样我们处理日常的工作时就根本不需要再进行思考进行，大脑只需要执行机械的思维模式指挥四肢运动即可，比如我们常简的穿衣服、打字、开车、做饭、吃饭、技能等动作方式，显而易见可以见到这种工作模式的带来的好处，我们所谓的常见的工作技能就是这些所谓的固化的神经链路而已；但是另一方面也有其不好的地方，就是人容易形成固化思维，由此也可能被成为所谓的固执，见到所有类似的事情都会采用相同的处理方法和方式，这也是为什么人到了一定年纪就会很容易形成固化思维而变得非常的固执。如何才能让人避免陷入这样的固化思维呢？常见的有两种方式，一是运动，科学发现通过运动，能够让人的大脑有二次发育，大脑内部会形成新的海马体，二时外界刺激，通过外界给予的刺激，让人不断的接触新的环境，学习新的东西，见识到新的事物，让大脑内部的神经链路更改或者产生新的神经链路取代旧的神经链路，从而会带来新的思考方式和看法，这也是为什么所谓的终生学习的好处。从小要教育自己的子女，要养成终生学习的好习惯，因为时代在发展，知识总是会过时，新生的事物在不断发展和产生。了解大脑的学习和思考的过程，有助于我们改变自己对事物产生偏见的根本原因。</li><li><code>习惯的形成</code>：书中重点讲述了习惯的形成由来以及拖延症的问题，首先讲述了习惯的形成，由几个必备条件组成，内心的暗示、奖励、信念等几个必要的条件，由于初次养成习惯的初期，因为好的习惯或者不好的习惯，身体或者心理得到了满足或者奖励，比如懒睡得习惯，就是由于因为懒睡身体得到了部分满足，久而久之就形成了习惯性得内心得暗示，比如懒睡发生时，自己内心再暗示身体可以再睡一下，以满足身体得需要，从而身体到了满足，久而久之就形成了好的习惯和坏得习惯，如果没有奖励或者心里暗示就不可能养成习惯。</li><li><code>拖延症</code>:拖延症得主要问题是人们面对一个很惧怕得成果，因为取得这个成果很难或者很痛苦，内心就在暗示自己不要去进行它，内心总是去关注结果，久而久之就觉得很困难很难完成，因而暗示自己再拖延一下，延迟自己得满足感。书中特意讲了如何对付拖延症，首先不要去关注事物本身得结果，因为关注结果，只会让自己感到越来越恐惧，越来越没有信心，更重要得是把这件看似很难得事情做好一个计划，分解成很多个小的子任务，定时完成每一阶段的任务，关注进展和进程本身，不管多么困难或者难办，每天前进一点，过一段时间就会发现，随着事情的进展，困难的事情似乎没有人们想象的那么艰难。对于一个人，他的心态和信心很重要，如何面对困难和解决困难都是一件值得让人深思的事情。</li><li><code>两种记忆模式</code>：短期记忆和长期记忆模式，短期记忆主要用于学习新的事物，接受新的观念，适合于处理工作。长期记忆适合于记忆和存储某些特定的事情。所有的推理学习都是先存放于短期记忆空间中。研究发现，人的短期工作记忆可以非常快的记住新生事物，但是也会非常快，并且短期记忆存储空间非常小，而人的长期工作记忆空间近乎无穷大，但是要从短期记忆空间转移到长期记忆空间不容易，需要进行反复的练习，课程提到了练习的技巧，通过短时间内高频率的定期快速的练习可以加强这种记忆，从而将其从短期记忆存储空间转到长期记忆空间。文中还提到了如何加强记忆的技巧，即通过特定的类比或者图形来加强记忆，人类的大脑总是喜欢直观的图形记忆，而对枯燥的数字和文字记忆实际不够擅长，我们可以通过联想一幅画面的形式来记住某些事，比如可以用特定的时间、地点、感受、如何发生等等类似的小技巧来记住某些特定的事物，加强自己的长期记忆。</li><li><code>假象现象</code>：所谓的假象模式，即是自己长期练习自己已经非常熟悉的区域和内容时，这时就会对自己的处理能力产生假象，以为自己可以处理所有的事情，实际上许多不熟悉或者很难得问题没有遇到，这时就需要自己主动去打破自己得认知，也即是所谓得打破所谓得舒适区。我们在学习过程中，需要经常接受挑战，主动去挑战难题或者自己不熟悉得领域，才能真正得学到东西，才能获得成长。<h4 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h4>书中也有几名非常知名得教授提到了他们如何学习得方法:</li><li><code>带着问题去学习</code>:首先需要自己去温习参考书，然后带着总结和理解，同时带着问题在课程上去学习。</li><li><code>练习</code>: 定期要学会练习，练习时记住要找自己不会得题目去做，对于自己已经非常熟悉得题目，不要再浪费时间。要对课后习题去多理解。一定要自己去弄明白习题.</li><li><code>与同行交流</code>:要学会与其他人进行交流，其次要去理解他人，尝试去理解他为什么会这么思考，因为站在他得角度去思考问题。</li><li><code>两种思维的切换</code>: 遇到难题或者不懂得地方要学会发散思维和专注模式两种思维方式得切换。</li><li><code>信息来源得筛选</code>: 现实世界首先的信息来源问题，如何才能验证好的与坏的。如果本身学的知识是错误得是一种可悲，建议要从权威得课程学起，而不是要去弄那些很偏得小道消息来源。这个问题其实很关键，现在的国人很多时候对于信息来源的正确性不能分辨真伪，但是我们作为一个有知识受过高等教育的青年人应当牢记这个核心问题，如何去找到有价值的学习资料，这也是种非常非常重要的能力。</li><li><code>树立良好得价值观和人生观</code>: 如何保持对学习的兴趣和动力?要有求知欲<br>建议要多去学习一些名人的人物传记，好好思考他们是怎么面对人生，怎样的价值观和人生观。大科学家传记阅读。传记或者自传类文学是很好的读物，忏悔录</li><li><code>学会倾听</code>: 尊重别人即为自己认真倾听别人的意见，其实并不一定需要赞同别人的观点，而是站在别人的角度上去帮别人思考他为什么会得到这样的决定和赞同，“我明白为什么你是对的？”，“我理解你为什么这样想的原因了？”，采用这种更容易让人接受的方式去沟通和交流反而能够让人去接受你，而不是简单粗暴强压自己的想法给别人，或者一上来就指出别人的想法的错误，那样会让人无法接受，并且让人觉得你并不尊重别人的想法。</li></ul><h4 id="如何复习"><a href="#如何复习" class="headerlink" title="如何复习"></a>如何复习</h4><ul><li><code>check1</code>:加入一个兴趣小组，通过大家的交流学习，相互促进；</li><li><code>check2</code>:考试时复习，并不是要重新学习课本，而是集中再主要去解决问题，做习题，带着问题取思考。把主要步骤和解题思路写出来；</li><li><code>check3</code>: 对于自己已经非常熟悉得题目，不要浪费时间；</li><li><code>check4</code>: 注重劳逸结合；</li></ul><h4 id="如何准备考试"><a href="#如何准备考试" class="headerlink" title="如何准备考试:"></a>如何准备考试:</h4><ol><li>Did you make a serious effort to understand the text?<br>（你是否真正得理解教科书?)</li><li>Did you work with classmates on homework problems?<br>(你是否与同学一起解决家庭作业问题)</li><li>Did you attempt to outline each homework question before discussing it with classmates?(在与同学进行讨论家庭作业时，你是否尝试过独立思考过每一个问题)</li><li>Did you participate actively in homework group discussions?（你是在组内讨论时是否积极活跃？）</li><li>Did you consult with the instructor/teach assistants when you were having trouble?<br>（你遇到问题时，是否向你得助教请教过？）</li><li>Did you understand all of your homework problem solutions before the assignment was handed in?（你是提交作业时是否详细理解你得家庭作业得每个问题得解法）</li><li>Did you ask in class for explanations of homework problems that were unclear to you?（你遇到不懂的家庭作业的问题时，是否向你的同学请教过？）</li><li>If you had a study guide, did you carefully go through it before the test and convince yourself you understood all of thematerial?（如果你在考试之前是否从头到尾详细阅读过学习引导，并且理解其中所有的学习材料？）</li><li>Did you attempt to outline lots of problem solutions quickly without spending time doing the algebra?（你是否不需要详细计算就能很快知道大部分问题的解法？）</li><li>Did you go over the study guide and problems with classmates and quiz one another?（你是否跟你的同学一起详细阅读过学习引导和问题，并向其中的部分同学进行过交流和询问？）</li><li>If there was a review session, did you attend and ask questions about any concepts or ideas that you were unsure of?<br>（如果有复习课程，你是否主动参与提问某些你不是很清楚的细节和解法？）</li><li>Did you get a reasonable night’s sleep before the test?<br>（在考试前一天晚上，你是否睡眠充足？）</li></ol><h4 id="如何书写总结"><a href="#如何书写总结" class="headerlink" title="如何书写总结"></a>如何书写总结</h4><p>课程种有一个哈佛大学的教写作的教授提到的几个观点，我认为非常有价值的值得去思考的，关于写作的技巧。</p><ul><li><code>表达清楚</code>:文中提到的很关键的问题，文章写的好的首要因素时要表达清楚，用简单明了的方式把事情直接表达出来，要用平淡和朴实的语句来表达，切记不要华丽的辞藻和长句子。</li><li><code>表达思想</code>:其次才是表达的思想，关于表达思想的问题，教授建议我们先不要急着去表达思想，先去看看别人表达的思想，再加上自己的思考，久而久之就能自然而然的表达出来自己的思想了。</li><li><code>学会写摘要</code>: 学会写摘要这个技巧，通过学习别人的书籍或者论文，用摘要的方式快速的写出来，一方面时能够快速的锻炼自己的写作能力，另外一方面是可以快速的学习知识，提升自己的总结和表达能力，让自己的写作更加具有逻辑性和连贯性，这是我们需要长期学习的。这也是国内很多专业的文字秘书的学习方法，值得我们去思考和思索。如果想要知道一个人内心什么想法，专门去研究他的讲话内容即可，从他的讲话内容种提炼出摘要，就知道他有什么样的思想。</li></ul><h4 id="如何考试时面对难题"><a href="#如何考试时面对难题" class="headerlink" title="如何考试时面对难题"></a>如何考试时面对难题</h4><ul><li><code>注重复习</code>：无论如何，考试之前一定要复习，否则再多的考试技巧也时白费，要注重复习的重要性。</li><li><code>思想认识</code>: 首先要有正确的认识，遇到难题或者不会的题目是大概率事件，这时你需要做的只是放松自己的心情，深呼吸几次，然后继续前行，作为自己放松避免自己进入紧张的状态。</li><li><code>发散思维模式</code>: 首先通读所有的题目，先难后易，先读懂难题，带着难题取做简单的题目，可能不经意间就会做出来题目；因为这样可以充分的利用发散思维去解决难得题目。</li></ul><h4 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h4><ul><li><p><code>困难任务得处理</code>:遇到觉得非常困难的事情如何处理：首先要为这件事情制定一个计划，分成很多个小目标，完成整个任务很难，但时完成一个小目标很容易，定期抽时间完成小目标，将一个一个小目标坚持完成，小目标完成后立即转回正常工作，最终发现完成整件非常困难的事情，其实没有那么的难。分解任务，分段完成，千万不要想着一次将事情全部完成，本身完成的目标其实很难；二是 一定要定期抽时间出来完成，因为如果放置时间过长就会出现困难。</p></li><li><p><code>避免偏见</code>:遇到问题时要学会交流与沟通，而不是置之不理。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《how-to-learn》课程总结&quot;&gt;&lt;a href=&quot;#《how-to-learn》课程总结&quot; class=&quot;headerlink&quot; title=&quot;《how to learn》课程总结&quot;&gt;&lt;/a&gt;《how to learn》课程总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;很久没有这么认真的去学习一门课程了，通过这样的持续的课程学习，对自己的心态和学习的方法突然有了很大的触动，对于学习的技巧上有了想法。现在想想为什么从小到大很少有国人去科学的了解大脑的学习过程，以及如何制定科学的学习计划。不管如何，学习能力对一个人的一生的影响时非常重大的，因为任何一个岗位都需要快速的学习能力和技巧的掌握能力，如何才能快速的掌握一门技能或者掌握一种知识都会对自身的职业生涯带来非常大的影响，在当今这个快速变化的社会，如何保持自身的竞争力，快速的学习能力是职场上必不可少的竞争力，而我们的学校和社会却很少开设这样的课程，非常庆幸能够生活在这样一个互联网时代，能够让人快速而又方便的获取知识。我觉得这样的科普知识非常的重要，而国内的学校和老师很少去灌输这样的技巧，全都靠学生们去自己摸索。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="coursera" scheme="http://yoursite.com/categories/coursera/"/>
    
    
      <category term="coursera" scheme="http://yoursite.com/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 895题</title>
    <link href="http://yoursite.com/2020/01/05/121/"/>
    <id>http://yoursite.com/2020/01/05/121/</id>
    <published>2020-01-05T07:37:14.189Z</published>
    <updated>2020-01-06T05:16:04.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="895-最大频率栈"><a href="#895-最大频率栈" class="headerlink" title="895. 最大频率栈"></a>895. 最大频率栈</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>实现 <code>FreqStack</code>，模拟类似栈的数据结构的操作的一个类。FreqStack 有两个函数：<br>push(int x)，将整数 x 推入栈中。<br>pop()，它移除并返回栈中出现最频繁的元素。<br>如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。</p><p>示例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">"FreqStack"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"pop"</span>,<span class="string">"pop"</span>,<span class="string">"pop"</span>,<span class="string">"pop"</span>],</span><br><span class="line">[[],[<span class="number">5</span>],[<span class="number">7</span>],[<span class="number">5</span>],[<span class="number">7</span>],[<span class="number">4</span>],[<span class="number">5</span>],[],[],[],[]]</span><br><span class="line">输出：[null,null,null,null,null,null,null,<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">解释：</span><br><span class="line">执行六次 .push 操作后，栈自底向上为 [<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>]。然后：</span><br><span class="line"></span><br><span class="line">pop() -&gt; 返回 <span class="number">5</span>，因为 <span class="number">5</span> 是出现频率最高的。</span><br><span class="line">栈变成 [<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>]。</span><br><span class="line"></span><br><span class="line">pop() -&gt; 返回 <span class="number">7</span>，因为 <span class="number">5</span> 和 <span class="number">7</span> 都是频率最高的，但 <span class="number">7</span> 最接近栈顶。</span><br><span class="line">栈变成 [<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>]。</span><br><span class="line"></span><br><span class="line">pop() -&gt; 返回 <span class="number">5</span> 。</span><br><span class="line">栈变成 [<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>]。</span><br><span class="line"></span><br><span class="line">pop() -&gt; 返回 <span class="number">4</span> 。</span><br><span class="line">栈变成 [<span class="number">5</span>,<span class="number">7</span>]。</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li>对 <code>FreqStack.push(int x)</code> 的调用中 <code>0 &lt;= x &lt;= 10^9</code>。</li><li>如果栈的元素数目为零，则保证不会调用 <code>FreqStack.pop()</code>。</li><li>单个测试样例中，对 <code>FreqStack.push</code>的总调用次数不会超过 <code>10000</code>。</li><li>单个测试样例中，对 <code>FreqStack.pop</code>的总调用次数不会超过<code>10000</code>。</li><li>所有测试样例中，对 <code>FreqStack.push</code> 和 <code>FreqStack.pop</code> 的总调用次数不会超过 <code>150000</code>。</li></ul><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>显然，我们更关心元素的频率。令 <code>freq</code>作为<code>xx</code>到 <code>xx</code> 的出现次数的映射 <code>Map</code>。<br>此外，我们也（可能）关心 <code>maxfreq</code>，即栈中任意元素的当前最大频率。这是理所应当的事情，因为我们必须弹出频率最高的元素。<br>那么当前主要的问题就变成了：在具有相同的（最大）频率的元素中，怎么判断那个元素是最新的？我们可以使用栈来查询这一信息：靠近栈顶的元素总是相对更新一些。<br>为此，我们令<code>group</code>作为从频率到具有该频率的元素的映射。到目前，我们已经实现了<code>FreqStack</code>的所有必要的组件。<br>算法<br>实际上，作为实现层面上的一点细节，如果 x 的频率为 f，那么我们将获取在所有 <code>group[i] (i &lt;= f)</code>中的 x,而不仅仅是栈顶的那个。这是因为每个 <code>group[i]</code>都会存储与第 i 个 x 副本相关的信息。<br>此后，我们仅仅需要如上所述维护 <code>freq</code>，<code>group</code>，以及 <code>maxfreq</code>。</p><ol><li>解法中采用数组加链表的方式简单的写了一组<code>hash</code>函数，用来保存所有的值出现的次数统计；</li><li>所有的栈采用单链表维护，每次映射时加入头部即可。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH_MAX_NODE 10007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH(x) (x)%HASH_MAX_NODE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FREQ_MAX_NODE 10001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b) ((a) &gt;= (b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN(a,b) ((a) &lt;= (b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DuListNode</span> * <span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DuListNode</span> * <span class="title">prev</span>;</span></span><br><span class="line">&#125;DuListNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct ListNode&#123;</span></span><br><span class="line"><span class="comment">    int key;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode * next;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    DuListNode **table;</span><br><span class="line">&#125;HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    HashMap * freq;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> ** <span class="title">freqlist</span>;</span></span><br><span class="line">    <span class="keyword">int</span> maxFreq;</span><br><span class="line">&#125; FreqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*simple hash */</span></span><br><span class="line"><span class="function">HashMap* <span class="title">hashMapInit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashMapGet</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapPut</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key, <span class="keyword">int</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapRemove</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapFree</span><span class="params">(HashMap* pObj)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash init*/</span></span><br><span class="line"><span class="function">HashMap* <span class="title">hashMapInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HashMap *pObj = (HashMap *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashMap));</span><br><span class="line">    pObj-&gt;table = (DuListNode **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuListNode *)*HASH_MAX_NODE);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HASH_MAX_NODE; ++i)&#123;</span><br><span class="line">        pObj-&gt;table[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash value get*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashMapGet</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> keyId = <span class="number">0</span>;</span><br><span class="line">    DuListNode * curr = <span class="literal">NULL</span>;</span><br><span class="line">    DuListNode * next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    assert(pObj != <span class="literal">NULL</span>);</span><br><span class="line">    keyId = HASH(key);</span><br><span class="line">    curr = pObj-&gt;table[keyId];</span><br><span class="line">    <span class="keyword">while</span>(curr&amp;&amp;curr-&gt;key != key)&#123;</span><br><span class="line">        curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!curr)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> curr-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash value set*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapPut</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> keyId = <span class="number">0</span>;</span><br><span class="line">    DuListNode * curr = <span class="literal">NULL</span>;</span><br><span class="line">    DuListNode * next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    assert(pObj != <span class="literal">NULL</span>);</span><br><span class="line">    keyId = HASH(key);</span><br><span class="line">    curr = pObj-&gt;table[keyId];</span><br><span class="line">    <span class="keyword">while</span>(curr&amp;&amp;curr-&gt;key != key)&#123;</span><br><span class="line">        curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next = pObj-&gt;table[keyId];</span><br><span class="line">    <span class="keyword">if</span>(!curr)&#123;</span><br><span class="line">        curr = (DuListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuListNode));</span><br><span class="line">        curr-&gt;key = key;</span><br><span class="line">        curr-&gt;val = val; </span><br><span class="line">        curr-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">        curr-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        next = pObj-&gt;table[keyId];</span><br><span class="line">        pObj-&gt;table[keyId] = curr;</span><br><span class="line">        curr-&gt;next = next;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> != next)&#123;</span><br><span class="line">            next-&gt;prev = curr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        curr-&gt;val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash key remove*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapRemove</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> keyId = <span class="number">0</span>;</span><br><span class="line">    DuListNode * curr = <span class="literal">NULL</span>;</span><br><span class="line">    DuListNode * next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    assert(pObj != <span class="literal">NULL</span>);</span><br><span class="line">    keyId = HASH(key);</span><br><span class="line">    curr = pObj-&gt;table[keyId];</span><br><span class="line">    <span class="keyword">while</span>(curr&amp;&amp;curr-&gt;key != key)&#123;</span><br><span class="line">        curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == curr)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == curr-&gt;prev)&#123;</span><br><span class="line">        pObj-&gt;table[keyId] = curr-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(curr-&gt;next)&#123;</span><br><span class="line">            curr-&gt;next-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(curr);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        curr-&gt;prev-&gt;next = curr-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(curr-&gt;next)&#123;</span><br><span class="line">            curr-&gt;next-&gt;prev = curr-&gt;prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(curr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash value debug*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapDebug</span><span class="params">(HashMap * pObj)</span></span>&#123;</span><br><span class="line">    DuListNode * curr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    assert(pObj != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HASH_MAX_NODE; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pObj-&gt;table[i])&#123;</span><br><span class="line">            curr = pObj-&gt;table[i];</span><br><span class="line">            <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d:%d  "</span>,curr-&gt;key,curr-&gt;val);</span><br><span class="line">                curr = curr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash free*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapFree</span><span class="params">(HashMap* pObj)</span> </span>&#123;</span><br><span class="line">    DuListNode * node = <span class="literal">NULL</span>;</span><br><span class="line">    DuListNode * curr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    assert(pObj != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HASH_MAX_NODE; ++i)&#123;</span><br><span class="line">        curr = pObj-&gt;table[i];</span><br><span class="line">        <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">            node = curr;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">        pObj-&gt;table[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(pObj-&gt;table);</span><br><span class="line">    <span class="built_in">free</span>(pObj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FreqStack* <span class="title">freqStackCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FreqStack * pObj = (FreqStack *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(FreqStack));</span><br><span class="line">    pObj-&gt;freq = hashMapInit();</span><br><span class="line">    pObj-&gt;freqlist = (struct ListNode **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode *)*FREQ_MAX_NODE);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FREQ_MAX_NODE; ++i)&#123;</span><br><span class="line">        pObj-&gt;freqlist[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pObj-&gt;maxFreq = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freqStackPush</span><span class="params">(FreqStack* obj, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> freq = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> * <span class="title">curr</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">    assert(obj != <span class="literal">NULL</span>);</span><br><span class="line">    freq = hashMapGet(obj-&gt;freq,x);</span><br><span class="line">    freq++;</span><br><span class="line">    hashMapPut(obj-&gt;freq,x,freq);</span><br><span class="line">    obj-&gt;maxFreq = MAX(freq,obj-&gt;maxFreq);</span><br><span class="line">    curr = (struct ListNode * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line">    curr-&gt;val = x;</span><br><span class="line">    curr-&gt;next = obj-&gt;freqlist[freq];</span><br><span class="line">    obj-&gt;freqlist[freq] = curr;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">freqStackPop</span><span class="params">(FreqStack* obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> freq = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> * <span class="title">curr</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">    assert(obj != <span class="literal">NULL</span>);</span><br><span class="line">    val = obj-&gt;freqlist[obj-&gt;maxFreq]-&gt;val;</span><br><span class="line">    curr = obj-&gt;freqlist[obj-&gt;maxFreq];</span><br><span class="line">    obj-&gt;freqlist[obj-&gt;maxFreq] = curr-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(obj-&gt;freqlist[obj-&gt;maxFreq] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        obj-&gt;maxFreq--;</span><br><span class="line">    &#125;</span><br><span class="line">    freq = hashMapGet(obj-&gt;freq,val);</span><br><span class="line">    hashMapPut(obj-&gt;freq,val,freq<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">free</span>(curr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freqStackFree</span><span class="params">(FreqStack* obj)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> * <span class="title">curr</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> * <span class="title">node</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">    assert(obj != <span class="literal">NULL</span>);</span><br><span class="line">    hashMapFree(obj-&gt;freq);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FREQ_MAX_NODE; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj-&gt;freqlist[i])&#123;</span><br><span class="line">            curr = obj-&gt;freqlist[i];</span><br><span class="line">            <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">                node = curr;</span><br><span class="line">                curr = curr-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">            obj-&gt;freqlist[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(obj-&gt;freqlist);</span><br><span class="line">    <span class="built_in">free</span>(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FreqStack struct will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FreqStack* obj = freqStackCreate();</span></span><br><span class="line"><span class="comment"> * freqStackPush(obj, x);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * int param_2 = freqStackPop(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * freqStackFree(obj);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;895-最大频率栈&quot;&gt;&lt;a href=&quot;#895-最大频率栈&quot; class=&quot;headerlink&quot; title=&quot;895. 最大频率栈&quot;&gt;&lt;/a&gt;895. 最大频率栈&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;实现 &lt;code&gt;FreqStack&lt;/code&gt;，模拟类似栈的数据结构的操作的一个类。FreqStack 有两个函数：&lt;br&gt;push(int x)，将整数 x 推入栈中。&lt;br&gt;pop()，它移除并返回栈中出现最频繁的元素。&lt;br&gt;如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。&lt;/p&gt;&lt;p&gt;示例：&lt;br&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;FreqStack&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;pop&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;pop&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;pop&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;pop&quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[],[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],[],[],[],[]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[null,null,null,null,null,null,null,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;执行六次 .push 操作后，栈自底向上为 [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]。然后：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop() -&amp;gt; 返回 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;，因为 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; 是出现频率最高的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;栈变成 [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop() -&amp;gt; 返回 &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;，因为 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; 和 &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 都是频率最高的，但 &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 最接近栈顶。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;栈变成 [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop() -&amp;gt; 返回 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;栈变成 [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop() -&amp;gt; 返回 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;栈变成 [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 170周比赛</title>
    <link href="http://yoursite.com/2020/01/05/120/"/>
    <id>http://yoursite.com/2020/01/05/120/</id>
    <published>2020-01-05T06:11:31.314Z</published>
    <updated>2020-01-05T06:11:31.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="170比赛"><a href="#170比赛" class="headerlink" title="170比赛"></a>170比赛</h1><p>本周题目比较简单，基本上都是常规题目。</p><h2 id="5303-解码字母到整数映射"><a href="#5303-解码字母到整数映射" class="headerlink" title="5303. 解码字母到整数映射"></a>5303. 解码字母到整数映射</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>s</code>，它由数字<code>（&#39;0&#39; - &#39;9&#39;）</code>和<code>&#39;#&#39;</code>组成。我们希望按下述规则将 s 映射为一些小写英文字符：</p><ul><li>字符<code>（&#39;a&#39; - &#39;i&#39;）</code>分别用<code>（&#39;1&#39; - &#39;9&#39;）</code>表示。</li><li>字符<code>（&#39;j&#39; - &#39;z&#39;）</code>分别用<code>（&#39;10#&#39; - &#39;26#&#39;）</code>表示。<br>返回映射之后形成的新字符串。<br>题目数据保证映射始终唯一。</li></ul><a id="more"></a><p>示例 1：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"10#11#12"</span></span><br><span class="line">输出：<span class="string">"jkab"</span></span><br><span class="line">解释：<span class="string">"j"</span> -&gt; <span class="string">"10#"</span> , <span class="string">"k"</span> -&gt; <span class="string">"11#"</span> , <span class="string">"a"</span> -&gt; <span class="string">"1"</span> , <span class="string">"b"</span> -&gt; <span class="string">"2"</span>.</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"1326#"</span></span><br><span class="line">输出：<span class="string">"acz"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"25#"</span></span><br><span class="line">输出：<span class="string">"y"</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "<span class="number">12345678910</span>#<span class="number">11#12#13#14</span>#<span class="number">15#16#17#18</span>#<span class="number">19#20#21#22</span>#<span class="number">23#24#25#26</span>#"</span><br><span class="line">输出："abcdefghijklmnopqrstuvwxyz"</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s[i]</code> 只包含数字<code>（&#39;0&#39;-&#39;9&#39;）</code>和 <code>&#39;#&#39;</code>字符。</li><li><code>s</code>是映射始终存在的有效字符串。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/decrypt-string-from-alphabet-to-integer-mapping" target="_blank" rel="noopener">https://leetcode-cn.com/problems/decrypt-string-from-alphabet-to-integer-mapping</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接翻译即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>按照题目中规定的替换原则，如果替换时出现了<code>#</code>,则前两位的数字一定大于<code>9</code>;</li><li>我们只需要判断当前的字符串后面紧跟的第三位是否为<code>#</code>即可；<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">freqAlphabets</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size();)&#123;</span><br><span class="line">            <span class="keyword">if</span>((i+<span class="number">2</span>) &lt; n &amp;&amp; s[i+<span class="number">2</span>] == <span class="string">'#'</span>)&#123;</span><br><span class="line">                res.push_back(<span class="string">'a'</span> + stoi(s.substr(i,<span class="number">2</span>))<span class="number">-1</span>);</span><br><span class="line">                i += <span class="number">3</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.push_back(<span class="string">'a'</span> + stoi(s.substr(i,<span class="number">1</span>))<span class="number">-1</span>);</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5304-子数组异或查询"><a href="#5304-子数组异或查询" class="headerlink" title="5304. 子数组异或查询"></a>5304. 子数组异或查询</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>有一个正整数数组 <code>arr</code>，现给你一个对应的查询数组 <code>queries</code>，其中 <code>queries[i] = [Li, Ri]</code>。</p><p>对于每个查询 i，请你计算从<code>Li</code> 到<code>Ri</code> 的<code>XOR</code>值（即 <code>arr[Li] xor arr[Li+1] xor ... xor arr[Ri]</code>）作为本次查询的结果。</p><p>并返回一个包含给定查询 <code>queries</code>所有结果的数组。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>], queries = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">3</span>]]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">8</span>] </span><br><span class="line">解释：</span><br><span class="line">数组中元素的二进制表示形式是：</span><br><span class="line"><span class="number">1</span> = <span class="number">0001</span> </span><br><span class="line"><span class="number">3</span> = <span class="number">0011</span> </span><br><span class="line"><span class="number">4</span> = <span class="number">0100</span> </span><br><span class="line"><span class="number">8</span> = <span class="number">1000</span> </span><br><span class="line">查询的 XOR 值为：</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>] = <span class="number">1</span> <span class="keyword">xor</span> <span class="number">3</span> = <span class="number">2</span> </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>] = <span class="number">3</span> <span class="keyword">xor</span> <span class="number">4</span> = <span class="number">7</span> </span><br><span class="line">[<span class="number">0</span>,<span class="number">3</span>] = <span class="number">1</span> <span class="keyword">xor</span> <span class="number">3</span> <span class="keyword">xor</span> <span class="number">4</span> <span class="keyword">xor</span> <span class="number">8</span> = <span class="number">14</span> </span><br><span class="line">[<span class="number">3</span>,<span class="number">3</span>] = <span class="number">8</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">4</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">10</span>], queries = [[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">3</span>]]</span><br><span class="line">输出：[<span class="number">8</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 3 * 10^4</code></li><li><code>1 &lt;= arr[i] &lt;= 10^9</code></li><li><code>1 &lt;= queries.length &lt;= 3 * 10^4</code></li><li><code>queries[i].length == 2</code></li><li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt; arr.length</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/xor-queries-of-a-subarray" target="_blank" rel="noopener">https://leetcode-cn.com/problems/xor-queries-of-a-subarray</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 利用异或的特性即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>利用异或的特性，<code>x^x = 0</code>,<code>x^0 = x</code>,只要知道异或的基本性质，本题非常简单;</li><li>利用前<code>n</code>项的异或即可，<code>xor[i][j] = xor[j]^xor[i-1]</code>;<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xorQueries(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; queries) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xo(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            xo[i+<span class="number">1</span>] = xo[i]^arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; query: queries)&#123;</span><br><span class="line">            res.push_back(xo[query[<span class="number">0</span>]]^xo[query[<span class="number">1</span>]+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5305-获取你好友已观看的视频"><a href="#5305-获取你好友已观看的视频" class="headerlink" title="5305. 获取你好友已观看的视频"></a>5305. 获取你好友已观看的视频</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>有<code>n</code>个人，每个人都有一个 <code>0</code>到 <code>n-1</code>的唯一<code>id</code> 。</p><p>给你数组 <code>watchedVideos</code> 和 <code>friends</code>，其中 <code>watchedVideos[i]</code> 和 <code>friends[i]</code>分别表示 <code>id = i</code> 的人观看过的视频列表和他的好友列表。</p><figure class="highlight plain"><figcaption><span>1 ```的视频包含所有你好友观看过的视频，```level 2 ```的视频包含所有你好友的好友观看过的视频，以此类推。一般的，```Level``` 为 ```k``` 的视频包含所有从你出发，最短距离为 k 的好友观看过的视频。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定你的 ```id ``` 和一个 level 值，请你找出所有指定 level 的视频，并将它们按观看频率升序返回。如果有频率相同的视频，请将它们按名字字典序从小到大排列。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br></pre></td></tr></table></figure><p>输入：watchedVideos = [[“A”,”B”],[“C”],[“B”,”C”],[“D”]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1<br>输出：[“B”,”C”]<br>解释：<br>你的 id 为 0 ，你的朋友包括：<br>id 为 1 -&gt; watchedVideos = [“C”]<br>id 为 2 -&gt; watchedVideos = [“B”,”C”]<br>你朋友观看过视频的频率为：<br>B -&gt; 1<br>C -&gt; 2<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><br>输入：watchedVideos = [[“A”,”B”],[“C”],[“B”,”C”],[“D”]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2<br>输出：[“D”]<br>解释：<br>你的 id 为 0 ，你朋友的朋友只有一个人，他的 id 为 3 . </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提示：</span><br><span class="line">+ ```n == watchedVideos.<span class="built_in">length</span> == friends.<span class="built_in">length</span></span><br></pre></td></tr></table></figure><ul><li><code>2 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= watchedVideos[i].length &lt;= 100</code></li><li><code>1 &lt;= watchedVideos[i][j].length &lt;= 8</code></li><li><code>0 &lt;= friends[i].length &lt; n</code></li><li><code>0 &lt;= friends[i][j] &lt; n</code></li><li><code>0 &lt;= id &lt; n</code></li><li><code>1 &lt;= level &lt; n</code></li><li><code>如果 friends[i] 包含 j ，那么 friends[j] 包含 i</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/get-watched-videos-by-your-friends" target="_blank" rel="noopener">https://leetcode-cn.com/problems/get-watched-videos-by-your-friends</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS + 排序</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li><code>BFS</code>,获取最小距离为k的好友列表。</li><li>对所获取的好友列表中每个人喜欢观看的视频进行统计，然后按照字典序和次数进行排序即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; psi;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; watchedVideosByFriends(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;&amp; watchedVideos, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; friends, <span class="keyword">int</span> id, <span class="keyword">int</span> level) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = friends.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit(n,<span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">        </span><br><span class="line">        visit[id] = <span class="literal">true</span>;</span><br><span class="line">        qu.push(id);</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty()&amp;&amp;level &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sz = qu.size();</span><br><span class="line">            <span class="built_in">list</span>.clear();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> curr = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; neg: friends[curr])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!visit[neg])&#123;</span><br><span class="line">                        qu.push(neg);</span><br><span class="line">                        visit[neg] = <span class="literal">true</span>;</span><br><span class="line">                        <span class="built_in">list</span>.push_back(neg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            level--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt; videos;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; freq;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; p: <span class="built_in">list</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v: watchedVideos[p])&#123;</span><br><span class="line">                freq[v]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; it : freq)&#123;</span><br><span class="line">            videos.push_back(make_pair(it.first,it.second));</span><br><span class="line">        &#125;</span><br><span class="line">        sort(videos.begin(),videos.end(),[](<span class="keyword">const</span> psi &amp; a,<span class="keyword">const</span> psi &amp; b)&#123;</span><br><span class="line">           <span class="keyword">if</span>(a.second == b.second)&#123;</span><br><span class="line">               <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">           &#125; </span><br><span class="line">           <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : videos)&#123;</span><br><span class="line">            res.push_back(v.first);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5306-让字符串成为回文串的最少插入次数"><a href="#5306-让字符串成为回文串的最少插入次数" class="headerlink" title="5306. 让字符串成为回文串的最少插入次数"></a>5306. 让字符串成为回文串的最少插入次数</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>s</code> ，每一次操作你都可以在字符串的任意位置插入任意字符。请你返回让 <code>s</code> 成为回文串的 最少操作次数 。</p><p>「回文串」是正读和反读都相同的字符串。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"zzazz"</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：字符串 <span class="string">"zzazz"</span> 已经是回文串了，所以不需要做任何插入操作。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"mbadm"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：字符串可变为 <span class="string">"mbdadbm"</span> 或者 <span class="string">"mdbabdm"</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"leetcode"</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：插入 <span class="number">5</span> 个字符后字符串变为 <span class="string">"leetcodocteel"</span> 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"g"</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"no"</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 500</code></li><li>s 中所有字符都是小写字母。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-insertion-steps-to-make-a-string-palindrome" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-insertion-steps-to-make-a-string-palindrome</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>本题变形的各种<code>dp</code>已经出现过很多次了，主要是那几个变形要熟悉：<script type="math/tex; mode=display">dp[i][j] = min(dp[i+1][j],dp[i][j-1]) + 1 \\dp[i][j] = min(dp[i][j],dp[i+1][j-1]) \quad if(s[i] == s[j])</script></li><li>熟练掌握几个<code>dp</code>的变形，本质还是一样的变换。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minInsertions</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j+i &lt; n; ++j)&#123;</span><br><span class="line">                dp[j][j+i] = min(dp[j][j+i<span class="number">-1</span>],dp[j+<span class="number">1</span>][j+i]) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(s[j] == s[j+i])&#123;</span><br><span class="line">                    dp[j][j+i] = min(dp[j][j+i],dp[j+<span class="number">1</span>][j+i<span class="number">-1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;170比赛&quot;&gt;&lt;a href=&quot;#170比赛&quot; class=&quot;headerlink&quot; title=&quot;170比赛&quot;&gt;&lt;/a&gt;170比赛&lt;/h1&gt;&lt;p&gt;本周题目比较简单，基本上都是常规题目。&lt;/p&gt;&lt;h2 id=&quot;5303-解码字母到整数映射&quot;&gt;&lt;a href=&quot;#5303-解码字母到整数映射&quot; class=&quot;headerlink&quot; title=&quot;5303. 解码字母到整数映射&quot;&gt;&lt;/a&gt;5303. 解码字母到整数映射&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt;，它由数字&lt;code&gt;（&amp;#39;0&amp;#39; - &amp;#39;9&amp;#39;）&lt;/code&gt;和&lt;code&gt;&amp;#39;#&amp;#39;&lt;/code&gt;组成。我们希望按下述规则将 s 映射为一些小写英文字符：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;字符&lt;code&gt;（&amp;#39;a&amp;#39; - &amp;#39;i&amp;#39;）&lt;/code&gt;分别用&lt;code&gt;（&amp;#39;1&amp;#39; - &amp;#39;9&amp;#39;）&lt;/code&gt;表示。&lt;/li&gt;
&lt;li&gt;字符&lt;code&gt;（&amp;#39;j&amp;#39; - &amp;#39;z&amp;#39;）&lt;/code&gt;分别用&lt;code&gt;（&amp;#39;10#&amp;#39; - &amp;#39;26#&amp;#39;）&lt;/code&gt;表示。&lt;br&gt;返回映射之后形成的新字符串。&lt;br&gt;题目数据保证映射始终唯一。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【2019】总结</title>
    <link href="http://yoursite.com/2020/01/02/118/"/>
    <id>http://yoursite.com/2020/01/02/118/</id>
    <published>2020-01-02T14:44:02.101Z</published>
    <updated>2020-01-02T14:49:26.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2019总结"><a href="#2019总结" class="headerlink" title="2019总结"></a>2019总结</h3><ul><li>转眼间2019年已经过去了，时间过的飞快，很快就迎接了2020年，回首2019年收获了许多，也失去了许多，我想人生中最大的收获就是有了二宝女儿的诞生，虽然生活上忙忙碌碌，事业上庸庸碌碌，但能够一个新生命的诞生无疑是人生中最值得庆幸的事，回首往事，我想应该留下自己美好的回忆和总结。<h4 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h4></li><li>1月至5月期间，生活中上半年绝大部分周末都在陪产中度过，几乎每个周末都在跑医院，各种产检，常规检查，庆幸的是一切安好。没有大的意外，5月份二宝顺利出生。</li><li>5月份二宝从五月份出生以后，先后经历了黑白颠倒6、7、8三个月，中间再经历大宝儿子间歇性住院，感冒发烧生病，真是忙的一塌糊涂，所幸的是一切都正常挺过来了。</li><li>9月份大宝儿子正常上学，先后经历了各种不适应，吵着退学等等风波，最终经历两个月的磨练，儿子也顺利走上幼儿园的正规，接下来关注的是如何更好的去培养好的习惯，给予他健康的体魄和健全的人格和价值观的培养。</li><li>10月经历了父亲病重的危机，抽空回家看望了父亲，还好住院经过暂时的吃药调养，稍微病情缓和了一些。</li><li>11月~12月基本上稍微闲暇一些，有时间来重拾自己的爱好兴趣，规划自己的人生，持续的学习，定期锻炼身体。<h4 id="家庭"><a href="#家庭" class="headerlink" title="家庭"></a>家庭</h4></li><li>家庭迎来了二宝，每天回家都能抱着二宝，看着大宝每天在家吵吵闹闹中度过，虽然日子过得贫穷和清淡，但是这样随用静好的平静的小日子让人感到非常幸福，人常说家是心里的港湾，人到中年才越来越体会到家庭的重要，能够有一个稳定而又幸福的后盾是一件让人多么幸福的事；</li><li>大宝4月份才从老家到武汉这边，依稀还记得当时来的时候还一脸的害羞，又黑又瘦的，满口的河南话，真是让人心疼。经过大半年的调教，首先皮肤变白了，体重明显跟上正常体重，认知能力和运动能力大幅度提升，人际交往能力也有提升。通过幼儿园的教育，儿子现在越来越懂事，越来越有自己的认知了，每天回家都会主动喊爸爸妈妈，让爸爸妈妈陪他玩，我想父母的陪伴才是子女幼时最大的幸福，虽然儿子在3岁到4岁时正是最调皮的时候，但是每天晚上回家陪伴，让当父母的感到特别开心和骄傲。</li><li>二宝5月份出生以后，虽然家里非常的忙碌和辛苦，但是总算熬过来了，现在每天长的越来越好，看着她一天天长大，真是一件感到很幸福的事。每天晚上睡觉前，两只小脚都一阵乱扑通，早上醒来就开始哭，虽然每天看着她挺累，但是真心觉得很幸福。岁月静好，看着一对宝贝儿女一天天健康成长，是当父母最大的幸福。</li><li>老父亲今年已经75岁高龄了，觉得当子女的特别亏钱父母。特别是自己有了家庭以后，不光是经济方面给予的补偿不够，连自己陪伴的时间都没有，这是我觉得自己做的最差的地方，感到非常的愧疚，每次给父亲打电话，总感觉他非常孤独，自从母亲在十几年去世以后，他一直都有一个人过，转眼间他已经老了，已经到了暮年。感到老父亲自从过了70岁，就老的特别快，身体素质一下子下降的特别快，各种问题和毛病都来了，有时候当子女的心理很着急，但是很多时候却又觉得非常的无能为力，可能是自身能力不够吧，一是没有很好的经济能力能够给他提供一个让他能够安度晚年的物质条件，二是忙于自己的家庭和工作，也没有时间来好好陪伴他走过最后的晚年。2020年的计划，一定要把老父亲接下来一起住几个月，一定要给老父亲做一次全面的体检和治疗。</li><li>最后是老婆，岳父，岳母。老婆真心不容易，每天忙着工作连续，带小孩喂奶，还要操心大宝，有时候还要忍受我时不时因为工作上的不快而产生的坏脾气，真心不容易，觉得自己很多地方没有做的很好。对于岳父母，自己感觉也是亏欠很多，有时候心里很着急。因为在自己最需要金钱的时候，而没有能力提供一个很好的经济基础，能够让自己的家人过上幸福的日子，而自己每天在这里碌碌无为的混日子而感到羞耻。有时候因为自己的臭脾气也让爱人，岳父母承担了许多不必要的麻烦，真心要给他们说一声道歉。新的一年争取，让岳父母和老婆能够出国游玩一趟，能够每个月定期给他们一部分零花钱，定期组织家里出去聚餐和游玩一次，给老婆办一个健身卡，给岳父母买一个重疾保险，给老婆报名驾校，这是自己在这一年的目标。</li></ul><a id="more"></a><h4 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h4><ul><li>2019年上半年的时候得了糜烂性胃炎，当时胃部各种不舒服，各种胀气，年龄大了各种小毛病都出来了。年度体检还是各种小毛病，慢性胃炎，甘油三酯偏高，骨密度下降，肾结石，胆结石，高密度蛋白偏低，低密度蛋白偏高，各种小问题。上半年的工作压力较大，长时间精神状态不好，且感觉精力明显不足，容易困和疲乏。</li><li>2019年下半年，人到中年的危机感越来越重，更加坚定的知道自己的目标和方向，坚决不做一条随波逐流的咸鱼，于时刻意开始改变自己。从此开启了，每天定时锻炼身体的规律运动，经过两个月的坚持，首先从自身来说改变了很多。身高174，从去年冬天的73.5kg，变成了66.5kg的标准体重，肚子上的肥肉终于减下去了，我觉得更重要的是长期坚持运动能够给人不仅仅是健康，更加带来一个积极心态的变化，没有游泳之前，经常动不动就觉得因为工作上的事情感到非常抑郁和沮丧，对自己的前途和生活感到绝望，坚持锻炼身体带给自己的很多愉快的心情，让自己每天身上充满激情干劲和正能量，自己的心情也随之改变了许多，许多以前想不开的事情，慢慢也就能够想开和明白，不要把成败看的太重，反而能够更好的去工作。坚持运动这个习惯一定要继续，坚持每天打卡。希望在2020年能够坚持锻炼300天，保持好体重。</li></ul><h4 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h4><ul><li>工作上上半年压力有段时间压力非常大，常常为无法改变现状感到非常的沮丧，也可能是自己的原因，也可能是周围的原因，时常觉得非常的努力去做，但是一事无成的感觉。想去改变但又很难改变的境地。其实现在回想起来，有自身的原因，没有用积极的心态去看待很多事情和任务，我想也可能是压抑自己太久了吧。一旦身上充满负能量，会不自然而然的影响周围的人，时候再看，其实很多事情并没有我们想象的那么糟糕和困难，在工作中一个好的心态永远是第一位的，要有把事情干成的信心和决心，不要退缩，不要自己去找理由，努力去干就行了，很多事情反而会有转机，确实像古人说的那样“柳暗花明又一村”.</li><li>下半年因为家里的二宝出生，家里忙前忙后也就顾不上工作的烦恼了，所幸结果还是好的，下半年各项工作较为顺利开展，后面两个月通过坚持锻炼身体让自己的心情和状态大有好转，期待每天的工作能够给自己带来成长和挑战，越来越喜欢这种自信和挑战的状态。</li><li>在当前的大环境下，体制内收入竟然递减，这也是对自身工作积极性的一种打击。但是无论如何，工作态度一定要端正，积极应对新一年的挑战。</li></ul><h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4><ul><li>人生无常，人到中年，对人生有了更不一样的体验和感悟，在自己34岁的突然从某一天，一下子明白了很多道理，试着去理解人生的意义，人从生到死都是一个必然的经历，死亡是每一个人生的终点，总一天父母会离我们远去，子女也会离开我们，而我们自身也会走向死亡。竟然每个人都会死去，那么为何不快快乐乐积极乐观的去精彩的面对每一天，何必非要用压抑和悲观的态度去面对自己的每一天，想想是多么的可悲。既然有了这种想法，自身的认知有了很大的变动，我的想法是如何在有限的时间和生命里更多的去了解这个世界，了解这个社会，发展自己的爱好，这何尝不是平淡生活中的一种幸福呢？于是改变了自己积极的心态后，就给自己制定了许多学习任务和目标，每天坚持按照目标努力即可，每天坚持学习，终生坚持学习，内心的信念一定坚信自己能够有所成就，能够更加的了解这个世界。</li><li>关于技术方面的学习，自己今年觉得最大的成就是刷完了<code>leetcode</code>上面所有的算法题，虽然可能没有什么用，但是这是我给自己定的目标，每天坚持，中间有无数次想放弃，所庆幸的是都坚持过来了。全部刷完的感受就是觉得<code>leetcode</code>上绝大部分题目都很套路，现在每周的<code>contest</code>除了<code>hard</code>难度的题目还有创新和思考，其余的题目基本上都是那几种解法的组合。新的一年，我想我会一直把每周的<code>contest</code>坚持下去的。</li><li>关于人文方面，今年还是读了不少于<code>10</code>本书，其实从我内心来说，越来越对人文社科类科目感兴趣了，特别是历史学和社会学，从理性思维到辨证思维。虽然作为一名工科生，但是不能忽视对自身世界观、价值观、社会认知的培养，新的一年我将会继续阅读不少于<code>20</code>本的人文类书籍，当然一定要读经典的书籍，这样才能让自己有更大的收获。</li><li>关于技术方面，新的一年，竟然莫名的对自己的本专业的基础课程特别有兴趣，今年计划把操作系统、编译原理、计算机组成原理这些基础课程再学习一边，特别是实验产出部分。一定要学习<code>coursera</code>上面知名的大学的经典课程，这样才知道自己的差距在哪里。</li></ul><h4 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h4><ul><li>展望2020年，首先希望家里两个可爱的宝宝健康成长，父母能够身体健康，自己身体健康工作顺利，老婆顺利升职，乘着岁月静好好好享受生活。</li><li>希望自己能够实现自己所定的小目标，积极改善家庭经济条件，改善父母关系，改善夫妻之间的关系。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2019总结&quot;&gt;&lt;a href=&quot;#2019总结&quot; class=&quot;headerlink&quot; title=&quot;2019总结&quot;&gt;&lt;/a&gt;2019总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;转眼间2019年已经过去了，时间过的飞快，很快就迎接了2020年，回首2019年收获了许多，也失去了许多，我想人生中最大的收获就是有了二宝女儿的诞生，虽然生活上忙忙碌碌，事业上庸庸碌碌，但能够一个新生命的诞生无疑是人生中最值得庆幸的事，回首往事，我想应该留下自己美好的回忆和总结。&lt;h4 id=&quot;生活&quot;&gt;&lt;a href=&quot;#生活&quot; class=&quot;headerlink&quot; title=&quot;生活&quot;&gt;&lt;/a&gt;生活&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;1月至5月期间，生活中上半年绝大部分周末都在陪产中度过，几乎每个周末都在跑医院，各种产检，常规检查，庆幸的是一切安好。没有大的意外，5月份二宝顺利出生。&lt;/li&gt;
&lt;li&gt;5月份二宝从五月份出生以后，先后经历了黑白颠倒6、7、8三个月，中间再经历大宝儿子间歇性住院，感冒发烧生病，真是忙的一塌糊涂，所幸的是一切都正常挺过来了。&lt;/li&gt;
&lt;li&gt;9月份大宝儿子正常上学，先后经历了各种不适应，吵着退学等等风波，最终经历两个月的磨练，儿子也顺利走上幼儿园的正规，接下来关注的是如何更好的去培养好的习惯，给予他健康的体魄和健全的人格和价值观的培养。&lt;/li&gt;
&lt;li&gt;10月经历了父亲病重的危机，抽空回家看望了父亲，还好住院经过暂时的吃药调养，稍微病情缓和了一些。&lt;/li&gt;
&lt;li&gt;11月~12月基本上稍微闲暇一些，有时间来重拾自己的爱好兴趣，规划自己的人生，持续的学习，定期锻炼身体。&lt;h4 id=&quot;家庭&quot;&gt;&lt;a href=&quot;#家庭&quot; class=&quot;headerlink&quot; title=&quot;家庭&quot;&gt;&lt;/a&gt;家庭&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;家庭迎来了二宝，每天回家都能抱着二宝，看着大宝每天在家吵吵闹闹中度过，虽然日子过得贫穷和清淡，但是这样随用静好的平静的小日子让人感到非常幸福，人常说家是心里的港湾，人到中年才越来越体会到家庭的重要，能够有一个稳定而又幸福的后盾是一件让人多么幸福的事；&lt;/li&gt;
&lt;li&gt;大宝4月份才从老家到武汉这边，依稀还记得当时来的时候还一脸的害羞，又黑又瘦的，满口的河南话，真是让人心疼。经过大半年的调教，首先皮肤变白了，体重明显跟上正常体重，认知能力和运动能力大幅度提升，人际交往能力也有提升。通过幼儿园的教育，儿子现在越来越懂事，越来越有自己的认知了，每天回家都会主动喊爸爸妈妈，让爸爸妈妈陪他玩，我想父母的陪伴才是子女幼时最大的幸福，虽然儿子在3岁到4岁时正是最调皮的时候，但是每天晚上回家陪伴，让当父母的感到特别开心和骄傲。&lt;/li&gt;
&lt;li&gt;二宝5月份出生以后，虽然家里非常的忙碌和辛苦，但是总算熬过来了，现在每天长的越来越好，看着她一天天长大，真是一件感到很幸福的事。每天晚上睡觉前，两只小脚都一阵乱扑通，早上醒来就开始哭，虽然每天看着她挺累，但是真心觉得很幸福。岁月静好，看着一对宝贝儿女一天天健康成长，是当父母最大的幸福。&lt;/li&gt;
&lt;li&gt;老父亲今年已经75岁高龄了，觉得当子女的特别亏钱父母。特别是自己有了家庭以后，不光是经济方面给予的补偿不够，连自己陪伴的时间都没有，这是我觉得自己做的最差的地方，感到非常的愧疚，每次给父亲打电话，总感觉他非常孤独，自从母亲在十几年去世以后，他一直都有一个人过，转眼间他已经老了，已经到了暮年。感到老父亲自从过了70岁，就老的特别快，身体素质一下子下降的特别快，各种问题和毛病都来了，有时候当子女的心理很着急，但是很多时候却又觉得非常的无能为力，可能是自身能力不够吧，一是没有很好的经济能力能够给他提供一个让他能够安度晚年的物质条件，二是忙于自己的家庭和工作，也没有时间来好好陪伴他走过最后的晚年。2020年的计划，一定要把老父亲接下来一起住几个月，一定要给老父亲做一次全面的体检和治疗。&lt;/li&gt;
&lt;li&gt;最后是老婆，岳父，岳母。老婆真心不容易，每天忙着工作连续，带小孩喂奶，还要操心大宝，有时候还要忍受我时不时因为工作上的不快而产生的坏脾气，真心不容易，觉得自己很多地方没有做的很好。对于岳父母，自己感觉也是亏欠很多，有时候心里很着急。因为在自己最需要金钱的时候，而没有能力提供一个很好的经济基础，能够让自己的家人过上幸福的日子，而自己每天在这里碌碌无为的混日子而感到羞耻。有时候因为自己的臭脾气也让爱人，岳父母承担了许多不必要的麻烦，真心要给他们说一声道歉。新的一年争取，让岳父母和老婆能够出国游玩一趟，能够每个月定期给他们一部分零花钱，定期组织家里出去聚餐和游玩一次，给老婆办一个健身卡，给岳父母买一个重疾保险，给老婆报名驾校，这是自己在这一年的目标。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="职场" scheme="http://yoursite.com/categories/%E8%81%8C%E5%9C%BA/"/>
    
    
      <category term="职场经验" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 典型的题目</title>
    <link href="http://yoursite.com/2020/01/02/117/"/>
    <id>http://yoursite.com/2020/01/02/117/</id>
    <published>2020-01-02T08:17:22.468Z</published>
    <updated>2020-01-02T08:17:22.479Z</updated>
    
    <content type="html"><![CDATA[<p>上午在做<code>mockview</code>遇到两道非常典型的题目，我觉得非常有必要进行总结一下，特意写出来。</p><h2 id="188-买卖股票的最佳时机-IV"><a href="#188-买卖股票的最佳时机-IV" class="headerlink" title="188. 买卖股票的最佳时机 IV"></a>188. 买卖股票的最佳时机 IV</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。</p><p>注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><a id="more"></a><p>示例 1:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>], k = <span class="number">2</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: 在第 <span class="number">1</span> 天 (股票价格 = <span class="number">2</span>) 的时候买入，在第 <span class="number">2</span> 天 (股票价格 = <span class="number">4</span>) 的时候卖出，这笔交易所能获得利润 = <span class="number">4</span><span class="number">-2</span> = <span class="number">2</span> 。</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">3</span>], k = <span class="number">2</span></span><br><span class="line">输出: <span class="number">7</span></span><br><span class="line">解释: 在第 <span class="number">2</span> 天 (股票价格 = <span class="number">2</span>) 的时候买入，在第 <span class="number">3</span> 天 (股票价格 = <span class="number">6</span>) 的时候卖出, 这笔交易所能获得利润 = <span class="number">6</span><span class="number">-2</span> = <span class="number">4</span> 。</span><br><span class="line">     随后，在第 <span class="number">5</span> 天 (股票价格 = <span class="number">0</span>) 的时候买入，在第 <span class="number">6</span> 天 (股票价格 = <span class="number">3</span>) 的时候卖出, 这笔交易所能获得利润 = <span class="number">3</span><span class="number">-0</span> = <span class="number">3</span> 。</span><br><span class="line">在真实的面试中遇到过这道题？</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 最多<code>k</code>次交易，所能取得的最大利润，首先肯定用<code>DP</code>解决。</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>这种用于求极值的题目，一般常见的解法就是<code>dp</code>,<code>BFS</code>,<code>DFS</code>，<code>二分查找</code>,本质都是一样的，可以看作为有穷状态机，对所有可能的状态进行遍历，所不同的细节是如何对状态进行压缩和进行剪枝，即如何能够用最小的时间复杂度，最小的空间复杂度来快速遍历所有可能状态。</li><li>此题中给定的数组长度为<code>1e5</code>级别，在这种情况下，用<code>BFS</code>或者<code>DFS</code>这种解法肯定不限时。存在超时的可能，因此本题一定采用<code>DP</code> 来解答。</li><li>首先我们设置递推状态<code>dp[i][j]</code>,代表第<code>i</code>天最多进行<code>j</code>次交易的最大利润，则这时我们需要思考<code>dp[i][j]</code>与<code>dp[i-1][j],dp[i][j-1],dp[i-][j-1]</code>这三者的关系。首先我们可以观察到<code>dp[i][j] = max(dp[i][j],dp[i-1][j],dp[i-1][j-1],dp[i][j-1])</code>,但是我们需要观察增加第<code>i</code>天的价格和增加第<code>j</code>天的交易次数与递推公式之间的关系。首先我们加入了第<code>i</code>天，但在第<code>i</code>天我们不进行任何交易，则这时<code>dp[i][j] = dp[i-1][j]</code>,如果在第<code>i</code>天进行了交易，则第<code>i</code>天的交易肯定是前<code>i</code>天的最后一次交易。</li><li><code>buy[i][j]</code>表示最多进行了<code>i</code>次交易，且手中持有股票的最大利润，<code>sell[i][j]</code>表示最多进行了<code>i</code>次交易，且手中没有持有股票的最大利润：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sell[<span class="string">i</span>][<span class="symbol">j</span>] = max(sell[<span class="string">i</span>][<span class="symbol">j-1</span>],buy[<span class="string">i</span>][<span class="symbol">j-1</span>]+prices[j-1]);</span><br><span class="line">buy[<span class="string">i</span>][<span class="symbol">j</span>] = max(sell[<span class="string">i-1</span>][<span class="symbol">j-1</span>]-prices[<span class="string">j-1</span>],buy[<span class="string">i</span>][<span class="symbol">j-1</span>]);</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">profitAll</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; prices)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &gt; prices[i<span class="number">-1</span>])&#123;</span><br><span class="line">                res += prices[i] - prices[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k &gt;= n/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> profitAll(prices);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; sell(k+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; buy(k+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            buy[<span class="number">0</span>][i] = INT_MIN;</span><br><span class="line">            sell[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">            buy[i][<span class="number">0</span>] = INT_MIN;</span><br><span class="line">            sell[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)&#123;</span><br><span class="line">                sell[i][j] = max(sell[i][j<span class="number">-1</span>],buy[i][j<span class="number">-1</span>]+prices[j<span class="number">-1</span>]);</span><br><span class="line">                buy[i][j] = max(sell[i<span class="number">-1</span>][j<span class="number">-1</span>]-prices[j<span class="number">-1</span>],buy[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sell[k][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="488-祖玛游戏"><a href="#488-祖玛游戏" class="headerlink" title="488. 祖玛游戏"></a>488. 祖玛游戏</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3>回忆一下祖玛游戏。现在桌上有一串球，颜色有红色(R)，黄色(Y)，蓝色(B)，绿色(G)，还有白色(W)。 现在你手里也有几个球。</li></ol><p>每一次，你可以从手里的球选一个，然后把这个球插入到一串球中的某个位置上（包括最左端，最右端）。接着，如果有出现三个或者三个以上颜色相同的球相连的话，就把它们移除掉。重复这一步骤直到桌上所有的球都被移除。</p><p>找到插入并可以移除掉桌上所有球所需的最少的球数。如果不能移除桌上所有的球，输出 -1 。</p><p>示例:<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">"WRRBBW"</span>, <span class="string">"RB"</span> </span><br><span class="line">输出: <span class="number">-1</span> </span><br><span class="line">解释: WRRBBW -&gt; WRR[R]BBW -&gt; WBBW -&gt; WBB[B]W -&gt; WW （翻译者标注：手上球已经用完，桌上还剩两个球无法消除，返回<span class="number">-1</span>）</span><br><span class="line">输入: <span class="string">"WWRRBBWW"</span>, <span class="string">"WRBRW"</span> </span><br><span class="line">输出: <span class="number">2</span> </span><br><span class="line">解释: WWRRBBWW -&gt; WWRR[R]BBWW -&gt; WWBBWW -&gt; WWBB[B]WW -&gt; WWWW -&gt; empty</span><br><span class="line">输入:<span class="string">"G"</span>, <span class="string">"GGGGG"</span> </span><br><span class="line">输出: <span class="number">2</span> </span><br><span class="line">解释: G -&gt; G[G] -&gt; GG[G] -&gt; empty </span><br><span class="line"></span><br><span class="line">输入: <span class="string">"RBYYBBRRB"</span>, <span class="string">"YRBGB"</span> </span><br><span class="line">输出: <span class="number">3</span> </span><br><span class="line">解释: RBYYBBRRB -&gt; RBYY[Y]BBRRB -&gt; RBBBRRB -&gt; RRRB -&gt; B -&gt; B[B] -&gt; BB[B] -&gt; empty</span><br></pre></td></tr></table></figure><br>标注:</p><ul><li>你可以假设桌上一开始的球中，不会有三个及三个以上颜色相同且连着的球。</li><li>桌上的球不会超过20个，输入的数据中代表这些球的字符串的名字是 “board” 。</li><li>你手中的球不会超过5个，输入的数据中代表这些球的字符串的名字是 “hand”。</li><li>输入的两个字符串均为非空字符串，且只包含字符 ‘R’,’Y’,’B’,’G’,’W’。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/zuma-game" target="_blank" rel="noopener">https://leetcode-cn.com/problems/zuma-game</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 典型的状态搜索，用<code>DFS</code>或者<code>BFS</code>均可解决该问题。</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>起始状态，然后每次选择一个颜色，如果小于连续<code>3</code>个数，则进行补齐，然后变换状态和球的数量，进行下一个状态变换。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3></li><li>DFS<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">profitAll</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; prices)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &gt; prices[i<span class="number">-1</span>])&#123;</span><br><span class="line">                res += prices[i] - prices[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.size();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k &gt;= n/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> profitAll(prices);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; sell(k+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; buy(k+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            buy[<span class="number">0</span>][i] = INT_MIN;</span><br><span class="line">            sell[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">            buy[i][<span class="number">0</span>] = INT_MIN;</span><br><span class="line">            sell[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)&#123;</span><br><span class="line">                sell[i][j] = max(sell[i][j<span class="number">-1</span>],buy[i][j<span class="number">-1</span>]+prices[j<span class="number">-1</span>]);</span><br><span class="line">                buy[i][j] = max(sell[i<span class="number">-1</span>][j<span class="number">-1</span>]-prices[j<span class="number">-1</span>],buy[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sell[k][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>BFS<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">State</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> balls[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">    <span class="built_in">string</span> seq;</span><br><span class="line">    State()&#123;</span><br><span class="line">        <span class="built_in">memset</span>(balls,<span class="number">0</span>,<span class="keyword">sizeof</span>(balls));</span><br><span class="line">        <span class="keyword">this</span>-&gt;cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;seq = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> rep[<span class="number">26</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMinStep</span><span class="params">(<span class="built_in">string</span> board, <span class="built_in">string</span> hand)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="built_in">queue</span>&lt;State&gt; qu;</span><br><span class="line">        State start;</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*init*/</span></span><br><span class="line">        rep[<span class="string">'R'</span>-<span class="string">'A'</span>] = <span class="number">0</span>;</span><br><span class="line">        rep[<span class="string">'Y'</span>-<span class="string">'A'</span>] = <span class="number">1</span>;</span><br><span class="line">        rep[<span class="string">'B'</span>-<span class="string">'A'</span>] = <span class="number">2</span>;</span><br><span class="line">        rep[<span class="string">'G'</span>-<span class="string">'A'</span>] = <span class="number">3</span>;</span><br><span class="line">        rep[<span class="string">'W'</span>-<span class="string">'A'</span>] = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; c : hand)&#123;</span><br><span class="line">            start.balls[rep[c-<span class="string">'A'</span>]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        start.seq = board;</span><br><span class="line">        start.cost = <span class="number">0</span>;</span><br><span class="line">        cnt[board] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        qu.push(start);</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            State curr = qu.front();</span><br><span class="line">            qu.pop();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(curr.seq == <span class="string">""</span>)&#123;</span><br><span class="line">                res = min(res,curr.cost);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">string</span> seq = curr.seq;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seq.size();)&#123;</span><br><span class="line">                <span class="keyword">int</span> l = i;</span><br><span class="line">                <span class="keyword">while</span>(i &lt; seq.size() &amp;&amp; seq[i] == seq[l])&#123;++i;&#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> used = max(<span class="number">0</span>,<span class="number">3</span>-i+l);</span><br><span class="line">                <span class="keyword">int</span> idx = rep[seq[l] - <span class="string">'A'</span>];</span><br><span class="line">                <span class="keyword">if</span>(curr.balls[idx] &gt;= used)&#123;</span><br><span class="line">                    <span class="built_in">string</span> next = seq.substr(<span class="number">0</span>,l) + seq.substr(i);</span><br><span class="line">                    <span class="keyword">if</span>(cnt.count(next) &amp;&amp; cnt[next] &lt;= curr.cost + used)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    curr.balls[idx] -= used;</span><br><span class="line">                    curr.seq = next;</span><br><span class="line">                    curr.cost += used;</span><br><span class="line">                    qu.push(curr);</span><br><span class="line">                    cnt[next] = curr.cost;</span><br><span class="line">                    curr.balls[idx] += used;</span><br><span class="line">                    curr.cost -= used;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res == INT_MAX)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上午在做&lt;code&gt;mockview&lt;/code&gt;遇到两道非常典型的题目，我觉得非常有必要进行总结一下，特意写出来。&lt;/p&gt;&lt;h2 id=&quot;188-买卖股票的最佳时机-IV&quot;&gt;&lt;a href=&quot;#188-买卖股票的最佳时机-IV&quot; class=&quot;headerlink&quot; title=&quot;188. 买卖股票的最佳时机 IV&quot;&gt;&lt;/a&gt;188. 买卖股票的最佳时机 IV&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。&lt;/p&gt;&lt;p&gt;设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。&lt;/p&gt;&lt;p&gt;注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 5111题目</title>
    <link href="http://yoursite.com/2019/12/31/116/"/>
    <id>http://yoursite.com/2019/12/31/116/</id>
    <published>2019-12-31T01:47:12.340Z</published>
    <updated>2020-01-02T14:49:15.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5111-分享巧克力"><a href="#5111-分享巧克力" class="headerlink" title="5111. 分享巧克力"></a>5111. 分享巧克力</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>你有一大块巧克力，它由一些甜度不完全相同的小块组成。我们用数组 sweetness 来表示每一小块的甜度。</p><p>你打算和 K 名朋友一起分享这块巧克力，所以你需要将切割 K 次才能得到 K+1 块，每一块都由一些 连续 的小块组成。</p><p>为了表现出你的慷慨，你将会吃掉 总甜度最小 的一块，并将其余几块分给你的朋友们。</p><a id="more"></a><p>请找出一个最佳的切割策略，使得你所分得的巧克力 总甜度最大，并返回这个 最大总甜度。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：sweetness = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>], K = <span class="number">5</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：你可以把巧克力分成 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>], [<span class="number">6</span>], [<span class="number">7</span>], [<span class="number">8</span>], [<span class="number">9</span>]。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：sweetness = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], K = <span class="number">8</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：只有一种办法可以把巧克力分成 <span class="number">9</span> 块。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：sweetness = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>], K = <span class="number">2</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：你可以把巧克力分成 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]。</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/divide-chocolate" target="_blank" rel="noopener">https://leetcode-cn.com/problems/divide-chocolate</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 划分数组成为<code>k+1</code>个连续子数组，保证子数组中的最小值的尽可能的大，求这个最大值</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>刚开始准备用dp，结果dp的算法也写出来了，发现最后时间复杂度为<code>O(n^3)</code>，最后超时。<code>dp[n][i] = max(dp[n][i],min(dp[n-k][i-1],sum(n-k+1,i)))  (k &gt;= j-1  and  k &lt;= n-1)</code>。</li><li>用二分查找法,如果测试发现当前的值能够满足将数组切分为<code>k+1</code>个子数组时，则这时应将当前的值进行增加，如果测试发现当前设置的最大值不能满足刚好将数组切分成为小于<code>K+1</code>个子数组，则表示当前测试的值设置过大，应将测试数进行缩小。</li><li>通过本题，特别是如何设计二分法，再次重新学习一边需要经常练习。</li><li>下面为四种不断进行优化的解法，这个题目很典型，对于<code>DP</code>和二分查找算法理解都有很大的帮助。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>dp算法,算法复杂度为<code>O(k*n^2)</code>,<code>dp[i][j]</code>代表将前<code>i</code>个元素分成<code>j</code>个组的最大值。<script type="math/tex; mode=display">dp[i][j] = max(dp[i][j],min(dp[k][j-1],sum[k+1][i]))</script></li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> maximizeSweetness(vector&lt;<span class="built_in">int</span>&gt;&amp; a, <span class="built_in">int</span> K) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = a.size();</span><br><span class="line">        vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt; dp(a+<span class="number">1</span>,vector&lt;<span class="built_in">int</span>&gt;(k+<span class="number">1</span>,<span class="number">-1</span>));</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; sum(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*initial*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            sum[i] += sum[i<span class="number">-1</span>] + a[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = sum[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">2</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = i; j &lt;= n; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> m = i<span class="number">-1</span>; m &lt; j; ++m)&#123;</span><br><span class="line">                    dp[j][i] = max(dp[j][i],min(dp[m][i<span class="number">-1</span>],sum[j]-sum[m]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>dp算法 + 二分查找,算法复杂度为<code>O(k*n*lgm)</code>,关键的二分查找，在于如何找到最近近平均的数目。<code>dp[i][j]</code><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> maximizeSweetness(vector&lt;<span class="built_in">int</span>&gt;&amp; a, <span class="built_in">int</span> K) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = a.size();</span><br><span class="line">        vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt; dp(a+<span class="number">1</span>,vector&lt;<span class="built_in">int</span>&gt;(k+<span class="number">1</span>,INT_MAX));</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; sum(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*initial*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            sum[i] += sum[i<span class="number">-1</span>] + a[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = sum[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">2</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = i; j &lt;= n; ++j)&#123;</span><br><span class="line">                <span class="built_in">int</span> l = i<span class="number">-1</span>;</span><br><span class="line">                <span class="built_in">int</span> r = j;</span><br><span class="line">                <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                    <span class="built_in">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(dp[mid][i<span class="number">-1</span>] &gt;= sum[j]-sum[mid])&#123;</span><br><span class="line">                        r = mid;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        l = mid+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                dp[j][i] = max(min(dp[l][i<span class="number">-1</span>],sum[j]-sum[l]),min(dp[l<span class="number">-1</span>][i<span class="number">-1</span>],sum[j]-sum[l<span class="number">-1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>二分查找,时间复杂度为<code>n*lgm</code>。<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">bool</span> check(vector&lt;<span class="built_in">int</span>&gt;&amp; nums,<span class="built_in">int</span> K,<span class="built_in">int</span> sz)&#123;</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            <span class="keyword">if</span>(sum &gt;= sz)&#123;</span><br><span class="line">                tot++;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(tot &gt; K)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> maximizeSweetness(vector&lt;<span class="built_in">int</span>&gt;&amp; a, <span class="built_in">int</span> K) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = a.size();</span><br><span class="line">        <span class="built_in">int</span> l = a[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> r = a[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            l = min(l,a[i]);</span><br><span class="line">            r += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="built_in">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(a,K,mid))&#123;</span><br><span class="line">                res = mid;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>二分查找,时间复杂度压缩,时间复杂度为<code>lgn*k*lgn</code><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">bool</span> check(vector&lt;<span class="built_in">int</span>&gt;&amp; sum,<span class="built_in">int</span> sz,<span class="built_in">int</span> K)&#123;</span><br><span class="line">        <span class="built_in">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> curr = sz;</span><br><span class="line">        <span class="built_in">auto</span> it = sum.begin();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(it != sum.end())&#123;</span><br><span class="line">            it = upper_bound(sum.begin(),sum.end(),curr);</span><br><span class="line">            tot++;</span><br><span class="line">            curr = sum[it - sum.begin()] + sz;</span><br><span class="line">            <span class="keyword">if</span>(tot &gt; K)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(tot &gt; k)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> maximizeSweetness(vector&lt;<span class="built_in">int</span>&gt;&amp; a, <span class="built_in">int</span> K) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = a.size();</span><br><span class="line">        <span class="built_in">int</span> l = a[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> r = a[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; sum(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            sum[i] += sum[i<span class="number">-1</span>] + a[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            l = min(l,a[i]);</span><br><span class="line">            r += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="built_in">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(a,K,mid))&#123;</span><br><span class="line">                res = mid;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;5111-分享巧克力&quot;&gt;&lt;a href=&quot;#5111-分享巧克力&quot; class=&quot;headerlink&quot; title=&quot;5111. 分享巧克力&quot;&gt;&lt;/a&gt;5111. 分享巧克力&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;你有一大块巧克力，它由一些甜度不完全相同的小块组成。我们用数组 sweetness 来表示每一小块的甜度。&lt;/p&gt;&lt;p&gt;你打算和 K 名朋友一起分享这块巧克力，所以你需要将切割 K 次才能得到 K+1 块，每一块都由一些 连续 的小块组成。&lt;/p&gt;&lt;p&gt;为了表现出你的慷慨，你将会吃掉 总甜度最小 的一块，并将其余几块分给你的朋友们。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 169周比赛</title>
    <link href="http://yoursite.com/2019/12/29/115/"/>
    <id>http://yoursite.com/2019/12/29/115/</id>
    <published>2019-12-29T11:16:37.867Z</published>
    <updated>2019-12-29T11:16:40.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="169比赛"><a href="#169比赛" class="headerlink" title="169比赛"></a>169比赛</h1><p>给你一个整数 n，请你返回 任意 一个由 n 个 各不相同 的整数组成的数组，并且这 n 个数相加和为 0 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span></span><br><span class="line">输出：[<span class="number">-7</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">解释：这些数组也是正确的 [<span class="number">-5</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]，[<span class="number">-3</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">4</span>]。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：[<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 1000</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-n-unique-integers-sum-up-to-zero" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-n-unique-integers-sum-up-to-zero</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接填充互为反数的数即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接填充，如果元素个数为奇数，则再填充一个0即可<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sumZero(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n/<span class="number">2</span>; ++i)&#123;</span><br><span class="line">            res.push_back(i);</span><br><span class="line">            res.push_back(-i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>)&#123;</span><br><span class="line">            res.push_back(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5296-两棵二叉搜索树中的所有元素"><a href="#5296-两棵二叉搜索树中的所有元素" class="headerlink" title="5296. 两棵二叉搜索树中的所有元素"></a>5296. 两棵二叉搜索树中的所有元素</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你 <code>root1</code> 和 <code>root2</code> 这两棵二叉搜索树。</p><p>请你返回一个列表，其中包含 两棵树 中的所有整数并按 升序 排序。.</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root1 = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>], root2 = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root1 = [<span class="number">0</span>,<span class="number">-10</span>,<span class="number">10</span>], root2 = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">-10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root1 = [], root2 = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root1 = [<span class="number">0</span>,<span class="number">-10</span>,<span class="number">10</span>], root2 = []</span><br><span class="line">输出：[<span class="number">-10</span>,<span class="number">0</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root1 = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">8</span>], root2 = [<span class="number">8</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>每棵树最多有 5000 个节点。</li><li>每个节点的值在 [-10^5, 10^5] 之间。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees" target="_blank" rel="noopener">https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 中序遍历 + 合并有序数组</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>送分题，直接遍历然后排序即可，时间复杂度为<code>O(nlgn)</code>;</li><li>中序遍历，然后进行<code>merge</code>,时间复杂度为<code>O(n)</code>;<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3></li><li>直接暴力求解<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">helper</span><span class="params">(TreeNode * root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        helper(root-&gt;left,res);</span><br><span class="line">        res.push_back(root-&gt;val);</span><br><span class="line">        helper(root-&gt;right,res);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getAllElements(TreeNode* root1, TreeNode* root2) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr1;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr2;</span><br><span class="line">        helper(root1,arr1);</span><br><span class="line">        helper(root2,arr2);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 &lt; arr1.size() &amp;&amp; l2 &lt; arr2.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr1[l1] &lt; arr2[l2])&#123;</span><br><span class="line">                res.push_back(arr1[l1]);</span><br><span class="line">                l1++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.push_back(arr2[l2]);</span><br><span class="line">                l2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1 &lt; arr1.size())&#123;</span><br><span class="line">            res.insert(res.end(),arr1.begin()+l1,arr1.end());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l2 &lt; arr2.size())&#123;</span><br><span class="line">            res.insert(res.end(),arr2.begin()+l2,arr2.end());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5297-跳跃游戏-III"><a href="#5297-跳跃游戏-III" class="headerlink" title="5297. 跳跃游戏 III"></a>5297. 跳跃游戏 III</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>这里有一个非负整数数组 arr，你最开始位于该数组的起始下标 start 处。当你位于下标 i 处时，你可以跳到 <code>i + arr[i]</code> 或者 <code>i - arr[i]</code>。</p><p>请你判断自己是否能够跳到对应元素值为 0 的 任意 下标处。</p><p>注意，不管是什么情况下，你都无法跳到数组之外。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>], start = <span class="number">5</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：</span><br><span class="line">到达值为 <span class="number">0</span> 的下标 <span class="number">3</span> 有以下可能方案： </span><br><span class="line">下标 <span class="number">5</span> -&gt; 下标 <span class="number">4</span> -&gt; 下标 <span class="number">1</span> -&gt; 下标 <span class="number">3</span> </span><br><span class="line">下标 <span class="number">5</span> -&gt; 下标 <span class="number">6</span> -&gt; 下标 <span class="number">4</span> -&gt; 下标 <span class="number">1</span> -&gt; 下标 <span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>], start = <span class="number">0</span></span><br><span class="line">输出：<span class="literal">true</span> </span><br><span class="line">解释：</span><br><span class="line">到达值为 <span class="number">0</span> 的下标 <span class="number">3</span> 有以下可能方案： </span><br><span class="line">下标 <span class="number">0</span> -&gt; 下标 <span class="number">4</span> -&gt; 下标 <span class="number">1</span> -&gt; 下标 <span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>], start = <span class="number">2</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：无法到达值为 <span class="number">0</span> 的下标 <span class="number">1</span> 处。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= arr.length &lt;= 5 * 10^4</li><li>0 &lt;= arr[i] &lt; arr.length</li><li>0 &lt;= start &lt; arr.length</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/jump-game-iii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/jump-game-iii</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS或者DFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li><code>BFS</code>,通过队列每次进行迭代即可，直到数组所有元素均被访问即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canReach</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit(n,<span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">        </span><br><span class="line">        qu.push(start);</span><br><span class="line">        visit[start] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = qu.front();</span><br><span class="line">            qu.pop();</span><br><span class="line">            <span class="keyword">if</span>(arr[curr] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(curr + arr[curr] &gt;= <span class="number">0</span> &amp;&amp; curr + arr[curr] &lt; n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!visit[curr+arr[curr]])&#123;</span><br><span class="line">                    qu.push(curr+arr[curr]);</span><br><span class="line">                    visit[curr+arr[curr]] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(curr - arr[curr] &gt;= <span class="number">0</span> &amp;&amp; curr - arr[curr] &lt; n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!visit[curr-arr[curr]])&#123;</span><br><span class="line">                    qu.push(curr-arr[curr]);</span><br><span class="line">                    visit[curr-arr[curr]] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5298-口算难题"><a href="#5298-口算难题" class="headerlink" title="5298. 口算难题"></a>5298. 口算难题</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个方程，左边用 words 表示，右边用 result 表示。</p><p>你需要根据以下规则检查方程是否可解：</p><p>每个字符都会被解码成一位数字（0 - 9）。<br>每对不同的字符必须映射到不同的数字。<br>每个 <code>words[i]</code>和<code>result</code>都会被解码成一个没有前导零的数字。<br>左侧数字之和<code>（words）</code>等于右侧数字<code>（result）</code>。<br>如果方程可解，返回<code>True</code>，否则返回 <code>False</code>。</p><p>示例 1：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [<span class="string">"SEND"</span>,<span class="string">"MORE"</span>], result = <span class="string">"MONEY"</span></span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：映射 <span class="string">'S'</span>-&gt; <span class="number">9</span>, <span class="string">'E'</span>-&gt;<span class="number">5</span>, <span class="string">'N'</span>-&gt;<span class="number">6</span>, <span class="string">'D'</span>-&gt;<span class="number">7</span>, <span class="string">'M'</span>-&gt;<span class="number">1</span>, <span class="string">'O'</span>-&gt;<span class="number">0</span>, <span class="string">'R'</span>-&gt;<span class="number">8</span>, <span class="string">'Y'</span>-&gt;<span class="string">'2'</span></span><br></pre></td></tr></table></figure><br>所以 “SEND” + “MORE” = “MONEY” ,  9567 + 1085 = 10652<br>示例 2：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [<span class="string">"SIX"</span>,<span class="string">"SEVEN"</span>,<span class="string">"SEVEN"</span>], result = <span class="string">"TWENTY"</span></span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：映射 <span class="string">'S'</span>-&gt; <span class="number">6</span>, <span class="string">'I'</span>-&gt;<span class="number">5</span>, <span class="string">'X'</span>-&gt;<span class="number">0</span>, <span class="string">'E'</span>-&gt;<span class="number">8</span>, <span class="string">'V'</span>-&gt;<span class="number">7</span>, <span class="string">'N'</span>-&gt;<span class="number">2</span>, <span class="string">'T'</span>-&gt;<span class="number">1</span>, <span class="string">'W'</span>-&gt;<span class="string">'3'</span>, <span class="string">'Y'</span>-&gt;<span class="number">4</span></span><br><span class="line">所以 <span class="string">"SIX"</span> + <span class="string">"SEVEN"</span> + <span class="string">"SEVEN"</span> = <span class="string">"TWENTY"</span> ,  <span class="number">650</span> + <span class="number">68782</span> + <span class="number">68782</span> = <span class="number">138214</span></span><br></pre></td></tr></table></figure><br>示例 3：</p><p>输入：words = [“THIS”,”IS”,”TOO”], result = “FUNNY”<br>输出：true<br>示例 4：</p><p>输入：words = [“LEET”,”CODE”], result = “POINT”<br>输出：false</p><p>提示：</p><ul><li>2 &lt;= words.length &lt;= 5</li><li>1 &lt;= words[i].length, results.length &lt;= 7</li><li>words[i], result 只含有大写英文字母<br>表达式中使用的不同字符数最大为 </li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/verbal-arithmetic-puzzle" target="_blank" rel="noopener">https://leetcode-cn.com/problems/verbal-arithmetic-puzzle</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>题目一看就是<code>DFS</code>，但是如果处理不好，很容易超时，这是一个比较大的问题，在比赛中就因为剪枝和压缩没做好，导致超时。</li><li>竟然用STL的函数标准类超时，换成数组就过了。</li><li>可以继续剪枝，特别是个数可以进行进一步检查，从而减少搜索的复杂度，对首位。</li><li>可以合并同类相，进一步剪枝，只计算同类相系数不为<code>0</code>的字符，对相同的字符做一次统计即可计算出它所代表的值。比如：<script type="math/tex; mode=display">abcd + bcde + cdef - defg = a*(10^{3}) + b*(10^{3}+10^{2}) + c*(10^{3}+10^{2}+10^{1}) + d*(10^{2}+10^{1}+10^{0}-10^{3}) + e*(10^{1}+10^{0}-10^{2}) + f*(10^{0}-10^{1}) + g*(-10^{0})</script></li><li>我们只需要找到合适的数字<script type="math/tex; mode=display">{a,b,c,d,e,f,g}</script>使上述等式为<code>0</code>即可。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> zeroCheck[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> visit[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> nums[<span class="number">26</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> curr,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; ch,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curr == ch.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> sum == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; zeroCheck[ch[curr]])&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(visit[i])&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            visit[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(dfs(curr+<span class="number">1</span>,ch,sum + nums[ch[curr]]*i))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visit[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSolvable</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words, <span class="built_in">string</span> result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = result.size();</span><br><span class="line">        <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ch;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(zeroCheck,<span class="number">0</span>,<span class="keyword">sizeof</span>(zeroCheck));</span><br><span class="line">        <span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">        <span class="built_in">memset</span>(nums,<span class="number">0</span>,<span class="keyword">sizeof</span>(nums));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> w: words)&#123;</span><br><span class="line">            zeroCheck[w[<span class="number">0</span>]-<span class="string">'A'</span>] = <span class="number">1</span>;d</span><br><span class="line">            reverse(w.begin(),w.end());</span><br><span class="line">            curr = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; c: w)&#123;</span><br><span class="line">                nums[c-<span class="string">'A'</span>] += curr;</span><br><span class="line">                curr = curr*<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        zeroCheck[result[<span class="number">0</span>]-<span class="string">'A'</span>] = <span class="literal">true</span>;</span><br><span class="line">        reverse(result.begin(),result.end());</span><br><span class="line">        curr = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; c: result)&#123;</span><br><span class="line">            nums[c-<span class="string">'A'</span>] -= curr;</span><br><span class="line">            curr = curr*<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                ch.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,ch,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;dd</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;169比赛&quot;&gt;&lt;a href=&quot;#169比赛&quot; class=&quot;headerlink&quot; title=&quot;169比赛&quot;&gt;&lt;/a&gt;169比赛&lt;/h1&gt;&lt;p&gt;给你一个整数 n，请你返回 任意 一个由 n 个 各不相同 的整数组成的数组，并且这 n 个数相加和为 0 。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：n = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;-7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：这些数组也是正确的 [&lt;span class=&quot;number&quot;&gt;-5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]，[&lt;span class=&quot;number&quot;&gt;-3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：n = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：n = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 双周比赛</title>
    <link href="http://yoursite.com/2019/12/29/114/"/>
    <id>http://yoursite.com/2019/12/29/114/</id>
    <published>2019-12-29T09:09:54.520Z</published>
    <updated>2019-12-29T09:09:54.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="双周比赛"><a href="#双周比赛" class="headerlink" title="双周比赛"></a>双周比赛</h1><p>第二题有点意思，需要一定的技巧的二分查找，其余的题目都是常规题目</p><h2 id="55134-将每个元素替换为右侧最大元素"><a href="#55134-将每个元素替换为右侧最大元素" class="headerlink" title="55134. 将每个元素替换为右侧最大元素"></a>55134. 将每个元素替换为右侧最大元素</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 arr ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用 -1 替换。</p><p>完成所有替换操作后，请你返回这个数组。</p><p>示例：</p><p>输入：arr = [17,18,5,4,6,1]<br>输出：[18,6,6,6,1,-1]</p><a id="more"></a><p>提示：</p><ul><li>1 &lt;= arr.length &lt;= 10^4</li><li>1 &lt;= arr[i] &lt;= 10^5</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/replace-elements-with-greatest-element-on-right-side" target="_blank" rel="noopener">https://leetcode-cn.com/problems/replace-elements-with-greatest-element-on-right-side</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 送分题，从右往左扫描一遍即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接扫描。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; replaceElements(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right(n,INT_MIN);</span><br><span class="line">        </span><br><span class="line">        right[n<span class="number">-1</span>] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> curr = arr[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            right[i] = curr;</span><br><span class="line">            curr = max(curr,arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5135-转变数组后最接近目标值的数组和"><a href="#5135-转变数组后最接近目标值的数组和" class="headerlink" title="5135. 转变数组后最接近目标值的数组和"></a>5135. 转变数组后最接近目标值的数组和</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code>和一个目标值 <code>target</code> ，请你返回一个整数 <code>value</code> ，使得将数组中所有大于 value 的值变成 value 后，数组的和最接近  target （最接近表示两者之差的绝对值最小）。</p><p>如果有多种使得和最接近 target 的方案，请你返回这些整数中的最小值。</p><p>请注意，答案不一定是 arr 中的数字。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>], target = <span class="number">10</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：当选择 value 为 <span class="number">3</span> 时，数组会变成 [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]，和为 <span class="number">9</span> ，这是最接近 target 的方案。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>], target = <span class="number">10</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">60864</span>,<span class="number">25176</span>,<span class="number">27249</span>,<span class="number">21296</span>,<span class="number">20204</span>], target = <span class="number">56803</span></span><br><span class="line">输出：<span class="number">11361</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 10^4</code></li><li><code>1 &lt;= arr[i], target &lt;= 10^5</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/sum-of-mutated-array-closest-to-target" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sum-of-mutated-array-closest-to-target</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力搜索 + 二分查找</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>二分查找，我们查找通过变换后的和大于等于<code>target</code>时的最小<code>value</code>,那么最终结果应该处于<code>val</code>与<code>val-1</code>之间；</li><li>我们通过二分查找，每次进行<code>check</code>找到刚好满足于大于等于<code>target</code>,通过标准的二分查找即可；</li><li>我们也可以使用暴力搜索的方法，很容易通过查找即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3></li><li>直接暴力求解<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findBestValue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> dist = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        sort(arr.begin(),arr.end());        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            sum[i] += sum[i<span class="number">-1</span>] + arr[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= target; ++i)&#123;</span><br><span class="line">            <span class="keyword">auto</span> it = upper_bound(arr.begin(),arr.end(),i);</span><br><span class="line">            <span class="keyword">int</span> l = it - arr.begin();</span><br><span class="line">            <span class="keyword">int</span> curr = <span class="built_in">abs</span>(sum[l] + (n-l)*i-target);</span><br><span class="line">            <span class="keyword">if</span>(curr &lt; dist)&#123;</span><br><span class="line">                dist = curr;</span><br><span class="line">                res = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>二分查找<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; arr,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; x)&#123;</span><br><span class="line">                sum += x;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum += arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findBestValue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> target)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">int</span> r = arr.back();</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(arr,mid) &gt;= target)&#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l1 = check(arr,l);</span><br><span class="line">        <span class="keyword">int</span> l2 = check(arr,l<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(l2-target) &lt;= <span class="built_in">abs</span>(l1-target))&#123;</span><br><span class="line">            <span class="keyword">return</span> l<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5153-层数最深叶子节点的和"><a href="#5153-层数最深叶子节点的和" class="headerlink" title="5153. 层数最深叶子节点的和"></a>5153. 层数最深叶子节点的和</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一棵二叉树，请你返回层数最深的叶子节点的和。<br>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="literal">null</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">8</span>]</span><br><span class="line">输出：<span class="number">15</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>树中节点数目在 1 到 10^4 之间。</li><li>每个节点的值在 1 到 100 之间。</li><li>在真实的面试中遇到过这道题？</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/deepest-leaves-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/deepest-leaves-sum</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 送分题，找到最后一层，然后相加得到和即可</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li><code>DFS</code>,找到树的最大深度，然后将和相加即可。</li><li><code>BFS</code>,每次计算层数的和，最后的和即可最深层次的和。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode * root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l = depth(root-&gt;left);</span><br><span class="line">        <span class="keyword">int</span> r = depth(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> max(l,r) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TreeNode * root,<span class="keyword">int</span> &amp; res,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(d == <span class="number">1</span>)&#123;</span><br><span class="line">            res += root-&gt;val;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dfs(root-&gt;left,res,d<span class="number">-1</span>);</span><br><span class="line">        dfs(root-&gt;right,res,d<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deepestLeavesSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = depth(root);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        dfs(root,res,d);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deepestLeavesSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode *&gt; qu;</span><br><span class="line">        </span><br><span class="line">        qu.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> sz = qu.size();</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)&#123;</span><br><span class="line">                TreeNode * curr = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                res += curr-&gt;val;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(curr-&gt;left)&#123;</span><br><span class="line">                    qu.push(curr-&gt;left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(curr-&gt;right)&#123;</span><br><span class="line">                    qu.push(curr-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5137-最大得分的路径数目"><a href="#5137-最大得分的路径数目" class="headerlink" title="5137. 最大得分的路径数目"></a>5137. 最大得分的路径数目</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个正方形字符数组<code>board</code> ，你从数组最右下方的字符 ‘S’ 出发。</p><p>你的目标是到达数组最左上角的字符 ‘E’ ，数组剩余的部分为数字字符 <code>1, 2, ..., 9</code>或者障碍 ‘X’。在每一步移动中，你可以向上、向左或者左上方移动，可以移动的前提是到达的格子没有障碍。</p><p>一条路径的 「得分」 定义为：路径上所有数字的和。</p><p>请你返回一个列表，包含两个整数：第一个整数是 「得分」 的最大值，第二个整数是得到最大得分的方案数，请把结果对 10^9 + 7 取余。</p><p>如果没有任何路径可以到达终点，请返回 <code>[0, 0]</code>。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [<span class="string">"E23"</span>,<span class="string">"2X2"</span>,<span class="string">"12S"</span>]</span><br><span class="line">输出：[<span class="number">7</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [<span class="string">"E12"</span>,<span class="string">"1X1"</span>,<span class="string">"21S"</span>]</span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [<span class="string">"E11"</span>,<span class="string">"XXX"</span>,<span class="string">"11S"</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>2 &lt;= board.length == board[i].length &lt;= 100</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-paths-with-max-score" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-paths-with-max-score</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DP</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>非常常规的dp,最大值的递推公式：<code>dp[i][j] = max(dp[i+1][j],dp[i][j+1],dp[i+1][j+1]) + board[i][j]</code>;</li><li>方案的递推公式<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnt[<span class="string">i</span>][<span class="symbol">j</span>] = cnt[<span class="string">i</span>][<span class="symbol">j</span>] + cnt[<span class="string">i+1</span>][<span class="symbol">j</span>] (max(dp[<span class="string">i+1</span>][<span class="symbol">j</span>],dp[<span class="string">i</span>][<span class="symbol">j+1</span>],dp[<span class="string">i+1</span>][<span class="symbol">j+1</span>]) == dp[<span class="string">i+1</span>][<span class="symbol">j</span>] )</span><br><span class="line">cnt[<span class="string">i</span>][<span class="symbol">j</span>] = cnt[<span class="string">i</span>][<span class="symbol">j</span>] + cnt[<span class="string">i</span>][<span class="symbol">j+1</span>] (max(dp[<span class="string">i+1</span>][<span class="symbol">j</span>],dp[<span class="string">i</span>][<span class="symbol">j+1</span>],dp[<span class="string">i+1</span>][<span class="symbol">j+1</span>]) == dp[<span class="string">i</span>][<span class="symbol">j+1</span>] )</span><br><span class="line">cnt[<span class="string">i</span>][<span class="symbol">j</span>] = cnt[<span class="string">i</span>][<span class="symbol">j</span>] + cnt[<span class="string">i+1</span>][<span class="symbol">j+1</span>] (max(dp[<span class="string">i+1</span>][<span class="symbol">j</span>],dp[<span class="string">i</span>][<span class="symbol">j+1</span>],dp[<span class="string">i+1</span>][<span class="symbol">j+1</span>]) == dp[<span class="string">i+1</span>][<span class="symbol">j+1</span>] )</span><br></pre></td></tr></table></figure></li><li>按照公式递推即可。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pathsWithMaxScore(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; board) &#123;</span><br><span class="line">        <span class="keyword">int</span> row = board.size();</span><br><span class="line">        <span class="keyword">int</span> col = board[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(row,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col,<span class="number">-1</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; cnt(row,<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(col,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        dp[row<span class="number">-1</span>][col<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">        cnt[row<span class="number">-1</span>][col<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = row<span class="number">-2</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][col<span class="number">-1</span>] == <span class="string">'X'</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][col<span class="number">-1</span>] = board[i][col<span class="number">-1</span>] - <span class="string">'0'</span> + dp[i+<span class="number">1</span>][col<span class="number">-1</span>];</span><br><span class="line">                cnt[i][col<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;             </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = col<span class="number">-2</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[row<span class="number">-1</span>][i] == <span class="string">'X'</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[row<span class="number">-1</span>][i] = board[row<span class="number">-1</span>][i] - <span class="string">'0'</span> + dp[row<span class="number">-1</span>][i+<span class="number">1</span>];</span><br><span class="line">                cnt[row<span class="number">-1</span>][i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = row<span class="number">-2</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = col<span class="number">-2</span>; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'X'</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j] &lt; <span class="number">0</span> &amp;&amp; dp[i][j+<span class="number">1</span>] &lt; <span class="number">0</span> &amp;&amp; dp[i+<span class="number">1</span>][j+<span class="number">1</span>] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> curr = max(dp[i+<span class="number">1</span>][j],max(dp[i][j+<span class="number">1</span>],dp[i+<span class="number">1</span>][j+<span class="number">1</span>]));</span><br><span class="line">                <span class="keyword">if</span>(curr == dp[i+<span class="number">1</span>][j])&#123;</span><br><span class="line">                    cnt[i][j] = (cnt[i][j] + cnt[i+<span class="number">1</span>][j])%mod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(curr == dp[i][j+<span class="number">1</span>])&#123;</span><br><span class="line">                    cnt[i][j] = (cnt[i][j] + cnt[i][j+<span class="number">1</span>])%mod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(curr == dp[i+<span class="number">1</span>][j+<span class="number">1</span>])&#123;</span><br><span class="line">                    cnt[i][j] = (cnt[i][j] + cnt[i+<span class="number">1</span>][j+<span class="number">1</span>])%mod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j] = curr;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = curr + board[i][j] - <span class="string">'0'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(dp[<span class="number">0</span>][<span class="number">0</span>] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;dp[<span class="number">0</span>][<span class="number">0</span>],cnt[<span class="number">0</span>][<span class="number">0</span>]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;双周比赛&quot;&gt;&lt;a href=&quot;#双周比赛&quot; class=&quot;headerlink&quot; title=&quot;双周比赛&quot;&gt;&lt;/a&gt;双周比赛&lt;/h1&gt;&lt;p&gt;第二题有点意思，需要一定的技巧的二分查找，其余的题目都是常规题目&lt;/p&gt;&lt;h2 id=&quot;55134-将每个元素替换为右侧最大元素&quot;&gt;&lt;a href=&quot;#55134-将每个元素替换为右侧最大元素&quot; class=&quot;headerlink&quot; title=&quot;55134. 将每个元素替换为右侧最大元素&quot;&gt;&lt;/a&gt;55134. 将每个元素替换为右侧最大元素&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个数组 arr ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用 -1 替换。&lt;/p&gt;&lt;p&gt;完成所有替换操作后，请你返回这个数组。&lt;/p&gt;&lt;p&gt;示例：&lt;/p&gt;&lt;p&gt;输入：arr = [17,18,5,4,6,1]&lt;br&gt;输出：[18,6,6,6,1,-1]&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 168周比赛</title>
    <link href="http://yoursite.com/2019/12/23/113/"/>
    <id>http://yoursite.com/2019/12/23/113/</id>
    <published>2019-12-23T01:51:34.432Z</published>
    <updated>2019-12-23T04:01:44.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="168周比赛"><a href="#168周比赛" class="headerlink" title="168周比赛"></a>168周比赛</h1><p>本周的题目最后两道题目有点意思，特别是第三题竟然再长度的地方卡壳了。</p><h2 id="5291-统计位数为偶数的数字"><a href="#5291-统计位数为偶数的数字" class="headerlink" title="5291. 统计位数为偶数的数字"></a>5291. 统计位数为偶数的数字</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums</code>，请你返回其中位数为 偶数 的数字的个数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">12</span>,<span class="number">345</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7896</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line"><span class="number">12</span> 是 <span class="number">2</span> 位数字（位数为偶数） </span><br><span class="line"><span class="number">345</span> 是 <span class="number">3</span> 位数字（位数为奇数）  </span><br><span class="line"><span class="number">2</span> 是 <span class="number">1</span> 位数字（位数为奇数） </span><br><span class="line"><span class="number">6</span> 是 <span class="number">1</span> 位数字 位数为奇数） </span><br><span class="line"><span class="number">7896</span> 是 <span class="number">4</span> 位数字（位数为偶数）  </span><br><span class="line">因此只有 <span class="number">12</span> 和 <span class="number">7896</span> 是位数为偶数的数字</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">555</span>,<span class="number">901</span>,<span class="number">482</span>,<span class="number">1771</span>]</span><br><span class="line">输出：<span class="number">1</span> </span><br><span class="line">解释： </span><br><span class="line">只有 <span class="number">1771</span> 是位数为偶数的数字。</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 500</code></li><li><code>1 &lt;= nums[i] &lt;= 10^5</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-numbers-with-even-number-of-digits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-numbers-with-even-number-of-digits</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 两种方法，一种是计算数字的个数，另一种是直接转换为字符串</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接转换为字符串，算法非常简单。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findNumbers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; n : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(to_string(n).size()%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNumbers</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> len([<span class="number">0</span> <span class="keyword">for</span> n <span class="keyword">in</span> nums <span class="keyword">if</span> len(str(n))%<span class="number">2</span> == <span class="number">0</span>])</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5292-划分数组为连续数字的集合"><a href="#5292-划分数组为连续数字的集合" class="headerlink" title="5292. 划分数组为连续数字的集合"></a>5292. 划分数组为连续数字的集合</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组<code>nums</code>和一个正整数<code>k</code>，请你判断是否可以把这个数组划分成一些由<code>k</code>个连续数字组成的集合。<br>如果可以，请返回<code>True</code>；否则，返回<code>False</code>。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], k = <span class="number">4</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：数组可以分成 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] 和 [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：数组可以分成 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] , [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] , [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] 和 [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：数组不能分成几个大小为 <span class="number">3</span> 的子数组。</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/divide-array-in-sets-of-k-consecutive-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/divide-array-in-sets-of-k-consecutive-numbers</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>每次从最小的数开始抽取连续的K个元素即可，我们可以用map来存储数组元素<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPossibleDivide</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; freq;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n%k != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; n : nums)&#123;</span><br><span class="line">            freq[n]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(freq.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> start = freq.begin()-&gt;first;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; start+k; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(freq.count(i))&#123;</span><br><span class="line">                    freq[i]--;</span><br><span class="line">                    <span class="keyword">if</span>(freq[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                        freq.erase(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5293-子串的最大出现次数"><a href="#5293-子串的最大出现次数" class="headerlink" title="5293. 子串的最大出现次数"></a>5293. 子串的最大出现次数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 s ，请你返回满足以下条件且出现次数最大的 任意 子串的出现次数：</p><p>子串中不同字母的数目必须小于等于 <code>maxLetters</code> 。<br>子串的长度必须大于等于 <code>minSize</code>且小于等于<code>maxSize</code> 。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aababcaab"</span>, maxLetters = <span class="number">2</span>, minSize = <span class="number">3</span>, maxSize = <span class="number">4</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：子串 <span class="string">"aab"</span> 在原字符串中出现了 <span class="number">2</span> 次。</span><br><span class="line">它满足所有的要求：<span class="number">2</span> 个不同的字母，长度为 <span class="number">3</span> （在 minSize 和 maxSize 范围内）。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aaaa"</span>, maxLetters = <span class="number">1</span>, minSize = <span class="number">3</span>, maxSize = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：子串 <span class="string">"aaa"</span> 在原字符串中出现了 <span class="number">2</span> 次，且它们有重叠部分。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aabcabcab"</span>, maxLetters = <span class="number">2</span>, minSize = <span class="number">2</span>, maxSize = <span class="number">3</span></span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"abcde"</span>, maxLetters = <span class="number">2</span>, minSize = <span class="number">3</span>, maxSize = <span class="number">3</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 10^5</li><li>1 &lt;= maxLetters &lt;= 26</li><li>1 &lt;= minSize &lt;= maxSize &lt;= min(26, s.length)</li><li>s 只包含小写英文字母。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-number-of-occurrences-of-a-substring" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-number-of-occurrences-of-a-substring</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 分析题意可以知道maxSize没有用，因为如果能够满足maxSize，则一定能够满足minSize的，理解这个是本题的关键。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>我们只需要找到满足maxSize长度的出现次数最大的字符串即可。</li><li>采用滑动窗口法即可，每次计算窗口长度为<code>minSize</code>的字符串字串的字符出现的次数，如果满足要求即可。</li><li>我们可以很快的通过hash来计算字符串中字符的个数。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxFreq</span><span class="params">(self, s: str, maxLetters: int, minSize: int, maxSize: int)</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        freq = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(s)-minSize+<span class="number">1</span>):</span><br><span class="line">            curr = s[i:i+minSize]</span><br><span class="line">            <span class="keyword">if</span> len(set(list(curr))) &lt;= maxLetters:</span><br><span class="line">                <span class="keyword">if</span> curr <span class="keyword">in</span> freq:</span><br><span class="line">                    freq[curr] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    freq[curr] = <span class="number">1</span></span><br><span class="line">                res = max(res,freq[curr])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxFreq</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> maxLetters, <span class="keyword">int</span> minSize, <span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j+minSize &lt;= n; ++j)&#123;</span><br><span class="line">            <span class="built_in">string</span> curr = s.substr(j,minSize);</span><br><span class="line">            <span class="keyword">int</span> mask = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; c : curr)&#123;</span><br><span class="line">                mask = mask|(<span class="number">1</span>&lt;&lt;(c-<span class="string">'a'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(__builtin_popcount(mask) &lt;= maxLetters)&#123;</span><br><span class="line">                cnt[curr]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;it : cnt)</span><br><span class="line">            ans = max(ans, it.second);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5294-你能从盒子里获得的最大糖果数"><a href="#5294-你能从盒子里获得的最大糖果数" class="headerlink" title="5294. 你能从盒子里获得的最大糖果数"></a>5294. 你能从盒子里获得的最大糖果数</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你 n 个盒子，每个盒子的格式为 <code>[status, candies, keys, containedBoxes]</code> ，其中：</p><p>状态字 <code>status[i]：</code>整数，<code>如果 box[i]</code>是开的，那么是 1 ，否则是 0 。<br>糖果数 <code>candies[i]</code>: 整数，表示<code>box[i]</code>中糖果的数目。<br>钥匙 <code>keys[i]：</code>数组，表示你打开 <code>box[i]</code> 后，可以得到一些盒子的钥匙，每个元素分别为该钥匙对应盒子的下标。<br>内含的盒子 <code>containedBoxes[i]：</code>整数，表示放在<code>box[i]</code> 里的盒子所对应的下标。<br>给你一个 <code>initialBoxes</code> 数组，表示你现在得到的盒子，你可以获得里面的糖果，也可以用盒子里的钥匙打开新的盒子，还可以继续探索从这个盒子里找到的其他盒子。</p><p>请你按照上述规则，返回可以获得糖果的 最大数目 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：status = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>], candies = [<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">100</span>], keys = [[],[],[<span class="number">1</span>],[]], containedBoxes = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>],[],[]], initialBoxes = [<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">16</span></span><br><span class="line">解释：</span><br><span class="line">一开始你有盒子 <span class="number">0</span> 。你将获得它里面的 <span class="number">7</span> 个糖果和盒子 <span class="number">1</span> 和 <span class="number">2</span>。</span><br><span class="line">盒子 <span class="number">1</span> 目前状态是关闭的，而且你还没有对应它的钥匙。所以你将会打开盒子 <span class="number">2</span> ，并得到里面的 <span class="number">4</span> 个糖果和盒子 <span class="number">1</span> 的钥匙。</span><br><span class="line">在盒子 <span class="number">1</span> 中，你会获得 <span class="number">5</span> 个糖果和盒子 <span class="number">3</span> ，但是你没法获得盒子 <span class="number">3</span> 的钥匙所以盒子 <span class="number">3</span> 会保持关闭状态。</span><br><span class="line">你总共可以获得的糖果数目 = <span class="number">7</span> + <span class="number">4</span> + <span class="number">5</span> = <span class="number">16</span> 个。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：status = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], candies = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], keys = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[],[],[],[],[]], containedBoxes = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[],[],[],[],[]], initialBoxes = [<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：</span><br><span class="line">你一开始拥有盒子 <span class="number">0</span> 。打开它你可以找到盒子 <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> 和它们对应的钥匙。</span><br><span class="line">打开这些盒子，你将获得所有盒子的糖果，所以总糖果数为 <span class="number">6</span> 个。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：status = <span class="comment">[1,1,1]</span>, candies = <span class="comment">[100,1,100]</span>, keys = <span class="comment">[<span class="comment">[]</span>,<span class="comment">[0,2]</span>,<span class="comment">[]</span>]</span>, containedBoxes = <span class="comment">[<span class="comment">[]</span>,<span class="comment">[]</span>,<span class="comment">[]</span>]</span>, initialBoxes = <span class="comment">[1]</span></span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">status</span> = [<span class="number">1</span>], candies = [<span class="number">100</span>], keys = <span class="string">[[]]</span>, containedBoxes = <span class="string">[[]]</span>, initialBoxes = []</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：status = <span class="comment">[1,1,1]</span>, candies = <span class="comment">[2,3,2]</span>, keys = <span class="comment">[<span class="comment">[]</span>,<span class="comment">[]</span>,<span class="comment">[]</span>]</span>, containedBoxes = <span class="comment">[<span class="comment">[]</span>,<span class="comment">[]</span>,<span class="comment">[]</span>]</span>, initialBoxes = <span class="comment">[2,1,0]</span></span><br><span class="line">输出：7</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= status.length &lt;= 1000</li><li>status.length == candies.length == keys.length == containedBoxes.length == n</li><li>status[i] 要么是 0 要么是 1 。</li><li>1 &lt;= candies[i] &lt;= 1000</li><li>0 &lt;= keys[i].length &lt;= status.length</li><li>0 &lt;= keys[i][j] &lt; status.length</li><li>keys[i] 中的值都是互不相同的。</li><li>0 &lt;= containedBoxes[i].length &lt;= status.length</li><li>0 &lt;= containedBoxes[i][j] &lt; status.length</li><li>containedBoxes[i] 中的值都是互不相同的。</li><li>每个盒子最多被一个盒子包含。</li><li>0 &lt;= initialBoxes.length &lt;= status.length</li><li>0 &lt;= initialBoxes[i] &lt; status.length</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-candies-you-can-get-from-boxes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-candies-you-can-get-from-boxes</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 典型的BFS或者DFS，不过还需要一些技巧</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>实际我们在打开盒子时，主要是关于<code>keys</code>的处理，可能我们先获得的盒子，或获取<code>keys</code>.</li><li>我们采用类似的<code>BFS</code>或者<code>DFS</code> 模拟打开盒子的过程，进行<code>bfs</code>时，我们首先将可以打开的盒子放入队列，每次从队列中取出所有的盒子，然后进打开操作。</li><li>我们从队列中取出盒子之后，先取出其中的<code>candy</code>,然后取出<code>box</code>,最后取出<code>keys</code>.</li><li>所有可以打开的盒子打开完成之后，我们检查有多少被锁着的盒子可以用钥匙打开，然后将这些可以打开的盒子再放入到队列中。</li><li>重复3，4，5的操作，直到队列中没有可以打开的盒子截至。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxCandies</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; status, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candies, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; keys, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; containedBoxes, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; initialBoxes)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; handBoxs;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*inital*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; b : initialBoxes)&#123;</span><br><span class="line">            <span class="keyword">if</span>(status[b])&#123;</span><br><span class="line">                qu.push(b);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                handBoxs.insert(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*BFS*/</span></span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="comment">/*open box*/</span></span><br><span class="line">            <span class="keyword">int</span> sz = qu.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> curr = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                <span class="comment">/*get candy*/</span></span><br><span class="line">                res += candies[curr];</span><br><span class="line">                <span class="comment">/*get keys*/</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; k : keys[curr])&#123;</span><br><span class="line">                    status[k] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*get boxs*/</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; b : containedBoxes[curr])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(status[b])&#123;</span><br><span class="line">                        qu.push(b);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        handBoxs.insert(b);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*check lock boxs*/</span></span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; open;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; hb: handBoxs)&#123;</span><br><span class="line">                <span class="keyword">if</span>(status[hb])&#123;</span><br><span class="line">                    qu.push(hb);</span><br><span class="line">                    open.push_back(hb);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; ob : open)&#123;</span><br><span class="line">                handBoxs.erase(ob);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;168周比赛&quot;&gt;&lt;a href=&quot;#168周比赛&quot; class=&quot;headerlink&quot; title=&quot;168周比赛&quot;&gt;&lt;/a&gt;168周比赛&lt;/h1&gt;&lt;p&gt;本周的题目最后两道题目有点意思，特别是第三题竟然再长度的地方卡壳了。&lt;/p&gt;&lt;h2 id=&quot;5291-统计位数为偶数的数字&quot;&gt;&lt;a href=&quot;#5291-统计位数为偶数的数字&quot; class=&quot;headerlink&quot; title=&quot;5291. 统计位数为偶数的数字&quot;&gt;&lt;/a&gt;5291. 统计位数为偶数的数字&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt;，请你返回其中位数为 偶数 的数字的个数。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：nums = [&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;345&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7896&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; 是 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 位数字（位数为偶数） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;345&lt;/span&gt; 是 &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; 位数字（位数为奇数）  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 是 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 位数字（位数为奇数） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; 是 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 位数字 位数为奇数） &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;7896&lt;/span&gt; 是 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; 位数字（位数为偶数）  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因此只有 &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; 和 &lt;span class=&quot;number&quot;&gt;7896&lt;/span&gt; 是位数为偶数的数字&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：nums = [&lt;span class=&quot;number&quot;&gt;555&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;901&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;482&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1771&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释： &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;只有 &lt;span class=&quot;number&quot;&gt;1771&lt;/span&gt; 是位数为偶数的数字。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>线性模型</title>
    <link href="http://yoursite.com/2019/12/21/%E3%80%90leetcode%E3%80%9157/"/>
    <id>http://yoursite.com/2019/12/21/【leetcode】57/</id>
    <published>2019-12-21T03:54:29.542Z</published>
    <updated>2019-10-23T15:57:31.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-线性模型"><a href="#1-线性模型" class="headerlink" title="1.线性模型"></a>1.线性模型</h2><p>给定n个属性描述属性的特征 <script type="math/tex">x = (x_1,x_2,x_3,...,x_n)</script>,其中$x_i$表示第$i$个特征，线性模型试图通过一个特征值的线性组合来表示最终的模型，即最终的预测函数:</p><script type="math/tex; mode=display">f(x) = \omega_{1}x_{1} + \omega_{2}x_{2} + ... + \omega_{n}x_{n} + b  \tag{1-1}</script><a id="more"></a><p>如果采用向量表示则：</p><script type="math/tex; mode=display">f(x) = \omega^{T}x + b  \tag{1-2}</script><p>其中$\omega = (\omega_{1},\omega_{2},\omega_{3}…\omega_{n})$,我们只需要求出$\omega$ 和 $b$，就可以求出预测函数，得到最终的模型。<br>我们常见的可以通过线性回归(linear regression)试图学得一个线性模式，使得给定特征值，尽可能的准确的预测输出与实际值接近的结果。<br>我们已知$f(x) = \omega^{T}x + b $，</p><h3 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h3><p>我们知道欧几里得距离可以表示两个值的差异，可以使用均方差来度量，应当尽可能的保证均方差最小。假设我们有m个样本，<br>$x_{i}$代表每个样本的特征值，$y_{i}$代表实际每个样本的实际结果.</p><script type="math/tex; mode=display">\sum_{l=1}^{n}(f(x_{i})-y_{i})^{2} \tag{1-3}</script><p>我们应当保证均方差尽可能的最小。我们用矩阵表示所有的样本</p><script type="math/tex; mode=display">X =  \left[\begin{matrix} x_{11} & x_{12} & \cdots & x_{1n} & 1  \\ x_{21} & x_{22} & \cdots & x_{2n} & 1  \\ \vdots & \vdots & \ddots & \vdots & \vdots \\ x_{m1} & x_{m2} & \cdots & x_{mn} & 1  \\\end{matrix}\right] =  \left[\begin{matrix} x_{1}^{T} & 1  \\ x_{2}^{T} & 1  \\ \vdots & \vdots \\ x_{m}^{T} & 1  \\\end{matrix}\right]   \tag{1-4}</script><p>我们把实际的结果也用向量形式表示则</p><script type="math/tex; mode=display">Y =\left[\begin{matrix}y_{1} \\y_{2} \\\vdots \\y_{m}  \\\end{matrix}\right]  \tag{1-5}</script><p>则应尽量使得均方差最小$arg min(y-X\omega-b)^{T}(y-X\omega-b)  \tag{1-6}$.</p><p>我们令$E_{\omega} = (y-X\omega)^{T}(y-X\omega)$。实际上将$x \omega b$代入公式得到</p><script type="math/tex; mode=display">E = \sum_{i=1}^{m}(f(x_{i})-y_{i})^{2}  = \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2} \tag{1-7}</script><p>如式（7）所示，我们知道如果使的E最小，则在导数方向应该是最小，则我们分别$\omega$、$b$进行求导.<br>则可知：</p><script type="math/tex; mode=display">\frac{\partial E}{\partial \omega} = 0 \tag{1-8}</script><script type="math/tex; mode=display">\frac{\partial E}{\partial b} = 0 \tag{1-9}</script><p>我们将其方程8与方程9代入数据，可知</p><script type="math/tex; mode=display">\frac{\partial E}{\partial \omega_{1}} = 0 \\\frac{\partial E}{\partial \omega_{2}} = 0 \\\frac{\partial E}{\partial \omega_{3}} = 0 \\\vdots                                        \\\frac{\partial E}{\partial \omega_{n}} = 0 \\\frac{\partial E}{\partial b} = 0</script><p>我们将E的值代入即可得到</p><script type="math/tex; mode=display">\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{1}} = 0 \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{2}} = 0 \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{3}} = 0 \\\vdots  \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{n}} = 0 \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial b} = 0 \\</script><p>求导数后可得如下：</p><script type="math/tex; mode=display">\begin{equation}\begin{cases}2\sum_{i=1}^{m}x_{i1}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\2\sum_{i=1}^{m}x_{i2}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\2\sum_{i=1}^{m}x_{i3}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\\vdots \\2\sum_{i=1}^{m}x_{in}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\2\sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\\end{cases}\end{equation}</script><p>将方程进行化解后可得:</p><script type="math/tex; mode=display">\begin{equation}\begin{cases}\sum_{i=1}^{m}x_{i1}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{i1}y_{i} \\\sum_{i=1}^{m}x_{i2}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{i2}y_{i} \\\sum_{i=1}^{m}x_{i3}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{i3}y_{i} \\\vdots     \\\sum_{i=1}^{m}x_{in}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{in}y_{i} \\\sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}y_{i} \\\end{cases}\end{equation}</script><p>我们令$\omega_{0} = b$将其转换为矩阵的乘法为</p><script type="math/tex; mode=display">E = \left[\begin{matrix}\omega_{1} & \omega_{2} & \omega_{3} & \cdots & \omega_{n} & b\end{matrix}\right]\left[\begin{matrix}x_{11} & x_{21} & x_{31}  & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32}  & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33}  & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots & \vdots  \\x_{1n} & x_{2n} & x_{3n}  & \cdots & x_{mn} \\1 & 1 & 1  & 1 & 1 \\\end{matrix}\right]\left[\begin{matrix}x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} & 1\\x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} & 1\\x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} & 1\\\vdots  & \vdots  & \vdots   & \ddots & \vdots & \vdots \\x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} & 1\\\end{matrix}\right] \\= \left[\begin{matrix}x_{11} & x_{21} & x_{31} & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32} & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33} & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots  & \vdots \\x_{1n} & x_{2n} & x_{3n} & \cdots & x_{mn} \\1 & 1 & 1  & 1 & 1 \\\end{matrix}\right]\left[\begin{matrix}y_{1} \\y_{2} \\y_{3} \\\cdots \\y_{m}  \\\end{matrix}\right]</script><p>我们令</p><script type="math/tex; mode=display">A = \left[\begin{matrix}x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} & 1\\x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} & 1\\x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} & 1\\\vdots  & \vdots  & \vdots   & \ddots & \vdots & \vdots \\x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} & 1\\\end{matrix}\right] \\</script><p>则上述等式可以化简为</p><script type="math/tex; mode=display">\omega^{T}A^{T}A = A^{T}Y \\</script><script type="math/tex; mode=display">\omega^{T}A^{T} = A^{T}YA^{-1} \\</script><script type="math/tex; mode=display">\omega^{T} = A^{T}YA^{-1}(A^{T})^{-1}\\</script><p>即可求出$\omega$的值，所得结果。</p><h3 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h3><p>如果方差最小，我们也知道的偏离大小。我们知道离散变量的期望为取平均值。<br>我们假设<script type="math/tex">f(x) = \omega_{0} + \omega_{1}x_{1} + \omega_{2}x_{2} + \cdots + \omega_{n}x_{n}</script></p><script type="math/tex; mode=display">E = \frac{y_{1}+y_{2}+y_{3}+\cdots+y_{m}}{m} = \overline{y}D(x) = \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-E)^{2} = \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}</script><p>如果使得$D(x)$在不同的$\omega$下取值最小，按照极限原理，应当是导数为0时，可能取得极值，即最小值，因此我们对$D(x)$对$\omega$进行求导。</p><script type="math/tex; mode=display">\frac{\partial D(x)}{\partial \omega} = 0 \tag{1-10}</script><p>将（1-10）进行展开则:</p><script type="math/tex; mode=display">\frac{\partial D(x)}{\partial \omega_{1}} = 0 \\\frac{\partial D(x)}{\partial \omega_{2}} = 0 \\\frac{\partial D(x)}{\partial \omega_{3}} = 0 \\\vdots \\\frac{\partial D(x)}{\partial \omega_{n}} = 0 \\</script><p>分开展开来看</p><script type="math/tex; mode=display">\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{0}} = 0 \\\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{1}} = 0 \\\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{2}} = 0 \\\vdots \\\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{n}} = 0 \\</script><p>将上述公式全部进行求导后可得:</p><script type="math/tex; mode=display">\begin{equation}\begin{cases}\sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}\overline{y} \\\sum_{i=1}^{m}x_{i1}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{i1}\overline{y}\\\sum_{i=1}^{m}x_{i2}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{i2}\overline{y} \\\sum_{i=1}^{m}x_{i3}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{i3}\overline{y} \\\vdots     \\\sum_{i=1}^{m}x_{in}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{in}\overline{y} \\\end{cases}\end{equation}</script><p>将其转化为矩阵即为如下：</p><script type="math/tex; mode=display">\left[\begin{matrix}\omega_{0} & \omega_{1} & \omega_{2} & \omega_{3} & \cdots & \omega_{n}\end{matrix}\right]\left[\begin{matrix}1 & 1 & 1  & 1 & 1 \\x_{11} & x_{21} & x_{31}  & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32}  & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33}  & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots & \vdots  \\x_{1n} & x_{2n} & x_{3n}  & \cdots & x_{mn} \\\end{matrix}\right]\left[\begin{matrix}1 & x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} \\1 & x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} \\1 & x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} \\1 & \vdots  & \vdots  & \vdots   & \ddots & \vdots \\1 & x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} \\\end{matrix}\right] \\= \left[\begin{matrix}1 & 1 & 1  & 1 & 1 \\x_{11} & x_{21} & x_{31} & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32} & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33} & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots  & \vdots \\x_{1n} & x_{2n} & x_{3n} & \cdots & x_{mn} \\\end{matrix}\right]\left[\begin{matrix}\overline{y}  \\\overline{y}  \\\overline{y}  \\\overline{y}  \\\overline{y}  \\\end{matrix}\right]</script><p>在此我们令举证</p><script type="math/tex; mode=display">A = \left[\begin{matrix}1 & x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} \\1 & x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} \\1 & x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} \\1 & \vdots  & \vdots  & \vdots   & \ddots & \vdots \\1 & x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} \\\end{matrix}\right] \\</script><p>则上述等式可以简化为</p><script type="math/tex; mode=display">\omega^{T}A^{T}A = A^{T}\overline{Y} \\</script><script type="math/tex; mode=display">\omega^{T}A^{T} = A^{T}YA^{-1}\overline{Y}\\</script><script type="math/tex; mode=display">\omega^{T} = A^{T}YA^{-1}(A^{T})^{-1}\overline{Y}\\</script><p>最终我们可以通过矩阵的计算即可求出所有的$\omega$的值，即为最终的结果。<br>以上为一般为常见的线性规划的求解过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-线性模型&quot;&gt;&lt;a href=&quot;#1-线性模型&quot; class=&quot;headerlink&quot; title=&quot;1.线性模型&quot;&gt;&lt;/a&gt;1.线性模型&lt;/h2&gt;&lt;p&gt;给定n个属性描述属性的特征 &lt;script type=&quot;math/tex&quot;&gt;x = (x_1,x_2,x_3,...,x_n)&lt;/script&gt;,其中$x_i$表示第$i$个特征，线性模型试图通过一个特征值的线性组合来表示最终的模型，即最终的预测函数:&lt;/p&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f(x) = \omega_{1}x_{1} + \omega_{2}x_{2} + ... + \omega_{n}x_{n} + b  \tag{1-1}&lt;/script&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ml" scheme="http://yoursite.com/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】159比赛</title>
    <link href="http://yoursite.com/2019/12/21/%E3%80%90leetcode%E3%80%91159%E5%91%A8%E6%AF%94%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/12/21/【leetcode】159周比赛/</id>
    <published>2019-12-21T03:54:29.534Z</published>
    <updated>2019-10-23T16:15:56.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="159周比赛"><a href="#159周比赛" class="headerlink" title="159周比赛"></a>159周比赛</h1><p>今天时间太紧张了，时间根本不够用。两道题目的目标没有达成。</p><h2 id="5230-缀点成线"><a href="#5230-缀点成线" class="headerlink" title="5230. 缀点成线"></a>5230. 缀点成线</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在一个 XY 坐标系中有一些点，我们用数组<code>coordinates</code>来分别记录它们的坐标，其中<code>coordinates[i] = [x, y]</code>表示横坐标为<code>x</code>、纵坐标为<code>y</code>的点。</p><p>请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 <code>true</code>，否则请返回<code>false</code>。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coordinates = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">6</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coordinates = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> &lt;= coordinates.length &lt;= <span class="number">1000</span></span><br><span class="line">coordinates[i].length == <span class="number">2</span></span><br><span class="line"><span class="number">-10</span>^<span class="number">4</span> &lt;= coordinates[i][<span class="number">0</span>], coordinates[i][<span class="number">1</span>] &lt;= <span class="number">10</span>^<span class="number">4</span></span><br><span class="line">coordinates 中不含重复的点</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/check-if-it-is-a-straight-line" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-if-it-is-a-straight-line</a>                </p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 给定点的集合是否在一条直线上</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>依次比较相邻三个点构成的斜率是否相等，因为相邻的两个点有公共的交点，如果斜率相等，则认为其在一条直线上。</li><li>由于可能存在斜率无限大的情况，这时我们避免用除法，斜率用<code>(x,y)</code>表示，如果两个斜率相等则可以用等式判断<code>x1y2 == x2y1</code>.</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkStraightLine</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; coordinates)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = coordinates.size();         </span><br><span class="line">        <span class="keyword">int</span> x = coordinates[<span class="number">1</span>][<span class="number">0</span>] - coordinates[<span class="number">0</span>][<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">int</span> y = coordinates[<span class="number">1</span>][<span class="number">1</span>] - coordinates[<span class="number">0</span>][<span class="number">1</span>]; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = coordinates[i][<span class="number">0</span>] - coordinates[i<span class="number">-1</span>][<span class="number">0</span>]; </span><br><span class="line">            <span class="keyword">int</span> y1 = coordinates[i][<span class="number">1</span>] - coordinates[i<span class="number">-1</span>][<span class="number">1</span>]; </span><br><span class="line">            <span class="keyword">if</span>(y1*x != x1*y)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5231-删除子文件夹"><a href="#5231-删除子文件夹" class="headerlink" title="5231. 删除子文件夹"></a>5231. 删除子文件夹</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>你是一位系统管理员，手里有一份文件夹列表<code>folder</code>，你的任务是要删除该列表中的所有 子文件夹，并以 任意顺序 返回剩下的文件夹。</p><p>我们这样定义「子文件夹」：<br>如果文件夹<code>folder[i]</code>位于另一个文件夹 <code>folder[j]</code>下，那么<code>folder[i]</code>就是 <code>folder[j]</code> 的子文件夹。<br>文件夹的「路径」是由一个或多个按以下格式串联形成的字符串：<br>/ 后跟一个或者多个小写英文字母。<br>例如，<code>/leetcode</code>和<code>/leetcode/problems</code>都是有效的路径，而空字符串和 / 不是。</p><p>示例 1：<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：folder = [<span class="comment">"/a"</span>,<span class="comment">"/a/b"</span>,<span class="comment">"/c/d"</span>,<span class="comment">"/c/d/e"</span>,<span class="comment">"/c/f"</span>]</span><br><span class="line">输出：[<span class="comment">"/a"</span>,<span class="comment">"/c/d"</span>,<span class="comment">"/c/f"</span>]</span><br><span class="line">解释：<span class="comment">"/a/b/"</span> 是 <span class="comment">"/a"</span> 的子文件夹，而 <span class="comment">"/c/d/e"</span> 是 <span class="comment">"/c/d"</span> 的子文件夹。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：folder = [<span class="comment">"/a"</span>,<span class="comment">"/a/b/c"</span>,<span class="comment">"/a/b/d"</span>]</span><br><span class="line">输出：[<span class="comment">"/a"</span>]</span><br><span class="line">解释：文件夹 <span class="comment">"/a/b/c"</span> 和 <span class="comment">"/a/b/d/"</span> 都会被删除，因为它们都是 <span class="comment">"/a"</span> 的子文件夹。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：folder = [<span class="comment">"/a/b/c"</span>,<span class="comment">"/a/b/d"</span>,<span class="comment">"/a/b/ca"</span>]</span><br><span class="line">输出：[<span class="comment">"/a/b/c"</span>,<span class="comment">"/a/b/ca"</span>,<span class="comment">"/a/b/d"</span>]</span><br></pre></td></tr></table></figure></p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 删除子文件夹</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>本题首先看到题目可以用trie树来解决，仔细分析一下，题目中明确说明了全部为小写字母和’\’,也比平常的trie树多了一个字符而已；</li><li>将文件夹名称按照字典序进行排序，这样保证根文件夹最先插入到字典树中，这样我们就可以保证子文件在进行查询时，能够判断是否存在父文件夹。</li><li>利用trie的特性，标记每个文件夹的结束。当进行插入操作时，发现当前遇到的前缀中存在文件夹时，则这时认为当前的文件为子文件，需要进行删除。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">cstruct TrieNode&#123;</span><br><span class="line">    <span class="keyword">bool</span> isfolder;</span><br><span class="line">    TrieNode * next[<span class="number">27</span>];</span><br><span class="line">    TrieNode()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;isfolder = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">27</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;next[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertTrie</span><span class="params">(TrieNode * root,<span class="built_in">string</span> word)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TrieNode * node = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : word)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'/'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[<span class="number">26</span>])&#123;</span><br><span class="line">                node-&gt;next[<span class="number">26</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[<span class="number">26</span>]; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[c-<span class="string">'a'</span>])&#123;</span><br><span class="line">                node-&gt;next[c-<span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[c-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    node-&gt;isfolder = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSubFolder</span><span class="params">(TrieNode * root,<span class="built_in">string</span> folder)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TrieNode * node = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; folder.size(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(folder[i] == <span class="string">'/'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[<span class="number">26</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[<span class="number">26</span>]; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[folder[i]-<span class="string">'a'</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[folder[i]-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;isfolder &amp;&amp; folder[i+<span class="number">1</span>] == <span class="string">'/'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; removeSubfolders(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; folder) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        sort(folder.begin(),folder.end());</span><br><span class="line">        </span><br><span class="line">        TrieNode * root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> s : folder)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!isSubFolder(root,s))&#123;</span><br><span class="line">                res.push_back(s);</span><br><span class="line">                insertTrie(root,s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5232-替换子串得到平衡字符串"><a href="#5232-替换子串得到平衡字符串" class="headerlink" title="5232. 替换子串得到平衡字符串"></a>5232. 替换子串得到平衡字符串</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>有一个只含有 <code>&#39;Q&#39;, &#39;W&#39;, &#39;E&#39;, &#39;R&#39;</code>四种字符，且长度为 n 的字符串。<br>假如在该字符串中，这四个字符都恰好出现 n/4 次，那么它就是一个「平衡字符串」。给你一个这样的字符串 s，请通过「替换子串」的方式，使原字符串 s 变成一个「平衡字符串」。你可以用和「待替换子串」长度相同的 任何 其他字符串来完成替换。<br>请返回待替换子串的最小可能长度。如果原字符串自身就是一个平衡字符串，则返回 0。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QWER"</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：s 已经是平衡的了。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QQWE"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：我们需要把一个 'Q' 替换成 'R'，这样得到的 <span class="string">"RQWE"</span> (或 <span class="string">"QRWE"</span>) 是平衡的。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QQQW"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：我们可以把前面的 <span class="string">"QQ"</span> 替换成 <span class="string">"ER"</span>。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QQQQ"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：我们可以替换后 <span class="number">3</span> 个 'Q'，使 s = <span class="string">"QWER"</span>。</span><br></pre></td></tr></table></figure></p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/replace-the-substring-for-balanced-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/replace-the-substring-for-balanced-string</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>这个题目非常不错且非常典型的滑动窗口.</li><li>我们通过滑动窗口，保证在窗口外部的字符串统计数字都小于平均数，通过双指针算法进行逐步扩展即可。</li></ol></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">balancedString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> aver = n/<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> res = n;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            cnt[s[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> balance = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : cnt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c.second &gt; aver)&#123;</span><br><span class="line">                balance = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(balance)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(r = <span class="number">0</span> ; r &lt; n; ++r)&#123;</span><br><span class="line">            cnt[s[r]]--;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(l &lt; n &amp;&amp; l &lt;= r &amp;&amp;</span><br><span class="line">                   cnt[<span class="string">'Q'</span>] &lt;= aver&amp;&amp; \</span><br><span class="line">                   cnt[<span class="string">'W'</span>] &lt;= aver&amp;&amp; \</span><br><span class="line">                   cnt[<span class="string">'E'</span>] &lt;= aver&amp;&amp; \</span><br><span class="line">                   cnt[<span class="string">'R'</span>] &lt;= aver)&#123;</span><br><span class="line">                   res = min(res,r-l+<span class="number">1</span>);</span><br><span class="line">                   cnt[s[l]]++;</span><br><span class="line">                   l++;           </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5233-规划兼职工作"><a href="#5233-规划兼职工作" class="headerlink" title="5233. 规划兼职工作"></a>5233. 规划兼职工作</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>你打算利用空闲时间来做兼职工作赚些零花钱。</p><p>这里有 n 份兼职工作，每份工作预计从 <code>startTime[i]</code> 开始到 <code>endTime[i]</code>结束，报酬为 <code>profit[i]</code>。</p><p>给你一份兼职工作表，包含开始时间<code>startTime</code>，结束时间<code>endTime</code>和预计报酬 <code>profit</code>三个数组，请你计算并返回可以获得的最大报酬。</p><p>注意，时间上出现重叠的 2 份工作不能同时进行。</p><p>如果你选择的工作在时间 X 结束，那么你可以立刻进行在时间 X 开始的下一份工作。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：startTime = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>], endTime = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], profit = [<span class="number">50</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">70</span>]</span><br><span class="line">输出：<span class="number">120</span></span><br><span class="line">解释：</span><br><span class="line">我们选出第 <span class="number">1</span> 份和第 <span class="number">4</span> 份工作， </span><br><span class="line">时间范围是 [<span class="number">1</span><span class="number">-3</span>]+[<span class="number">3</span><span class="number">-6</span>]，共获得报酬 <span class="number">120</span> = <span class="number">50</span> + <span class="number">70</span>。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：startTime = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>], endTime = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>], profit = [<span class="number">20</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">70</span>,<span class="number">60</span>]</span><br><span class="line">输出：<span class="number">150</span></span><br><span class="line">解释：</span><br><span class="line">我们选择第 <span class="number">1</span>，<span class="number">4</span>，<span class="number">5</span> 份工作。 </span><br><span class="line">共获得报酬 <span class="number">150</span> = <span class="number">20</span> + <span class="number">70</span> + <span class="number">60</span>。</span><br></pre></td></tr></table></figure><p>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：startTime = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], endTime = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], profit = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-profit-in-job-scheduling" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-profit-in-job-scheduling</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>按照开始时间的大小进行排序,开始时间大的在前面,并且收益高的工作排序在前；</li><li>设置动态规划递推公式<code>dp[t]</code>,代表从时间<code>t</code>开始工作能够取得的最大收益.</li><li>递推公式如下,对于工作<code>i</code>花费的时间为<code>job[i]</code>,取得收益为<code>profit[i]</code>,则递推公式为:<code>dp[t] = max(dp[t],dp[t-job[i]] + profit[i])</code>.</li><li>可以利用TreeMap的特性，进行二分查找，总的时间复杂度为<code>O(nlgn)</code>.</li></ol></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">2</span>] &gt; b[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jobScheduling</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; startTime, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; endTime, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; profit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = startTime.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; work(n);</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; dp;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            work[i].push_back(startTime[i]);</span><br><span class="line">            work[i].push_back(endTime[i]);</span><br><span class="line">            work[i].push_back(profit[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*start time sort*/</span></span><br><span class="line">        sort(work.begin(),work.end(),cmp);</span><br><span class="line">        <span class="comment">/*dp*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">auto</span> it1 = dp.lower_bound(work[i][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">auto</span> it2 = dp.lower_bound(work[i][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(it1 != dp.end())&#123;</span><br><span class="line">                dp[work[i][<span class="number">0</span>]] = max(it1-&gt;second,work[i][<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(it2 != dp.end())&#123;</span><br><span class="line">                dp[work[i][<span class="number">0</span>]] = max(dp[work[i][<span class="number">0</span>]],it2-&gt;second+work[i][<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[work[i][<span class="number">0</span>]] = max(work[i][<span class="number">2</span>],dp[work[i][<span class="number">0</span>]]);</span><br><span class="line">            res = max(res,dp[work[i][<span class="number">0</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外附上lee215的解答，需要仔细的消化和吸收.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jobScheduling</span><span class="params">(self, startTime, endTime, profit)</span>:</span></span><br><span class="line">        jobs = sorted(zip(startTime, endTime, profit), key=<span class="keyword">lambda</span> v: v[<span class="number">1</span>])</span><br><span class="line">        dp = [[<span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">for</span> s, e, p <span class="keyword">in</span> jobs:</span><br><span class="line">            i = bisect.bisect(dp, [s + <span class="number">1</span>]) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dp[i][<span class="number">1</span>] + p &gt; dp[<span class="number">-1</span>][<span class="number">1</span>]:</span><br><span class="line">                dp.append([e, dp[i][<span class="number">1</span>] + p])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;159周比赛&quot;&gt;&lt;a href=&quot;#159周比赛&quot; class=&quot;headerlink&quot; title=&quot;159周比赛&quot;&gt;&lt;/a&gt;159周比赛&lt;/h1&gt;&lt;p&gt;今天时间太紧张了，时间根本不够用。两道题目的目标没有达成。&lt;/p&gt;&lt;h2 id=&quot;5230-缀点成线&quot;&gt;&lt;a href=&quot;#5230-缀点成线&quot; class=&quot;headerlink&quot; title=&quot;5230. 缀点成线&quot;&gt;&lt;/a&gt;5230. 缀点成线&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;在一个 XY 坐标系中有一些点，我们用数组&lt;code&gt;coordinates&lt;/code&gt;来分别记录它们的坐标，其中&lt;code&gt;coordinates[i] = [x, y]&lt;/code&gt;表示横坐标为&lt;code&gt;x&lt;/code&gt;、纵坐标为&lt;code&gt;y&lt;/code&gt;的点。&lt;/p&gt;&lt;p&gt;请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 &lt;code&gt;true&lt;/code&gt;，否则请返回&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】130比赛</title>
    <link href="http://yoursite.com/2019/12/21/%E3%80%90leetcode%E3%80%91130%E5%91%A8%E6%AF%94%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/12/21/【leetcode】130周比赛/</id>
    <published>2019-12-21T03:54:29.525Z</published>
    <updated>2019-10-23T16:15:14.336Z</updated>
    
    <content type="html"><![CDATA[<p>上午忙着在家带小孩，没有参加比赛，周一上班抽时间将四道题目全部做一遍，总的来说四道题目都不是特别难，但是两道hard级别的题目需要耐心去解答，许多细节需要注意。</p><h1 id="130周周赛"><a href="#130周周赛" class="headerlink" title="130周周赛"></a>130周周赛</h1><h2 id="大样本统计"><a href="#大样本统计" class="headerlink" title="大样本统计"></a>大样本统计</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>我们对<code>0</code>到 <code>255</code> 之间的整数进行采样，并将结果存储在数组<code>count</code> 中,<code>count[k]</code>就是整数<code>k</code>的采样个数。我们以 浮点数 数组的形式，分别返回样本的最小值、最大值、平均值、中位数和众数。其中，众数是保证唯一的。<br>网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><a id="more"></a><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/statistics-from-a-large-sample/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/statistics-from-a-large-sample/</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目本身不太难,关键节点在于理解采样数据，本题中采样范围为<code>0~255</code>，每个采样的次数存储在<code>count[i]</code>数据中，需要掌握<code>count</code>数组即可。</p><ol><li>最小值：满足<code>count[i]</code>大于<code>0</code>的最小i值</li><li>最大值：满足<code>count[i]</code>大于<code>0</code>的最大i值</li><li>平均值：计算出采样的总和除以采样的次数即可</li><li>中位数：如果采样次数为偶数，在采样值排名靠中间的两个值取平均和即可，如果采样次数为奇数，则去排名中间的数即可。</li><li>众数:找到<code>count[i]</code>的最大值，取i即可。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findNth</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; count,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count.size(); ++i)&#123;</span><br><span class="line">            n = n - count[i];</span><br><span class="line">            <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; sampleStats(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; count) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> n = count.size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> samples = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> minNum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> maxNum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> average = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> medium = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> mode = <span class="number">0.0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            sum += count[i]*i;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; maxCnt)&#123;</span><br><span class="line">                maxCnt = count[i];</span><br><span class="line">                mode = i;</span><br><span class="line">            &#125;</span><br><span class="line">            samples += count[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                minNum = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>;i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                maxNum = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span>(samples%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> l1 = findNth(count,samples/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> l2 = findNth(count,samples/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            medium = <span class="keyword">double</span>(l1+l2)/<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> l1 = findNth(count,samples/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            medium = <span class="keyword">double</span>(l1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*min*/</span></span><br><span class="line">        ans.push_back(minNum);</span><br><span class="line">        ans.push_back(maxNum);</span><br><span class="line">        ans.push_back(<span class="keyword">double</span>(sum)/samples);</span><br><span class="line">        ans.push_back(medium);</span><br><span class="line">        ans.push_back(mode);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-拼车"><a href="#2-拼车" class="headerlink" title="2.拼车"></a>2.拼车</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>顺风车司机按照乘客上车的顺序，能否满足所有的乘客乘车需求</p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/car-pooling/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/car-pooling/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>初有<code>capacity</code> 个空座位可以用来载客。能否满足<code>trips</code>数组要求。<br>这儿有一份行程计划表 <code>trips[][]</code>，其中 <code>trips[i] = [num_passengers, start_location, end_location]</code>包含了你的第 <code>i</code>次行程信息：</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>我们假设在一个直线上，车辆在<code>start_location</code>处会增加<code>num_passengers</code>个乘客，在<code>end_location</code>处会减少num_passengers个乘客，乘客下车肯定会满足乘车要求，我们只需要满足车辆在<code>start_location</code>处有大于等于<code>num_passengers</code>个空位即可。我们用rest来标识车辆在x处有多少个空座位，按照乘车距离进行排序，如果<code>rest</code>小于0则表示车辆座位不足，此时则不能满足要求。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">carPooling</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; trips, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; carry;</span><br><span class="line">        <span class="keyword">int</span> n = trips.size();</span><br><span class="line">        <span class="keyword">int</span> rest = capacity;</span><br><span class="line">        </span><br><span class="line">        sort(trips.begin(),trips.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            carry[trips[i][<span class="number">1</span>]] -= trips[i][<span class="number">0</span>];</span><br><span class="line">            carry[trips[i][<span class="number">2</span>]] += trips[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> t: carry)&#123;</span><br><span class="line">            rest = rest + t.second;</span><br><span class="line">            <span class="keyword">if</span>(rest &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上午忙着在家带小孩，没有参加比赛，周一上班抽时间将四道题目全部做一遍，总的来说四道题目都不是特别难，但是两道hard级别的题目需要耐心去解答，许多细节需要注意。&lt;/p&gt;&lt;h1 id=&quot;130周周赛&quot;&gt;&lt;a href=&quot;#130周周赛&quot; class=&quot;headerlink&quot; title=&quot;130周周赛&quot;&gt;&lt;/a&gt;130周周赛&lt;/h1&gt;&lt;h2 id=&quot;大样本统计&quot;&gt;&lt;a href=&quot;#大样本统计&quot; class=&quot;headerlink&quot; title=&quot;大样本统计&quot;&gt;&lt;/a&gt;大样本统计&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;我们对&lt;code&gt;0&lt;/code&gt;到 &lt;code&gt;255&lt;/code&gt; 之间的整数进行采样，并将结果存储在数组&lt;code&gt;count&lt;/code&gt; 中,&lt;code&gt;count[k]&lt;/code&gt;就是整数&lt;code&gt;k&lt;/code&gt;的采样个数。我们以 浮点数 数组的形式，分别返回样本的最小值、最大值、平均值、中位数和众数。其中，众数是保证唯一的。&lt;br&gt;网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 163周比赛</title>
    <link href="http://yoursite.com/2019/12/21/98/"/>
    <id>http://yoursite.com/2019/12/21/98/</id>
    <published>2019-12-21T03:54:29.508Z</published>
    <updated>2019-11-25T02:34:00.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="163周比赛"><a href="#163周比赛" class="headerlink" title="163周比赛"></a>163周比赛</h1><p>比赛的时候正在游乐场带娃，顺便打开电脑，刷过了前三题。。。</p><h2 id="5108-加密数字"><a href="#5108-加密数字" class="headerlink" title="5108. 加密数字"></a>5108. 加密数字</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个 <code>n</code>行<code>m</code> 列的二维网格 <code>grid</code>和一个整数<code>k</code>。你需要将<code>grid</code>迁移 <code>k</code>次。</p><p>每次「迁移」操作将会引发下述活动：</p><p>位于 <code>grid[i][j]</code> 的元素将会移动到 <code>grid[i][j + 1]</code>。<br>位于 <code>grid[i][m - 1]</code>的元素将会移动到 <code>grid[i + 1][0]</code>。<br>位于 <code>grid[n - 1][m - 1]</code>的元素将会移动到 <code>grid[0][0]</code>。<br>请你返回<code>k</code>次迁移操作后最终得到的 二维网格。</p><a id="more"></a><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]], k = <span class="number">1</span></span><br><span class="line">输出：[[<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]]</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">3</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>],[<span class="number">19</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">10</span>],[<span class="number">12</span>,<span class="number">0</span>,<span class="number">21</span>,<span class="number">13</span>]], k = <span class="number">4</span></span><br><span class="line">输出：[[<span class="number">12</span>,<span class="number">0</span>,<span class="number">21</span>,<span class="number">13</span>],[<span class="number">3</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>],[<span class="number">19</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">10</span>]]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]], k = <span class="number">9</span></span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>1 &lt;= grid.length &lt;= 50</li><li>1 &lt;= grid[i].length &lt;= 50</li><li>-1000 &lt;= grid[i][j] &lt;= 1000</li><li>0 &lt;= k &lt;= 100</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/shift-2d-grid" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shift-2d-grid</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 矩阵移位</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>本质上题目中偏移<code>k</code>位，实际上是将矩阵按照<code>i*colum + j</code>的排列展开的一维数组进行偏移<code>k</code>位；</li><li>所以我们直接进行替换即可，将之前的<code>(i,j)</code>,即<code>i*colum + j</code>替换为<code>(i*colum + j + k)%(m*n)</code>即可；</li><li>再将替换后的一维坐标替换为二维坐标;</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; shiftGrid(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> r = grid.size();</span><br><span class="line">        <span class="keyword">int</span> c = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res(r,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(c,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; ++j)&#123;</span><br><span class="line">                <span class="keyword">int</span> curr = (i*c+j+k)%(r*c);</span><br><span class="line">                res[curr/c][curr%c] = grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5264-在受污染的二叉树中查找元素"><a href="#5264-在受污染的二叉树中查找元素" class="headerlink" title="5264. 在受污染的二叉树中查找元素"></a>5264. 在受污染的二叉树中查找元素</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给出一个满足下述规则的二叉树：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如果``` treeNode.val == x ```且 ```treeNode.left != null```，那么 ```treeNode.left.val == 2 * x + 1```.</span><br><span class="line">如果 ```treeNode.val == x ```且``` treeNode.right != null```，那么``` treeNode.right.val == 2 * x + 2```.</span><br><span class="line">现在这个二叉树受到「污染」，所有的 ```treeNode.val ```都变成了``` -1```。</span><br><span class="line">请你先还原二叉树，然后实现``` FindElements ```类:</span><br><span class="line">```FindElements(TreeNode* root)```用受污染的二叉树初始化对象，你需要先把它还原。</span><br><span class="line">```bool find(int target) ```判断目标值 ```target``` 是否存在于还原后的二叉树中并返回结果。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">![1](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/untitled-diagram-4-1.jpg)</span><br></pre></td></tr></table></figure><br>输入：<br>[“FindElements”,”find”,”find”]<br>[[[-1,null,-1]],[1],[2]]<br>输出：<br>[null,false,true]<br>解释：<br>FindElements findElements = new FindElements([-1,null,-1]);<br>findElements.find(1); // return False<br>findElements.find(2); // return True<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><br>输入：<br>[“FindElements”,”find”,”find”,”find”]<br>[[[-1,-1,-1,-1,-1]],[1],[3],[5]]<br>输出：<br>[null,true,true,false]<br>解释：<br>FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);<br>findElements.find(1); // return True<br>findElements.find(3); // return True<br>findElements.find(5); // return False<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">3</span>：</span><br></pre></td></tr></table></figure><br>输入：<br>[“FindElements”,”find”,”find”,”find”,”find”]<br>[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]<br>输出：<br>[null,true,false,false,true]<br>解释：<br>FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);<br>findElements.find(2); // return True<br>findElements.find(3); // return False<br>findElements.find(4); // return False<br>findElements.find(5); // return True<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">提示：</span><br><span class="line"></span><br><span class="line">+ TreeNode.val == <span class="number">-1</span></span><br><span class="line">+ 二叉树的高度不超过 <span class="number">20</span></span><br><span class="line">+ 节点的总数在 [<span class="number">1</span>, <span class="number">10</span>^<span class="number">4</span>] 之间</span><br><span class="line">+ 调用 find() 的总次数在 [<span class="number">1</span>, <span class="number">10</span>^<span class="number">4</span>] 之间</span><br><span class="line">+ <span class="number">0</span> &lt;= target &lt;= <span class="number">10</span>^<span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 地址</span><br><span class="line">https:<span class="comment">//leetcode-cn.com/problems/find-elements-in-a-contaminated-binary-tree</span></span><br><span class="line">### 题意</span><br><span class="line">&gt;  DFS即可，非常基本的题目，送分题，BFS也可以</span><br><span class="line">### 思路</span><br><span class="line"><span class="number">1.</span> 利用递归DFS将二叉树重建即可；</span><br><span class="line"><span class="number">2.</span> 利用```<span class="keyword">set</span>```记录下所有的元素，直接进行查找即可；</span><br><span class="line">### 代码</span><br><span class="line">```c++ </span><br><span class="line"><span class="keyword">class</span> <span class="symbol">FindElements</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">bool</span> dfs(TreeNode * root,<span class="built_in">int</span> curr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        root-&gt;val = curr;</span><br><span class="line">        nums.insert(curr);</span><br><span class="line">        dfs(root-&gt;left,curr*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">        dfs(root-&gt;right,curr*<span class="number">2</span>+<span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    FindElements(TreeNode* root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">bool</span> find(<span class="built_in">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums.count(target);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt; nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="5265-可被三整除的最大和"><a href="#5265-可被三整除的最大和" class="headerlink" title="5265. 可被三整除的最大和"></a>5265. 可被三整除的最大和</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 nums，请你找出并返回能被三整除的元素最大和。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">8</span>]</span><br><span class="line">输出：<span class="number">18</span></span><br><span class="line">解释：选出数字 <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span> 和 <span class="number">8</span>，它们的和是 <span class="number">18</span>（可被 <span class="number">3</span> 整除的最大和）。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：<span class="number">4</span> 不能被 <span class="number">3</span> 整除，所以无法选出数字，返回 <span class="number">0</span>。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">12</span></span><br><span class="line">解释：选出数字 <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span> 以及 <span class="number">4</span>，它们的和是 <span class="number">12</span>（可被 <span class="number">3</span> 整除的最大和）。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 4 * 10^4</li><li>1 &lt;= nums[i] &lt;= 10^4</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/greatest-sum-divisible-by-three" target="_blank" rel="noopener">https://leetcode-cn.com/problems/greatest-sum-divisible-by-three</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 做题目的时候想到了用数学的解法来做，最后看解答还可以用DP来解决该题</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>计算数组和<code>mod3</code>的结果，将取模之后的余数减掉，剩余的所有的数之和能够被<code>3</code>整除；</li><li>余数分为两种，<code>1</code>或者<code>2</code>；</li><li>如果余数为<code>1</code>,我们只需要取出<code>mod3</code>为<code>1</code>的最小的<code>1</code>个元素，或者<code>mod3</code>余数为<code>2</code>的最小的两个元素，剩余的数组元素和能够被<code>3</code>整除；</li><li>如果余数为<code>2</code>,我们只需要取出<code>mod3</code>为<code>1</code>的最小的<code>2</code>个元素，或者<code>mod3</code>余数为<code>2</code>的最小的两个元素,剩余的数组元素和能够被<code>3</code>整除；<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSumDivThree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p1;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p2;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; n : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">3</span> == <span class="number">1</span>)&#123; p1.push_back(n);&#125;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">3</span> == <span class="number">2</span>)&#123; p2.push_back(n);&#125;</span><br><span class="line">            sum += n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = sum%<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(res == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> detech = sum;</span><br><span class="line">            <span class="keyword">if</span>(p1.size() &gt; <span class="number">0</span>)&#123;detech = min(detech,p1[<span class="number">0</span>]);&#125;</span><br><span class="line">            <span class="keyword">if</span>(p2.size() &gt; <span class="number">1</span>)&#123;detech = min(detech,p2[<span class="number">0</span>]+p2[<span class="number">1</span>]);&#125;</span><br><span class="line">            <span class="keyword">return</span> sum - detech;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> detech = sum;</span><br><span class="line">            <span class="keyword">if</span>(p2.size() &gt; <span class="number">0</span>)&#123;detech = min(detech,p2[<span class="number">0</span>]);&#125;</span><br><span class="line">            <span class="keyword">if</span>(p1.size() &gt; <span class="number">1</span>)&#123;detech = min(detech,p1[<span class="number">0</span>]+p1[<span class="number">1</span>]);&#125;</span><br><span class="line">            <span class="keyword">return</span> sum - detech;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSumDivThree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)&#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; ++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>((dp[i<span class="number">-1</span>][k]+nums[i<span class="number">-1</span>])%<span class="number">3</span> == j)&#123;</span><br><span class="line">                        dp[i][j] = max(dp[i][j],dp[i<span class="number">-1</span>][k]+nums[i<span class="number">-1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5266-推箱子"><a href="#5266-推箱子" class="headerlink" title="5266. 推箱子"></a>5266. 推箱子</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>「推箱子」是一款风靡全球的益智小游戏，玩家需要将箱子推到仓库中的目标位置。</p><p>游戏地图用大小为<code>n * m</code>的网格 <code>grid</code>表示，其中每个元素可以是墙、地板或者是箱子。</p><p>现在你将作为玩家参与游戏，按规则将箱子<code>&#39;B&#39;</code>移动到目标位置 <code>&#39;T&#39;</code>：</p><p>玩家用字符 <code>&#39;S&#39;</code>表示，只要他在地板上，就可以在网格中向上、下、左、右四个方向移动。<br>地板用字符 <code>&#39;.&#39;</code> 表示，意味着可以自由行走。<br>墙用字符<code>&#39;#&#39;</code>表示，意味着障碍物，不能通行。<br>箱子仅有一个，用字符<code>&#39;B&#39;</code>表示。相应地，网格上有一个目标位置<code>&#39;T&#39;</code>。<br>玩家需要站在箱子旁边，然后沿着箱子的方向进行移动，此时箱子会被移动到相邻的地板单元格。记作一次「推动」。<br>玩家无法越过箱子。<br>返回将箱子推到目标位置的最小 推动 次数，如果无法做到，请返回<code>-1</code>。</p><p>示例 1：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"T"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"B"</span>,<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"S"</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：我们只需要返回推箱子的次数。</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"T"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"B"</span>,<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"S"</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>]]</span><br><span class="line">输出：<span class="number">-1</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"T"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"B"</span>,<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"S"</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>]]</span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：向下、向左、向左、向上再向上。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"S"</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"B"</span>,<span class="string">"T"</span>,<span class="string">"#"</span>],</span><br><span class="line">             [<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>]]</span><br><span class="line">输出：<span class="number">-1</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>1 &lt;= grid.length &lt;= 20</li><li>1 &lt;= grid[i].length &lt;= 20</li><li>grid 仅包含字符 ‘.’, ‘#’,  ‘S’ , ‘T’, 以及 ‘B’。</li><li>grid 中 ‘S’, ‘B’ 和 ‘T’ 各只能出现一个。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-moves-to-move-a-box-to-their-target-location" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-moves-to-move-a-box-to-their-target-location</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>BFS通过模拟推箱子，刚开始的思路错误，通过箱子一维的位置来进行<code>BFS</code>，发现存在一个问题，某些时刻箱子的位置可能重复，这时的BFS可能存在重复的问题，但是实际上箱子在图中出现的位置可能会重复,比如人可以先将箱子推过去，然后再反方向推回来；</li><li>后来看了解答，发现通过二维的位置判断，人的位置和箱子的位置二者一起进行<code>BFS</code>,通过记录下推动的次数；</li><li>重要的一点，当人与箱子的曼哈顿距离为<code>1</code>时，这时需要判断人是否能够推动箱子，如果可以推动箱子，则这时人的位置和箱子的位置会同时位移，同时这时推箱子的步数进行加<code>1</code>操作；</li><li>本题确实非常有意思的<code>BFS</code>操作,只能说本人智商太差，能力不足，哭一下-_-，活了三十多年跟别人一比还是差距啊；</li></ol></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> dist[N][N][N][N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> px;</span><br><span class="line">    <span class="keyword">int</span> py;</span><br><span class="line">    <span class="keyword">int</span> bx;</span><br><span class="line">    <span class="keyword">int</span> by;</span><br><span class="line">    Node(<span class="keyword">int</span> _px,<span class="keyword">int</span> _py,<span class="keyword">int</span> _bx,<span class="keyword">int</span> _by):px(_px),py(_py),bx(_bx),by(_by)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPushBox</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = grid.size();</span><br><span class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> px,py;</span><br><span class="line">        <span class="keyword">int</span> bx,by;</span><br><span class="line">        <span class="keyword">int</span> tx,ty;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial*/</span></span><br><span class="line">        <span class="built_in">memset</span>(dist,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dist));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">'B'</span>)&#123;</span><br><span class="line">                    bx = i;</span><br><span class="line">                    by = j;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(grid[i][j] == <span class="string">'T'</span>)&#123;</span><br><span class="line">                    tx = i;</span><br><span class="line">                    ty = j;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(grid[i][j] == <span class="string">'S'</span>)&#123;</span><br><span class="line">                    px = i;</span><br><span class="line">                    py = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*BFS*/</span></span><br><span class="line">        <span class="built_in">deque</span>&lt;Node&gt; qu;</span><br><span class="line">        qu.push_back(Node(px, py, bx, by));</span><br><span class="line">        dist[px][py][bx][by] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">auto</span> [px, py, bx, by] = qu.front();</span><br><span class="line">            qu.pop_front();</span><br><span class="line">            <span class="keyword">if</span>(bx == tx &amp;&amp; by == ty)&#123;</span><br><span class="line">                <span class="keyword">return</span> dist[px][py][bx][by];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> nx = px + d[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> ny = py + d[i][<span class="number">1</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="comment">/*check*/</span></span><br><span class="line">                <span class="keyword">if</span>(nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= row || ny &gt;= col)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>((nx == bx &amp;&amp; ny == by)||grid[nx][ny] == <span class="string">'#'</span>)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(dist[nx][ny][bx][by] &gt;= <span class="number">0</span>)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                </span><br><span class="line">                qu.push_front(Node(nx,ny,bx,by));</span><br><span class="line">                dist[nx][ny][bx][by] = dist[px][py][bx][by];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">abs</span>(px-bx)+<span class="built_in">abs</span>(py-by)) == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(;i &lt; <span class="number">4</span>;++i)&#123;</span><br><span class="line">                    <span class="keyword">int</span> npx = px + d[i][<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">int</span> npy = py + d[i][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(npx == bx &amp;&amp; npy == by)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> nbx = bx + d[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> nby = by + d[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(nbx &gt;= <span class="number">0</span> &amp;&amp; nby &gt;= <span class="number">0</span> &amp;&amp; nbx &lt; row &amp;&amp; nby &lt; col &amp;&amp; \</span><br><span class="line">                   grid[nbx][nby] != <span class="string">'#'</span>&amp;&amp; dist[bx][by][nbx][nby] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    dist[bx][by][nbx][nby] = dist[px][py][bx][by] + <span class="number">1</span>;</span><br><span class="line">                    qu.push_back(Node(bx,by,nbx,nby));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;163周比赛&quot;&gt;&lt;a href=&quot;#163周比赛&quot; class=&quot;headerlink&quot; title=&quot;163周比赛&quot;&gt;&lt;/a&gt;163周比赛&lt;/h1&gt;&lt;p&gt;比赛的时候正在游乐场带娃，顺便打开电脑，刷过了前三题。。。&lt;/p&gt;&lt;h2 id=&quot;5108-加密数字&quot;&gt;&lt;a href=&quot;#5108-加密数字&quot; class=&quot;headerlink&quot; title=&quot;5108. 加密数字&quot;&gt;&lt;/a&gt;5108. 加密数字&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个 &lt;code&gt;n&lt;/code&gt;行&lt;code&gt;m&lt;/code&gt; 列的二维网格 &lt;code&gt;grid&lt;/code&gt;和一个整数&lt;code&gt;k&lt;/code&gt;。你需要将&lt;code&gt;grid&lt;/code&gt;迁移 &lt;code&gt;k&lt;/code&gt;次。&lt;/p&gt;&lt;p&gt;每次「迁移」操作将会引发下述活动：&lt;/p&gt;&lt;p&gt;位于 &lt;code&gt;grid[i][j]&lt;/code&gt; 的元素将会移动到 &lt;code&gt;grid[i][j + 1]&lt;/code&gt;。&lt;br&gt;位于 &lt;code&gt;grid[i][m - 1]&lt;/code&gt;的元素将会移动到 &lt;code&gt;grid[i + 1][0]&lt;/code&gt;。&lt;br&gt;位于 &lt;code&gt;grid[n - 1][m - 1]&lt;/code&gt;的元素将会移动到 &lt;code&gt;grid[0][0]&lt;/code&gt;。&lt;br&gt;请你返回&lt;code&gt;k&lt;/code&gt;次迁移操作后最终得到的 二维网格。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
