<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blow in the wind</title>
  
  <subtitle>just code for fun</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-17T14:58:17.054Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mike meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Leetcode】13周双周比赛</title>
    <link href="http://yoursite.com/2019/11/17/97/"/>
    <id>http://yoursite.com/2019/11/17/97/</id>
    <published>2019-11-17T14:58:17.052Z</published>
    <updated>2019-11-17T14:58:17.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13周双周比赛"><a href="#13周双周比赛" class="headerlink" title="13周双周比赛"></a>13周双周比赛</h1><p>双周题目不错，有难度区分，也有一定的技巧性，但是难度不高。</p><h2 id="5108-加密数字"><a href="#5108-加密数字" class="headerlink" title="5108. 加密数字"></a>5108. 加密数字</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个非负整数 num ，返回它的「加密字符串」。</p><p>加密的过程是把一个整数用某个未知函数进行转化，你需要从下表推测出该转化函数：<br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/encode_number.png" alt="1"><br>示例 1：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">num</span> = <span class="number">23</span></span><br><span class="line">输出：<span class="string">"1000"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">num</span> = <span class="number">107</span></span><br><span class="line">输出：<span class="string">"101100"</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li>0 &lt;= num &lt;= 10^9</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/encode-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/encode-number</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 关键是弄清楚题目</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>目前有许多种解法。</li><li>第一种，加原数字加1后转换为二进制字符串，然后去掉最高位的<code>1</code>;</li><li>按照$2^{0},2^{1},2^{2},2^{3},2^{4},…$子序列间隔进行排列,找到该数是第几个子序列中的第几个二进制数即可；</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mask = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>((num+<span class="number">1</span>) &gt; (<span class="number">1</span>&lt;&lt;mask))&#123;</span><br><span class="line">            num -= (<span class="number">1</span>&lt;&lt;mask);</span><br><span class="line">            mask++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mask; ++i)&#123;</span><br><span class="line">            res = to_string(num%<span class="number">2</span>) + res;</span><br><span class="line">            num = num&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, num: int)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> bin(num+<span class="number">1</span>)[<span class="number">3</span>:]</span><br></pre></td></tr></table></figure><h2 id="5109-最小公共区域"><a href="#5109-最小公共区域" class="headerlink" title="5109. 最小公共区域"></a>5109. 最小公共区域</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一些区域列表<code>regions</code> ，每个列表的第一个区域都包含这个列表内所有其他区域。</p><p>很自然地，如果区域<code>X</code>包含区域<code>Y</code> ，那么区域<code>X</code>比区域<code>Y</code>大。</p><p>给定两个区域<code>region1</code>和<code>region2</code>，找到同时包含这两个区域的 最小 区域。</p><p>如果区域列表中<code>r1</code>包含<code>r2</code>和<code>r3</code>，那么数据保证<code>r2</code>不会包含<code>r3</code>。</p><p>数据同样保证最小公共区域一定存在。</p><p>示例 1：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">regions = [[<span class="string">"Earth"</span>,<span class="string">"North America"</span>,<span class="string">"South America"</span>],</span><br><span class="line">[<span class="string">"North America"</span>,<span class="string">"United States"</span>,<span class="string">"Canada"</span>],</span><br><span class="line">[<span class="string">"United States"</span>,<span class="string">"New York"</span>,<span class="string">"Boston"</span>],</span><br><span class="line">[<span class="string">"Canada"</span>,<span class="string">"Ontario"</span>,<span class="string">"Quebec"</span>],</span><br><span class="line">[<span class="string">"South America"</span>,<span class="string">"Brazil"</span>]],</span><br><span class="line">region1 = <span class="string">"Quebec"</span>,</span><br><span class="line">region2 = <span class="string">"New York"</span></span><br><span class="line">输出：<span class="string">"North America"</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+ 2 &lt;= regions.length &lt;= 10^4</span></span><br><span class="line"><span class="string">+ region1 != region2</span></span><br><span class="line"><span class="string">+ 所有字符串只包含英文字母和空格，且最多只有 20 个字母。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 地址</span></span><br><span class="line"><span class="string">https://leetcode-cn.com/problems/smallest-common-region</span></span><br><span class="line"><span class="string">### 题意</span></span><br><span class="line"><span class="string">&gt;  最近的公共父节点</span></span><br><span class="line"><span class="string">### 思路</span></span><br><span class="line"><span class="string">1. 此题跟之前的有个题目很像，二叉树两个节点最近的公共父节点；</span></span><br><span class="line"><span class="string">2. 建立每个`</span><span class="string">``</span>region<span class="string">``</span><span class="string">`与上一级`</span><span class="string">``</span>region<span class="string">``</span><span class="string">`的对应关系；</span></span><br><span class="line"><span class="string">3. 然后每个地点地理属性遍历一遍，然后找到第一个公共节点即可；</span></span><br><span class="line"><span class="string">### 代码</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>c++ </span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="keyword">string</span> findSmallestRegion(<span class="keyword">vector</span>&lt;<span class="keyword">vector</span>&lt;<span class="keyword">string</span>&gt;&gt;&amp; regions, <span class="keyword">string</span> region1, <span class="keyword">string</span> region2) &#123;</span><br><span class="line">        unordered_map&lt;<span class="keyword">string</span>,<span class="keyword">string</span>&gt; father;</span><br><span class="line">        <span class="keyword">string</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; regions.<span class="keyword">size</span>(); ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; regions[i].<span class="keyword">size</span>(); ++j)&#123;</span><br><span class="line">                father[regions[i][j]] = regions[i][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">vector</span>&lt;<span class="keyword">string</span>&gt; p1;</span><br><span class="line">        <span class="keyword">vector</span>&lt;<span class="keyword">string</span>&gt; p2;</span><br><span class="line">        </span><br><span class="line">        p1.push_back(region1);</span><br><span class="line">        <span class="keyword">while</span>(father.count(region1))&#123;</span><br><span class="line">            region1 = father[region1];</span><br><span class="line">            p1.push_back(region1);</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(p1.begin(),p1.end());</span><br><span class="line">        </span><br><span class="line">        p2.push_back(region2);</span><br><span class="line">        <span class="keyword">while</span>(father.count(region2))&#123;</span><br><span class="line">            region2 = father[region2];</span><br><span class="line">            p2.push_back(region2);</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(p2.begin(),p2.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p1.<span class="keyword">size</span>() &amp;&amp; i &lt; p2.<span class="keyword">size</span>(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p1[i] == p2[i])&#123;</span><br><span class="line">                res = p1[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="5110-近义词句子"><a href="#5110-近义词句子" class="headerlink" title="5110. 近义词句子"></a>5110. 近义词句子</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个近义词表 <code>synonyms</code>和一个句子 <code>text</code>， <code>synonyms</code>表中是一些近义词对 ，你可以将句子<code>text</code>中每个单词用它的近义词来替换。</p><p>请你找出所有用近义词替换后的句子，按 字典序排序 后返回。</p><p>示例 1：<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">synonyms = [[<span class="comment">"happy"</span>,<span class="comment">"joy"</span>],[<span class="comment">"sad"</span>,<span class="comment">"sorrow"</span>],[<span class="comment">"joy"</span>,<span class="comment">"cheerful"</span>]],</span><br><span class="line">text = <span class="comment">"I am happy today but was sad yesterday"</span></span><br><span class="line">输出：</span><br><span class="line">[<span class="comment">"I am cheerful today but was sad yesterday"</span>,</span><br><span class="line"><span class="comment">"I am cheerful today but was sorrow yesterday"</span>,</span><br><span class="line"><span class="comment">"I am happy today but was sad yesterday"</span>,</span><br><span class="line"><span class="comment">"I am happy today but was sorrow yesterday"</span>,</span><br><span class="line"><span class="comment">"I am joy today but was sad yesterday"</span>,</span><br><span class="line"><span class="comment">"I am joy today but was sorrow yesterday"</span>]</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>0 &lt;= synonyms.length &lt;= 10</li><li>synonyms[i].length == 2</li><li>synonyms[0] != synonyms[1]</li><li>所有单词仅包含英文字母，且长度最多为 10 。</li><li>text 最多包含 10 个单词，且单词间用单个空格分隔开。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/synonymous-sentences/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/synonymous-sentences/</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS遍历</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>题目其实很简单，典型的DFS即可，稍微有点难点的在于，求出每个单词的近义词集合，然后利用DFS将所有的组合求出来即可；</li><li>可以利用循环将所有的组合近义词求出来，或者将词句全部弄出来；</li><li>本题中，我们利用并查集来求同义词；<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SplitString</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; v, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span>::size_type pos1, pos2;</span><br><span class="line">        pos2 = s.find(c);</span><br><span class="line">        pos1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">std</span>::<span class="built_in">string</span>::npos != pos2)&#123;</span><br><span class="line">            v.push_back(s.substr(pos1, pos2-pos1));</span><br><span class="line">            pos1 = pos2 + c.size();</span><br><span class="line">            pos2 = s.find(c, pos1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pos1 != s.length())</span><br><span class="line">            v.push_back(s.substr(pos1));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">makeSentence</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp; words)</span></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res = words[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; words.size(); ++i)&#123;</span><br><span class="line">            res += <span class="string">" "</span> + words[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">find</span><span class="params">(<span class="built_in">string</span>  x,<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; &amp; f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(x != f[x])&#123;</span><br><span class="line">            x = f[x];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">uni</span><span class="params">(<span class="built_in">string</span> &amp; x,<span class="built_in">string</span> &amp; y,<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; &amp; f)</span></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> x1 = find(x,f);</span><br><span class="line">        <span class="built_in">string</span> y1 = find(y,f);</span><br><span class="line">        f[x1] = y1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp; words,<span class="keyword">int</span> n,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;  curr, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp; res,<span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; &amp; dict,<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; &amp; f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == words.size())&#123;</span><br><span class="line">            res.push_back(makeSentence(curr));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!f.count(words[n]))&#123;</span><br><span class="line">            curr.push_back(words[n]);</span><br><span class="line">            dfs(words,n+<span class="number">1</span>,curr,res,dict,f);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; w : dict)&#123;</span><br><span class="line">            <span class="keyword">if</span>(find(w,f) == find(words[n],f))&#123;</span><br><span class="line">                curr.push_back(w);</span><br><span class="line">                dfs(words,n+<span class="number">1</span>,curr,res,dict,f);</span><br><span class="line">                curr.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateSentences(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;&amp; synonyms, <span class="built_in">string</span> text) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; words;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; curr;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; f;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; dict;</span><br><span class="line">        </span><br><span class="line">        SplitString(text,words,<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; p : synonyms)&#123;</span><br><span class="line">            f[p[<span class="number">0</span>]] = p[<span class="number">0</span>];</span><br><span class="line">            f[p[<span class="number">1</span>]] = p[<span class="number">1</span>];</span><br><span class="line">            dict.insert(p[<span class="number">0</span>]);</span><br><span class="line">            dict.insert(p[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; p : synonyms)&#123;</span><br><span class="line">            uni(p[<span class="number">0</span>],p[<span class="number">1</span>],f);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dfs(words,<span class="number">0</span>,curr,res,dict,f);</span><br><span class="line">        sort(res.begin(),res.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5125-不相交的握手"><a href="#5125-不相交的握手" class="headerlink" title="5125. 不相交的握手"></a>5125. 不相交的握手</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>偶数 个人站成一个圆，总人数为 num_people 。每个人与除自己外的一个人握手，所以总共会有 num_people / 2 次握手。</p><p>将握手的人之间连线，请你返回连线不会相交的握手方案数。</p><p>由于结果可能会很大，请你返回答案 模 10^9+7 后的结果。</p><p>示例 1：</p><p>输入：num_people = 2<br>输出：1<br>示例 2：</p><p>输入：num_people = 4<br>输出：2<br>解释：总共有两种方案，第一种方案是 [(1,2),(3,4)] ，第二种方案是 [(2,3),(4,1)] 。<br>示例 3：</p><p>输入：num_people = 6<br>输出：5<br>示例 4：</p><p>输入：num_people = 8<br>输出：14</p><p>提示：</p><p>2 &lt;= num_people &lt;= 1000<br>num_people % 2 == 0</p><p>来源：力扣（LeetCode）<br>链接：<br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/handshakes-that-dont-cross" target="_blank" rel="noopener">https://leetcode-cn.com/problems/handshakes-that-dont-cross</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 最大回文问题</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>与求最长回文字符串很像,只要找到递推关系，这个题目比较简单。</li><li>动态规划递推公式:设<code>dp[i][j]</code>为字符串从<code>i</code>到<code>j</code>的子序列按照回文方式删除的最小次数；</li><li>递推公式为:<script type="math/tex; mode=display">f(i,j)=\left\{\begin{aligned}f(i+1,j-1) &  & (if \: arr[i] == arr[j]) \\min(f(i,j),f(i,k)+f(k+1,j)) &  & k\in{(i...j-1)} \\\end{aligned}\right.</script></li></ol></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumMoves</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,n));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j+i &lt; n; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] == arr[j+i])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">                        dp[j][j+i] = <span class="number">1</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        dp[j][j+i] = dp[j+<span class="number">1</span>][j+i<span class="number">-1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; j+i; ++k)&#123;</span><br><span class="line">                        dp[j][j+i] = min(dp[j][j+i],dp[j][k]+dp[k+<span class="number">1</span>][j+i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;13周双周比赛&quot;&gt;&lt;a href=&quot;#13周双周比赛&quot; class=&quot;headerlink&quot; title=&quot;13周双周比赛&quot;&gt;&lt;/a&gt;13周双周比赛&lt;/h1&gt;&lt;p&gt;双周题目不错，有难度区分，也有一定的技巧性，但是难度不高。&lt;/p&gt;&lt;h2 id=&quot;5108-加密数字&quot;&gt;&lt;a href=&quot;#5108-加密数字&quot; class=&quot;headerlink&quot; title=&quot;5108. 加密数字&quot;&gt;&lt;/a&gt;5108. 加密数字&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个非负整数 num ，返回它的「加密字符串」。&lt;/p&gt;&lt;p&gt;加密的过程是把一个整数用某个未知函数进行转化，你需要从下表推测出该转化函数：&lt;br&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/encode_number.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;string&quot;&gt;&quot;1000&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;built_in&quot;&gt;num&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;107&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;string&quot;&gt;&quot;101100&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】162周比赛</title>
    <link href="http://yoursite.com/2019/11/10/96/"/>
    <id>http://yoursite.com/2019/11/10/96/</id>
    <published>2019-11-10T15:32:37.465Z</published>
    <updated>2019-11-14T09:11:41.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12周双周比赛"><a href="#12周双周比赛" class="headerlink" title="12周双周比赛"></a>12周双周比赛</h1><p>本周的题目还算不错，没有多少偏题和怪题，对于面试来说还是非常适合的题目。周末忙着带娃，没有时间刷题，但是没有看解答也全部把题目给<code>AC</code>了，说明题目本身难度不是非常大,不像之前许多题目自己连答案都想不出来。</p><h2 id="5255-奇数值单元格的数目"><a href="#5255-奇数值单元格的数目" class="headerlink" title="5255. 奇数值单元格的数目"></a>5255. 奇数值单元格的数目</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个<code>n</code>行<code>m</code>列的矩阵，最开始的时候，每个单元格中的值都是 <code>0</code>。</p><a id="more"></a><p>另有一个索引数组 <code>indices，indices[i] = [ri, ci]</code>中的 <code>ri</code>和 <code>ci</code> 分别表示指定的行和列（从<code>0</code>开始编号）。</p><p>你需要将每对 <code>[ri, ci]</code>指定的行和列上的所有单元格的值加<code>1</code>。</p><p>请你在执行完所有 indices 指定的增量操作后，返回矩阵中 「奇数值单元格」 的数目。</p><p>示例 1：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e1.png" alt="1"><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, m = <span class="number">3</span>, indices = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：最开始的矩阵是 [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]。</span><br><span class="line">第一次增量操作后得到 [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]。</span><br><span class="line">最后的矩阵是 [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]]，里面有 <span class="number">6</span> 个奇数。</span><br></pre></td></tr></table></figure><br>示例 2：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, m = <span class="number">2</span>, indices = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：最后的矩阵是 [[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>]]，里面没有奇数。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;= n &lt;= 50</li><li>1 &lt;= m &lt;= 50</li><li>1 &lt;= indices.length &lt;= 100</li><li>0 &lt;= indices[i][0] &lt; n</li><li>0 &lt;= indices[i][1] &lt; m<h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><a href="https://leetcode-cn.com/problems/cells-with-odd-values-in-a-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/cells-with-odd-values-in-a-matrix</a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 记录列的数目和行的数目</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3></blockquote></li></ul><ol><li>暴力破解的话，肯定会超时。</li><li>我们可以换个思路，不用每次都需要改变值，我们记录下每行的增加次数和每一列的增减次数<code>row[i],col[i]</code>.</li><li>计算每个元素的增加值,比如计算<code>(x,y)</code>的增加值，我们只需要计算<code>row[x] + col[y]</code>的值即可;</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">oddCells</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; indices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rows(n,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; colums(m,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; indice : indices)&#123;</span><br><span class="line">            rows[indice[<span class="number">0</span>]]++;</span><br><span class="line">            colums[indice[<span class="number">1</span>]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>((rows[i]+colums[j])%<span class="number">2</span>)&#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">oddCells</span><span class="params">(self, n: int, m: int, indices: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        row = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        col = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(m)]</span><br><span class="line">        <span class="keyword">for</span> x,y <span class="keyword">in</span> indices:</span><br><span class="line">            row[x] += <span class="number">1</span></span><br><span class="line">            col[y] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="keyword">if</span> (row[i]+col[j])%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="5256-重构-2-行二进制矩阵"><a href="#5256-重构-2-行二进制矩阵" class="headerlink" title="5256. 重构 2 行二进制矩阵"></a>5256. 重构 2 行二进制矩阵</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个 <code>2</code> 行<code>n</code> 列的二进制数组：</p><p>矩阵是一个二进制矩阵，这意味着矩阵中的每个元素不是<code>0</code> 就是<code>1</code>。<br>第 0 行的元素之和为 <code>upper</code>。<br>第 1 行的元素之和为 <code>lower</code>。<br>第 i 列（从 0 开始编号）的元素之和为 <code>colsum[i]</code>，<code>colsum</code>是一个长度为 n 的整数数组。<br>你需要利用 <code>upper</code>，<code>lower</code> 和 <code>colsum</code>来重构这个矩阵，并以二维整数数组的形式返回它。</p><p>如果有多个不同的答案，那么任意一个都可以通过本题。</p><p>如果不存在符合要求的答案，就请返回一个空的二维数组。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：upper = <span class="number">2</span>, lower = <span class="number">1</span>, colsum = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">解释：[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]] 和 [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]] 也是正确答案。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：upper = <span class="number">2</span>, lower = <span class="number">3</span>, colsum = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：upper = <span class="number">5</span>, lower = <span class="number">5</span>, colsum = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= colsum.length &lt;= 10^5</li><li>0 &lt;= upper, lower &lt;= colsum.length</li><li>0 &lt;= colsum[i] &lt;= 2</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/reconstruct-a-2-row-binary-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reconstruct-a-2-row-binary-matrix</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 模拟思路</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>首先去除掉列的和为<code>0</code>和<code>2</code>的列，剩余和为<code>1</code>的列，同时记录下剩余<code>upper</code>和<code>lower</code>，如果和为<code>1</code>的列的数目不等于<code>upper + lower</code>,则认为不符合要求;</li><li>则这时和为<code>1</code>的列的集合中，只需要挑选<code>upper</code>个列，将其第一行的元素置为<code>1</code>,剩余的<code>lower</code>个列，将其第二行的元素置为<code>1</code>;</li><li>如何能够符合上述的两个条件，则能够将其恢复，否则认为题意中的数据不符合要求；<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; reconstructMatrix(<span class="keyword">int</span> upper, <span class="keyword">int</span> lower, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; colsum) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = colsum.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res(<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(colsum[i] == <span class="number">2</span>)&#123;</span><br><span class="line">                upper--;</span><br><span class="line">                lower--;</span><br><span class="line">                res[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">                res[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(colsum[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                left.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(upper &lt; <span class="number">0</span> || lower &lt; <span class="number">0</span> ||(upper + lower) != left.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; left.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; upper)&#123;</span><br><span class="line">                res[<span class="number">0</span>][left[i]] = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res[<span class="number">1</span>][left[i]] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>  res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5257-统计封闭岛屿的数目"><a href="#5257-统计封闭岛屿的数目" class="headerlink" title="5257. 统计封闭岛屿的数目"></a>5257. 统计封闭岛屿的数目</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3>有一个二维矩阵<code>grid</code>，每个位置要么是陆地（记号为 0 ）要么是水域（记号为 1 ）。</li></ol></blockquote><p>我们从一块陆地出发，每次可以往上下左右 4 个方向相邻区域走，能走到的所有陆地区域，我们将其称为一座「岛屿」。</p><p>如果一座岛屿 完全 由水域包围，即陆地边缘上下左右所有相邻区域都是水域，那么我们将其称为 「封闭岛屿」。</p><p>请返回封闭岛屿的数目。</p><p>示例 1：<br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/07/sample_3_1610.png" alt="1"><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line">灰色区域的岛屿是封闭岛屿，因为这座岛屿完全被水域包围（即被 <span class="number">1</span> 区域包围）。</span><br></pre></td></tr></table></figure><br>示例 2：<br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/07/sample_4_1610.png" alt="2"> </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><p>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">             [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">             [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">             [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">             [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">             [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">             [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>1 &lt;= grid.length, grid[0].length &lt;= 100</li><li>0 &lt;= grid[i][j] &lt;=1</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-closed-islands" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-closed-islands</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 常规岛屿问题，快做烂，这类题目基本上BFS或者DFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>这种题目已经毫无新意了，基本的BFS或者DFS，已经快做的烂了。</li><li>基本上这种题目目前都是秒杀；<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">closedIsland</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = grid.size();</span><br><span class="line">        <span class="keyword">int</span> c = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; visit(r,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(c,<span class="literal">false</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!visit[i][j] &amp;&amp; grid[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; qu;</span><br><span class="line">                    visit[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">bool</span> isClose = <span class="literal">true</span>;</span><br><span class="line">                    qu.push(make_pair(i,j));</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">                        <span class="keyword">int</span> x = qu.front().first;</span><br><span class="line">                        <span class="keyword">int</span> y = qu.front().second;</span><br><span class="line">                        qu.pop();</span><br><span class="line">                        <span class="keyword">if</span>(x == <span class="number">0</span> || x == r<span class="number">-1</span> || \</span><br><span class="line">                           y == <span class="number">0</span> || y == c<span class="number">-1</span>)&#123;</span><br><span class="line">                            isClose = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)&#123;</span><br><span class="line">                            <span class="keyword">int</span> x1 = x + d[k][<span class="number">0</span>];</span><br><span class="line">                            <span class="keyword">int</span> y1 = y + d[k][<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span>(x1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; r &amp;&amp; y1 &gt;= <span class="number">0</span> &amp;&amp; y1 &lt; c &amp;&amp;\</span><br><span class="line">                               grid[x1][y1] == <span class="number">0</span> &amp;&amp; !visit[x1][y1])&#123;</span><br><span class="line">                                visit[x1][y1] = <span class="literal">true</span>;</span><br><span class="line">                                qu.push(make_pair(x1,y1));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(isClose)&#123;</span><br><span class="line">                        res++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5257-统计封闭岛屿的数目-1"><a href="#5257-统计封闭岛屿的数目-1" class="headerlink" title="5257. 统计封闭岛屿的数目"></a>5257. 统计封闭岛屿的数目</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>你将会得到一份单词表<code>words</code>，一个字母表 <code>letters</code>（可能会有重复字母），以及每个字母对应的得分情况表 <code>score</code>。</p><p>请你帮忙计算玩家在单词拼写游戏中所能获得的「最高得分」：能够由 <code>letters</code> 里的字母拼写出的 任意 属于 <code>words</code>单词子集中，分数最高的单词集合的得分。</p><p>单词拼写游戏的规则概述如下：</p><p>玩家需要用字母表<code>letters</code>里的字母来拼写单词表<code>words</code>中的单词。<br>可以只使用字母表 <code>letters</code>中的部分字母，但是每个字母最多被使用一次。<br>单词表 words 中每个单词只能计分（使用）一次。<br>根据字母得分情况表<code>score</code>，字母 <code>&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, ... , &#39;z&#39;</code>对应的得分分别为<code>score[0], score[1], ..., score[25]</code>。<br>本场游戏的「得分」是指：玩家所拼写出的单词集合里包含的所有字母的得分之和。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [<span class="string">"dog"</span>,<span class="string">"cat"</span>,<span class="string">"dad"</span>,<span class="string">"good"</span>], letters = [<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"d"</span>,<span class="string">"d"</span>,<span class="string">"g"</span>,<span class="string">"o"</span>,<span class="string">"o"</span>], score = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">23</span></span><br><span class="line">解释：</span><br><span class="line">字母得分为  a=<span class="number">1</span>, c=<span class="number">9</span>, d=<span class="number">5</span>, g=<span class="number">3</span>, o=<span class="number">2</span></span><br><span class="line">使用给定的字母表 letters，我们可以拼写单词 <span class="string">"dad"</span> (<span class="number">5</span>+<span class="number">1</span>+<span class="number">5</span>)和 <span class="string">"good"</span> (<span class="number">3</span>+<span class="number">2</span>+<span class="number">2</span>+<span class="number">5</span>)，得分为 <span class="number">23</span> 。</span><br><span class="line">而单词 <span class="string">"dad"</span> 和 <span class="string">"dog"</span> 只能得到 <span class="number">21</span> 分。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [<span class="string">"xxxz"</span>,<span class="string">"ax"</span>,<span class="string">"bx"</span>,<span class="string">"cx"</span>], letters = [<span class="string">"z"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"x"</span>,<span class="string">"x"</span>,<span class="string">"x"</span>], score = [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="number">27</span></span><br><span class="line">解释：</span><br><span class="line">字母得分为  a=<span class="number">4</span>, b=<span class="number">4</span>, c=<span class="number">4</span>, x=<span class="number">5</span>, z=<span class="number">10</span></span><br><span class="line">使用给定的字母表 letters，我们可以组成单词 <span class="string">"ax"</span> (<span class="number">4</span>+<span class="number">5</span>)， <span class="string">"bx"</span> (<span class="number">4</span>+<span class="number">5</span>) 和 <span class="string">"cx"</span> (<span class="number">4</span>+<span class="number">5</span>) ，总得分为 <span class="number">27</span> 。</span><br><span class="line">单词 <span class="string">"xxxz"</span> 的得分仅为 <span class="number">25</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [<span class="string">"leetcode"</span>], letters = [<span class="string">"l"</span>,<span class="string">"e"</span>,<span class="string">"t"</span>,<span class="string">"c"</span>,<span class="string">"o"</span>,<span class="string">"d"</span>], score = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：</span><br><span class="line">字母 <span class="string">"e"</span> 在字母表 letters 中只出现了一次，所以无法组成单词表 words 中的单词。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= words.length &lt;= 14</li><li>1 &lt;= words[i].length &lt;= 15</li><li>1 &lt;= letters.length &lt;= 100</li><li>letters[i].length == 1</li><li>score.length == 26</li><li>0 &lt;= score[i] &lt;= 10</li><li>words[i] 和 letters[i] 只包含小写的英文字母。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-score-words-formed-by-letters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-score-words-formed-by-letters</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 典型的0-1背包问题</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>刚开始准备用背包的状态来解答，发现用字符串做背包处理起来稍微麻烦；</li><li>后来注意到<code>words</code>的长度最大只有14，典型的用位图压缩状态来解答；</li><li>用位图将所有可能的状态全部遍历一遍就能得到最大值，确实没啥新意的题目，用来面试可以；</li></ol></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIT_SET(x,n) (x)|(1&lt;&lt;(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIT_CLR(x,n) (x)&amp;(~(1&lt;&lt;(n)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIT_TST(x,n) (((x)&amp;(1<span class="meta-string">&lt;&lt;(n)))&gt;&gt;(n))</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; cnt, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; curr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i] &lt; curr[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxScoreWords</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words, <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; letters, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = words.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dict(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">26</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; dp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : letters)&#123;</span><br><span class="line">            cnt[c-<span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; c : words[i])&#123;</span><br><span class="line">                dict[i][c-<span class="string">'a'</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(BIT_TST(i,j))&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k)&#123;</span><br><span class="line">                        curr[k] += dict[j][k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(check(cnt,curr))&#123;</span><br><span class="line">                <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)&#123;</span><br><span class="line">                    now += score[j]*curr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i] = now;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it : dp)&#123;</span><br><span class="line">            res = max(res,it.second);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">f(i,j)=\left\{\begin{aligned}\frac{j-i+1}{k-i+1}[f(i,k)] &  & (if \: s(i,j) == \frac{j-i+1}{k-i+1}*s(i,k)) \\min(f(i,j),f(i,k)+f(k+1,j)) &  & (j-1)\geq k  \geq i\\\end{aligned}\right.</script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;12周双周比赛&quot;&gt;&lt;a href=&quot;#12周双周比赛&quot; class=&quot;headerlink&quot; title=&quot;12周双周比赛&quot;&gt;&lt;/a&gt;12周双周比赛&lt;/h1&gt;&lt;p&gt;本周的题目还算不错，没有多少偏题和怪题，对于面试来说还是非常适合的题目。周末忙着带娃，没有时间刷题，但是没有看解答也全部把题目给&lt;code&gt;AC&lt;/code&gt;了，说明题目本身难度不是非常大,不像之前许多题目自己连答案都想不出来。&lt;/p&gt;&lt;h2 id=&quot;5255-奇数值单元格的数目&quot;&gt;&lt;a href=&quot;#5255-奇数值单元格的数目&quot; class=&quot;headerlink&quot; title=&quot;5255. 奇数值单元格的数目&quot;&gt;&lt;/a&gt;5255. 奇数值单元格的数目&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个&lt;code&gt;n&lt;/code&gt;行&lt;code&gt;m&lt;/code&gt;列的矩阵，最开始的时候，每个单元格中的值都是 &lt;code&gt;0&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】12周双周比赛</title>
    <link href="http://yoursite.com/2019/11/04/95/"/>
    <id>http://yoursite.com/2019/11/04/95/</id>
    <published>2019-11-04T08:13:19.380Z</published>
    <updated>2019-11-04T08:48:11.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12周双周比赛"><a href="#12周双周比赛" class="headerlink" title="12周双周比赛"></a>12周双周比赛</h1><p>双周比赛的题目不错，比周赛的题目好很多，有难度区分，也有一定的技巧性。</p><h2 id="1243-数组变换"><a href="#1243-数组变换" class="headerlink" title="1243. 数组变换"></a>1243. 数组变换</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>首先，给你一个初始数组 <code>arr</code>。然后，每天你都要根据前一天的数组生成一个新的数组。</p><p>第 i 天所生成的数组，是由你对第 i-1 天的数组进行如下操作所得的：</p><p>假如一个元素小于它的左右邻居，那么该元素自增 1。<br>假如一个元素大于它的左右邻居，那么该元素自减 1。<br>首、尾元素 永不 改变。<br>过些时日，你会发现数组将会不再发生变化，请返回最终所得到的数组。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：[<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">6</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">解释：</span><br><span class="line">第一天，数组从 [<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] 变为 [<span class="number">6</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]。</span><br><span class="line">无法再对该数组进行更多操作。</span><br></pre></td></tr></table></figure><br>示例 2：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">解释：</span><br><span class="line">第一天，数组从 [<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>] 变为 [<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]。</span><br><span class="line">第二天，数组从 [<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] 变为 [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]。</span><br><span class="line">无法再对该数组进行更多操作。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 100</code></li><li><code>1 &lt;= arr[i] &lt;= 100</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/array-transformation" target="_blank" rel="noopener">https://leetcode-cn.com/problems/array-transformation</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力破解</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>暴力破解，没啥好思考的，按照当前的数据量，数组在一定时间内一定会达到平衡的。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; transformArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">int</span> change = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr = arr;</span><br><span class="line">            change = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] &gt; arr[i<span class="number">-1</span>] &amp;&amp; arr[i] &gt; arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">                    curr[i] = arr[i]<span class="number">-1</span>;</span><br><span class="line">                    change++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] &lt; arr[i<span class="number">-1</span>] &amp;&amp; arr[i] &lt; arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">                    curr[i] = arr[i]+<span class="number">1</span>;</span><br><span class="line">                    change++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr = curr;</span><br><span class="line">        &#125;<span class="keyword">while</span>(change &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transformArray</span><span class="params">(self, arr: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        cpy = copy.copy(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[i] &lt; min(arr[i - <span class="number">1</span>], arr[i + <span class="number">1</span>]):</span><br><span class="line">                cpy[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> arr[i] &gt; max(arr[i - <span class="number">1</span>], arr[i + <span class="number">1</span>]):</span><br><span class="line">                cpy[i] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cpy <span class="keyword">if</span> cpy == arr <span class="keyword">else</span> self.transformArray(cpy)</span><br></pre></td></tr></table></figure><h2 id="1244-力扣排行榜"><a href="#1244-力扣排行榜" class="headerlink" title="1244. 力扣排行榜"></a>1244. 力扣排行榜</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>新一轮的「力扣杯」编程大赛即将启动，为了动态显示参赛者的得分数据，需要设计一个排行榜 <code>Leaderboard</code>。</p><p>请你帮忙来设计这个 <code>Leaderboard</code> 类，使得它有如下 3 个函数：<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add<span class="constructor">Score(<span class="params">playerId</span>, <span class="params">score</span>)</span>：</span><br></pre></td></tr></table></figure><br>假如参赛者已经在排行榜上，就给他的当前得分增加 <code>score</code> 点分值并更新排行。<br>假如该参赛者不在排行榜上，就把他添加到榜单上，并且将分数设置为 <code>score</code>。<br><figure class="highlight plain"><figcaption><span>```名参赛者的 得分总和。```reset(playerId)```：将指定参赛者的成绩清零。题目保证在调用此函数前，该参赛者已有成绩，并且在榜单上。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请注意，在初始状态下，排行榜是空的。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br></pre></td></tr></table></figure><br>输入：<br>[“Leaderboard”,”addScore”,”addScore”,”addScore”,”addScore”,”addScore”,”top”,”reset”,”reset”,”addScore”,”top”]<br>[[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]]<br>输出：<br>[null,null,null,null,null,null,73,null,null,null,141]</p><p>解释：<br>Leaderboard leaderboard = new Leaderboard ();<br>leaderboard.addScore(1,73);   // leaderboard = [[1,73]];<br>leaderboard.addScore(2,56);   // leaderboard = [[1,73],[2,56]];<br>leaderboard.addScore(3,39);   // leaderboard = [[1,73],[2,56],[3,39]];<br>leaderboard.addScore(4,51);   // leaderboard = [[1,73],[2,56],[3,39],[4,51]];<br>leaderboard.addScore(5,4);    // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]];<br>leaderboard.top(1);           // returns 73;<br>leaderboard.reset(1);         // leaderboard = [[2,56],[3,39],[4,51],[5,4]];<br>leaderboard.reset(2);         // leaderboard = [[3,39],[4,51],[5,4]];<br>leaderboard.addScore(2,51);   // leaderboard = [[2,51],[3,39],[4,51],[5,4]];<br>leaderboard.top(3);           // returns 141 = 51 + 51 + 39;<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">+ ```<span class="number">1</span> &lt;= playerId, K &lt;= <span class="number">10000</span>题目保证 K 小于或等于当前参赛者的数量</span><br></pre></td></tr></table></figure></p><ul><li><code>1 &lt;= score &lt;= 100最多进行 1000 次函数调用</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/design-a-leaderboard" target="_blank" rel="noopener">https://leetcode-cn.com/problems/design-a-leaderboard</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> TreeSet排序</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>题目中涉及到两个问题，如果在<code>O(1)</code>时间复杂度内完成插入和删除，我们很容易想到的用<code>map</code>或者<code>set</code>操作，利用<code>hash</code>的特性在<code>O(1)</code>时间复杂度内完成插入和删除操作；</li><li>第二个问题涉及到<code>topK</code>问题，一般我们用堆排序，来进行快速的查找前<code>k</code>个元素，结合起来，实际上我们可以用<code>map</code>或者<code>set</code>的自动排序，在这里我们用<code>map</code>来保存选手的实际分数，我们用<code>set</code>来保存实际选手的排行榜，利用<code>TreeSet</code>的自动排序，很容完成<code>topk</code>的查找，以及在<code>O(1)</code>时间复杂度的插入和删除操作；</li><li>实际感觉可以求<code>topk</code>问题可以用<code>Binary Index Tree</code>线段树会更快，求<code>topk</code>问题可以在<code>(lgk)</code>时间时间复杂度内搞定。</li><li>后面试试写一个用堆+线段树的解法，会更快速的。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> pii &amp; a, <span class="keyword">const</span> pii &amp; b)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.second == b.second)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaderboard</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Leaderboard() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addScore</span><span class="params">(<span class="keyword">int</span> playerId, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(scores.count(playerId))&#123;</span><br><span class="line">            players.erase(make_pair(playerId,scores[playerId]));</span><br><span class="line">            scores[playerId] += score;</span><br><span class="line">            players.insert(make_pair(playerId,scores[playerId]));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            scores[playerId] = score;</span><br><span class="line">            players.insert(make_pair(playerId,score));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">(<span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> it = players.begin();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; K &amp;&amp; it != players.end(); ++i)&#123;</span><br><span class="line">            res += it-&gt;second;</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> playerId)</span> </span>&#123;</span><br><span class="line">        players.erase(make_pair(playerId,scores[playerId]));</span><br><span class="line">        scores.erase(playerId);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">set</span>&lt;pii,cmp&gt; players;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; scores;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Leaderboard object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Leaderboard* obj = new Leaderboard();</span></span><br><span class="line"><span class="comment"> * obj-&gt;addScore(playerId,score);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;top(K);</span></span><br><span class="line"><span class="comment"> * obj-&gt;reset(playerId);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="1245-树的直径"><a href="#1245-树的直径" class="headerlink" title="1245. 树的直径"></a>1245. 树的直径</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3>给你这棵「无向树」，请你测算并返回它的「直径」：这棵树上最长简单路径的 边数。</li></ol></blockquote><p>我们用一个由所有「边」组成的数组 edges 来表示一棵无向树，其中 edges[i] = [u, v] 表示节点 u 和 v 之间的双向边。</p><p>树上的节点都已经用 {0, 1, …, edges.length} 中的数做了标记，每个节点上的标记都是独一无二的。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：edges = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line">这棵树上最长的路径是 <span class="number">1</span> - <span class="number">0</span> - <span class="number">2</span>，边数为 <span class="number">2</span>。</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：edges = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释： </span><br><span class="line">这棵树上最长的路径是 <span class="number">3</span> - <span class="number">2</span> - <span class="number">1</span> - <span class="number">4</span> - <span class="number">5</span>，边数为 <span class="number">4</span>。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>0 &lt;= edges.length &lt; 10^4dges[i][0] != edges[i][1]</code></li><li><code>0 &lt;= edges[i][j] &lt;= edges.lengthedges 会形成一棵无向树</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/tree-diameter" target="_blank" rel="noopener">https://leetcode-cn.com/problems/tree-diameter</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 递归问题</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>写的比较烂，这个题目跟之前二叉树的某个题目很像啊。</li><li>树的最大直径实际上实际只可能有两种情况，要么为子树的最大直径，要么从根节点到叶子节点的最大的非重复的两条边之和。</li><li>我们既可以用递归来完成该题,我们用递归每次返回两个值，一个值为该树的最大直径，另一个值为该树从根节点到叶子节点的最长距离，通过一次遍历即可求得最大直径；</li><li>跟这个题目很像<a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">二叉树的最大路径和</a>;<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dfs(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; tree,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &amp; visit,<span class="keyword">int</span> root)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; neg;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxNeg = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tree[root].size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visit[tree[root][i]])&#123;</span><br><span class="line">                visit[tree[root][i]] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr = dfs(tree,visit,tree[root][i]);</span><br><span class="line">                neg.push_back(curr[<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">                res = max(res,curr[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(neg.begin(),neg.end(),cmp);</span><br><span class="line">        <span class="keyword">if</span>(neg.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            maxNeg = neg[<span class="number">0</span>];</span><br><span class="line">            res = max(res,maxNeg);</span><br><span class="line">            <span class="keyword">if</span>(neg.size() &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                res = max(res,neg[<span class="number">0</span>]+neg[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;res,maxNeg&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">treeDiameter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = edges.size() + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; graph(n);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit(n,<span class="literal">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e : edges)&#123;</span><br><span class="line">            graph[e[<span class="number">0</span>]].push_back(e[<span class="number">1</span>]);</span><br><span class="line">            graph[e[<span class="number">1</span>]].push_back(e[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        visit[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(graph,visit,<span class="number">0</span>)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="11246-删除回文子数组"><a href="#11246-删除回文子数组" class="headerlink" title="11246. 删除回文子数组"></a>11246. 删除回文子数组</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组<code>arr</code>，每一次操作你都可以选择并删除它的一个 回文 子数组 <code>arr[i], arr[i+1], ..., arr[j]（ i &lt;= j）</code>。</p><p>注意，每当你删除掉一个子数组，右侧元素都会自行向前移动填补空位。</p><p>请你计算并返回从数组中删除所有数字所需的最少操作次数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：先删除 [<span class="number">4</span>]，然后删除 [<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]，最后再删除 [<span class="number">5</span>]。</span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>&lt;= arr.length &lt;= <span class="number">100</span></span><br><span class="line"><span class="symbol">1 </span>&lt;= arr[i] &lt;= <span class="number">20</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/palindrome-removal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-removal</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 最大回文问题</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>与求最长回文字符串很像,只要找到递推关系，这个题目比较简单。</li><li>动态规划递推公式:设<code>dp[i][j]</code>为字符串从<code>i</code>到<code>j</code>的子序列按照回文方式删除的最小次数；</li><li>递推公式为:<script type="math/tex; mode=display">f(i,j)=\left\{\begin{aligned}f(i+1,j-1) &  & (if \: arr[i] == arr[j]) \\min(f(i,j),f(i,k)+f(k+1,j)) &  & k\in{(i...j-1)} \\\end{aligned}\right.</script></li></ol></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumMoves</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,n));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j+i &lt; n; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] == arr[j+i])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">                        dp[j][j+i] = <span class="number">1</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        dp[j][j+i] = dp[j+<span class="number">1</span>][j+i<span class="number">-1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; j+i; ++k)&#123;</span><br><span class="line">                        dp[j][j+i] = min(dp[j][j+i],dp[j][k]+dp[k+<span class="number">1</span>][j+i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;12周双周比赛&quot;&gt;&lt;a href=&quot;#12周双周比赛&quot; class=&quot;headerlink&quot; title=&quot;12周双周比赛&quot;&gt;&lt;/a&gt;12周双周比赛&lt;/h1&gt;&lt;p&gt;双周比赛的题目不错，比周赛的题目好很多，有难度区分，也有一定的技巧性。&lt;/p&gt;&lt;h2 id=&quot;1243-数组变换&quot;&gt;&lt;a href=&quot;#1243-数组变换&quot; class=&quot;headerlink&quot; title=&quot;1243. 数组变换&quot;&gt;&lt;/a&gt;1243. 数组变换&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;首先，给你一个初始数组 &lt;code&gt;arr&lt;/code&gt;。然后，每天你都要根据前一天的数组生成一个新的数组。&lt;/p&gt;&lt;p&gt;第 i 天所生成的数组，是由你对第 i-1 天的数组进行如下操作所得的：&lt;/p&gt;&lt;p&gt;假如一个元素小于它的左右邻居，那么该元素自增 1。&lt;br&gt;假如一个元素大于它的左右邻居，那么该元素自减 1。&lt;br&gt;首、尾元素 永不 改变。&lt;br&gt;过些时日，你会发现数组将会不再发生变化，请返回最终所得到的数组。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】161比赛</title>
    <link href="http://yoursite.com/2019/11/04/94/"/>
    <id>http://yoursite.com/2019/11/04/94/</id>
    <published>2019-11-04T01:56:00.918Z</published>
    <updated>2019-11-04T02:01:39.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="161周比赛"><a href="#161周比赛" class="headerlink" title="161周比赛"></a>161周比赛</h1><p>最近基本上都被家务时间占满了，只能借助晚上的时间来更新解题报告了，不过本周的题目，赛后做了一遍，感觉没有多大的新鲜感。都是一些基本题目，感觉最近两周的题目，质量都不算太高，没有多少让人眼前很亮的题目。</p><h2 id="1247-交换字符使得字符串相同"><a href="#1247-交换字符使得字符串相同" class="headerlink" title="1247. 交换字符使得字符串相同"></a>1247. 交换字符使得字符串相同</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>有两个长度相同的字符串 s1 和 s2，且它们其中 只含有 字符 “x” 和 “y”，你需要通过「交换字符」的方式使这两个字符串相同。</p><a id="more"></a><p>每次「交换字符」的时候，你都可以在两个字符串中各选一个字符进行交换。</p><p>交换只能发生在两个不同的字符串之间，绝对不能发生在同一个字符串内部。也就是说，我们可以交换 s1[i] 和 s2[j]，但不能交换 s1[i] 和 s1[j]。</p><p>最后，请你返回使 s1 和 s2 相同的最小交换次数，如果没有方法能够使得这两个字符串相同，则返回 -1 。</p><p>示例 1：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">s1</span> = <span class="string">"xx"</span>, <span class="built_in">s2</span> = <span class="string">"yy"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：</span><br><span class="line">交换 <span class="built_in">s1</span>[<span class="number">0</span>] 和 <span class="built_in">s2</span>[<span class="number">1</span>]，得到 <span class="built_in">s1</span> = <span class="string">"yx"</span>，<span class="built_in">s2</span> = <span class="string">"yx"</span>。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">s1</span> = <span class="string">"xy"</span>, <span class="built_in">s2</span> = <span class="string">"yx"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line">交换 <span class="built_in">s1</span>[<span class="number">0</span>] 和 <span class="built_in">s2</span>[<span class="number">0</span>]，得到 <span class="built_in">s1</span> = <span class="string">"yy"</span>，<span class="built_in">s2</span> = <span class="string">"xx"</span> 。</span><br><span class="line">交换 <span class="built_in">s1</span>[<span class="number">0</span>] 和 <span class="built_in">s2</span>[<span class="number">1</span>]，得到 <span class="built_in">s1</span> = <span class="string">"xy"</span>，<span class="built_in">s2</span> = <span class="string">"xy"</span> 。</span><br><span class="line">注意，你不能交换 <span class="built_in">s1</span>[<span class="number">0</span>] 和 <span class="built_in">s1</span>[<span class="number">1</span>] 使得 <span class="built_in">s1</span> 变成 <span class="string">"yx"</span>，因为我们只能交换属于两个不同字符串的字符。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">s1</span> = <span class="string">"xx"</span>, <span class="built_in">s2</span> = <span class="string">"xy"</span></span><br><span class="line">输出：-<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">s1</span> = <span class="string">"xxyyxyxyxx"</span>, <span class="built_in">s2</span> = <span class="string">"xyyxyxxxyx"</span></span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-swaps-to-make-strings-equal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-swaps-to-make-strings-equal</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 数学问题</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>观察题意，首先找出题目中<code>s1</code>与<code>s2</code>不同的部分的子串；</li><li>仔细观察一下，如果不相等的子串中含有奇数的长度，肯定不能完成交换，任何完成交换都必须同时满足两个字符之间进行交换<code>s[i],s[j]</code>;</li><li>仔细观察一下，某些时候两个字符序列需要交换<code>1</code>次，某些时候两个字符序列需要交换<code>2</code>次；</li><li>情况讨论如下：<code>(xx,yy)</code>,<code>(yy,xx)</code>这种相同的字符之间，只需要进行交换一次，<code>(xy,yx)</code>,<code>(yx,xy)</code>这两种字符串需要交换两次。因此我们首先去掉字符串中相同的字符的次数，去掉相同的<code>xx,yy</code>之后，由于<code>x+y</code>为偶数，因此<code>x,y</code>必须同为奇数或者同为偶数，由于字符串中只存在一次<code>(xy,yx)</code>,<code>(yx,xy)</code>这样的序列组合，，当<code>x,y</code>的数目均为奇数时。<script type="math/tex; mode=display">f = \frac{x}{2} + \frac{y}{2} + x\bmod2 + y\bmod2</script></li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumSwap</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.size() != s2.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> x1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s1.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1[i] != s2[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(s1[i] == <span class="string">'x'</span>)&#123;</span><br><span class="line">                    x1++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    y1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>((x1+y1)%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x1/<span class="number">2</span> + y1/<span class="number">2</span> + x1%<span class="number">2</span> + y1%<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumSwap</span><span class="params">(self, s1: str, s2: str)</span> -&gt; int:</span></span><br><span class="line">        x = len([<span class="string">'x'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s1)) <span class="keyword">if</span> s1[i] != s2[i] <span class="keyword">and</span> s1[i] == <span class="string">'x'</span>]) </span><br><span class="line">        y = len([<span class="string">'y'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s1)) <span class="keyword">if</span> s1[i] != s2[i] <span class="keyword">and</span> s1[i] == <span class="string">'y'</span>])</span><br><span class="line">        <span class="keyword">if</span> (x+y)%<span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> x//<span class="number">2</span> + y//<span class="number">2</span> + x%<span class="number">2</span> + y%<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="1248-统计「优美子数组」"><a href="#1248-统计「优美子数组」" class="headerlink" title="1248. 统计「优美子数组」"></a>1248. 统计「优美子数组」</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 nums 和一个整数 k。<br>如果某个子数组中恰好有 k 个奇数数字，我们就认为这个子数组是「优美子数组」。请返回这个数组中「优美子数组」的数目。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：包含 <span class="number">3</span> 个奇数的子数组是 [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>] 和 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>] 。</span><br></pre></td></tr></table></figure></p><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>], k = <span class="number">1</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：数列中不包含任何奇数，所以不存在优美子数组。</span><br></pre></td></tr></table></figure></p><p>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">16</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 50000</code></li><li><code>1 &lt;= nums[i] &lt;= 10^5</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p>ttps://leetcode-cn.com/problems/count-number-of-nice-subarrays</p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>滑动窗口，刚好使得窗口内只包含<code>k</code>个奇数,；</li><li>利用排列组合即可计算出结果,左右的数目组合相乘的即可；</li></ol></blockquote><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfSubarrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; odd;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]%<span class="number">2</span>)&#123;</span><br><span class="line">                odd.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(odd.size() &lt; k)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k<span class="number">-1</span>;i &lt; odd.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i-k+<span class="number">1</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                l = odd[i-k+<span class="number">1</span>] - odd[i-k];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = odd[i-k+<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; odd.size() - <span class="number">1</span>)&#123;</span><br><span class="line">                r = odd[i+<span class="number">1</span>] - odd[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r = nums.size() - odd[i];</span><br><span class="line">            &#125;</span><br><span class="line">            res += l*r;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numberOfSubarrays</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        odd = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)) <span class="keyword">if</span> nums[i]%<span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> len(odd) &lt; k:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        odd.insert(<span class="number">0</span>,<span class="number">-1</span>)</span><br><span class="line">        odd.append(len(nums))</span><br><span class="line">        <span class="keyword">return</span> sum([(odd[i]-odd[i<span class="number">-1</span>])*(odd[i+k]-odd[i+k<span class="number">-1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(odd)-k)])</span><br></pre></td></tr></table></figure><h2 id="1249-移除无效的括号"><a href="#1249-移除无效的括号" class="headerlink" title="1249. 移除无效的括号"></a>1249. 移除无效的括号</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个由 ‘(‘、’)’ 和小写字母组成的字符串 s。</p><p>你需要从字符串中删除最少数目的 ‘(‘ 或者 ‘)’ （可以删除任意位置的括号)，使得剩下的「括号字符串」有效。</p><p>请返回任意一个合法字符串。</p><p>有效「括号字符串」应当符合以下 任意一条 要求：</p><p>空字符串或只包含小写字母的字符串<br>可以被写作 AB（A 连接 B）的字符串，其中 A 和 B 都是有效「括号字符串」<br>可以被写作 (A) 的字符串，其中 A 是一个有效的「括号字符串」</p><p>示例 1：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"lee(t(c)o)de)"</span></span><br><span class="line">输出：<span class="string">"lee(t(c)o)de"</span></span><br><span class="line">解释：<span class="string">"lee(t(co)de)"</span> , <span class="string">"lee(t(c)ode)"</span> 也是一个可行答案。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"a)b(c)d"</span></span><br><span class="line">输出：<span class="string">"ab(c)d"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"))(("</span></span><br><span class="line">输出：<span class="string">""</span></span><br><span class="line">解释：空字符串也是有效的</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="comment">"(a(b(c)d)"</span></span><br><span class="line">输出：<span class="comment">"a(b(c)d)"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s[i] 可能是 &#39;(&#39;、&#39;)&#39; 或英文小写字母</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-remove-to-make-valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-remove-to-make-valid-parentheses</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 栈解决即可，所有的括号匹配均可以用栈来解决</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>方法很简单，将栈中剩余的元素去掉即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">minRemoveToMakeValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; curr;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'('</span>)&#123;</span><br><span class="line">                curr.push(i);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!curr.empty() &amp;&amp; s[curr.top()] == <span class="string">'('</span>)&#123;</span><br><span class="line">                    curr.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    curr.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!curr.empty())&#123;</span><br><span class="line">            s[curr.top()] = <span class="string">' '</span>;</span><br><span class="line">            curr.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]!=<span class="string">' '</span>)&#123;</span><br><span class="line">                ans.push_back(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1250-检查「好数组」"><a href="#1250-检查「好数组」" class="headerlink" title="1250. 检查「好数组」"></a>1250. 检查「好数组」</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个正整数数组<code>nums</code>，你需要从中任选一些子集，然后将子集中每一个数乘以一个 任意整数，并求出他们的和。</p><p>假如该和结果为 1，那么原数组就是一个「好数组」，则返回 <code>True</code>；否则请返回<code>False</code>。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">12</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">23</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：挑选数字 <span class="number">5</span> 和 <span class="number">7</span>。</span><br><span class="line"><span class="number">5</span>*<span class="number">3</span> + <span class="number">7</span>*(<span class="number">-2</span>) = <span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">29</span>,<span class="number">6</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：挑选数字 <span class="number">29</span>, <span class="number">6</span> 和 <span class="number">10</span>。</span><br><span class="line"><span class="number">29</span>*<span class="number">1</span> + <span class="number">6</span>*(<span class="number">-3</span>) + <span class="number">10</span>*(<span class="number">-1</span>) = <span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 10^5</li><li>1 &lt;= nums[i] &lt;= 10^9</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/check-if-it-is-a-good-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-if-it-is-a-good-array</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 数学问题</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>n个整数间的裴蜀定理；</li><li><a href="https://baike.baidu.com/item/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/5186593?fr=aladdin" target="_blank" rel="noopener">斐蜀定理</a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设a1,a2,a3<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>an为n个整数，d是它们的最大公约数，那么存在整数x1<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>xn使得x1<span class="number">*a1</span>+x2<span class="number">*a2</span>+<span class="built_in">..</span>.xn<span class="number">*a</span><span class="attribute">n</span>=d。</span><br><span class="line">特别来说，如果a1<span class="built_in">..</span>.an互质（不是两两互质），那么存在整数x1<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>xn使得x1<span class="number">*a1</span>+x2<span class="number">*a2</span>+<span class="built_in">..</span>.xn<span class="number">*a</span><span class="attribute">n</span>=1。证法类似两个数的情况。</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &gt; a)&#123;</span><br><span class="line">            <span class="keyword">return</span> gcd(b,a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b)&#123;</span><br><span class="line">            <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isGoodArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); ++i)&#123;</span><br><span class="line">            res = gcd(res,nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(res == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;161周比赛&quot;&gt;&lt;a href=&quot;#161周比赛&quot; class=&quot;headerlink&quot; title=&quot;161周比赛&quot;&gt;&lt;/a&gt;161周比赛&lt;/h1&gt;&lt;p&gt;最近基本上都被家务时间占满了，只能借助晚上的时间来更新解题报告了，不过本周的题目，赛后做了一遍，感觉没有多大的新鲜感。都是一些基本题目，感觉最近两周的题目，质量都不算太高，没有多少让人眼前很亮的题目。&lt;/p&gt;&lt;h2 id=&quot;1247-交换字符使得字符串相同&quot;&gt;&lt;a href=&quot;#1247-交换字符使得字符串相同&quot; class=&quot;headerlink&quot; title=&quot;1247. 交换字符使得字符串相同&quot;&gt;&lt;/a&gt;1247. 交换字符使得字符串相同&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;有两个长度相同的字符串 s1 和 s2，且它们其中 只含有 字符 “x” 和 “y”，你需要通过「交换字符」的方式使这两个字符串相同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】几道经典题目</title>
    <link href="http://yoursite.com/2019/10/30/92/"/>
    <id>http://yoursite.com/2019/10/30/92/</id>
    <published>2019-10-30T05:23:05.449Z</published>
    <updated>2019-11-01T23:40:55.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继续刷题"><a href="#继续刷题" class="headerlink" title="继续刷题"></a>继续刷题</h1><p>昨天完成了89、280、265、294、353这几道题目，一下为其答案</p><h2 id="89-格雷编码"><a href="#89-格雷编码" class="headerlink" title="89. 格雷编码"></a>89. 格雷编码</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。</p><p>给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。</p><p>示例 1:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">2</span></span><br><span class="line">输出: [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">解释:</span><br><span class="line"><span class="number">00</span> - <span class="number">0</span></span><br><span class="line"><span class="number">01</span> - <span class="number">1</span></span><br><span class="line"><span class="number">11</span> - <span class="number">3</span></span><br><span class="line"><span class="number">10</span> - <span class="number">2</span></span><br><span class="line"></span><br><span class="line">对于给定的 n，其格雷编码序列并不唯一。</span><br><span class="line">例如，[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>] 也是一个有效的格雷编码序列。</span><br><span class="line"></span><br><span class="line"><span class="number">00</span> - <span class="number">0</span></span><br><span class="line"><span class="number">10</span> - <span class="number">2</span></span><br><span class="line"><span class="number">11</span> - <span class="number">3</span></span><br><span class="line"><span class="number">01</span> - <span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">0</span></span><br><span class="line">输出: [<span class="number">0</span>]</span><br><span class="line">解释: 我们定义格雷编码序列必须以 <span class="number">0</span> 开头。</span><br><span class="line">     给定编码总位数为 n 的格雷编码序列，其长度为 <span class="number">2</span>n。当 n = <span class="number">0</span> 时，长度为 <span class="number">20</span> = <span class="number">1</span>。</span><br><span class="line">     因此，当 n = <span class="number">0</span> 时，其格雷编码序列为 [<span class="number">0</span>]。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/gray-code" target="_blank" rel="noopener">https://leetcode-cn.com/problems/gray-code</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 求gray码</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>题目非常简单，我们知道gray码，相邻的数之间有且仅有一位二进制位不同。</li><li>生成gray的方法一般有几种，递归和异或，以下为简要的介绍：<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>位格雷码有两个码字(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">a. (n+<span class="number">1</span>)位格雷码中的前<span class="number">2</span>n个码字等于n位格雷码的码字，按顺序书写，加前缀<span class="number">0</span></span><br><span class="line">b. (n+<span class="number">1</span>)位格雷码中的后<span class="number">2</span>n个码字等于n位格雷码的码字，按逆序书写，加前缀<span class="number">1</span> [<span class="number">4</span>] </span><br><span class="line">c. n+<span class="number">1</span>位格雷码的集合 = n位格雷码集合(顺序)加前缀<span class="number">0</span> + n位格雷码集合(逆序)加前缀<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>异或的方法：<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对n位二进制的码字，从右到左，以<span class="number">0</span>到n<span class="number">-1</span>编号</span><br><span class="line">如果二进制码字的第i位和i+<span class="number">1</span>位相同，则对应的格雷码的第i位为<span class="number">0</span>，否则为<span class="number">1</span>（当i+<span class="number">1</span>=n时，二进制码字的第n位被认为是<span class="number">0</span>，即第n<span class="number">-1</span>位不变）</span><br></pre></td></tr></table></figure>公式表示为:<script type="math/tex; mode=display">G_{i} = B_{i}\oplus B_{i+1} \: (n-1 \geqslant i \geqslant 0)</script>其中G为第i位gray码，B为第i为二进制数<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grayCode</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">return</span> [x^(x&gt;&gt;<span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>&lt;&lt;n)]</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="280-摆动排序"><a href="#280-摆动排序" class="headerlink" title="280. 摆动排序"></a>280. 摆动排序</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个无序的数组 nums, 将该数字 原地 重排后使得 nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]…。</p><p>示例:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出: 一个可能的解答是 [<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/wiggle-sort" target="_blank" rel="noopener">https://leetcode-cn.com/problems/wiggle-sort</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 题目本身不难，但是我觉得比较典型的有推理的题目，适合面试。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>按照题目中要求的摆动排序，首先，我们很容易想到可以通过排序，找到中位数，然后将数组分为两部分，每隔一个进行交换，即可，将较大的数放在偶数位的索引上。</li><li>仔细分析一下题目，题目并没有要求最优解，只要求能够满足题目要求即可，我们只要求偶数位<code>i</code>的数字在<code>i-1,i,i+1</code>这三个中最大即可满足要求。<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">### 代码</span><br><span class="line">```c++</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">void</span> wiggleSort(vector&lt;<span class="built_in">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = nums.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; n; i = i+<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; nums[i<span class="number">-1</span>])&#123;</span><br><span class="line">                swap(nums[i],nums[i<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; n<span class="number">-1</span> &amp;&amp; nums[i] &lt; nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                swap(nums[i],nums[i+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wiggleSort</span><span class="params">(self, nums: List[int])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(nums),<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i<span class="number">-1</span>] &gt; nums[i]:</span><br><span class="line">                nums[i],nums[i<span class="number">-1</span>] = nums[i<span class="number">-1</span>],nums[i]</span><br><span class="line">            <span class="keyword">if</span> i &lt; len(nums)<span class="number">-1</span> <span class="keyword">and</span> nums[i+<span class="number">1</span>] &gt; nums[i]:</span><br><span class="line">                nums[i+<span class="number">1</span>],nums[i] = nums[i],nums[i+<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="265-粉刷房子-II"><a href="#265-粉刷房子-II" class="headerlink" title="265. 粉刷房子 II"></a>265. 粉刷房子 II</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>假如有一排房子，共 n 个，每个房子可以被粉刷成 k 种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。</p><p>当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x k 的矩阵来表示的。</p><p>例如，costs[0][0] 表示第 0 号房子粉刷成 0 号颜色的成本花费；costs[1][2] 表示第 1 号房子粉刷成 2 号颜色的成本花费，以此类推。请你计算出粉刷完所有房子最少的花费成本。</p><p>注意：</p><p>所有花费均为正整数。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [[<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>]]</span><br><span class="line">输出: <span class="number">5</span></span><br><span class="line">解释: 将 <span class="number">0</span> 号房子粉刷成 <span class="number">0</span> 号颜色，<span class="number">1</span> 号房子粉刷成 <span class="number">2</span> 号颜色。最少花费: <span class="number">1</span> + <span class="number">4</span> = <span class="number">5</span>; </span><br><span class="line">     或者将 <span class="number">0</span> 号房子粉刷成 <span class="number">2</span> 号颜色，<span class="number">1</span> 号房子粉刷成 <span class="number">0</span> 号颜色。最少花费: <span class="number">3</span> + <span class="number">2</span> = <span class="number">5.</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/paint-house-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/paint-house-ii</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>首先题目中利用dp很容易想到<code>O(nk^2)</code>的解法；</li><li>设递推公式<code>f[n][k]</code>为第<code>n</code>个房间用第<code>k</code>中颜色粉刷的最小代价；</li><li>递推公式为:<script type="math/tex; mode=display">f(n,i) = min(f(n,i),f(n-1,j)+cost(n,i)) \: (k \ge j \ge 1 \: and \:i \ne  j)</script></li><li>另外一种办法每次只取<code>n-1</code>个房屋最小的两个花费进行递归,这样就可以将复杂度降低一个数量级o(n*k).<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCostII</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = costs.size();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> k = costs[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(k,INT_MAX));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intitial*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = costs[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; k; ++m)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(m == j)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                   dp[i][j] = min(dp[i][j],dp[i<span class="number">-1</span>][m]+costs[i][j]); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)&#123;</span><br><span class="line">            res = min(res,dp[n<span class="number">-1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="294-翻转游戏-II"><a href="#294-翻转游戏-II" class="headerlink" title="294. 翻转游戏 II"></a>294. 翻转游戏 II</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3>你和朋友玩一个叫做「翻转游戏」的游戏，游戏规则：给定一个只有 + 和 - 的字符串。你和朋友轮流将 连续 的两个 “++” 反转成 “—“。 当一方无法进行有效的翻转时便意味着游戏结束，则另一方获胜。</li></ol></blockquote><p>请你写出一个函数来判定起始玩家是否存在必胜的方案。</p><p>示例：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="attr">s</span> = <span class="string">"++++"</span></span><br><span class="line">输出: <span class="literal">true</span> </span><br><span class="line">解析: 起始玩家可将中间的 <span class="string">"++"</span> 翻转变为 <span class="string">"+--+"</span> 从而得胜。</span><br><span class="line">延伸：</span><br><span class="line">请推导你算法的时间复杂度。</span><br></pre></td></tr></table></figure></p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/flip-game-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/flip-game-ii</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS,深度遍历</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>采用记忆化的DFS进行递归即可；</li><li>常规的解法；<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt; dp;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canWin</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp.count(s))&#123;</span><br><span class="line">            <span class="keyword">return</span> dp[s];</span><br><span class="line">        &#125;        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i<span class="number">-1</span>] == <span class="string">'+'</span> &amp;&amp; s[i] == <span class="string">'+'</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>(!canWin(s.substr(<span class="number">0</span>,i<span class="number">-1</span>)+<span class="string">"--"</span>+s.substr(i+<span class="number">1</span>,s.size()-i<span class="number">-1</span>)))&#123;</span><br><span class="line">                   dp[s] = <span class="literal">true</span>;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dp[s] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="meta">    @functools.lru_cache()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canWin</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">'+'</span> <span class="keyword">and</span> s[i<span class="number">-1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.canWin(s[<span class="number">0</span>:i<span class="number">-1</span>]+<span class="string">"--"</span>+s[i+<span class="number">1</span>:]):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="353-贪吃蛇"><a href="#353-贪吃蛇" class="headerlink" title="353. 贪吃蛇"></a>353. 贪吃蛇</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3>请你设计一个 贪吃蛇游戏，该游戏将会在一个 屏幕尺寸 = 宽度 x 高度 的屏幕上运行。如果你不熟悉这个游戏，可以 点击这里 在线试玩。</li></ol></blockquote><p>起初时，蛇在左上角的 (0, 0) 位置，身体长度为 1 个单位。</p><p>你将会被给出一个 (行, 列) 形式的食物位置序列。当蛇吃到食物时，身子的长度会增加 1 个单位，得分也会 +1。</p><p>食物不会同时出现，会按列表的顺序逐一显示在屏幕上。比方讲，第一个食物被蛇吃掉后，第二个食物才会出现。</p><p>当一个食物在屏幕上出现时，它被保证不能出现在被蛇身体占据的格子里。</p><p>对于每个 move() 操作，你需要返回当前得分或 -1（表示蛇与自己身体或墙相撞，意味游戏结束）。</p><p>示例：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">给定 width = 3, height = 2, 食物序列为 food = [[1,2],[0,1]]。</span><br><span class="line"></span><br><span class="line">Snake snake = new Snake(width, height, food);</span><br><span class="line"></span><br><span class="line">初始时，蛇的位置在 (0,0) 且第一个食物在 (1,2)。</span><br><span class="line"></span><br><span class="line">|<span class="string">S</span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string">F</span>|</span><br><span class="line"></span><br><span class="line">snake.move(<span class="string">"R"</span>); -&gt; 函数返回 0</span><br><span class="line"></span><br><span class="line">|<span class="string"> </span>|<span class="string">S</span>|<span class="string"> </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string">F</span>|</span><br><span class="line"></span><br><span class="line">snake.move(<span class="string">"D"</span>); -&gt; 函数返回 0</span><br><span class="line"></span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">S</span>|<span class="string">F</span>|</span><br><span class="line"></span><br><span class="line">snake.move(<span class="string">"R"</span>); -&gt; 函数返回 1 (蛇吃掉了第一个食物，同时第二个食物出现在位置 (0,1))</span><br><span class="line"></span><br><span class="line">|<span class="string"> </span>|<span class="string">F</span>|<span class="string"> </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">S</span>|<span class="string">S</span>|</span><br><span class="line"></span><br><span class="line">snake.move(<span class="string">"U"</span>); -&gt; 函数返回 1</span><br><span class="line"></span><br><span class="line">|<span class="string"> </span>|<span class="string">F</span>|<span class="string">S</span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string">S</span>|</span><br><span class="line"></span><br><span class="line">snake.move(<span class="string">"L"</span>); -&gt; 函数返回 2 (蛇吃掉了第二个食物)</span><br><span class="line"></span><br><span class="line">|<span class="string"> </span>|<span class="string">S</span>|<span class="string">S</span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string"> </span>|<span class="string">S</span>|</span><br><span class="line"></span><br><span class="line">snake.move(<span class="string">"U"</span>); -&gt; 函数返回 -1 (蛇与边界相撞，游戏结束)</span><br></pre></td></tr></table></figure></p><h3 id="地址-4"><a href="#地址-4" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/design-snake-game" target="_blank" rel="noopener">https://leetcode-cn.com/problems/design-snake-game</a></p><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 典型的贪吃蛇问题，准备写一个小游戏</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ol><li>数据存储部分，记录当前<code>snake</code>头部的位置，上下左右四个方向移动能够得到下一跳的位置；</li><li>用队列保存<code>snake</code>从头部到尾部的位置，每次移动即从头部添加一个新位置，从尾部去掉一个位置；</li><li>用队列记录<code>food</code>的位置，每次如果<code>snake</code>到达食物队列的位置，则进行弹出。直到食物全部从队列退出。</li><li>每次判断时需要判断<code>snake</code>的下一个位置是<code>food,wall,body</code>的一种，可以用集合查询来加快查找速度.<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnakeGame</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, width: int, height: int, food: List[List[int]])</span>:</span></span><br><span class="line">        self.w = width</span><br><span class="line">        self.h = height</span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line">        self.y = <span class="number">0</span></span><br><span class="line">        self.snake = [<span class="number">0</span>]</span><br><span class="line">        self.snake_loc = set(self.snake)</span><br><span class="line">        self.foods_loc = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> food:</span><br><span class="line">            self.foods_loc.append(f[<span class="number">0</span>]*self.w + f[<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self, direction: str)</span> -&gt; int:</span></span><br><span class="line">        d = &#123;<span class="string">"L"</span>:(<span class="number">0</span>,<span class="number">-1</span>),<span class="string">"R"</span>:(<span class="number">0</span>,<span class="number">1</span>),<span class="string">"U"</span>:(<span class="number">-1</span>,<span class="number">0</span>),<span class="string">"D"</span>:(<span class="number">1</span>,<span class="number">0</span>)&#125;;</span><br><span class="line">        self.x += d[direction][<span class="number">0</span>]</span><br><span class="line">        self.y += d[direction][<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.x &lt; <span class="number">0</span> <span class="keyword">or</span> self.y &lt; <span class="number">0</span> <span class="keyword">or</span> \</span><br><span class="line">           self.x &gt;= self.h <span class="keyword">or</span> self.y &gt;= self.w:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        </span><br><span class="line">        curr = self.x*self.w + self.y</span><br><span class="line">        self.snake.append(curr)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> len(self.foods_loc) &gt; <span class="number">0</span> <span class="keyword">and</span> self.foods_loc[<span class="number">0</span>] == curr:</span><br><span class="line">            self.foods_loc.pop(<span class="number">0</span>)</span><br><span class="line">            self.snake_loc.add(curr)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.snake_loc.remove(self.snake[<span class="number">0</span>])</span><br><span class="line">            self.snake.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> curr <span class="keyword">in</span> self.snake_loc:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.snake_loc.add(curr)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> len(self.snake)<span class="number">-1</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnakeGame</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    SnakeGame(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; food) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;width = width;</span><br><span class="line">        <span class="keyword">this</span>-&gt;height = height;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> d : food)&#123;</span><br><span class="line">            foods_loc.push(d[<span class="number">0</span>]*width+d[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*initial*/</span></span><br><span class="line">        snake.push(<span class="number">0</span>);</span><br><span class="line">        snake_loc.insert(<span class="number">0</span>);</span><br><span class="line">        curr_x = <span class="number">0</span>;</span><br><span class="line">        curr_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="built_in">string</span> direction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : direction)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'L'</span>)&#123;</span><br><span class="line">                curr_y--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'R'</span>)&#123;</span><br><span class="line">                curr_y++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'D'</span>)&#123;</span><br><span class="line">                curr_x++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'U'</span>)&#123;</span><br><span class="line">                curr_x--;</span><br><span class="line">            &#125;</span><br><span class="line">                        </span><br><span class="line">            <span class="comment">/*check wall*/</span></span><br><span class="line">            <span class="keyword">if</span>(curr_x &lt; <span class="number">0</span> || curr_x &gt;= height ||</span><br><span class="line">               curr_y &lt; <span class="number">0</span> || curr_y &gt;= width)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> curr = curr_x*width+curr_y;</span><br><span class="line">            snake.push(curr);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!foods_loc.empty()&amp;&amp;foods_loc.front() == curr)&#123;</span><br><span class="line">                snake_loc.insert(curr);</span><br><span class="line">                foods_loc.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">/*check if current location is snake*/</span></span><br><span class="line">                snake_loc.erase(snake.front());</span><br><span class="line">                snake.pop();</span><br><span class="line">                <span class="keyword">if</span>(snake_loc.count(curr))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    snake_loc.insert(curr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> snake.size()<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; snake;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; foods_loc;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; snake_loc;</span><br><span class="line">    <span class="keyword">int</span> curr_x;</span><br><span class="line">    <span class="keyword">int</span> curr_y;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your SnakeGame object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * SnakeGame* obj = new SnakeGame(width, height, food);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;move(direction);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;继续刷题&quot;&gt;&lt;a href=&quot;#继续刷题&quot; class=&quot;headerlink&quot; title=&quot;继续刷题&quot;&gt;&lt;/a&gt;继续刷题&lt;/h1&gt;&lt;p&gt;昨天完成了89、280、265、294、353这几道题目，一下为其答案&lt;/p&gt;&lt;h2 id=&quot;89-格雷编码&quot;&gt;&lt;a href=&quot;#89-格雷编码&quot; class=&quot;headerlink&quot; title=&quot;89. 格雷编码&quot;&gt;&lt;/a&gt;89. 格雷编码&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。&lt;/p&gt;&lt;p&gt;给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。&lt;/p&gt;&lt;p&gt;示例 1:&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对于给定的 n，其格雷编码序列并不唯一。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如，[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] 也是一个有效的格雷编码序列。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2:&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 我们定义格雷编码序列必须以 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; 开头。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     给定编码总位数为 n 的格雷编码序列，其长度为 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;n。当 n = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; 时，长度为 &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     因此，当 n = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; 时，其格雷编码序列为 [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】一道概率题目</title>
    <link href="http://yoursite.com/2019/10/28/85/"/>
    <id>http://yoursite.com/2019/10/28/85/</id>
    <published>2019-10-28T02:08:50.090Z</published>
    <updated>2019-10-30T04:34:26.331Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个非常有意思的概率题，非常值得探讨的一道题目</p><h2 id="1227-Airplane-Seat-Assignment-Probability"><a href="#1227-Airplane-Seat-Assignment-Probability" class="headerlink" title="1227. Airplane Seat Assignment Probability"></a>1227. Airplane Seat Assignment Probability</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:</p><a id="more"></a><p>Take their own seat if it is still available,<br>Pick other seats randomly when they find their seat occupied<br>What is the probability that the n-th person can get his own seat?</p><p>Example 1:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Inpu<span class="variable">t:</span> n = <span class="number">1</span></span><br><span class="line">Outpu<span class="variable">t:</span> <span class="number">1.00000</span></span><br><span class="line">Explanation: The <span class="keyword">first</span> person can <span class="keyword">only</span> <span class="built_in">get</span> the <span class="keyword">first</span> seat.</span><br></pre></td></tr></table></figure><br>Example 2:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: n = <span class="number">2</span></span><br><span class="line">Output: <span class="number">0.50000</span></span><br><span class="line">Explanation: The <span class="keyword">second</span> person has <span class="keyword">a</span> probability <span class="keyword">of</span> <span class="number">0.5</span> <span class="built_in">to</span> <span class="built_in">get</span> <span class="keyword">the</span> <span class="keyword">second</span> seat (when <span class="keyword">first</span> person gets <span class="keyword">the</span> <span class="keyword">first</span> seat).</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode.com/problems/airplane-seat-assignment-probability/" target="_blank" rel="noopener">https://leetcode.com/problems/airplane-seat-assignment-probability/</a><br>&lt;/br&gt;<br>&nbsp;</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 求第n个人能够做到原本座位上的概率。<br>&nbsp;</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>第1个人如果坐在自己的座位上，那么第n个人肯定可以坐到自己的座位上，这时第1个人坐到第1个座位的概率为<code>1/n</code>.</li><li>第1个人未坐到自己的作为上，且第1个人坐到第n个座位上，则这时第n个人坐到第n个座位的概率为<code>0</code>;</li><li>第1个人坐到第<code>2~n-1</code>个座位上，比如坐到第<code>i</code>个座位上，<code>概率为</code>n-2/n<code>,后续的第</code>2~i-1个人都按照正常的座位进行坐，第i个人选的座位这时分为以下几种情况：<br>a) 第<code>i</code>个人坐到第1个座位上，则这时相当于第<code>i</code>个人与第1个人进行交换了座位，则这时第<code>n</code>个人会坐到第<code>n</code>个座位上，概率为1/n-1;<br>b)第<code>i</code>个人坐到第n个座位上，则这时第<code>n</code>个人会坐到第<code>n</code>个座位上，概率为0；<br>c)第<code>i</code>个人在第<code>i+1~n-1</code>选一个座位坐下，第<code>n</code>个人坐到第<code>n</code>个座位上，则这时的概率为((n-1)-2)/(n-1)，继续下一轮的循环；<br>递推公式为<code>f(n) = 1 / n + (n - 2) / n * f(n - 1)</code>;<br>用数学归纳法，即可证明<code>f(n) = 1/2  (n &gt; 1)</code></li></ol></blockquote><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span>                       // <span class="number">1</span>st person picks his own seat, probability = <span class="number">1</span>/<span class="built_in">n</span></span><br><span class="line">    + <span class="number">1</span>/<span class="built_in">n</span> * <span class="number">0</span>                    // <span class="number">1</span>st person picks last one's seat, probability = <span class="number">1</span>/<span class="built_in">n</span></span><br><span class="line">+ (<span class="built_in">n</span>-<span class="number">2</span>)/<span class="built_in">n</span> *                  // <span class="number">1</span>st person picks one of seat from <span class="number">2</span>nd to (<span class="built_in">n</span>-<span class="number">1</span>)th, probability = (<span class="built_in">n</span>-<span class="number">2</span>)/<span class="built_in">n</span></span><br><span class="line">    (</span><br><span class="line">    <span class="number">1</span>/(<span class="built_in">n</span>-<span class="number">2</span>) * f(<span class="built_in">n</span>-<span class="number">1</span>)         // <span class="number">1</span>st person pick <span class="number">2</span>nd's seat, <span class="number">2</span>nd person becomes the new <span class="string">"careless"</span> person, <span class="built_in">and</span> there are <span class="built_in">n</span>-<span class="number">1</span> seats left. it becomes subproblem of <span class="built_in">n</span>-<span class="number">1</span>.</span><br><span class="line">        <span class="number">1</span>/(<span class="built_in">n</span>-<span class="number">2</span>) * f(<span class="built_in">n</span>-<span class="number">2</span>)         // <span class="number">1</span>st person pick <span class="number">3</span>rd's seat, <span class="number">2</span>nd person will pick his own seat, <span class="number">3</span>nd person becomes the new <span class="string">"careless"</span> person, <span class="built_in">and</span> there are <span class="built_in">n</span>-<span class="number">2</span> seats left. it becomes subproblem of <span class="built_in">n</span>-<span class="number">2</span>.</span><br><span class="line">        ......</span><br><span class="line">        <span class="number">1</span>/(<span class="built_in">n</span>-<span class="number">2</span>) * f(<span class="number">2</span>)           // <span class="number">1</span>st person pick (<span class="built_in">n</span>-<span class="number">1</span>)th's seat, (<span class="built_in">n</span>-<span class="number">1</span>)th person becomes the new <span class="string">"careless"</span> person, there are <span class="number">2</span> seats left.</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">=&gt; f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span>                                                      &#123;when <span class="built_in">n</span> &lt;= <span class="number">2</span>&#125;</span><br><span class="line">   f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span> + <span class="number">1</span>/<span class="built_in">n</span> * ( f(<span class="built_in">n</span>-<span class="number">1</span>) + f(<span class="built_in">n</span>-<span class="number">2</span>) + f(<span class="built_in">n</span>-<span class="number">3</span>) + ... + f(<span class="number">2</span>) )    &#123;when <span class="built_in">n</span> &gt; <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span> + <span class="number">1</span>/<span class="built_in">n</span> * ( f(<span class="built_in">n</span>-<span class="number">1</span>) + f(<span class="built_in">n</span>-<span class="number">2</span>) + f(<span class="built_in">n</span>-<span class="number">3</span>) + ... + f(<span class="number">2</span>) )    </span><br><span class="line">=&gt;<span class="built_in">n</span> * f(<span class="built_in">n</span>) = <span class="number">1</span> + f(<span class="built_in">n</span>-<span class="number">1</span>) + f(<span class="built_in">n</span>-<span class="number">2</span>) + f(<span class="built_in">n</span>-<span class="number">3</span>) + ... + f(<span class="number">2</span>)</span><br><span class="line">=&gt;(<span class="built_in">n</span> + <span class="number">1</span>) * f(<span class="built_in">n</span>+<span class="number">1</span>) = <span class="number">1</span> + f(<span class="built_in">n</span>) + f(<span class="built_in">n</span>-<span class="number">1</span>) + f(<span class="built_in">n</span>-<span class="number">2</span>) + f(<span class="built_in">n</span>-<span class="number">3</span>) + ... + f(<span class="number">2</span>)</span><br><span class="line">=&gt;(<span class="built_in">n</span> + <span class="number">1</span>) * f(<span class="built_in">n</span>+<span class="number">1</span>) - <span class="built_in">n</span> * f(<span class="built_in">n</span>) = f(<span class="built_in">n</span>) </span><br><span class="line">=&gt;(<span class="built_in">n</span> + <span class="number">1</span>) * f(<span class="built_in">n</span>+<span class="number">1</span>) = (<span class="built_in">n</span> + <span class="number">1</span>) * f(<span class="built_in">n</span>) </span><br><span class="line">=&gt;f(<span class="built_in">n</span>+<span class="number">1</span>) = f(<span class="built_in">n</span>)  </span><br><span class="line"></span><br><span class="line">  f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span> + <span class="number">1</span>/<span class="built_in">n</span> * ( f(<span class="built_in">n</span>-<span class="number">1</span>) + f(<span class="built_in">n</span>-<span class="number">2</span>) + f(<span class="built_in">n</span>-<span class="number">3</span>) + ... + f(<span class="number">2</span>) )</span><br><span class="line">=&gt;f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span> + <span class="number">1</span>/<span class="built_in">n</span> * ( f(<span class="built_in">n</span>) + f(<span class="built_in">n</span>) + f(<span class="built_in">n</span>) + ... + f(<span class="built_in">n</span>) )</span><br><span class="line">=&gt;f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span> + (<span class="built_in">n</span>-<span class="number">2</span>)/<span class="built_in">n</span> * f(<span class="built_in">n</span>)  </span><br><span class="line">=&gt;<span class="built_in">n</span> * f(<span class="built_in">n</span>) = <span class="number">1</span> + (<span class="built_in">n</span>-<span class="number">2</span>) * f(<span class="built_in">n</span>)</span><br><span class="line">=&gt;<span class="number">2</span> * f(<span class="built_in">n</span>) = <span class="number">1</span> </span><br><span class="line">=&gt;f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">When n &lt;= <span class="number">2</span> </span><br><span class="line"> f(<span class="name">n</span>) = <span class="number">1</span>/n</span><br><span class="line">When n &gt; <span class="number">2</span> (<span class="name">all</span> these <span class="number">5</span> formulas are correct, we can choose any one of them)</span><br><span class="line"> f(<span class="name">n</span>) = <span class="number">1</span>/n + <span class="number">1</span>/n * ( <span class="name">f</span>(<span class="name">n-1</span>) + f(<span class="name">n-2</span>) + f(<span class="name">n-3</span>) + ... + f(<span class="number">2</span>) )  </span><br><span class="line"> f(<span class="name">n+1</span>) = f(<span class="name">n</span>)</span><br><span class="line"> f(<span class="name">n</span>) = <span class="number">1</span>/n + (<span class="name">n-2</span>)/n * f(<span class="name">n</span>)   </span><br><span class="line"> f(<span class="name">n</span>) = <span class="number">1</span>/n + (<span class="name">n-2</span>)/n * f(<span class="name">n-1</span>)  is correct too since f(<span class="name">n</span>) == f(<span class="name">n-1</span>)</span><br><span class="line"> f(<span class="name">n</span>) = <span class="number">1/2</span></span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">f(n) = \frac{1}{n} + \frac{1}{n}\sum_{i=2}^{n-1}f(i)</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码比较简单：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">double</span> nthPersonGetsNthSeat(<span class="built_in">int</span> n) &#123;</span><br><span class="line">       <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1.0</span>d;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>d / n + (n - <span class="number">2</span>d) / n * nthPersonGetsNthSeat(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天遇到一个非常有意思的概率题，非常值得探讨的一道题目&lt;/p&gt;&lt;h2 id=&quot;1227-Airplane-Seat-Assignment-Probability&quot;&gt;&lt;a href=&quot;#1227-Airplane-Seat-Assignment-Probability&quot; class=&quot;headerlink&quot; title=&quot;1227. Airplane Seat Assignment Probability&quot;&gt;&lt;/a&gt;1227. Airplane Seat Assignment Probability&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:&lt;/p&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】160比赛</title>
    <link href="http://yoursite.com/2019/10/28/90/"/>
    <id>http://yoursite.com/2019/10/28/90/</id>
    <published>2019-10-27T16:08:31.250Z</published>
    <updated>2019-10-29T01:02:16.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="160周比赛"><a href="#160周比赛" class="headerlink" title="160周比赛"></a>160周比赛</h1><p>今天学习到了gray的编写，非常不错的解法，又学习了一遍</p><h2 id="5238-找出给定方程的正整数解"><a href="#5238-找出给定方程的正整数解" class="headerlink" title="5238. 找出给定方程的正整数解"></a>5238. 找出给定方程的正整数解</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给出一个函数<code>f(x, y)</code> 和一个目标结果 <code>z</code>，请你计算方程<code>f(x,y) == z</code>所有可能的正整数 数对 <code>x</code>和 <code>y</code>。</p><p>给定函数是严格单调的，也就是说：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f(x, y) &lt; f(x + <span class="number">1</span>, y)</span><br><span class="line">f(x, y) &lt; f(x, y + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>函数接口定义如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface CustomFunction &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Returns positive integer f(x, y) for any given positive integer x and y.</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>如果你想自定义测试，你可以输入整数 function_id 和一个目标结果 z 作为输入，其中 function_id 表示一个隐藏函数列表中的一个函数编号，题目只会告诉你列表中的 2 个函数。  </p><p>你可以将满足条件的 结果数对 按任意顺序返回。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：function_id = <span class="number">1</span>, z = <span class="number">5</span></span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">1</span>]]</span><br><span class="line">解释：function_id = <span class="number">1</span> 表示 f(x, y) = x + y</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：function_id = <span class="number">2</span>, z = <span class="number">5</span></span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">1</span>]]</span><br><span class="line">解释：function_id = <span class="number">2</span> 表示 f(x, y) = x * y</span><br></pre></td></tr></table></figure><br>提示：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;= function_id &lt;= <span class="number">9</span></span><br><span class="line"><span class="number">1</span> &lt;= z &lt;= <span class="number">100</span></span><br><span class="line">题目保证 f(x, y) == z 的解处于 <span class="number">1</span> &lt;= x, y &lt;= <span class="number">1000</span> 的范围内。</span><br><span class="line">在 <span class="number">1</span> &lt;= x, y &lt;= <span class="number">1000</span> 的前提下，题目保证 f(x, y) 是一个 <span class="number">32</span> 位有符号整数。</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/check-if-it-is-a-straight-line" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-if-it-is-a-straight-line</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 找出给定方程的解</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>题目比较简单，首先直接的想到用遍历的方法即可，时间复杂度为<code>O(n^2)</code>；</li><li>其次可以用二分查找的方法，固定遍历<code>x</code>,对<code>y</code>进行二分查找，时间复杂度为<code>O(lgn)</code>;</li><li>仔细观察我们记得在矩阵中进行搜索特定值时可以用双指针的办法，我们从矩阵的左下角和右上角进行搜索遍历，如果判断比<code>x</code>小，则进行<code>x-1</code>操作,<code>(x,y)</code>分别赋初值<code>(1,1000),(1000,1)</code>,双指针操作，记住如果得到相等的值则进行<code>x-1,y+1</code>或者<code>x+1,y-1</code>操作；</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>双指针或者二分查找<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * // This is the custom function interface.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * class CustomFunction &#123;</span></span><br><span class="line"><span class="comment"> * public:</span></span><br><span class="line"><span class="comment"> *     // Returns f(x, y) for any given positive integers x and y.</span></span><br><span class="line"><span class="comment"> *     // Note that f(x, y) is increasing with respect to both x and y.</span></span><br><span class="line"><span class="comment"> *     // i.e. f(x, y) &lt; f(x + 1, y), f(x, y) &lt; f(x, y + 1)</span></span><br><span class="line"><span class="comment"> *     int f(int x, int y);</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; findSolution(CustomFunction&amp; customfunction, <span class="keyword">int</span> z) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">1000</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l &gt;= <span class="number">1</span> &amp;&amp; l &lt;= <span class="number">1000</span> &amp;&amp; r &gt;= <span class="number">1</span> &amp;&amp; r &lt;= <span class="number">1000</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(customfunction.f(l,r) == z)&#123;</span><br><span class="line">                res.push_back(&#123;l,r&#125;);</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(customfunction.f(l,r) &lt; z)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        l = <span class="number">1000</span>;</span><br><span class="line">        r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &gt;= <span class="number">1</span> &amp;&amp; l &lt;= <span class="number">1000</span> &amp;&amp; r &gt;= <span class="number">1</span> &amp;&amp; r &lt;= <span class="number">1000</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(customfunction.f(l,r) == z)&#123;</span><br><span class="line">                res.push_back(&#123;l,r&#125;);</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(customfunction.f(l,r) &lt; z)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * // This is the custom function interface.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * class CustomFunction &#123;</span></span><br><span class="line"><span class="comment"> * public:</span></span><br><span class="line"><span class="comment"> *     // Returns f(x, y) for any given positive integers x and y.</span></span><br><span class="line"><span class="comment"> *     // Note that f(x, y) is increasing with respect to both x and y.</span></span><br><span class="line"><span class="comment"> *     // i.e. f(x, y) &lt; f(x + 1, y), f(x, y) &lt; f(x, y + 1)</span></span><br><span class="line"><span class="comment"> *     int f(int x, int y);</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; findSolution(CustomFunction&amp; customfunction, <span class="keyword">int</span> z) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">1000</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i)&#123;</span><br><span class="line">            l = <span class="number">1</span>;</span><br><span class="line">            r = <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> f = customfunction.f(i,mid);</span><br><span class="line">                <span class="keyword">if</span>(f == z)&#123;</span><br><span class="line">                    res.push_back(&#123;i,mid&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(f &lt; z)&#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">   This is the custom function interface.</span></span><br><span class="line"><span class="string">   You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="string">   class CustomFunction:</span></span><br><span class="line"><span class="string">       # Returns f(x, y) for any given positive integers x and y.</span></span><br><span class="line"><span class="string">       # Note that f(x, y) is increasing with respect to both x and y.</span></span><br><span class="line"><span class="string">       # i.e. f(x, y) &lt; f(x + 1, y), f(x, y) &lt; f(x, y + 1)</span></span><br><span class="line"><span class="string">       def f(self, x, y):</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSolution</span><span class="params">(self, customfunction: <span class="string">'CustomFunction'</span>, z: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        l = <span class="number">1</span></span><br><span class="line">        r = <span class="number">1000</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l &gt;=<span class="number">1</span> <span class="keyword">and</span> r &gt;= <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">              l &lt;= <span class="number">1000</span> <span class="keyword">and</span> r &lt;= <span class="number">1000</span>:</span><br><span class="line">            <span class="keyword">if</span> customfunction.f(l,r) == z:</span><br><span class="line">                res.append([l,r])</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> customfunction.f(l,r) &gt; z:</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        l = <span class="number">1000</span></span><br><span class="line">        r = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &gt;=<span class="number">1</span> <span class="keyword">and</span> r &gt;= <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">              l &lt;= <span class="number">1000</span> <span class="keyword">and</span> r &lt;= <span class="number">1000</span>:</span><br><span class="line">            <span class="keyword">if</span> customfunction.f(l,r) == z:</span><br><span class="line">                res.append([l,r])</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> customfunction.f(l,r) &gt; z:</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ol><h2 id="5239-循环码排列"><a href="#5239-循环码排列" class="headerlink" title="5239. 循环码排列"></a>5239. 循环码排列</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你两个整数 <code>n</code>和<code>start</code>。你的任务是返回任意 <code>(0,1,2,,...,2^n-1)</code>的排列<code>p</code>，并且满足：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>[<span class="number">0</span>] = start</span><br><span class="line"><span class="selector-tag">p</span>[i] 和 <span class="selector-tag">p</span>[i+<span class="number">1</span>] 的二进制表示形式只有一位不同</span><br><span class="line"><span class="selector-tag">p</span>[<span class="number">0</span>] 和 <span class="selector-tag">p</span>[<span class="number">2</span>^n -<span class="number">1</span>] 的二进制表示形式也只有一位不同</span><br></pre></td></tr></table></figure></p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, start = <span class="number">3</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">解释：这个排列的二进制表示是 (<span class="number">11</span>,<span class="number">10</span>,<span class="number">00</span>,<span class="number">01</span>)</span><br><span class="line">     所有的相邻元素都有一位是不同的，另一个有效的排列是 [<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出：n = <span class="number">3</span>, start = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">解释：这个排列的二进制表示是 (<span class="number">010</span>,<span class="number">110</span>,<span class="number">111</span>,<span class="number">101</span>,<span class="number">100</span>,<span class="number">000</span>,<span class="number">001</span>,<span class="number">011</span>)</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>&lt;= n &lt;= <span class="number">16</span></span><br><span class="line"><span class="symbol">0 </span>&lt;= start &lt; <span class="number">2</span>^n</span><br></pre></td></tr></table></figure><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/circular-permutation-in-binary-representation" target="_blank" rel="noopener">https://leetcode-cn.com/problems/circular-permutation-in-binary-representation</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 格雷码</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>最开始的解法，采用暴力破解，直接递归即可求出每一位的不同；</li><li>后来看了别人更好的解法求<code>gray</code>,步骤如下：<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a. 初始化序列&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">b, 第i次对序列逆序读取，并在为每个数加上前缀<span class="number">1</span>，即加上pow(<span class="number">2</span>,i);</span><br></pre></td></tr></table></figure></li><li>找到<code>gray</code>序列中等于<code>start</code>的索引，然后对数组进行移位操作即可;<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; circularPermutation(<span class="keyword">int</span> n, <span class="keyword">int</span> start) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = res.size()<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">                res.push_back(res[j] + (<span class="number">1</span>&lt;&lt;i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; res.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res[i] == start)&#123;</span><br><span class="line">                l = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(res.begin(),res.end());</span><br><span class="line">        reverse(res.begin(),res.begin()+res.size()-l);</span><br><span class="line">        reverse(res.begin()+res.size()-l,res.end());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; circularPermutation(<span class="keyword">int</span> n, <span class="keyword">int</span> start) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class="line">            res.push_back(start^i^(i&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">circularPermutation</span><span class="params">(self, n: int, start: int)</span> -&gt; List[int]:</span></span><br><span class="line">        res = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            end = len(res)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(end,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">                res.append(res[j]+(<span class="number">1</span>&lt;&lt;i))</span><br><span class="line">        </span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(res)):</span><br><span class="line">            <span class="keyword">if</span> res[i] == start:</span><br><span class="line">                idx = i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res[idx:] + res[<span class="number">0</span>:idx]</span><br></pre></td></tr></table></figure><h2 id="5240-串联字符串的最大长度"><a href="#5240-串联字符串的最大长度" class="headerlink" title="5240. 串联字符串的最大长度"></a>5240. 串联字符串的最大长度</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给定一个字符串数组 arr，字符串 s 是将 arr 某一子序列字符串连接所得的字符串，如果 s 中的每一个字符都只出现过一次，那么它就是一个可行解。<br>请返回所有可行解 s 中最长长度。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="string">"un"</span>,<span class="string">"iq"</span>,<span class="string">"ue"</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：所有可能的串联组合是 <span class="string">""</span>,<span class="string">"un"</span>,<span class="string">"iq"</span>,<span class="string">"ue"</span>,<span class="string">"uniq"</span> 和 <span class="string">"ique"</span>，最大长度为 <span class="number">4</span>。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="string">"cha"</span>,<span class="string">"r"</span>,<span class="string">"act"</span>,<span class="string">"ers"</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：可能的解答有 <span class="string">"chaers"</span> 和 <span class="string">"acters"</span>。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="string">"abcdefghijklmnopqrstuvwxyz"</span>]</span><br><span class="line">输出：<span class="number">26</span></span><br></pre></td></tr></table></figure></p><p>提示:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;= arr.length &lt;= <span class="number">16</span></span><br><span class="line"><span class="number">1</span> &lt;= arr[i].length &lt;= <span class="number">26</span></span><br><span class="line">arr[i] 中只含有小写英文字母</span><br></pre></td></tr></table></figure><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力加掩码</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>由于题目中的字符串只包含小写，字母，我们对字符串进行编码处理，转换为二进制掩码<code>mask</code>;</li><li>我们判断两个字符串是否包含有相同的字母，可以用掩码判断<code>mask1 &amp; mask2 == 0</code>,可以用该公式来进行判断；</li><li>如果两个字符串合并，则对掩码进行合并即可，则等式为<code>mask = mask1|mask2</code>;</li><li>暴力解决，遍历数组的所有组合，总共有<code>2^n</code>中组合，判断是否存在符合条件的组合即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bitTest</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((mask&amp;(<span class="number">1</span>&lt;&lt;n))&gt;&gt;n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bitSet</span><span class="params">(<span class="keyword">int</span> &amp; mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        mask |= (<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bitClr</span><span class="params">(<span class="keyword">int</span> &amp; mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        mask &amp;= (~(<span class="number">1</span>&lt;&lt;n));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isUnique</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mask = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bitTest(mask,c-<span class="string">'a'</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            bitSet(mask,c-<span class="string">'a'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strToMask</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mask = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c: s)&#123;</span><br><span class="line">            bitSet(mask,c-<span class="string">'a'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> mask;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countBit</span><span class="params">(<span class="keyword">int</span> mask)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(mask)&#123;</span><br><span class="line">            mask = mask&amp;(mask<span class="number">-1</span>);</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mask;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*detech unique string*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isUnique(arr[i]))&#123;</span><br><span class="line">                mask.push_back(strToMask(arr[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = mask.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">pow</span>(<span class="number">2</span>,m); ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">bool</span> isCan = <span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bitTest(i,j))&#123;</span><br><span class="line">                    <span class="keyword">if</span>((curr&amp;mask[j]) == <span class="number">0</span>)&#123;</span><br><span class="line">                        curr |= mask[j];</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        isCan = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(isCan)&#123;</span><br><span class="line">                res = max(res,countBit(curr));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxLength</span><span class="params">(self, arr: List[str])</span> -&gt; int:</span></span><br><span class="line">        arr = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> len(set(x)) == len(x)]</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">codec</span><span class="params">(str)</span>:</span></span><br><span class="line">            res = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> str:</span><br><span class="line">                res = res|(<span class="number">1</span>&lt;&lt;(ord(c)-ord(<span class="string">'a'</span>)))</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        mask = [[codec(x),len(x)] <span class="keyword">for</span> x <span class="keyword">in</span> arr]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>&lt;&lt;(len(arr))):</span><br><span class="line">            curr = <span class="number">0</span></span><br><span class="line">            l = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">                <span class="keyword">if</span> (i&amp;(<span class="number">1</span>&lt;&lt;j)) &gt; <span class="number">0</span> <span class="keyword">and</span> (curr&amp;mask[j][<span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line">                    curr = curr|mask[j][<span class="number">0</span>]</span><br><span class="line">                    l += mask[j][<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    l = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            res = max(res,l)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxLength</span><span class="params">(self, arr: List[str])</span> -&gt; int:</span></span><br><span class="line">        arr = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> len(x) == len(set(x))]</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">codec</span><span class="params">(str)</span>:</span></span><br><span class="line">            res = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> str:</span><br><span class="line">                res = res|(<span class="number">1</span>&lt;&lt;(ord(c)-ord(<span class="string">'a'</span>)))</span><br><span class="line">            <span class="keyword">return</span> (res,len(str))</span><br><span class="line">        </span><br><span class="line">        dp = [(<span class="number">0</span>,<span class="number">0</span>)]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line">            mask,l = codec(x)</span><br><span class="line">            <span class="keyword">for</span> m,c <span class="keyword">in</span> dp:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> mask&amp;m:</span><br><span class="line">                    dp.append((mask|m,l+c))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max(l <span class="keyword">for</span> m,l <span class="keyword">in</span> dp)</span><br></pre></td></tr></table></figure><h2 id="5241-铺瓷砖"><a href="#5241-铺瓷砖" class="headerlink" title="5241. 铺瓷砖"></a>5241. 铺瓷砖</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>你是一位施工队的工长，根据设计师的要求准备为一套设计风格独特的房子进行室内装修。</p><p>房子的客厅大小为 <code>n x m</code>，为保持极简的风格，需要使用尽可能少的 正方形 瓷砖来铺盖地面。</p><p>假设正方形瓷砖的规格不限，边长都是整数。</p><p>请你帮设计师计算一下，最少需要用到多少块方形瓷砖？</p><p>示例 1：<br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/25/sample_11_1592.png" alt="1"><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, m = <span class="number">3</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：<span class="number">3</span> 块地砖就可以铺满卧室。</span><br><span class="line">     <span class="number">2</span> 块 <span class="number">1</span>x1 地砖</span><br><span class="line">     <span class="number">1</span> 块 <span class="number">2</span>x2 地砖</span><br></pre></td></tr></table></figure><br>示例 2：<br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/25/sample_22_1592.png" alt="2"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, m = <span class="number">8</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><p>示例 3：<br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/25/sample_33_1592.png" alt="3"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">11</span>, m = <span class="number">13</span></span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure><p>提示:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>&lt;= n &lt;= <span class="number">13</span></span><br><span class="line"><span class="symbol">1 </span>&lt;= m &lt;= <span class="number">13</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/tiling-a-rectangle-with-the-fewest-squares" target="_blank" rel="noopener">https://leetcode-cn.com/problems/tiling-a-rectangle-with-the-fewest-squares</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>题目类似于脑筋急转弯，正规的程序设计中比较少见的题目；</li><li>我们定义dp[i][j]表示组成i*j大小的矩形所用最小正方形的个数。<br>我们考虑如何将问题化为规模更小的问题，其实就是以下三种情况：<br>a.竖直切割，将矩形分成左右两块。<br><img src="90-1.jpg" alt="1"><br>b.水平切割，将矩形分成上下两块。<br><img src="90-2.jpg" alt="2"><br>c.中间挖走了一块，导致需要将剩下的矩形分成4块，共5块。<br><img src="90-3.jpg" alt="3"><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">14</span>][<span class="number">14</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">tilingRectangle</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                f[i][j] = <span class="number">999999</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= min(i, j); ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    f[i][j] = min(f[i][j], f[i - k][j] + f[k][j - k] + <span class="number">1</span>);</span><br><span class="line">                    f[i][j] = min(f[i][j], f[i - k][k] + f[i][j - k] + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">1</span>; z &lt;= min(k - <span class="number">1</span>, j - k); ++z)</span><br><span class="line">                    &#123;</span><br><span class="line">                        f[i][j] = min(f[i][j], f[i - k][k + z] + f[i - k + z][j - k - z] + f[k - z][j - k] + <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> f[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;160周比赛&quot;&gt;&lt;a href=&quot;#160周比赛&quot; class=&quot;headerlink&quot; title=&quot;160周比赛&quot;&gt;&lt;/a&gt;160周比赛&lt;/h1&gt;&lt;p&gt;今天学习到了gray的编写，非常不错的解法，又学习了一遍&lt;/p&gt;&lt;h2 id=&quot;5238-找出给定方程的正整数解&quot;&gt;&lt;a href=&quot;#5238-找出给定方程的正整数解&quot; class=&quot;headerlink&quot; title=&quot;5238. 找出给定方程的正整数解&quot;&gt;&lt;/a&gt;5238. 找出给定方程的正整数解&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给出一个函数&lt;code&gt;f(x, y)&lt;/code&gt; 和一个目标结果 &lt;code&gt;z&lt;/code&gt;，请你计算方程&lt;code&gt;f(x,y) == z&lt;/code&gt;所有可能的正整数 数对 &lt;code&gt;x&lt;/code&gt;和 &lt;code&gt;y&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;给定函数是严格单调的，也就是说：&lt;/p&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f(x, y) &amp;lt; f(x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(x, y) &amp;lt; f(x, y + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="http://yoursite.com/2019/10/24/88/"/>
    <id>http://yoursite.com/2019/10/24/88/</id>
    <published>2019-10-24T06:32:18.314Z</published>
    <updated>2019-10-24T06:35:11.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分查找-lower-bound-与-upper-bound"><a href="#二分查找-lower-bound-与-upper-bound" class="headerlink" title="二分查找 lower_bound 与 upper_bound"></a>二分查找 lower_bound 与 upper_bound</h1><h2 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个算法中，first是最终要返回的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> size, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0</span>, middle;</span><br><span class="line">    <span class="keyword">int</span> half, len;</span><br><span class="line">    len = size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        half = len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        middle = first + half;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">array</span>[middle] &lt; key) &#123;     </span><br><span class="line">            first = middle + <span class="number">1</span>;          </span><br><span class="line">            len = len-half<span class="number">-1</span>;       <span class="comment">//在右边子序列中查找</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            len = half;            <span class="comment">//在左边子序列（包含middle）中查找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> size, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0</span>, len = size<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> half, middle;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        half = len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        middle = first + half;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">array</span>[middle] &gt; key)     <span class="comment">//中位数大于key,在包含last的左半边序列中查找。</span></span><br><span class="line">            len = half;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            first = middle + <span class="number">1</span>;    <span class="comment">//中位数小于等于key,在右半边序列中查找。</span></span><br><span class="line">            len = len - half - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二分查找-lower-bound-与-upper-bound&quot;&gt;&lt;a href=&quot;#二分查找-lower-bound-与-upper-bound&quot; class=&quot;headerlink&quot; title=&quot;二分查找 lower_bound 与 upper_bound&quot;&gt;&lt;/a&gt;二分查找 lower_bound 与 upper_bound&lt;/h1&gt;&lt;h2 id=&quot;lower-bound&quot;&gt;&lt;a href=&quot;#lower-bound&quot; class=&quot;headerlink&quot; title=&quot;lower_bound&quot;&gt;&lt;/a&gt;lower_bound&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这个算法中，first是最终要返回的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lower_bound&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; first = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; half, len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    len = size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(len &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        half = len &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        middle = first + half;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[middle] &amp;lt; key) &amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            first = middle + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            len = len-half&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;       &lt;span class=&quot;comment&quot;&gt;//在右边子序列中查找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            len = half;            &lt;span class=&quot;comment&quot;&gt;//在左边子序列（包含middle）中查找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; first;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>线性模型</title>
    <link href="http://yoursite.com/2019/10/23/%E3%80%90leetcode%E3%80%9157/"/>
    <id>http://yoursite.com/2019/10/23/【leetcode】57/</id>
    <published>2019-10-23T09:06:39.489Z</published>
    <updated>2019-10-23T15:57:31.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-线性模型"><a href="#1-线性模型" class="headerlink" title="1.线性模型"></a>1.线性模型</h2><p>给定n个属性描述属性的特征 <script type="math/tex">x = (x_1,x_2,x_3,...,x_n)</script>,其中$x_i$表示第$i$个特征，线性模型试图通过一个特征值的线性组合来表示最终的模型，即最终的预测函数:</p><script type="math/tex; mode=display">f(x) = \omega_{1}x_{1} + \omega_{2}x_{2} + ... + \omega_{n}x_{n} + b  \tag{1-1}</script><a id="more"></a><p>如果采用向量表示则：</p><script type="math/tex; mode=display">f(x) = \omega^{T}x + b  \tag{1-2}</script><p>其中$\omega = (\omega_{1},\omega_{2},\omega_{3}…\omega_{n})$,我们只需要求出$\omega$ 和 $b$，就可以求出预测函数，得到最终的模型。<br>我们常见的可以通过线性回归(linear regression)试图学得一个线性模式，使得给定特征值，尽可能的准确的预测输出与实际值接近的结果。<br>我们已知$f(x) = \omega^{T}x + b $，</p><h3 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h3><p>我们知道欧几里得距离可以表示两个值的差异，可以使用均方差来度量，应当尽可能的保证均方差最小。假设我们有m个样本，<br>$x_{i}$代表每个样本的特征值，$y_{i}$代表实际每个样本的实际结果.</p><script type="math/tex; mode=display">\sum_{l=1}^{n}(f(x_{i})-y_{i})^{2} \tag{1-3}</script><p>我们应当保证均方差尽可能的最小。我们用矩阵表示所有的样本</p><script type="math/tex; mode=display">X =  \left[\begin{matrix} x_{11} & x_{12} & \cdots & x_{1n} & 1  \\ x_{21} & x_{22} & \cdots & x_{2n} & 1  \\ \vdots & \vdots & \ddots & \vdots & \vdots \\ x_{m1} & x_{m2} & \cdots & x_{mn} & 1  \\\end{matrix}\right] =  \left[\begin{matrix} x_{1}^{T} & 1  \\ x_{2}^{T} & 1  \\ \vdots & \vdots \\ x_{m}^{T} & 1  \\\end{matrix}\right]   \tag{1-4}</script><p>我们把实际的结果也用向量形式表示则</p><script type="math/tex; mode=display">Y =\left[\begin{matrix}y_{1} \\y_{2} \\\vdots \\y_{m}  \\\end{matrix}\right]  \tag{1-5}</script><p>则应尽量使得均方差最小$arg min(y-X\omega-b)^{T}(y-X\omega-b)  \tag{1-6}$.</p><p>我们令$E_{\omega} = (y-X\omega)^{T}(y-X\omega)$。实际上将$x \omega b$代入公式得到</p><script type="math/tex; mode=display">E = \sum_{i=1}^{m}(f(x_{i})-y_{i})^{2}  = \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2} \tag{1-7}</script><p>如式（7）所示，我们知道如果使的E最小，则在导数方向应该是最小，则我们分别$\omega$、$b$进行求导.<br>则可知：</p><script type="math/tex; mode=display">\frac{\partial E}{\partial \omega} = 0 \tag{1-8}</script><script type="math/tex; mode=display">\frac{\partial E}{\partial b} = 0 \tag{1-9}</script><p>我们将其方程8与方程9代入数据，可知</p><script type="math/tex; mode=display">\frac{\partial E}{\partial \omega_{1}} = 0 \\\frac{\partial E}{\partial \omega_{2}} = 0 \\\frac{\partial E}{\partial \omega_{3}} = 0 \\\vdots                                        \\\frac{\partial E}{\partial \omega_{n}} = 0 \\\frac{\partial E}{\partial b} = 0</script><p>我们将E的值代入即可得到</p><script type="math/tex; mode=display">\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{1}} = 0 \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{2}} = 0 \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{3}} = 0 \\\vdots  \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{n}} = 0 \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial b} = 0 \\</script><p>求导数后可得如下：</p><script type="math/tex; mode=display">\begin{equation}\begin{cases}2\sum_{i=1}^{m}x_{i1}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\2\sum_{i=1}^{m}x_{i2}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\2\sum_{i=1}^{m}x_{i3}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\\vdots \\2\sum_{i=1}^{m}x_{in}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\2\sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\\end{cases}\end{equation}</script><p>将方程进行化解后可得:</p><script type="math/tex; mode=display">\begin{equation}\begin{cases}\sum_{i=1}^{m}x_{i1}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{i1}y_{i} \\\sum_{i=1}^{m}x_{i2}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{i2}y_{i} \\\sum_{i=1}^{m}x_{i3}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{i3}y_{i} \\\vdots     \\\sum_{i=1}^{m}x_{in}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{in}y_{i} \\\sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}y_{i} \\\end{cases}\end{equation}</script><p>我们令$\omega_{0} = b$将其转换为矩阵的乘法为</p><script type="math/tex; mode=display">E = \left[\begin{matrix}\omega_{1} & \omega_{2} & \omega_{3} & \cdots & \omega_{n} & b\end{matrix}\right]\left[\begin{matrix}x_{11} & x_{21} & x_{31}  & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32}  & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33}  & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots & \vdots  \\x_{1n} & x_{2n} & x_{3n}  & \cdots & x_{mn} \\1 & 1 & 1  & 1 & 1 \\\end{matrix}\right]\left[\begin{matrix}x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} & 1\\x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} & 1\\x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} & 1\\\vdots  & \vdots  & \vdots   & \ddots & \vdots & \vdots \\x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} & 1\\\end{matrix}\right] \\= \left[\begin{matrix}x_{11} & x_{21} & x_{31} & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32} & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33} & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots  & \vdots \\x_{1n} & x_{2n} & x_{3n} & \cdots & x_{mn} \\1 & 1 & 1  & 1 & 1 \\\end{matrix}\right]\left[\begin{matrix}y_{1} \\y_{2} \\y_{3} \\\cdots \\y_{m}  \\\end{matrix}\right]</script><p>我们令</p><script type="math/tex; mode=display">A = \left[\begin{matrix}x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} & 1\\x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} & 1\\x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} & 1\\\vdots  & \vdots  & \vdots   & \ddots & \vdots & \vdots \\x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} & 1\\\end{matrix}\right] \\</script><p>则上述等式可以化简为</p><script type="math/tex; mode=display">\omega^{T}A^{T}A = A^{T}Y \\</script><script type="math/tex; mode=display">\omega^{T}A^{T} = A^{T}YA^{-1} \\</script><script type="math/tex; mode=display">\omega^{T} = A^{T}YA^{-1}(A^{T})^{-1}\\</script><p>即可求出$\omega$的值，所得结果。</p><h3 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h3><p>如果方差最小，我们也知道的偏离大小。我们知道离散变量的期望为取平均值。<br>我们假设<script type="math/tex">f(x) = \omega_{0} + \omega_{1}x_{1} + \omega_{2}x_{2} + \cdots + \omega_{n}x_{n}</script></p><script type="math/tex; mode=display">E = \frac{y_{1}+y_{2}+y_{3}+\cdots+y_{m}}{m} = \overline{y}D(x) = \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-E)^{2} = \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}</script><p>如果使得$D(x)$在不同的$\omega$下取值最小，按照极限原理，应当是导数为0时，可能取得极值，即最小值，因此我们对$D(x)$对$\omega$进行求导。</p><script type="math/tex; mode=display">\frac{\partial D(x)}{\partial \omega} = 0 \tag{1-10}</script><p>将（1-10）进行展开则:</p><script type="math/tex; mode=display">\frac{\partial D(x)}{\partial \omega_{1}} = 0 \\\frac{\partial D(x)}{\partial \omega_{2}} = 0 \\\frac{\partial D(x)}{\partial \omega_{3}} = 0 \\\vdots \\\frac{\partial D(x)}{\partial \omega_{n}} = 0 \\</script><p>分开展开来看</p><script type="math/tex; mode=display">\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{0}} = 0 \\\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{1}} = 0 \\\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{2}} = 0 \\\vdots \\\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{n}} = 0 \\</script><p>将上述公式全部进行求导后可得:</p><script type="math/tex; mode=display">\begin{equation}\begin{cases}\sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}\overline{y} \\\sum_{i=1}^{m}x_{i1}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{i1}\overline{y}\\\sum_{i=1}^{m}x_{i2}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{i2}\overline{y} \\\sum_{i=1}^{m}x_{i3}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{i3}\overline{y} \\\vdots     \\\sum_{i=1}^{m}x_{in}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{in}\overline{y} \\\end{cases}\end{equation}</script><p>将其转化为矩阵即为如下：</p><script type="math/tex; mode=display">\left[\begin{matrix}\omega_{0} & \omega_{1} & \omega_{2} & \omega_{3} & \cdots & \omega_{n}\end{matrix}\right]\left[\begin{matrix}1 & 1 & 1  & 1 & 1 \\x_{11} & x_{21} & x_{31}  & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32}  & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33}  & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots & \vdots  \\x_{1n} & x_{2n} & x_{3n}  & \cdots & x_{mn} \\\end{matrix}\right]\left[\begin{matrix}1 & x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} \\1 & x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} \\1 & x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} \\1 & \vdots  & \vdots  & \vdots   & \ddots & \vdots \\1 & x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} \\\end{matrix}\right] \\= \left[\begin{matrix}1 & 1 & 1  & 1 & 1 \\x_{11} & x_{21} & x_{31} & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32} & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33} & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots  & \vdots \\x_{1n} & x_{2n} & x_{3n} & \cdots & x_{mn} \\\end{matrix}\right]\left[\begin{matrix}\overline{y}  \\\overline{y}  \\\overline{y}  \\\overline{y}  \\\overline{y}  \\\end{matrix}\right]</script><p>在此我们令举证</p><script type="math/tex; mode=display">A = \left[\begin{matrix}1 & x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} \\1 & x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} \\1 & x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} \\1 & \vdots  & \vdots  & \vdots   & \ddots & \vdots \\1 & x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} \\\end{matrix}\right] \\</script><p>则上述等式可以简化为</p><script type="math/tex; mode=display">\omega^{T}A^{T}A = A^{T}\overline{Y} \\</script><script type="math/tex; mode=display">\omega^{T}A^{T} = A^{T}YA^{-1}\overline{Y}\\</script><script type="math/tex; mode=display">\omega^{T} = A^{T}YA^{-1}(A^{T})^{-1}\overline{Y}\\</script><p>最终我们可以通过矩阵的计算即可求出所有的$\omega$的值，即为最终的结果。<br>以上为一般为常见的线性规划的求解过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-线性模型&quot;&gt;&lt;a href=&quot;#1-线性模型&quot; class=&quot;headerlink&quot; title=&quot;1.线性模型&quot;&gt;&lt;/a&gt;1.线性模型&lt;/h2&gt;&lt;p&gt;给定n个属性描述属性的特征 &lt;script type=&quot;math/tex&quot;&gt;x = (x_1,x_2,x_3,...,x_n)&lt;/script&gt;,其中$x_i$表示第$i$个特征，线性模型试图通过一个特征值的线性组合来表示最终的模型，即最终的预测函数:&lt;/p&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f(x) = \omega_{1}x_{1} + \omega_{2}x_{2} + ... + \omega_{n}x_{n} + b  \tag{1-1}&lt;/script&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ml" scheme="http://yoursite.com/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】130比赛</title>
    <link href="http://yoursite.com/2019/10/23/%E3%80%90leetcode%E3%80%91130%E5%91%A8%E6%AF%94%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/10/23/【leetcode】130周比赛/</id>
    <published>2019-10-23T05:22:43.809Z</published>
    <updated>2019-10-23T16:15:14.336Z</updated>
    
    <content type="html"><![CDATA[<p>上午忙着在家带小孩，没有参加比赛，周一上班抽时间将四道题目全部做一遍，总的来说四道题目都不是特别难，但是两道hard级别的题目需要耐心去解答，许多细节需要注意。</p><h1 id="130周周赛"><a href="#130周周赛" class="headerlink" title="130周周赛"></a>130周周赛</h1><h2 id="大样本统计"><a href="#大样本统计" class="headerlink" title="大样本统计"></a>大样本统计</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>我们对<code>0</code>到 <code>255</code> 之间的整数进行采样，并将结果存储在数组<code>count</code> 中,<code>count[k]</code>就是整数<code>k</code>的采样个数。我们以 浮点数 数组的形式，分别返回样本的最小值、最大值、平均值、中位数和众数。其中，众数是保证唯一的。<br>网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><a id="more"></a><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/statistics-from-a-large-sample/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/statistics-from-a-large-sample/</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目本身不太难,关键节点在于理解采样数据，本题中采样范围为<code>0~255</code>，每个采样的次数存储在<code>count[i]</code>数据中，需要掌握<code>count</code>数组即可。</p><ol><li>最小值：满足<code>count[i]</code>大于<code>0</code>的最小i值</li><li>最大值：满足<code>count[i]</code>大于<code>0</code>的最大i值</li><li>平均值：计算出采样的总和除以采样的次数即可</li><li>中位数：如果采样次数为偶数，在采样值排名靠中间的两个值取平均和即可，如果采样次数为奇数，则去排名中间的数即可。</li><li>众数:找到<code>count[i]</code>的最大值，取i即可。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findNth</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; count,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count.size(); ++i)&#123;</span><br><span class="line">            n = n - count[i];</span><br><span class="line">            <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; sampleStats(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; count) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> n = count.size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> samples = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> minNum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> maxNum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> average = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> medium = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> mode = <span class="number">0.0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            sum += count[i]*i;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; maxCnt)&#123;</span><br><span class="line">                maxCnt = count[i];</span><br><span class="line">                mode = i;</span><br><span class="line">            &#125;</span><br><span class="line">            samples += count[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                minNum = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>;i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                maxNum = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span>(samples%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> l1 = findNth(count,samples/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> l2 = findNth(count,samples/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            medium = <span class="keyword">double</span>(l1+l2)/<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> l1 = findNth(count,samples/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            medium = <span class="keyword">double</span>(l1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*min*/</span></span><br><span class="line">        ans.push_back(minNum);</span><br><span class="line">        ans.push_back(maxNum);</span><br><span class="line">        ans.push_back(<span class="keyword">double</span>(sum)/samples);</span><br><span class="line">        ans.push_back(medium);</span><br><span class="line">        ans.push_back(mode);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-拼车"><a href="#2-拼车" class="headerlink" title="2.拼车"></a>2.拼车</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>顺风车司机按照乘客上车的顺序，能否满足所有的乘客乘车需求</p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/car-pooling/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/car-pooling/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>初有<code>capacity</code> 个空座位可以用来载客。能否满足<code>trips</code>数组要求。<br>这儿有一份行程计划表 <code>trips[][]</code>，其中 <code>trips[i] = [num_passengers, start_location, end_location]</code>包含了你的第 <code>i</code>次行程信息：</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>我们假设在一个直线上，车辆在<code>start_location</code>处会增加<code>num_passengers</code>个乘客，在<code>end_location</code>处会减少num_passengers个乘客，乘客下车肯定会满足乘车要求，我们只需要满足车辆在<code>start_location</code>处有大于等于<code>num_passengers</code>个空位即可。我们用rest来标识车辆在x处有多少个空座位，按照乘车距离进行排序，如果<code>rest</code>小于0则表示车辆座位不足，此时则不能满足要求。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">carPooling</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; trips, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; carry;</span><br><span class="line">        <span class="keyword">int</span> n = trips.size();</span><br><span class="line">        <span class="keyword">int</span> rest = capacity;</span><br><span class="line">        </span><br><span class="line">        sort(trips.begin(),trips.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            carry[trips[i][<span class="number">1</span>]] -= trips[i][<span class="number">0</span>];</span><br><span class="line">            carry[trips[i][<span class="number">2</span>]] += trips[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> t: carry)&#123;</span><br><span class="line">            rest = rest + t.second;</span><br><span class="line">            <span class="keyword">if</span>(rest &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上午忙着在家带小孩，没有参加比赛，周一上班抽时间将四道题目全部做一遍，总的来说四道题目都不是特别难，但是两道hard级别的题目需要耐心去解答，许多细节需要注意。&lt;/p&gt;&lt;h1 id=&quot;130周周赛&quot;&gt;&lt;a href=&quot;#130周周赛&quot; class=&quot;headerlink&quot; title=&quot;130周周赛&quot;&gt;&lt;/a&gt;130周周赛&lt;/h1&gt;&lt;h2 id=&quot;大样本统计&quot;&gt;&lt;a href=&quot;#大样本统计&quot; class=&quot;headerlink&quot; title=&quot;大样本统计&quot;&gt;&lt;/a&gt;大样本统计&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;我们对&lt;code&gt;0&lt;/code&gt;到 &lt;code&gt;255&lt;/code&gt; 之间的整数进行采样，并将结果存储在数组&lt;code&gt;count&lt;/code&gt; 中,&lt;code&gt;count[k]&lt;/code&gt;就是整数&lt;code&gt;k&lt;/code&gt;的采样个数。我们以 浮点数 数组的形式，分别返回样本的最小值、最大值、平均值、中位数和众数。其中，众数是保证唯一的。&lt;br&gt;网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】159比赛</title>
    <link href="http://yoursite.com/2019/10/23/%E3%80%90leetcode%E3%80%91159%E5%91%A8%E6%AF%94%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/10/23/【leetcode】159周比赛/</id>
    <published>2019-10-23T05:01:31.928Z</published>
    <updated>2019-10-23T16:15:56.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="159周比赛"><a href="#159周比赛" class="headerlink" title="159周比赛"></a>159周比赛</h1><p>今天时间太紧张了，时间根本不够用。两道题目的目标没有达成。</p><h2 id="5230-缀点成线"><a href="#5230-缀点成线" class="headerlink" title="5230. 缀点成线"></a>5230. 缀点成线</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在一个 XY 坐标系中有一些点，我们用数组<code>coordinates</code>来分别记录它们的坐标，其中<code>coordinates[i] = [x, y]</code>表示横坐标为<code>x</code>、纵坐标为<code>y</code>的点。</p><p>请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 <code>true</code>，否则请返回<code>false</code>。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coordinates = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">6</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coordinates = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> &lt;= coordinates.length &lt;= <span class="number">1000</span></span><br><span class="line">coordinates[i].length == <span class="number">2</span></span><br><span class="line"><span class="number">-10</span>^<span class="number">4</span> &lt;= coordinates[i][<span class="number">0</span>], coordinates[i][<span class="number">1</span>] &lt;= <span class="number">10</span>^<span class="number">4</span></span><br><span class="line">coordinates 中不含重复的点</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/check-if-it-is-a-straight-line" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-if-it-is-a-straight-line</a>                </p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 给定点的集合是否在一条直线上</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>依次比较相邻三个点构成的斜率是否相等，因为相邻的两个点有公共的交点，如果斜率相等，则认为其在一条直线上。</li><li>由于可能存在斜率无限大的情况，这时我们避免用除法，斜率用<code>(x,y)</code>表示，如果两个斜率相等则可以用等式判断<code>x1y2 == x2y1</code>.</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkStraightLine</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; coordinates)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = coordinates.size();         </span><br><span class="line">        <span class="keyword">int</span> x = coordinates[<span class="number">1</span>][<span class="number">0</span>] - coordinates[<span class="number">0</span>][<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">int</span> y = coordinates[<span class="number">1</span>][<span class="number">1</span>] - coordinates[<span class="number">0</span>][<span class="number">1</span>]; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = coordinates[i][<span class="number">0</span>] - coordinates[i<span class="number">-1</span>][<span class="number">0</span>]; </span><br><span class="line">            <span class="keyword">int</span> y1 = coordinates[i][<span class="number">1</span>] - coordinates[i<span class="number">-1</span>][<span class="number">1</span>]; </span><br><span class="line">            <span class="keyword">if</span>(y1*x != x1*y)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5231-删除子文件夹"><a href="#5231-删除子文件夹" class="headerlink" title="5231. 删除子文件夹"></a>5231. 删除子文件夹</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>你是一位系统管理员，手里有一份文件夹列表<code>folder</code>，你的任务是要删除该列表中的所有 子文件夹，并以 任意顺序 返回剩下的文件夹。</p><p>我们这样定义「子文件夹」：<br>如果文件夹<code>folder[i]</code>位于另一个文件夹 <code>folder[j]</code>下，那么<code>folder[i]</code>就是 <code>folder[j]</code> 的子文件夹。<br>文件夹的「路径」是由一个或多个按以下格式串联形成的字符串：<br>/ 后跟一个或者多个小写英文字母。<br>例如，<code>/leetcode</code>和<code>/leetcode/problems</code>都是有效的路径，而空字符串和 / 不是。</p><p>示例 1：<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：folder = [<span class="comment">"/a"</span>,<span class="comment">"/a/b"</span>,<span class="comment">"/c/d"</span>,<span class="comment">"/c/d/e"</span>,<span class="comment">"/c/f"</span>]</span><br><span class="line">输出：[<span class="comment">"/a"</span>,<span class="comment">"/c/d"</span>,<span class="comment">"/c/f"</span>]</span><br><span class="line">解释：<span class="comment">"/a/b/"</span> 是 <span class="comment">"/a"</span> 的子文件夹，而 <span class="comment">"/c/d/e"</span> 是 <span class="comment">"/c/d"</span> 的子文件夹。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：folder = [<span class="comment">"/a"</span>,<span class="comment">"/a/b/c"</span>,<span class="comment">"/a/b/d"</span>]</span><br><span class="line">输出：[<span class="comment">"/a"</span>]</span><br><span class="line">解释：文件夹 <span class="comment">"/a/b/c"</span> 和 <span class="comment">"/a/b/d/"</span> 都会被删除，因为它们都是 <span class="comment">"/a"</span> 的子文件夹。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：folder = [<span class="comment">"/a/b/c"</span>,<span class="comment">"/a/b/d"</span>,<span class="comment">"/a/b/ca"</span>]</span><br><span class="line">输出：[<span class="comment">"/a/b/c"</span>,<span class="comment">"/a/b/ca"</span>,<span class="comment">"/a/b/d"</span>]</span><br></pre></td></tr></table></figure></p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 删除子文件夹</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>本题首先看到题目可以用trie树来解决，仔细分析一下，题目中明确说明了全部为小写字母和’\’,也比平常的trie树多了一个字符而已；</li><li>将文件夹名称按照字典序进行排序，这样保证根文件夹最先插入到字典树中，这样我们就可以保证子文件在进行查询时，能够判断是否存在父文件夹。</li><li>利用trie的特性，标记每个文件夹的结束。当进行插入操作时，发现当前遇到的前缀中存在文件夹时，则这时认为当前的文件为子文件，需要进行删除。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">cstruct TrieNode&#123;</span><br><span class="line">    <span class="keyword">bool</span> isfolder;</span><br><span class="line">    TrieNode * next[<span class="number">27</span>];</span><br><span class="line">    TrieNode()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;isfolder = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">27</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;next[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertTrie</span><span class="params">(TrieNode * root,<span class="built_in">string</span> word)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TrieNode * node = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : word)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'/'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[<span class="number">26</span>])&#123;</span><br><span class="line">                node-&gt;next[<span class="number">26</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[<span class="number">26</span>]; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[c-<span class="string">'a'</span>])&#123;</span><br><span class="line">                node-&gt;next[c-<span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[c-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    node-&gt;isfolder = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSubFolder</span><span class="params">(TrieNode * root,<span class="built_in">string</span> folder)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TrieNode * node = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; folder.size(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(folder[i] == <span class="string">'/'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[<span class="number">26</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[<span class="number">26</span>]; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[folder[i]-<span class="string">'a'</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[folder[i]-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;isfolder &amp;&amp; folder[i+<span class="number">1</span>] == <span class="string">'/'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; removeSubfolders(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; folder) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        sort(folder.begin(),folder.end());</span><br><span class="line">        </span><br><span class="line">        TrieNode * root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> s : folder)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!isSubFolder(root,s))&#123;</span><br><span class="line">                res.push_back(s);</span><br><span class="line">                insertTrie(root,s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5232-替换子串得到平衡字符串"><a href="#5232-替换子串得到平衡字符串" class="headerlink" title="5232. 替换子串得到平衡字符串"></a>5232. 替换子串得到平衡字符串</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>有一个只含有 <code>&#39;Q&#39;, &#39;W&#39;, &#39;E&#39;, &#39;R&#39;</code>四种字符，且长度为 n 的字符串。<br>假如在该字符串中，这四个字符都恰好出现 n/4 次，那么它就是一个「平衡字符串」。给你一个这样的字符串 s，请通过「替换子串」的方式，使原字符串 s 变成一个「平衡字符串」。你可以用和「待替换子串」长度相同的 任何 其他字符串来完成替换。<br>请返回待替换子串的最小可能长度。如果原字符串自身就是一个平衡字符串，则返回 0。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QWER"</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：s 已经是平衡的了。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QQWE"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：我们需要把一个 'Q' 替换成 'R'，这样得到的 <span class="string">"RQWE"</span> (或 <span class="string">"QRWE"</span>) 是平衡的。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QQQW"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：我们可以把前面的 <span class="string">"QQ"</span> 替换成 <span class="string">"ER"</span>。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QQQQ"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：我们可以替换后 <span class="number">3</span> 个 'Q'，使 s = <span class="string">"QWER"</span>。</span><br></pre></td></tr></table></figure></p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/replace-the-substring-for-balanced-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/replace-the-substring-for-balanced-string</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>这个题目非常不错且非常典型的滑动窗口.</li><li>我们通过滑动窗口，保证在窗口外部的字符串统计数字都小于平均数，通过双指针算法进行逐步扩展即可。</li></ol></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">balancedString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> aver = n/<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> res = n;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            cnt[s[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> balance = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : cnt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c.second &gt; aver)&#123;</span><br><span class="line">                balance = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(balance)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(r = <span class="number">0</span> ; r &lt; n; ++r)&#123;</span><br><span class="line">            cnt[s[r]]--;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(l &lt; n &amp;&amp; l &lt;= r &amp;&amp;</span><br><span class="line">                   cnt[<span class="string">'Q'</span>] &lt;= aver&amp;&amp; \</span><br><span class="line">                   cnt[<span class="string">'W'</span>] &lt;= aver&amp;&amp; \</span><br><span class="line">                   cnt[<span class="string">'E'</span>] &lt;= aver&amp;&amp; \</span><br><span class="line">                   cnt[<span class="string">'R'</span>] &lt;= aver)&#123;</span><br><span class="line">                   res = min(res,r-l+<span class="number">1</span>);</span><br><span class="line">                   cnt[s[l]]++;</span><br><span class="line">                   l++;           </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5233-规划兼职工作"><a href="#5233-规划兼职工作" class="headerlink" title="5233. 规划兼职工作"></a>5233. 规划兼职工作</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>你打算利用空闲时间来做兼职工作赚些零花钱。</p><p>这里有 n 份兼职工作，每份工作预计从 <code>startTime[i]</code> 开始到 <code>endTime[i]</code>结束，报酬为 <code>profit[i]</code>。</p><p>给你一份兼职工作表，包含开始时间<code>startTime</code>，结束时间<code>endTime</code>和预计报酬 <code>profit</code>三个数组，请你计算并返回可以获得的最大报酬。</p><p>注意，时间上出现重叠的 2 份工作不能同时进行。</p><p>如果你选择的工作在时间 X 结束，那么你可以立刻进行在时间 X 开始的下一份工作。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：startTime = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>], endTime = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], profit = [<span class="number">50</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">70</span>]</span><br><span class="line">输出：<span class="number">120</span></span><br><span class="line">解释：</span><br><span class="line">我们选出第 <span class="number">1</span> 份和第 <span class="number">4</span> 份工作， </span><br><span class="line">时间范围是 [<span class="number">1</span><span class="number">-3</span>]+[<span class="number">3</span><span class="number">-6</span>]，共获得报酬 <span class="number">120</span> = <span class="number">50</span> + <span class="number">70</span>。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：startTime = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>], endTime = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>], profit = [<span class="number">20</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">70</span>,<span class="number">60</span>]</span><br><span class="line">输出：<span class="number">150</span></span><br><span class="line">解释：</span><br><span class="line">我们选择第 <span class="number">1</span>，<span class="number">4</span>，<span class="number">5</span> 份工作。 </span><br><span class="line">共获得报酬 <span class="number">150</span> = <span class="number">20</span> + <span class="number">70</span> + <span class="number">60</span>。</span><br></pre></td></tr></table></figure><p>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：startTime = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], endTime = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], profit = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-profit-in-job-scheduling" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-profit-in-job-scheduling</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>按照开始时间的大小进行排序,开始时间大的在前面,并且收益高的工作排序在前；</li><li>设置动态规划递推公式<code>dp[t]</code>,代表从时间<code>t</code>开始工作能够取得的最大收益.</li><li>递推公式如下,对于工作<code>i</code>花费的时间为<code>job[i]</code>,取得收益为<code>profit[i]</code>,则递推公式为:<code>dp[t] = max(dp[t],dp[t-job[i]] + profit[i])</code>.</li><li>可以利用TreeMap的特性，进行二分查找，总的时间复杂度为<code>O(nlgn)</code>.</li></ol></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">2</span>] &gt; b[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jobScheduling</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; startTime, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; endTime, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; profit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = startTime.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; work(n);</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; dp;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            work[i].push_back(startTime[i]);</span><br><span class="line">            work[i].push_back(endTime[i]);</span><br><span class="line">            work[i].push_back(profit[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*start time sort*/</span></span><br><span class="line">        sort(work.begin(),work.end(),cmp);</span><br><span class="line">        <span class="comment">/*dp*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">auto</span> it1 = dp.lower_bound(work[i][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">auto</span> it2 = dp.lower_bound(work[i][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(it1 != dp.end())&#123;</span><br><span class="line">                dp[work[i][<span class="number">0</span>]] = max(it1-&gt;second,work[i][<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(it2 != dp.end())&#123;</span><br><span class="line">                dp[work[i][<span class="number">0</span>]] = max(dp[work[i][<span class="number">0</span>]],it2-&gt;second+work[i][<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[work[i][<span class="number">0</span>]] = max(work[i][<span class="number">2</span>],dp[work[i][<span class="number">0</span>]]);</span><br><span class="line">            res = max(res,dp[work[i][<span class="number">0</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外附上lee215的解答，需要仔细的消化和吸收.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jobScheduling</span><span class="params">(self, startTime, endTime, profit)</span>:</span></span><br><span class="line">        jobs = sorted(zip(startTime, endTime, profit), key=<span class="keyword">lambda</span> v: v[<span class="number">1</span>])</span><br><span class="line">        dp = [[<span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">for</span> s, e, p <span class="keyword">in</span> jobs:</span><br><span class="line">            i = bisect.bisect(dp, [s + <span class="number">1</span>]) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dp[i][<span class="number">1</span>] + p &gt; dp[<span class="number">-1</span>][<span class="number">1</span>]:</span><br><span class="line">                dp.append([e, dp[i][<span class="number">1</span>] + p])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;159周比赛&quot;&gt;&lt;a href=&quot;#159周比赛&quot; class=&quot;headerlink&quot; title=&quot;159周比赛&quot;&gt;&lt;/a&gt;159周比赛&lt;/h1&gt;&lt;p&gt;今天时间太紧张了，时间根本不够用。两道题目的目标没有达成。&lt;/p&gt;&lt;h2 id=&quot;5230-缀点成线&quot;&gt;&lt;a href=&quot;#5230-缀点成线&quot; class=&quot;headerlink&quot; title=&quot;5230. 缀点成线&quot;&gt;&lt;/a&gt;5230. 缀点成线&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;在一个 XY 坐标系中有一些点，我们用数组&lt;code&gt;coordinates&lt;/code&gt;来分别记录它们的坐标，其中&lt;code&gt;coordinates[i] = [x, y]&lt;/code&gt;表示横坐标为&lt;code&gt;x&lt;/code&gt;、纵坐标为&lt;code&gt;y&lt;/code&gt;的点。&lt;/p&gt;&lt;p&gt;请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 &lt;code&gt;true&lt;/code&gt;，否则请返回&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
