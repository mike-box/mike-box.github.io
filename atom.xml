<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blow in the wind</title>
  
  <subtitle>just code for fun</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-12T16:27:24.410Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mike meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Leetcode】 第184周比赛</title>
    <link href="http://yoursite.com/2020/04/13/149/"/>
    <id>http://yoursite.com/2020/04/13/149/</id>
    <published>2020-04-12T16:27:19.040Z</published>
    <updated>2020-04-12T16:27:24.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="184周比赛"><a href="#184周比赛" class="headerlink" title="184周比赛"></a>184周比赛</h1><p>感觉题目越来越水了啊，质量不够高。</p><h2 id="5380-数组中的字符串匹配"><a href="#5380-数组中的字符串匹配" class="headerlink" title="5380. 数组中的字符串匹配"></a>5380. 数组中的字符串匹配</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串数组 <code>words</code> ，数组中的每个字符串都可以看作是一个单词。请你按 任意 顺序返回<code>words</code>中是其他单词的子字符串的所有单词。</p><p>如果你可以删除<code>words[j]</code> 最左侧和/或最右侧的若干字符得到 <code>word[i]</code> ，那么字符串 <code>words[i]</code>就是 <code>words[j]</code>的一个子字符串。</p><a id="more"></a><p>示例 1：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [<span class="string">"mass"</span>,<span class="string">"as"</span>,<span class="string">"hero"</span>,<span class="string">"superhero"</span>]</span><br><span class="line">输出：[<span class="string">"as"</span>,<span class="string">"hero"</span>]</span><br><span class="line">解释：<span class="string">"as"</span> 是 <span class="string">"mass"</span> 的子字符串，<span class="string">"hero"</span> 是 <span class="string">"superhero"</span> 的子字符串。</span><br><span class="line">[<span class="string">"hero"</span>,<span class="string">"as"</span>] 也是有效的答案。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [<span class="string">"leetcode"</span>,<span class="string">"et"</span>,<span class="string">"code"</span>]</span><br><span class="line">输出：[<span class="string">"et"</span>,<span class="string">"code"</span>]</span><br><span class="line">解释：<span class="string">"et"</span> 和 <span class="string">"code"</span> 都是 <span class="string">"leetcode"</span> 的子字符串。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [<span class="string">"blue"</span>,<span class="string">"green"</span>,<span class="string">"bu"</span>]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= words.length &lt;= 100</code></li><li><code>1 &lt;= words[i].length &lt;= 30</code></li><li><code>words[i]</code>仅包含小写英文字母。</li><li>题目数据 保证 每个 <code>words[i]</code> 都是独一无二的。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/string-matching-in-an-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/string-matching-in-an-array</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力匹配</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>本身数据量非常小，我们实际只需暴力匹配即可。</li><li>对字符串按照长度长短进行排序，然后每次直接用<code>find</code>进行暴力匹配，其实find的本质也是字符串字串匹配的问题。</li><li>本质是非常简单的解法。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">string</span> &amp; a,<span class="built_in">string</span> &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.size() &gt; b.size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; stringMatching(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; words) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = words.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        sort(words.begin(),words.end(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i &amp;&amp; words[j].size() &gt; words[i].size(); ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(words[j].find(words[i]) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">                    res.push_back(words[i]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5381-查询带键的排列"><a href="#5381-查询带键的排列" class="headerlink" title="5381. 查询带键的排列"></a>5381. 查询带键的排列</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个待查数组<code>queries</code>，数组中的元素为 <code>1</code>到<code>m</code> 之间的正整数。 请你根据以下规则处理所有待查项 <code>queries[i]</code>（从 <code>i=0</code>到 <code>i=queries.length-1</code>）：</p><ul><li>一开始，排列 <code>P=[1,2,3,...,m]</code>。</li><li>对于当前的 i ，请你找出待查项 <code>queries[i]</code>在排列 P 中的位置（下标从 0 开始），然后将其从原位置移动到排列<code>P</code>的起始位置（即下标为 0 处）。注意， queries[i] 在 P 中的位置就是 <code>queries[i]</code>的查询结果。</li></ul><p>请你以数组形式返回待查数组 <code>queries</code>的查询结果。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：queries = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>], m = <span class="number">5</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>] </span><br><span class="line">解释：待查数组 queries 处理如下：</span><br><span class="line">对于 i=<span class="number">0</span>: queries[i]=<span class="number">3</span>, P=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="number">3</span> 在 P 中的位置是 <span class="number">2</span>，接着我们把 <span class="number">3</span> 移动到 P 的起始位置，得到 P=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>] 。</span><br><span class="line">对于 i=<span class="number">1</span>: queries[i]=<span class="number">1</span>, P=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="number">1</span> 在 P 中的位置是 <span class="number">1</span>，接着我们把 <span class="number">1</span> 移动到 P 的起始位置，得到 P=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>] 。 </span><br><span class="line">对于 i=<span class="number">2</span>: queries[i]=<span class="number">2</span>, P=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="number">2</span> 在 P 中的位置是 <span class="number">2</span>，接着我们把 <span class="number">2</span> 移动到 P 的起始位置，得到 P=[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] 。</span><br><span class="line">对于 i=<span class="number">3</span>: queries[i]=<span class="number">1</span>, P=[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="number">1</span> 在 P 中的位置是 <span class="number">1</span>，接着我们把 <span class="number">1</span> 移动到 P 的起始位置，得到 P=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] 。 </span><br><span class="line">因此，返回的结果数组为 [<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>] 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：queries = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>], m = <span class="number">4</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：queries = [<span class="number">7</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>], m = <span class="number">8</span></span><br><span class="line">输出：[<span class="number">6</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= m &lt;= 10^3</code></li><li><code>1 &lt;= queries.length &lt;= m</code></li><li><code>1 &lt;= queries[i] &lt;= m</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/queries-on-a-permutation-with-key" target="_blank" rel="noopener">https://leetcode-cn.com/problems/queries-on-a-permutation-with-key</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>题目中给的数据量只有<code>1o^3</code>的数量级，怎么做都可以出来。</li><li>题目中采用的移位的办法，我们记录每个数在序列中的排序位置。每次需要移动时，我们将所有小于该位置的数的位置全部向后移动一位，然后将数本身再移动到第0位处。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; processQueries(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; queries, <span class="keyword">int</span> m) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = queries.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; order(m,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) order[i] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            res.push_back(order[queries[i]<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(order[j] &lt; order[queries[i]<span class="number">-1</span>]) order[j]++;</span><br><span class="line">            &#125;</span><br><span class="line">            order[queries[i]<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1410-HTML-实体解析器"><a href="#1410-HTML-实体解析器" class="headerlink" title="1410. HTML 实体解析器"></a>1410. HTML 实体解析器</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>「HTML 实体解析器」 是一种特殊的解析器，它将 HTML 代码作为输入，并用字符本身替换掉所有这些特殊的字符实体。</p><p><code>HTML</code>里这些特殊字符和它们对应的字符实体包括：</p><ul><li>双引号：字符实体为 &quot; ，对应的字符是 “ 。</li><li>单引号：字符实体为 &apos; ，对应的字符是 ‘ 。</li><li>与符号：字符实体为 &amp; ，对应对的字符是 &amp; 。</li><li>大于号：字符实体为 &gt; ，对应的字符是 &gt; 。</li><li>小于号：字符实体为 &lt; ，对应的字符是 &lt; 。</li><li>斜线号：字符实体为 &frasl; ，对应的字符是 / 。</li></ul><p>给你输入字符串<code>text</code> ，请你实现一个 <code>HTML</code> 实体解析器，返回解析器解析后的结果。</p><p>示例 1：<br><figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text = "&amp;amp; <span class="keyword">is</span> an HTML entity but &amp;ambassador; <span class="keyword">is</span> <span class="keyword">not</span>."</span><br><span class="line">输出："&amp; <span class="keyword">is</span> an HTML entity but &amp;ambassador; <span class="keyword">is</span> <span class="keyword">not</span>."</span><br><span class="line">解释：解析器把字符实体 &amp;amp; 用 &amp; 替换</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：text = <span class="string">"and I quote: &amp;quot;...&amp;quot;"</span></span><br><span class="line">输出：<span class="string">"and I quote: <span class="subst">\"</span>...<span class="subst">\"</span>"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">text</span> = <span class="string">"Stay home! Practice on Leetcode :)"</span></span><br><span class="line">输出：<span class="string">"Stay home! Practice on Leetcode :)"</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">text</span> = <span class="string">"x &amp;gt; y &amp;amp;&amp;amp; x &amp;lt; y is always false"</span></span><br><span class="line">输出：<span class="string">"x &gt; y &amp;&amp; x &lt; y is always false"</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">text</span> = <span class="string">"leetcode.com&amp;frasl;problemset&amp;frasl;all"</span></span><br><span class="line">输出：<span class="string">"leetcode.com/problemset/all"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= text.length &lt;= 10^5</code></li><li>字符串可能包含<code>256</code>个<code>ASCII</code> 字符中的任意字符。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/html-entity-parser" target="_blank" rel="noopener">https://leetcode-cn.com/problems/html-entity-parser</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接暴力匹配</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>数据量非常小，基本上就是直接暴力匹配。</li><li>当然看了别人的解答，每次匹配连续的<code>&amp;</code>与<code>;</code>，将之间的字符串进行查找和替换。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">entityParser</span><span class="params">(<span class="built_in">string</span> text)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">int</span> n = text.size();</span><br><span class="line">        <span class="built_in">string</span> keys[<span class="number">6</span>] = &#123;<span class="string">"&amp;quot;"</span>,<span class="string">"&amp;apos;"</span>,<span class="string">"&amp;amp;"</span>,<span class="string">"&amp;gt;"</span>,<span class="string">"&amp;lt;"</span>,<span class="string">"&amp;frasl;"</span>&#125;;</span><br><span class="line">        <span class="keyword">char</span> rep[<span class="number">6</span>] = &#123;<span class="string">'"'</span>,<span class="string">'\''</span>,<span class="string">'&amp;'</span>,<span class="string">'&gt;'</span>,<span class="string">'&lt;'</span>,<span class="string">'/'</span>&#125;;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; )&#123;</span><br><span class="line">            <span class="keyword">if</span>(text[i] == <span class="string">'&amp;'</span>)&#123;</span><br><span class="line">                <span class="keyword">bool</span> isMatch = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(n-i &gt;= keys[j].size() &amp;&amp; text.substr(i,keys[j].size()) == keys[j])&#123;</span><br><span class="line">                        res.push_back(rep[j]);</span><br><span class="line">                        i += keys[j].size();</span><br><span class="line">                        isMatch = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!isMatch) res.push_back(text[i++]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.push_back(text[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">                       </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5383-给-N-x-3-网格图涂色的方案数"><a href="#5383-给-N-x-3-网格图涂色的方案数" class="headerlink" title="5383. 给 N x 3 网格图涂色的方案数"></a>5383. 给 N x 3 网格图涂色的方案数</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>你有一个 <code>n x 3</code>的网格图 <code>grid</code> ，你需要用 红，黄，绿 三种颜色之一给每一个格子上色，且确保相邻格子颜色不同（也就是有相同水平边或者垂直边的格子颜色不同）。</p><p>给你网格图的行数 n 。</p><p>请你返回给<code>grid</code>涂色的方案数。由于答案可能会非常大，请你返回答案对<code>10^9 + 7</code> 取余的结果。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="number">12</span></span><br><span class="line">解释：总共有 <span class="number">12</span> 种可行的方法：</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">54</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">246</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span></span><br><span class="line">输出：<span class="number">106494</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5000</span></span><br><span class="line">输出：<span class="number">30228214</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == grid.length</code></li><li><code>grid[i].length == 3</code></li><li><code>1 &lt;= n &lt;= 5000</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-ways-to-paint-n-x-3-grid" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-ways-to-paint-n-x-3-grid</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  动态规划</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>本题基本一眼看到就是动态规划，状态压缩的dp。</li><li>我们定义符合行要求的放置的颜色组合一共有12种，而第<code>i</code>行的可以放置的颜色也仅仅与第<code>i-1</code>行的颜色有关，采用动态规划。</li><li>记录<code>dp[i-1]</code>的每种组合的方案数，<code>dp[i]</code>在这12种组合方案中进行遍历，同时记录符合条件的组合方案数。</li></ol></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> dp1[<span class="number">12</span>];</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> dp2[<span class="number">12</span>];</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; next(<span class="number">12</span>);</span><br><span class="line">        <span class="built_in">string</span> state[<span class="number">12</span>] = &#123;<span class="string">"123"</span>,<span class="string">"121"</span>,<span class="string">"131"</span>,<span class="string">"132"</span>, \</span><br><span class="line">                            <span class="string">"212"</span>,<span class="string">"213"</span>,<span class="string">"232"</span>,<span class="string">"231"</span>, \</span><br><span class="line">                            <span class="string">"313"</span>,<span class="string">"312"</span>,<span class="string">"321"</span>,<span class="string">"323"</span> &#125;;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; dict;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) dict[state[i]] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> s1 = state[i][<span class="number">0</span>] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">int</span> s2 = state[i][<span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">int</span> s3 = state[i][<span class="number">2</span>] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l1 = <span class="number">1</span>; l1 &lt;= <span class="number">3</span>; ++l1)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l2 = <span class="number">1</span>; l2 &lt;= <span class="number">3</span>; ++l2)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> l3 = <span class="number">1</span>; l3 &lt;= <span class="number">3</span>; ++l3)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(l1 == l2 || l2 == l3) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">if</span>(l1 == s1 || l2 == s2 || l3 == s3) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="built_in">string</span> x = to_string(l1) + to_string(l2) + to_string(l3);</span><br><span class="line">                        <span class="keyword">int</span> id = dict[x];</span><br><span class="line">                        next[i].push_back(id);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(dp1,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp1));</span><br><span class="line">        <span class="built_in">memset</span>(dp2,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp2));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i) dp1[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(dp2,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp2));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp1[j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; next[j].size(); ++k) dp2[next[j][k]] = (dp2[next[j][k]] + dp1[j])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; ++j) dp1[j] = dp2[j];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i)&#123;</span><br><span class="line">            res = (res + dp1[i])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;184周比赛&quot;&gt;&lt;a href=&quot;#184周比赛&quot; class=&quot;headerlink&quot; title=&quot;184周比赛&quot;&gt;&lt;/a&gt;184周比赛&lt;/h1&gt;&lt;p&gt;感觉题目越来越水了啊，质量不够高。&lt;/p&gt;&lt;h2 id=&quot;5380-数组中的字符串匹配&quot;&gt;&lt;a href=&quot;#5380-数组中的字符串匹配&quot; class=&quot;headerlink&quot; title=&quot;5380. 数组中的字符串匹配&quot;&gt;&lt;/a&gt;5380. 数组中的字符串匹配&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个字符串数组 &lt;code&gt;words&lt;/code&gt; ，数组中的每个字符串都可以看作是一个单词。请你按 任意 顺序返回&lt;code&gt;words&lt;/code&gt;中是其他单词的子字符串的所有单词。&lt;/p&gt;&lt;p&gt;如果你可以删除&lt;code&gt;words[j]&lt;/code&gt; 最左侧和/或最右侧的若干字符得到 &lt;code&gt;word[i]&lt;/code&gt; ，那么字符串 &lt;code&gt;words[i]&lt;/code&gt;就是 &lt;code&gt;words[j]&lt;/code&gt;的一个子字符串。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="http://yoursite.com/2020/04/10/148/"/>
    <id>http://yoursite.com/2020/04/10/148/</id>
    <published>2020-04-10T04:27:14.175Z</published>
    <updated>2020-04-14T05:22:35.195Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串算法"><a href="#字符串算法" class="headerlink" title="字符串算法"></a>字符串算法</h3><p>字符串作为一个非常重要的应用，。对所有字符串算法的总结，包括字符串的排序与字符串的匹配，在实际的程序中是非常非常重要的两块应用，其中的算法又非常的复杂。光把这几个研究透就非常需要耗费精力和时间。</p><h4 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h4><h5 id="count-index"><a href="#count-index" class="headerlink" title="count index"></a><code>count index</code></h5><p><code>count index</code>作为一种快速的排序算法，可以在O(n+m)的时间复杂度内即可完成字符串的排序。本质是基数排序，实际应用中这个排序算法效率非常高，基本上可以在线性时间内完成对字符串的排序。空间复杂度为O(m+n).<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">countIndex</span><span class="params">(<span class="keyword">char</span> [] a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> [] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">257</span>];</span><br><span class="line">    <span class="keyword">int</span> [] aux = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; str.length; ++i)&#123;</span><br><span class="line">        count[str[i]+<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i)&#123;</span><br><span class="line">        count[i+<span class="number">1</span>] += count[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)&#123;</span><br><span class="line">        aux[count[a[i]++]] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)&#123;</span><br><span class="line">        a[i] = aux[i];</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="LSD"><a href="#LSD" class="headerlink" title="LSD"></a><code>LSD</code></h4><p>基数排序的重要应用，按照字母的先后顺序进行排序，从后往前进行排列,这种算法只适合等长度得数据值，实际应用范围较窄。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] a, <span class="keyword">int</span> W)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> R = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    String[] aux = <span class="keyword">new</span> String[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = W<span class="number">-1</span>; d &gt;= <span class="number">0</span>; d--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[R+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            count[a[i].charAt(d) + <span class="number">1</span>]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; R; r++)</span><br><span class="line">            count[r+<span class="number">1</span>] += count[r];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            aux[count[a[i].charAt(d)]++] = a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            a[i] = aux[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="MSD"><a href="#MSD" class="headerlink" title="MSD"></a><code>MSD</code></h4><p>基数排序的重要应用，按照字母的先后顺序进行排序，从前往后进行排列。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    aux = <span class="keyword">new</span> String[a.length];</span><br><span class="line">    sort(a, aux, <span class="number">0</span>, a.length<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] a, String[] aux, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[R+<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; i++)</span><br><span class="line">        count[charAt(a[i], d) + <span class="number">2</span>]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; R+<span class="number">1</span>; r++)</span><br><span class="line">        count[r+<span class="number">1</span>] += count[r];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; i++)</span><br><span class="line">        aux[count[charAt(a[i], d) + <span class="number">1</span>]++] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt;= hi; i++)</span><br><span class="line">        a[i] = aux[i - lo];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; R; r++)</span><br><span class="line">        sort(a, aux, lo + count[r], lo + count[r+<span class="number">1</span>] - <span class="number">1</span>, d+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-way-quick-sort"><a href="#3-way-quick-sort" class="headerlink" title="3-way quick sort"></a><code>3-way quick sort</code></h4><p>这是类似于<code>quicksort</code>的基数排序方法，其实排序的速度非常快，需要经常应用的一个算法。每次读取字符串的第一个字符，并根据第一个字符的比较大小，对字符串数组分为三类，第一个字符小于<code>target</code>的字符串，第一个字符等于<code>target</code>的字符串，第一个字符大于于<code>target</code>的字符串，然后再依次对这三种分类递归进行下次排序划分。比如字符串数组如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bac</span></span><br><span class="line"><span class="keyword">aab</span></span><br><span class="line"><span class="keyword">cba</span></span><br><span class="line"><span class="keyword">aac</span></span><br><span class="line"><span class="keyword">bda</span></span><br></pre></td></tr></table></figure><br>第一次比较则划分，我们选去<code>b</code>作为关键字进行比较：</p><ul><li>第一类：首字符比<code>b</code>小<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">aab</span></span><br><span class="line"><span class="attribute">aac</span></span><br></pre></td></tr></table></figure></li><li>第二类：首字符与<code>b</code>相等<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bac</span></span><br><span class="line"><span class="keyword">bda</span></span><br></pre></td></tr></table></figure></li><li>第三类：首字符比<code>b</code>大<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cba</span></span><br></pre></td></tr></table></figure>然后再对这三类字符分别进行划分和排序，第一类字符串再从第1个字符开始比较和交换，第二类字符串从第2个字符开始比较和划分，第三类字符串从第1个字符串比较和划分。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] a)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>, <span class="number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> lt = lo, gt = hi;</span><br><span class="line">    <span class="keyword">int</span> v = charAt(a[lo], d);</span><br><span class="line">    <span class="keyword">int</span> i = lo + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= gt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = charAt(a[i], d);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; v) exch(a, lt++, i++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t &gt; v) exch(a, i, gt--);</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a, lo, lt<span class="number">-1</span>, d);</span><br><span class="line">    <span class="keyword">if</span> (v &gt;= <span class="number">0</span>) sort(a, lt, gt, d+<span class="number">1</span>);</span><br><span class="line">    sort(a, gt+<span class="number">1</span>, hi, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>suffix array</code><br>后缀数组排序算法，刚开始看到这个算法感觉像天书一样，不太晓得是什么意思，后来学了算法涉及课程之后，就知道后缀数组的大概的原理了，知道了大概的原理之后就对倍增的原理到底是怎么来的了解的多了，非常<code>clever</code>的一种算法，当然细节太过于繁琐。我把原理图贴在这里大概就晓得倍增到底是怎么一回事了。不过后缀数组得写法实在太难记了，我觉得还是知道原理就可以了，因为除了竞赛或者写论文外，很少会遇到这么难写的算法，就跟红黑树一样，大家都知道是一种二叉平衡树，但是说实话应该知道就可以了，大可不必花太多时间浪费在细节上。<br><img src="https://mike-box.github.io/images/148-2.png" alt="suffixarray"><br>后缀数组可以解决以下问题：</li></ol><ul><li>给定一个字符串，询问某两个后缀的最长公共前缀。</li><li>给定一个字符串，求最长重复子串，这两个子串可以重叠</li><li><p>给定一个字符串，求最长重复子串，这两个子串不能重叠</p></li><li><p>给定一个字符串，求至少出现k 次的最长重复子串，这k 个子串可以重叠</p></li><li><p>给定一个字符串，求不相同的子串的个数</p></li><li><p>给定一个字符串，求最长回文子串</p></li><li><p>给定一个字符串L，已知这个字符串是由某个字符串S 重复R 次而得到的，求R 的最大值</p></li><li><p>给定一个字符串，求重复次数最多的连续重复子</p></li><li><p>给定两个字符串A 和B，求最长公共子串。</p></li><li><p>给定两个字符串A 和B，求长度不小于k 的公共子串的个数（可以相同）</p></li><li><p>给定n 个字符串，求出现在不小于k 个字符串中的最长子串。</p></li><li><p>给定n 个字符串，求在每个字符串中至少出现两次且不重叠的最长子串</p></li><li><p>给定n 个字符串，求出现或反转后出现在每个字符串中的最长子串。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(x) ((x)/3+((x)%3==1?0:tb))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(x) ((x)&lt;tb?(x)*3+1:((x)-tb)*3+2)</span></span><br><span class="line"><span class="keyword">int</span> wa[maxn],wb[maxn],wv[maxn],ws[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c0</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+<span class="number">1</span>]==r[b+<span class="number">1</span>]&amp;&amp;r[a+<span class="number">2</span>]==r[b+<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c12</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">2</span>) <span class="keyword">return</span> r[a]&lt;r[b]||r[a]==r[b]&amp;&amp;c12(<span class="number">1</span>,r,a+<span class="number">1</span>,b+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> r[a]&lt;r[b]||r[a]==r[b]&amp;&amp;wv[a+<span class="number">1</span>]&lt;wv[b+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *a,<span class="keyword">int</span> *b,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=r[a[i]];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++) ws[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) ws[wv[i]]++;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++) ws[i]+=ws[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) b[--ws[wv[i]]]=a[i];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dc3</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,*rn=r+n,*san=sa+n,ta=<span class="number">0</span>,tb=(n+<span class="number">1</span>)/<span class="number">3</span>,tbc=<span class="number">0</span>,p;</span><br><span class="line">r[n]=r[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(i%<span class="number">3</span>!=<span class="number">0</span>) wa[tbc++]=i;</span><br><span class="line">sort(r+<span class="number">2</span>,wa,wb,tbc,m);</span><br><span class="line">sort(r+<span class="number">1</span>,wb,wa,tbc,m);</span><br><span class="line">sort(r,wa,wb,tbc,m);</span><br><span class="line"><span class="keyword">for</span>(p=<span class="number">1</span>,rn[F(wb[<span class="number">0</span>])]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;tbc;i++)</span><br><span class="line">rn[F(wb[i])]=c0(r,wb[i<span class="number">-1</span>],wb[i])?p<span class="number">-1</span>:p++;</span><br><span class="line"><span class="keyword">if</span>(p&lt;tbc) dc3(rn,san,tbc,p);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;tbc;i++) san[rn[i]]=i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;tbc;i++) <span class="keyword">if</span>(san[i]&lt;tb) wb[ta++]=san[i]*<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">1</span>) wb[ta++]=n<span class="number">-1</span>;</span><br><span class="line">sort(r,wb,wa,ta,m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;tbc;i++) wv[wb[i]=G(san[i])]=i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">0</span>,p=<span class="number">0</span>;i&lt;ta &amp;&amp; j&lt;tbc;p++)</span><br><span class="line">sa[p]=c12(wb[j]%<span class="number">3</span>,r,wa[i],wb[j])?wa[i++]:wb[j++];</span><br><span class="line"><span class="keyword">for</span>(;i&lt;ta;p++) sa[p]=wa[i++];</span><br><span class="line"><span class="keyword">for</span>(;j&lt;tbc;p++) sa[p]=wb[j++];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串搜索"><a href="#字符串搜索" class="headerlink" title="字符串搜索"></a>字符串搜索</h4><h5 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a><code>kmp</code></h5><p>题目中直接给的是<code>KMP</code>的<code>DFA</code>的解法，其实非常容易理解。也非常的好写，主要是涉及到匹配时的移位操作。强烈建议看看<code>Princeton</code>的老教授讲的<code>KMP</code>的原理，非常非常的简单。<br>确定状态机的构造原理很简单，当前状态接受当前字符，然后跳到下一个状态:</p><script type="math/tex; mode=display">output_{next} = Fuction(input_{curr})</script><p>比如我们定义初始匹配字符串的初始状态为<code>0</code>，需要接受匹配的字符串为<code>ababaab</code>,则我们需要定义<code>n+1</code>个状态,共可接受<code>n</code>个输入，初始的状态机如下：</p><script type="math/tex; mode=display">0\stackrel{a}{\longrightarrow}1\stackrel{b}{\longrightarrow}2\stackrel{a}{\longrightarrow}3\stackrel{b}{\longrightarrow}4\stackrel{a}{\longrightarrow}5\stackrel{a}{\longrightarrow}6\stackrel{b}{\longrightarrow}7</script><p>我们可以看到初始状态为0，可接受的终止状态为<code>7</code>.这是最初的状态机。我们先计算玩<code>ababaab</code>的作为输入，然后再左移一位，计算<code>babaab</code>作为状态机的输入,且从状态1开始输入。即可计算出整个<code>kmp</code>的DFA状态机。以下为状态机构建与搜索：<br>比如我们可以看到正确的匹配和状态如下：<br>|输入|0|1|2|3|4|5|6|7|<br>|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|<br>|-|a|b|a|b|a|a|b|-|<br>|a|1|-|3|-|5|6|-|-|<br>|b|0|2|-|4|-|-|7|-|<br>|*|0|0|0|0|0|0|0|-|<br>DFA状态机的建立也非常有意思。我们保留另一个状态从字符串第<code>2</code>位开始遍历,当前的状态为x,每次拷贝状态<code>x</code>的指向即可。实际上x的状态即为当前匹配的最长后缀长度。<br>|输入|0|1|2|3|4|5|6|7|<br>|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|<br>|-|a|b|a|b|a|a|b|-|<br>|a|1|1|3|1|5|6|1|-|<br>|b|0|2|0|4|0|4|7|-|<br>|状态x|0|0|1|2|3|1|2|-|</p><p><img src="https://mike-box.github.io/images/148-1.png" alt="kmp"></p><ol><li><code>KMP DFA</code>的搜索<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">bool</span> <span class="title">kmp</span><span class="params">(<span class="built_in">string</span> &amp; pat,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; dfa)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> n = pat.size();</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; state(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">           dfa.push_back(state);</span><br><span class="line">           dfa[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       dfa[pat[<span class="number">0</span>]-<span class="string">'a'</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>, i = <span class="number">1</span>; i &lt; n; ++i )&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)&#123;</span><br><span class="line">               dfa[j][i] = dfa[j][x];</span><br><span class="line">           &#125;</span><br><span class="line">           dfa[pat[i]-<span class="string">'a'</span>][i] = i+<span class="number">1</span>;</span><br><span class="line">           x = dfa[pat[i]-<span class="string">'a'</span>][x];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">string</span> str, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dfa)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> res = <span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">int</span> end = dfa[<span class="number">0</span>].size()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); ++i)&#123;</span><br><span class="line">           x = dfa[str[i]-<span class="string">'a'</span>][x];</span><br><span class="line">           <span class="keyword">if</span>(x == end) <span class="keyword">return</span> i-x+<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>KMP next<br>这个时之前教科书上的next数组的表示法，确实有一些比较<code>tricky</code>的地方，计算每个前缀的最长匹配后缀长度，这个稍微需要一点点技巧，特别时用到递归的思想，只需要计算出最长匹配后，后面的就非常简单。<br>比如字符串<code>ababaababd</code>,他所有的前缀字符串为：</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">索引</th><th style="text-align:center">前缀</th><th style="text-align:center">匹配的最长后缀</th><th style="text-align:center">最长匹配后缀长度</th><th style="text-align:center">递推</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">ab</td><td style="text-align:center">‘’</td><td style="text-align:center">0</td><td style="text-align:center">prefix(1) = 0</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">aba</td><td style="text-align:center">a</td><td style="text-align:center">1</td><td style="text-align:center">prefix(1) = 1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">abab</td><td style="text-align:center">ab</td><td style="text-align:center">2</td><td style="text-align:center">prefix(1) = 2</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">ababa</td><td style="text-align:center">aba</td><td style="text-align:center">3</td><td style="text-align:center">prefix(4) = 3</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">ababaa</td><td style="text-align:center">a</td><td style="text-align:center">1</td><td style="text-align:center">prefix(5) = prefix(prefix(4))</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">ababaab</td><td style="text-align:center">ab</td><td style="text-align:center">2</td><td style="text-align:center">prefix(6) = 2</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">ababaaba</td><td style="text-align:center">aba</td><td style="text-align:center">3</td><td style="text-align:center">prefix(7) = 3</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">ababaabab</td><td style="text-align:center">abab</td><td style="text-align:center">4</td><td style="text-align:center">prefix(8) = 4</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">ababaababd</td><td style="text-align:center">‘’</td><td style="text-align:center">0</td><td style="text-align:center">prefix(9) = 0</td></tr></tbody></table></div><p>我们看到kmp的本质就是当前位置索引<code>i</code>去匹配前缀<code>prefix(i-1)</code>的下一个字母，如果能够匹配则相等，否则则匹配下一个更短的后缀。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; kmp(<span class="built_in">string</span> str)&#123;</span><br><span class="line">    <span class="keyword">int</span> n = str.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prefix(n,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    prefix[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(; k &gt; <span class="number">0</span> &amp;&amp; str[k] != str[i]; k = prefix[k<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">if</span>(str[k] == str[i])  prefix[i++] = ++k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; --i) prefix[i] = prefix[i<span class="number">-1</span>];</span><br><span class="line">    prefix[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">search</span><span class="params">(<span class="built_in">string</span> str,<span class="built_in">string</span> need)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next = kmp(need);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i &lt; str.size() &amp;&amp; j &lt; need.size())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || str[i] == str[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(j == <span class="built_in">strlen</span>(need)) <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="BM算法"><a href="#BM算法" class="headerlink" title="BM算法"></a>BM算法</h5><ol><li>bm算法的特点为字符串比较时从右向左比较，因此非常快的跳跃过去。</li><li>如果发现当前可能匹配的字符串中不存在模式中的字符，直接跳到当前字符的下一个字符进行比较。</li><li>尽可能的向右移动，本质就是贪心算法，每次计算移动位置。<br><img src="https://mike-box.github.io/images/148-3.png" alt="bm"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bm_search</span><span class="params">(<span class="built_in">string</span> str,<span class="built_in">string</span> needle)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> m = str.size();</span><br><span class="line">       <span class="keyword">int</span> n = needle.size();</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right(<span class="number">26</span>,<span class="number">-1</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; needle.size(); ++i)&#123;</span><br><span class="line">           right[needle[i]-<span class="string">'a'</span>] = i;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span> skip = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m-n; i += skip)&#123;</span><br><span class="line">           skip = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">               <span class="keyword">if</span>(str[i+j] != needle[j])&#123;</span><br><span class="line">                   skip = max(<span class="number">1</span>,j-right[str[i+j]-<span class="string">'a'</span>]);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(skip == <span class="number">0</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> i;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="KR"><a href="#KR" class="headerlink" title="KR"></a>KR</h5><ol><li><code>KR</code>算法的本质<br><img src="https://mike-box.github.io/images/148-4.png" alt="kr"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabinKarp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> patHash; <span class="comment">// pattern hash value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> M; <span class="comment">// pattern length</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> Q; <span class="comment">// modulus</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> R; <span class="comment">// radix</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> RM; <span class="comment">// R^(M-1) % Q</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RabinKarp</span><span class="params">(String pat)</span> </span>&#123;</span><br><span class="line">        M = pat.length();</span><br><span class="line">        R = <span class="number">256</span>;</span><br><span class="line">        Q = longRandomPrime();</span><br><span class="line">        RM = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M-<span class="number">1</span>; i++)</span><br><span class="line">            RM = (R * RM) % Q;</span><br><span class="line">        patHash = hash(pat, M);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">hash</span><span class="params">(String key, <span class="keyword">int</span> M)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">/* as before */</span> </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(String txt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = txt.length();</span><br><span class="line">        <span class="keyword">int</span> txtHash = hash(txt, M);</span><br><span class="line">        <span class="keyword">if</span> (patHash == txtHash) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = M; i &lt; N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            txtHash = (txtHash + Q - RM*txt.charAt(i-M) % Q) % Q;</span><br><span class="line">            txtHash = (txtHash*R + txt.charAt(i)) % Q;</span><br><span class="line">            <span class="keyword">if</span> (patHash == txtHash) <span class="keyword">return</span> i - M + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="AC-automation"><a href="#AC-automation" class="headerlink" title="AC automation"></a>AC automation</h4><p>匹配单字符串时我们可以用快速的匹配算法<code>KMP</code>,但是实际程序中我们可能需要进行多个字符串的匹配，这时我们就需要新的算法。AC自动机作为匹配多字符串的算法，其也有非常重要的应用，比如<code>DPI</code>,互联网上的报文搜索。AC自动机的本质也是避免所谓的<code>backup</code>，也是类似于<code>KMP</code>所谓的指当前能够匹配的最长后缀, 关键点在于设置节点的<code>fail</code>指针。知乎上有相关解释，其实ac自动机的本质即为 <code>kmp + trie</code>的组合，原理其实非常简单，也是找到当前字符位置的最长匹配的后缀。<code>trie</code>树作为一个最基本的应用应该需要掌握的基础。<br><a href="https://zhuanlan.zhihu.com/p/80325757" target="_blank" rel="noopener">AC自动机</a><br><img src="https://mike-box.github.io/images/148-8.png" alt="ac"><br><img src="https://mike-box.github.io/images/148-9.png" alt="ac"><br><img src="https://mike-box.github.io/images/148-10.png" alt="ac"><br><img src="https://mike-box.github.io/images/148-11.png" alt="ac"><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TrieNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> isWord;</span><br><span class="line">    <span class="built_in">string</span> word;</span><br><span class="line">    TrieNode * next[<span class="number">26</span>];</span><br><span class="line">    TrieNode * fail;</span><br><span class="line">    TrieNode()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;isword = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;word = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;fail = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;next[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bulidTrie</span><span class="params">(TrieNode * root,<span class="built_in">string</span> &amp; word)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    TrieNode * node = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; c : word)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node-&gt;next[c-<span class="string">'a'</span>]) node-&gt;next[c-<span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        node = node-&gt;next[c-<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;isWord = <span class="literal">true</span>;</span><br><span class="line">    node-&gt;word = word;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">buildFail</span><span class="params">(TrieNode * root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; w : words)&#123;</span><br><span class="line">        insertTrie(root,w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>&lt;TrieNode *&gt; qu;</span><br><span class="line">    qu.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">        TrieNode * curr = qu.front();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            TrieNode * next = curr-&gt;next[i];</span><br><span class="line">            <span class="keyword">if</span>(!next) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(curr == root)&#123;</span><br><span class="line">                next-&gt;fail = curr;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                TrieNode * fail = curr-&gt;fail;</span><br><span class="line">                <span class="keyword">while</span>(fail)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(fail-&gt;next[i])&#123;</span><br><span class="line">                        next-&gt;fail = fail-&gt;next[i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    fail = fail-&gt;fail;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!fail) next-&gt;fail = root;</span><br><span class="line">            &#125;   </span><br><span class="line"></span><br><span class="line">            qu.push(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TrieNode * <span class="title">buildAcAutomation</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp; words)</span></span>&#123;</span><br><span class="line">    TrieNode * root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    bulidTrie(root,words);</span><br><span class="line">    buildFail(root,words);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">search</span><span class="params">(TrieNode * root,<span class="built_in">string</span> content)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    TrieNode * curr = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : content)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!curr-&gt;next[c-<span class="string">'a'</span>] &amp;&amp; curr != root)&#123;</span><br><span class="line">            curr = curr-&gt;fail;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        curr = curr-&gt;next[c-<span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!curr) curr = root;</span><br><span class="line">        TrieNode * t = curr;</span><br><span class="line">        <span class="keyword">while</span>(t != root)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t-&gt;isWord == <span class="literal">true</span>) <span class="built_in">cout</span>&lt;&lt;t-&gt;word&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            t = t-&gt;fail;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="NFA状态机"><a href="#NFA状态机" class="headerlink" title="NFA状态机"></a>NFA状态机</h4><p><code>NFA</code>状态机的构造理论也是非常复杂的一个问题，感觉不是一两句话就能说清楚，特别是<code>nfa</code>的建造，实际上非常又技巧的一个巧妙的算法。另一个是关于<code>nfa</code>的搜索，如果不进行优化的话，就是实际的<code>DFS</code>查找。以下的代码是参考<code>princeton</code>的例子简单的写了一个<code>NFA</code>的模式匹配算法，支持<code>(),|,+,*,</code>的匹配，写的非常简单，但是对于理解基本的<code>nfa</code>原理来说肯定够用了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nfa</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Nfa()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;regexpr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">build</span><span class="params">(<span class="built_in">string</span> re)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m = re.size();</span><br><span class="line">        <span class="keyword">this</span>-&gt;regexpr = re;</span><br><span class="line">        <span class="keyword">this</span>-&gt;graph.clear();</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; ops;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; re.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> lp = i;</span><br><span class="line">            <span class="keyword">if</span>(re[i] == <span class="string">'('</span>||re[i] == <span class="string">'|'</span>)&#123;</span><br><span class="line">                ops.push(i);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(re[i] == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ops.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(re[ops.top()] == <span class="string">'|'</span>)&#123;</span><br><span class="line">                    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; curr;</span><br><span class="line">                    <span class="keyword">while</span>(!ops.empty()&amp;&amp;re[ops.top()] == <span class="string">'|'</span>)&#123;</span><br><span class="line">                        curr.push(ops.top());</span><br><span class="line">                        ops.pop();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(ops.empty()||re[ops.top()] != <span class="string">'('</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    lp = ops.top();</span><br><span class="line">                    ops.pop();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(!curr.empty())&#123;</span><br><span class="line">                        <span class="keyword">this</span>-&gt;addEdge(lp,curr.top()+<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">this</span>-&gt;addEdge(curr.top(),i);</span><br><span class="line">                        curr.pop();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(re[ops.top()] == <span class="string">'('</span>)&#123;</span><br><span class="line">                    lp = ops.top();</span><br><span class="line">                    ops.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span> &lt; <span class="keyword">this</span>-&gt;m &amp;&amp; re[i+<span class="number">1</span>] == <span class="string">'*'</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;addEdge(i+<span class="number">1</span>,lp);</span><br><span class="line">                <span class="keyword">this</span>-&gt;addEdge(lp,i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span> &lt; <span class="keyword">this</span>-&gt;m &amp;&amp; re[i+<span class="number">1</span>] == <span class="string">'+'</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;addEdge(i+<span class="number">1</span>,lp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(re[i] == <span class="string">'('</span> || re[i] == <span class="string">'*'</span> || </span><br><span class="line">               re[i] == <span class="string">')'</span> || re[i] == <span class="string">'+'</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;addEdge(i,i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!ops.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">debug</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="keyword">this</span>-&gt;m; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;graph.count(i))&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> v : <span class="keyword">this</span>-&gt;graph[i])&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">"--&gt;"</span>&lt;&lt;v&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(<span class="built_in">string</span> target)</span></span>&#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; marked;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pc;</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>,marked);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : marked)&#123;</span><br><span class="line">            pc.push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; target.size(); ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; matched;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v : pc)&#123;</span><br><span class="line">                <span class="keyword">if</span>(v == <span class="keyword">this</span>-&gt;m) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;this-&gt;regexpr[v]&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;regexpr[v] == target[i] || <span class="keyword">this</span>-&gt;regexpr[v] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    matched.push_back(v+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            marked.clear();</span><br><span class="line">            pc.clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v : matched)&#123;</span><br><span class="line">                dfs(v,marked);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v : marked)&#123;</span><br><span class="line">                pc.push_back(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : pc)&#123;</span><br><span class="line">            <span class="keyword">if</span>(v == <span class="keyword">this</span>-&gt;m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> curr,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp; marked)</span></span>&#123;</span><br><span class="line">        marked.insert(curr);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : graph[curr])&#123;</span><br><span class="line">            <span class="keyword">if</span>(marked.count(v)) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v,marked);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;graph[v].push_back(w);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> regexpr;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; graph;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> regexpr = <span class="string">"(a|b)*cd"</span>;</span><br><span class="line">    <span class="built_in">string</span> target1 = <span class="string">"ABD"</span>;</span><br><span class="line">    <span class="built_in">string</span> target2 = <span class="string">"ADD"</span>;</span><br><span class="line">    <span class="built_in">string</span> target3 = <span class="string">"ABD"</span>;</span><br><span class="line">    <span class="built_in">string</span> target4 = <span class="string">"CBBD"</span>;</span><br><span class="line">    Nfa nfa;</span><br><span class="line">    nfa.build(regexpr);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;nfa.isMatch(target1)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;nfa.isMatch(target2)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;nfa.isMatch(target3)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;nfa.isMatch(target4)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><code>NFA</code>转<code>DFA</code>的算法实现<br>这个算法也是我一直像学的，但是一直没有时间来好好思考这个问题。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="number">3.</span> 正则表达式引擎编写</span><br><span class="line">```c++</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;字符串算法&quot;&gt;&lt;a href=&quot;#字符串算法&quot; class=&quot;headerlink&quot; title=&quot;字符串算法&quot;&gt;&lt;/a&gt;字符串算法&lt;/h3&gt;&lt;p&gt;字符串作为一个非常重要的应用，。对所有字符串算法的总结，包括字符串的排序与字符串的匹配，在实际的程序中是非常非常重要的两块应用，其中的算法又非常的复杂。光把这几个研究透就非常需要耗费精力和时间。&lt;/p&gt;&lt;h4 id=&quot;字符串排序&quot;&gt;&lt;a href=&quot;#字符串排序&quot; class=&quot;headerlink&quot; title=&quot;字符串排序&quot;&gt;&lt;/a&gt;字符串排序&lt;/h4&gt;&lt;h5 id=&quot;count-index&quot;&gt;&lt;a href=&quot;#count-index&quot; class=&quot;headerlink&quot; title=&quot;count index&quot;&gt;&lt;/a&gt;&lt;code&gt;count index&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;count index&lt;/code&gt;作为一种快速的排序算法，可以在O(n+m)的时间复杂度内即可完成字符串的排序。本质是基数排序，实际应用中这个排序算法效率非常高，基本上可以在线性时间内完成对字符串的排序。空间复杂度为O(m+n).&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countIndex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; [] a)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; [] count = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;257&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; [] aux = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[a.length];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; str.length; ++i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count[str[i]+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;; ++i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] += count[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; ++i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        aux[count[a[i]++]] = a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; ++i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a[i] = aux[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Priceton 算法课程学习</title>
    <link href="http://yoursite.com/2020/04/09/147/"/>
    <id>http://yoursite.com/2020/04/09/147/</id>
    <published>2020-04-09T15:34:46.798Z</published>
    <updated>2020-04-10T01:58:42.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法课程总结"><a href="#算法课程总结" class="headerlink" title="算法课程总结"></a>算法课程总结</h2><p>在疫情的两个月内已经把相关材料全部学习完成了，特别是把几个project全部做了一遍，感觉<code>project</code>全部做了一遍，总的感觉是课程的质量非常非常的高，难得见到这么高质量的课程。我是全程把课程资料和project全部下下来了，总共10个<code>project</code>全部做了一遍，感慨一下算法的强大，虽然自己也仅仅只是学到了皮毛，但是对于已经过了中年还坚持学习的自己感到很满意。“学无止境”，我想这永远是对自己的一种激励和鞭策。中国古人言，“求其上者，得其中，求其中者，得其下”，我想保持一颗永远学习进去得心，在哪里都会有自己得空间。<br>其实我最想点赞得是10个<code>project</code>得难度都很棒，还记得从刚开始得<code>java</code>的语法都搞不清楚，到后面基本上<code>java</code>的一般语法问题难不倒我。其实学完了这些课程以后，其实很羡慕那些能够去世界名校学习的学生们，你们始终是幸运儿。再想想10年前我所经历的大学，很少有这样的顶级学习资源和老师。虽然时光已逝，这些年经历了许多，经历了亲人的去世，也经历了两个小宝贝的诞生，让我逐渐成熟了许多，越来越知道自己想要追求什么，到底喜欢什么样的生活，我想说的是人需要为了理想而努力，虽然我出身低微贫穷，但是这些年来一直也没有放弃自己对美好生活和理想的追求。以下是 <code>github</code>上的地址连接：<br><a href="https://github.com/mike-box/coursera/tree/master/algorithms-part1" target="_blank" rel="noopener">algorithms-part1</a><br><a href="https://github.com/mike-box/coursera/tree/master/algorithms-part2" target="_blank" rel="noopener">algorithms-part2</a><br>从最开始连题目都看不懂，等到后面几个<code>project</code>基本上都能得到满分，还是非常欣慰的能看到自己的进步。强烈建议学习算法的同学们能够把这个课程坚持学习完整。<br>我觉得这个课程的<code>project</code> 非常有特色，需要提交的代码不仅仅是求出结果，还会对代码的输入检查、异常抛出、代码的风格、变量的定义以及运行时间和运行</p><a id="more"></a><h3 id="algorithms-part1"><a href="#algorithms-part1" class="headerlink" title="algorithms-part1"></a>algorithms-part1</h3><h4 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h4><p>课程地址连接：<a href="https://github.com/mike-box/coursera/tree/master/algorithms-part1/week1" target="_blank" rel="noopener">percolation</a><br>本次的<code>project</code>是关于<code>union-set</code>，<code>tricky</code>的地方查找集合中的元素同时存在上下边缘的元素。我们可以为每个集合定义两个变量表示该集合是否同时存在上下边缘的元素。<br><img src="https://mike-box.github.io/images/147-1.png" alt="percolation"></p><h4 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h4><p>课程地址连接：<a href="https://github.com/mike-box/coursera/tree/master/algorithms-part1/week2" target="_blank" rel="noopener">queues</a><br>本次的<code>project</code>是关于<code>queue</code>，这个project比较简单，<code>tricky</code>的地方randomQueue和Dequue。<br><img src="https://mike-box.github.io/images/147-2.png" alt="queues"></p><h4 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h4><p>课程地址连接：<a href="https://github.com/mike-box/coursera/tree/master/algorithms-part1/week3" target="_blank" rel="noopener">collinear</a><br>本次的<code>project</code>是关于线段合并，这个project稍微比较难，难点在于需要对所有的点的斜率进行排序，然后取斜率相等，<code>tricky</code>的地方在于如何去重，需要一点技巧，要按照元素的大小进行排序。<br><img src="https://mike-box.github.io/images/147-3.png" alt="collinear"></p><h4 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h4><p>课程地址连接：<a href="https://github.com/mike-box/coursera/tree/master/algorithms-part1/week4" target="_blank" rel="noopener">8puzzle</a><br>本次的<code>project</code>是关于优先级队列，这个project稍微比较难，首先题目非常不容易理解，再次对优先级的定义涉及到<code>mahanton</code>距离的计算。<code>tricky</code>的地方在于如何如何涉及优先级队列。<br>关于优先级队列中另有一个<code>project</code>我觉得非常有意思，<a href="https://github.com/mike-box/coursera/tree/master/algorithms-part1/week4/CollisionSystem" target="_blank" rel="noopener">CollisionSystem</a>.我用<code>python</code>重新写了一个碰撞模拟的系统，感觉非常有意思，如果感兴趣的同学非常建议把这个<code>project</code>学习以下，强烈的推荐。<br><img src="https://mike-box.github.io/images/147-4.png" alt="collinear"></p><h4 id="week5"><a href="#week5" class="headerlink" title="week5"></a>week5</h4><p>课程地址连接：<a href="https://github.com/mike-box/coursera/tree/master/algorithms-part1/week5" target="_blank" rel="noopener">kdtree</a><br>本次的<code>project</code>是关于<code>kdtree</code>，本质上是二分搜索树，非常经典的一个问题，通过这个project详细的了解了<code>kdtree</code>的原理，其实这个算法非常的有用，在<code>LBS</code>应用算法中非常有用。这个project稍微难，难点在于如何对<code>kdtree</code>进行查找，如何在<code>lgn</code>时间内对树进行搜索和查找。<code>tricky</code>的地方在写查找函数还是非常需要一定的技巧，当然对于经历过竞赛的同学，这个题目肯定非常简单。<br><img src="https://mike-box.github.io/images/147-6.png" alt="kdtree"></p><h3 id="algorithms-part2"><a href="#algorithms-part2" class="headerlink" title="algorithms-part2"></a>algorithms-part2</h3><h4 id="week1-1"><a href="#week1-1" class="headerlink" title="week1"></a>week1</h4><p>课程地址连接：<a href="https://github.com/mike-box/coursera/tree/master/algorithms-part2/week1" target="_blank" rel="noopener">wordnet</a><br>本次的<code>project</code>是关于<code>图的搜索</code>，本质上是<code>BFS</code>，这个<code>project</code>比较简单，本质就是图的遍历。<code>tricky</code>的地方在在树中查找求最短距离之和。<br><img src="https://mike-box.github.io/images/147-7.png" alt="wordnet"></p><h4 id="week2-1"><a href="#week2-1" class="headerlink" title="week2"></a>week2</h4><p>课程地址连接：<a href="https://github.com/mike-box/coursera/tree/master/algorithms-part2/week2" target="_blank" rel="noopener">seam</a><br>本次的<code>project</code>是关于<code>dp</code>，这个<code>project</code>比较有意思，用<code>DP</code>解决了这个问题，性能比给的参考答案性能还快几倍，这个project稍微比较简单，关键点在于找到能量最低的那条线，每次去掉能量最低的一条线的元素。<br><img src="https://mike-box.github.io/images/147-8.png" alt="seam"></p><h4 id="week3-1"><a href="#week3-1" class="headerlink" title="week3"></a>week3</h4><p>课程地址连接：<a href="https://github.com/mike-box/coursera/tree/master/algorithms-part2/week3" target="_blank" rel="noopener">baseball</a><br>本次的<code>project</code>是关于<code>maxflow</code>，由于以前一直对<code>maxflow</code>这个算法不太了解，其中那几天想了好长时间才想明白这个算法的道理。如果明白了<code>maxflow</code>算法的原理，这个<code>project</code>非常简单，就是把图的边的对应关系要建立起来。<code>tricky</code>的地方在于对这个题目好多地方不太明白，看清楚图中每条边的<code>capbility</code>的是如何约束的，了解清楚就非常简单。<br><img src="https://mike-box.github.io/images/147-9.png" alt="baseball"></p><h4 id="week4-1"><a href="#week4-1" class="headerlink" title="week4"></a>week4</h4><p>课程地址连接：<a href="https://github.com/mike-box/coursera/tree/master/algorithms-part2/week4" target="_blank" rel="noopener">boggle</a><br>本次的<code>project</code>是关于<code>trie</code>，题目很简单，在<code>leetcode</code>上有基本上类似的题目，早就对这个题目相当明白了。只要知道<code>trie</code>的搜索，这个题目时非常简单的。<br><img src="https://mike-box.github.io/images/147-9.png" alt="boggle"></p><h4 id="week5-1"><a href="#week5-1" class="headerlink" title="week5"></a>week5</h4><p>课程地址连接：<a href="https://github.com/mike-box/coursera/tree/master/algorithms-part2/week5" target="_blank" rel="noopener">burrows</a><br>本次的<code>project</code>是关于<code>compress</code>算法，题目比较难，主要是压缩算法转换时对性能要求非常高，性能方面比较容易丢分要拿到满分不容易，最后性能跟题目中的参考答案差了一倍。<code>tricky</code>的地方在于如何理解题目，题目部分地方非常不好理解，另一方面性能如何优化是一个挑战。<br><img src="https://mike-box.github.io/images/147-10.png" alt="burrows"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法课程总结&quot;&gt;&lt;a href=&quot;#算法课程总结&quot; class=&quot;headerlink&quot; title=&quot;算法课程总结&quot;&gt;&lt;/a&gt;算法课程总结&lt;/h2&gt;&lt;p&gt;在疫情的两个月内已经把相关材料全部学习完成了，特别是把几个project全部做了一遍，感觉&lt;code&gt;project&lt;/code&gt;全部做了一遍，总的感觉是课程的质量非常非常的高，难得见到这么高质量的课程。我是全程把课程资料和project全部下下来了，总共10个&lt;code&gt;project&lt;/code&gt;全部做了一遍，感慨一下算法的强大，虽然自己也仅仅只是学到了皮毛，但是对于已经过了中年还坚持学习的自己感到很满意。“学无止境”，我想这永远是对自己的一种激励和鞭策。中国古人言，“求其上者，得其中，求其中者，得其下”，我想保持一颗永远学习进去得心，在哪里都会有自己得空间。&lt;br&gt;其实我最想点赞得是10个&lt;code&gt;project&lt;/code&gt;得难度都很棒，还记得从刚开始得&lt;code&gt;java&lt;/code&gt;的语法都搞不清楚，到后面基本上&lt;code&gt;java&lt;/code&gt;的一般语法问题难不倒我。其实学完了这些课程以后，其实很羡慕那些能够去世界名校学习的学生们，你们始终是幸运儿。再想想10年前我所经历的大学，很少有这样的顶级学习资源和老师。虽然时光已逝，这些年经历了许多，经历了亲人的去世，也经历了两个小宝贝的诞生，让我逐渐成熟了许多，越来越知道自己想要追求什么，到底喜欢什么样的生活，我想说的是人需要为了理想而努力，虽然我出身低微贫穷，但是这些年来一直也没有放弃自己对美好生活和理想的追求。以下是 &lt;code&gt;github&lt;/code&gt;上的地址连接：&lt;br&gt;&lt;a href=&quot;https://github.com/mike-box/coursera/tree/master/algorithms-part1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;algorithms-part1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/mike-box/coursera/tree/master/algorithms-part2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;algorithms-part2&lt;/a&gt;&lt;br&gt;从最开始连题目都看不懂，等到后面几个&lt;code&gt;project&lt;/code&gt;基本上都能得到满分，还是非常欣慰的能看到自己的进步。强烈建议学习算法的同学们能够把这个课程坚持学习完整。&lt;br&gt;我觉得这个课程的&lt;code&gt;project&lt;/code&gt; 非常有特色，需要提交的代码不仅仅是求出结果，还会对代码的输入检查、异常抛出、代码的风格、变量的定义以及运行时间和运行&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 LFU</title>
    <link href="http://yoursite.com/2020/04/06/146/"/>
    <id>http://yoursite.com/2020/04/06/146/</id>
    <published>2020-04-06T15:12:08.192Z</published>
    <updated>2020-04-07T02:26:44.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h1><p>题目比较简单，都做出来了。</p><h2 id="460-LFU缓存"><a href="#460-LFU缓存" class="headerlink" title="460. LFU缓存"></a>460. LFU缓存</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请你为 最不经常使用<code>（LFU）</code>缓存算法设计并实现数据结构。它应该支持以下操作：<code>get</code> 和 <code>put</code>。</p><ul><li><code>get(key)</code> - 如果键存在于缓存中，则获取键的值（总是正数），否则返回 -1。</li><li><code>put(key, value)</code> - 如果键不存在，请设置或插入值。当缓存达到其容量时，则应该在插入新项之前，使最不经常使用的项无效。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除 最近 最少使用的键。</li></ul><a id="more"></a><p>「项的使用次数」就是自插入该项以来对其调用 <code>get</code>和 <code>put</code> 函数的次数之和。使用次数会在对应项被移除后置为 0 。`</p><p>进阶：<br>你是否可以在<code>O(1)</code> 时间复杂度内执行两项操作？<br>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LFUCache cache = new LFUCache( <span class="number">2</span> <span class="comment">/* capacity (缓存容量) */</span> );</span><br><span class="line"></span><br><span class="line">cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">cache.<span class="keyword">get</span>(<span class="number">1</span>);       <span class="comment">// 返回 1</span></span><br><span class="line">cache.put(<span class="number">3</span>, <span class="number">3</span>);    <span class="comment">// 去除 key 2</span></span><br><span class="line">cache.<span class="keyword">get</span>(<span class="number">2</span>);       <span class="comment">// 返回 -1 (未找到key 2)</span></span><br><span class="line">cache.<span class="keyword">get</span>(<span class="number">3</span>);       <span class="comment">// 返回 3</span></span><br><span class="line">cache.put(<span class="number">4</span>, <span class="number">4</span>);    <span class="comment">// 去除 key 1</span></span><br><span class="line">cache.<span class="keyword">get</span>(<span class="number">1</span>);       <span class="comment">// 返回 -1 (未找到 key 1)</span></span><br><span class="line">cache.<span class="keyword">get</span>(<span class="number">3</span>);       <span class="comment">// 返回 3</span></span><br><span class="line">cache.<span class="keyword">get</span>(<span class="number">4</span>);       <span class="comment">// 返回 4</span></span><br></pre></td></tr></table></figure><br>归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/lfu-cache" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lfu-cache</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> LFU算法  hash + 双链表</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>对所有的key按照使用频次大小和使用时间的先后进行排列，即我们将最少使用次数，且最长时间未用的节点放在链表队列的首部，每次队列满时直接从队列的头部取出元素进行淘汰。</li><li>我们将用将key映射到链表的节点的指针，所以我们可以在O(1)的时间复杂度内即可以访问到链表的节点，然后将链表的节点中存储的freq进行加一，并且该节点与其后续的节点进行比较，发现频次与其相同或者比它小的节点则将节点进行后移操作，直到该节点到达指定位置。但是这种情况下如果进行替换时，则时间复杂度可能达到O(N).</li><li><code>get</code>操作时，直接查找hash表，查找该值是否存在映射的链表的节点。将链表的节点中存储的freq进行加一，并且该节点与其后续的节点进行比较，发现频次与其相同或者比它小的节点则将节点进行后移操作，直到该节点到达指定位置。但是这种情况下如果进行替换时，则时间复杂度可能达到O(N).</li><li><code>put</code>操作时，直接查找hash表，查找该值是否存在映射的链表的节点。如果该节点存在，则改变存储的value的值，同时将存储的freq进行加1操作，然后移动链表。并且该节点与其后续的节点进行比较，发现频次与其相同或者比它小的节点则将节点进行后移操作，直到该节点到达指定位置。但是这种情况下如果进行替换时，则时间复杂度可能达到O(N).如果该节点不存在，则有两种情况需要讨论。一是队列已经满，则这时只需要将双链表队列的头部元素去掉，然后再添加新的头节点到队列中，然后进行比较移动操作。如果队列未满，则直接再双链表队列的头部添加新的元素，然后进行频次比较移位操作。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CacheNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> freq;</span><br><span class="line">    CacheNode(<span class="keyword">int</span> k, <span class="keyword">int</span> v):freq(<span class="number">1</span>), key(k), val(v)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Compare</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> CacheNode&amp; a, <span class="keyword">const</span> CacheNode&amp; b)</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.freq &lt; b.freq;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LFUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        size = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = cacheMap.find(key);</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span> || it == cacheMap.end()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        CacheNode temp = *(it-&gt;second);</span><br><span class="line">        temp.freq++;</span><br><span class="line">        cacheSet.erase(it-&gt;second);</span><br><span class="line">        cacheMap[key] = cacheSet.insert(temp);</span><br><span class="line">        <span class="keyword">return</span> temp.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">auto</span> it = cacheMap.find(key);</span><br><span class="line">        <span class="keyword">if</span> (it == cacheMap.end())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cacheMap.size() == size)&#123;</span><br><span class="line">                cacheMap.erase((cacheSet.begin())-&gt;key);</span><br><span class="line">                cacheSet.erase(cacheSet.begin());</span><br><span class="line">            &#125;</span><br><span class="line">            CacheNode temp = CacheNode(key, value);</span><br><span class="line">            cacheMap[key] = cacheSet.insert(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CacheNode temp = *(it-&gt;second);</span><br><span class="line">        temp.freq++;</span><br><span class="line">        temp.val = value;</span><br><span class="line">        cacheSet.erase(it-&gt;second);</span><br><span class="line">        cacheMap[key] = cacheSet.insert(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">multiset</span>&lt;CacheNode, Compare&gt; cacheSet;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">multiset</span>&lt;CacheNode, Compare&gt;::iterator&gt; cacheMap;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LFUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LFUCache obj = new LFUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> freq;</span><br><span class="line">    Node * next;</span><br><span class="line">    Node * prev;</span><br><span class="line">    Node()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;key = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;freq = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">int</span> currSize;</span><br><span class="line">    Node * head;</span><br><span class="line">    Queue(<span class="keyword">int</span> capacity)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;maxSize = capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;currSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Queue * qu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!qu || qu-&gt;currSize == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(Queue * qu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!qu) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> qu-&gt;currSize &gt;= qu-&gt;maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">shiftQueue</span><span class="params">(Queue * qu,Node * curr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!qu || !curr) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(qu)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*shift every node if freq is less or equal than curr*/</span></span><br><span class="line">    <span class="keyword">bool</span> replace = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(Node * node = curr-&gt;next; node ; node = curr-&gt;next)&#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;"swap :"&lt;&lt;curr-&gt;val &lt;&lt;" "&lt;&lt; node-&gt;val &lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">/*swap node*/</span></span><br><span class="line">        <span class="keyword">if</span>(node-&gt;freq &lt;= curr-&gt;freq)&#123;</span><br><span class="line">            curr-&gt;next = node-&gt;next;</span><br><span class="line">            node-&gt;prev = curr-&gt;prev;</span><br><span class="line">            <span class="keyword">if</span>(curr-&gt;prev) curr-&gt;prev-&gt;next = node;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;next) node-&gt;next-&gt;prev = curr;</span><br><span class="line">            curr-&gt;prev = node;</span><br><span class="line">            node-&gt;next = curr;</span><br><span class="line">            <span class="keyword">if</span>(qu-&gt;head == curr &amp;&amp; !replace)&#123;</span><br><span class="line">                qu-&gt;head = node;</span><br><span class="line">                replace = <span class="literal">true</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pushFront</span><span class="params">(Queue * qu, Node * node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!qu||!node) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isEmpty(qu))&#123;</span><br><span class="line">        qu-&gt;head = node;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        node-&gt;next = qu-&gt;head;</span><br><span class="line">        qu-&gt;head-&gt;prev = node;</span><br><span class="line">        qu-&gt;head = node;</span><br><span class="line">    &#125;</span><br><span class="line">    qu-&gt;currSize++;</span><br><span class="line">    shiftQueue(qu,node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">popFront</span><span class="params">(Queue * qu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!qu) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(qu-&gt;currSize == <span class="number">0</span> || !qu-&gt;head) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    Node * e = qu-&gt;head;</span><br><span class="line">    <span class="keyword">int</span> ret = e-&gt;key;</span><br><span class="line">    qu-&gt;head = qu-&gt;head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(qu-&gt;head) qu-&gt;head-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    qu-&gt;currSize--;</span><br><span class="line">    e-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    e-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">delete</span> e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">debugQueue</span><span class="params">(Queue * qu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!qu) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"curr size = "</span>&lt;&lt;qu-&gt;currSize&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(Node * node = qu-&gt;head; node; node = node-&gt;next)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"key:"</span>&lt;&lt;node-&gt;key&lt;&lt;<span class="string">" value:"</span>&lt;&lt;node-&gt;val&lt;&lt;<span class="string">" freq:"</span>&lt;&lt;node-&gt;freq&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LFUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;qu = <span class="keyword">new</span> Queue(capacity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>-&gt;hash.count(key)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        Node * curr = <span class="keyword">this</span>-&gt;hash[key];</span><br><span class="line">        curr-&gt;freq++;</span><br><span class="line">        <span class="keyword">int</span> ret = curr-&gt;val;</span><br><span class="line">        shiftQueue(<span class="keyword">this</span>-&gt;qu,curr);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hash.count(key))&#123;</span><br><span class="line">             Node * curr = <span class="keyword">this</span>-&gt;hash[key];</span><br><span class="line">             curr-&gt;val = value;</span><br><span class="line">             curr-&gt;freq++;</span><br><span class="line">             shiftQueue(<span class="keyword">this</span>-&gt;qu,curr);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">/* buffer is full*/</span></span><br><span class="line">            <span class="keyword">if</span>(isFull(qu))&#123;</span><br><span class="line">                <span class="keyword">if</span>(qu-&gt;head)&#123;</span><br><span class="line">                    <span class="keyword">this</span>-&gt;hash.erase(qu-&gt;head-&gt;key);</span><br><span class="line">                    popFront(qu);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!isFull(qu))&#123;</span><br><span class="line">                Node * node = <span class="keyword">new</span> Node();</span><br><span class="line">                node-&gt;key = key;</span><br><span class="line">                node-&gt;val = value;</span><br><span class="line">                node-&gt;freq = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">this</span>-&gt;hash[key] = node;</span><br><span class="line">                pushFront(<span class="keyword">this</span>-&gt;qu,node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,Node *&gt; hash;</span><br><span class="line">    Queue *qu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LFUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LFUCache* obj = new LFUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> freq;</span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">    Node(<span class="keyword">int</span> key,<span class="keyword">int</span> val,<span class="keyword">int</span> freq,<span class="keyword">int</span> time)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;key = key;</span><br><span class="line">        <span class="keyword">this</span>-&gt;val = val;</span><br><span class="line">        <span class="keyword">this</span>-&gt;freq = freq;</span><br><span class="line">        <span class="keyword">this</span>-&gt;time = time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Node * x,<span class="keyword">const</span> Node * y)</span> <span class="keyword">const</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(x-&gt;freq == y-&gt;freq) <span class="keyword">return</span> x-&gt;time &lt; y-&gt;time;</span><br><span class="line">        <span class="keyword">return</span> x-&gt;freq &lt; y-&gt;freq;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LFUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;maxSize = capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;timer++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!hash.count(key)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        Node * curr = hash[key];</span><br><span class="line">        buffer.erase(curr);</span><br><span class="line">        <span class="keyword">int</span> ret = curr-&gt;val;</span><br><span class="line">        curr-&gt;freq++;</span><br><span class="line">        curr-&gt;time = <span class="keyword">this</span>-&gt;timer;</span><br><span class="line">        buffer.insert(curr);</span><br><span class="line">        <span class="keyword">this</span>-&gt;timer++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;maxSize == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(hash.count(key))&#123;</span><br><span class="line">            Node * curr = <span class="keyword">this</span>-&gt;hash[key];</span><br><span class="line">            buffer.erase(curr);</span><br><span class="line">            curr-&gt;val = value;</span><br><span class="line">            curr-&gt;freq++;</span><br><span class="line">            curr-&gt;time = <span class="keyword">this</span>-&gt;timer;</span><br><span class="line">            buffer.insert(curr);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(buffer.size() &gt;= <span class="keyword">this</span>-&gt;maxSize)&#123;</span><br><span class="line">                Node * curr = *buffer.begin();</span><br><span class="line">                <span class="keyword">this</span>-&gt;hash.erase(curr-&gt;key);</span><br><span class="line">                buffer.erase(curr);</span><br><span class="line">            &#125;</span><br><span class="line">            Node * node = <span class="keyword">new</span> Node(key,value,<span class="number">1</span>,<span class="keyword">this</span>-&gt;timer);</span><br><span class="line">            <span class="keyword">this</span>-&gt;hash[key] = node;</span><br><span class="line">            buffer.insert(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;timer++;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,Node *&gt; hash;</span><br><span class="line">    <span class="built_in">set</span>&lt;Node*,cmp&gt; buffer;</span><br><span class="line">    <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">int</span> timer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LFUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LFUCache* obj = new LFUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LFU&quot;&gt;&lt;a href=&quot;#LFU&quot; class=&quot;headerlink&quot; title=&quot;LFU&quot;&gt;&lt;/a&gt;LFU&lt;/h1&gt;&lt;p&gt;题目比较简单，都做出来了。&lt;/p&gt;&lt;h2 id=&quot;460-LFU缓存&quot;&gt;&lt;a href=&quot;#460-LFU缓存&quot; class=&quot;headerlink&quot; title=&quot;460. LFU缓存&quot;&gt;&lt;/a&gt;460. LFU缓存&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;请你为 最不经常使用&lt;code&gt;（LFU）&lt;/code&gt;缓存算法设计并实现数据结构。它应该支持以下操作：&lt;code&gt;get&lt;/code&gt; 和 &lt;code&gt;put&lt;/code&gt;。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get(key)&lt;/code&gt; - 如果键存在于缓存中，则获取键的值（总是正数），否则返回 -1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;put(key, value)&lt;/code&gt; - 如果键不存在，请设置或插入值。当缓存达到其容量时，则应该在插入新项之前，使最不经常使用的项无效。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除 最近 最少使用的键。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 23周双周比赛</title>
    <link href="http://yoursite.com/2020/04/05/145/"/>
    <id>http://yoursite.com/2020/04/05/145/</id>
    <published>2020-04-05T15:07:04.024Z</published>
    <updated>2020-04-05T15:07:10.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="23周比赛"><a href="#23周比赛" class="headerlink" title="23周比赛"></a>23周比赛</h1><p>题目比较简单，都做出来了。</p><h2 id="5360-统计最大组的数目"><a href="#5360-统计最大组的数目" class="headerlink" title="5360. 统计最大组的数目"></a>5360. 统计最大组的数目</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 <code>n</code>。请你先求出从 1 到 n 的每个整数 10 进制表示下的数位和（每一位上的数字相加），然后把数位和相等的数字放到同一个组中。</p><p>请你统计每个组中的数字数目，并返回数字数目并列最多的组有多少个。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">13</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：总共有 <span class="number">9</span> 个组，将 <span class="number">1</span> 到 <span class="number">13</span> 按数位求和后这些组分别是：</span><br><span class="line">[<span class="number">1</span>,<span class="number">10</span>]，[<span class="number">2</span>,<span class="number">11</span>]，[<span class="number">3</span>,<span class="number">12</span>]，[<span class="number">4</span>,<span class="number">13</span>]，[<span class="number">5</span>]，[<span class="number">6</span>]，[<span class="number">7</span>]，[<span class="number">8</span>]，[<span class="number">9</span>]。总共有 <span class="number">4</span> 个组拥有的数字并列最多。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：总共有 <span class="number">2</span> 个大小为 <span class="number">1</span> 的组 [<span class="number">1</span>]，[<span class="number">2</span>]。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">15</span></span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">24</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：`</p><ul><li><code>1 &lt;= n &lt;= 10^4</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-largest-group" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-largest-group</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>排序之后，暴力即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            res += (n%<span class="number">10</span>);</span><br><span class="line">            n = n/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countLargestGroup</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxFreq = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; ++i)&#123;</span><br><span class="line">            cnt[sum(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : cnt)&#123;</span><br><span class="line">            maxFreq = max(x.second,maxFreq);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : cnt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x.second == maxFreq) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5362-构造-K-个回文字符串"><a href="#5362-构造-K-个回文字符串" class="headerlink" title="5362. 构造 K 个回文字符串"></a>5362. 构造 K 个回文字符串</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 s 和一个整数 k 。请你用 s 字符串中 所有字符 构造 k 个非空 回文串 。</p><p>如果你可以用 s 中所有字符构造 k 个回文字符串，那么请你返回 <code>True</code>，否则返回 <code>False</code>。</p><p>示例 1：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"annabelle"</span>, <span class="attr">k</span> = <span class="number">2</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：可以用 s 中所有字符构造 <span class="number">2</span> 个回文字符串。</span><br><span class="line">一些可行的构造方案包括：<span class="string">"anna"</span> + <span class="string">"elble"</span>，<span class="string">"anbna"</span> + <span class="string">"elle"</span>，<span class="string">"anellena"</span> + <span class="string">"b"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"leetcode"</span>, <span class="attr">k</span> = <span class="number">3</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：无法用 s 中所有字符构造 <span class="number">3</span> 个回文串。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"true"</span>, <span class="attr">k</span> = <span class="number">4</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：唯一可行的方案是让 s 中每个字符单独构成一个字符串。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"yzyzyzyzyzyzyzy"</span>, <span class="attr">k</span> = <span class="number">2</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：你只需要将所有的 z 放在一个字符串中，所有的 y 放在另一个字符串中。那么两个字符串都是回文串。</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"cr"</span>, <span class="attr">k</span> = <span class="number">7</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：我们没有足够的字符去构造 <span class="number">7</span> 个回文串。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 10^5</li><li>s 中所有字符都是小写英文字母。</li><li>1 &lt;= k &lt;= 10^5</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/construct-k-palindrome-strings" target="_blank" rel="noopener">https://leetcode-cn.com/problems/construct-k-palindrome-strings</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 判定不符合条件</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>只需要统计字符的个数即可。对于偶数的字符，我们可以知道它可以拆成一个或者两个或者零个回文字符串都可以。比如 “aaaaa”:<br>我们可以把该字符串本身串联都其他的回文字符串，或者将其当作一个单独的字符串，或者拆成两个字符串。</li><li>但是对于字符数目为奇数的字符我们最少都需要占用一个回文字符串，因为它有一个奇数的字符没法拆分。</li><li>此题实际上转换为求偶数数目的字符的个数。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canConstruct</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> odd = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s.size() &lt; k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(s.size() == k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : s)&#123;</span><br><span class="line">            cnt[c-<span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i]%<span class="number">2</span>) odd++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(odd &gt; k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5361-圆和矩形是否有重叠"><a href="#5361-圆和矩形是否有重叠" class="headerlink" title="5361. 圆和矩形是否有重叠"></a>5361. 圆和矩形是否有重叠</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个以 <code>(radius, x_center, y_center)</code> 表示的圆和一个与坐标轴平行的矩形 <code>(x1, y1, x2, y2)</code>，其中 <code>(x1, y1)</code> 是矩形左下角的坐标，<code>(x2, y2)</code>是右上角的坐标。</p><p>如果圆和矩形有重叠的部分，请你返回 <code>True</code>，否则返回 <code>False</code> 。</p><p>换句话说，请你检测是否 存在 点 <code>(xi, yi)</code>，它既在圆上也在矩形上（两者都包括点落在边界上的情况）。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：radius = <span class="number">1</span>, x_center = <span class="number">0</span>, y_center = <span class="number">0</span>, x1 = <span class="number">1</span>, y1 = <span class="number">-1</span>, x2 = <span class="number">3</span>, y2 = <span class="number">1</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：圆和矩形有公共点 (<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：radius = <span class="number">1</span>, x_center = <span class="number">0</span>, y_center = <span class="number">0</span>, x1 = <span class="number">-1</span>, y1 = <span class="number">0</span>, x2 = <span class="number">0</span>, y2 = <span class="number">1</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：radius = <span class="number">1</span>, x_center = <span class="number">1</span>, y_center = <span class="number">1</span>, x1 = <span class="number">-3</span>, y1 = <span class="number">-3</span>, x2 = <span class="number">3</span>, y2 = <span class="number">3</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：radius = <span class="number">1</span>, x_center = <span class="number">1</span>, y_center = <span class="number">1</span>, x1 = <span class="number">1</span>, y1 = <span class="number">-3</span>, x2 = <span class="number">2</span>, y2 = <span class="number">-1</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= radius &lt;= 2000</code></li><li><code>-10^4 &lt;= x_center, y_center, x1, y1, x2, y2 &lt;= 10^4</code></li><li><code>x1 &lt; x2</code></li><li><code>y1 &lt; y2</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/circle-and-rectangle-overlapping" target="_blank" rel="noopener">https://leetcode-cn.com/problems/circle-and-rectangle-overlapping</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 数学问题</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>圆心如果在矩形内肯定存在交集。</li><li>矩形的边缘如果在园内，则肯定存在交集。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkOverlap</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x_center, <span class="keyword">int</span> y_center, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*inside */</span></span><br><span class="line">        <span class="keyword">if</span>(x_center &gt;= x1 &amp;&amp; x_center &lt;= x2 &amp;&amp; y_center &gt;= y1 &amp;&amp; y_center &lt;= y2) </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">/*left and right*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = y1; i &lt;= y2; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">pow</span>(x1-x_center,<span class="number">2</span>) + <span class="built_in">pow</span>(i-y_center,<span class="number">2</span>)) &lt;= radius*radius) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">pow</span>(x2-x_center,<span class="number">2</span>) + <span class="built_in">pow</span>(i-y_center,<span class="number">2</span>)) &lt;= radius*radius) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*top and buttom*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x1; i &lt;= x2; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">pow</span>(i-x_center,<span class="number">2</span>) + <span class="built_in">pow</span>(y1-y_center,<span class="number">2</span>)) &lt;= radius*radius) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">pow</span>(i-x_center,<span class="number">2</span>) + <span class="built_in">pow</span>(y2-y_center,<span class="number">2</span>)) &lt;= radius*radius) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5363-做菜顺序"><a href="#5363-做菜顺序" class="headerlink" title="5363. 做菜顺序"></a>5363. 做菜顺序</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>一个厨师收集了他 n 道菜的满意程度<code>satisfaction</code>，这个厨师做出每道菜的时间都是 1 单位时间。<br>一道菜的 「喜爱时间」系数定义为烹饪这道菜以及之前每道菜所花费的时间乘以这道菜的满意程度，也就是 <code>time[i]*satisfaction[i]</code> 。<br>请你返回做完所有菜 「喜爱时间」总和的最大值为多少。<br>你可以按 任意 顺序安排做菜的顺序，你也可以选择放弃做某些菜来获得更大的总和。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：satisfaction = [<span class="number">-1</span>,<span class="number">-8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">-9</span>]</span><br><span class="line">输出：<span class="number">14</span></span><br><span class="line">解释：去掉第二道和最后一道菜，最大的喜爱时间系数和为 (<span class="number">-1</span>*<span class="number">1</span> + <span class="number">0</span>*<span class="number">2</span> + <span class="number">5</span>*<span class="number">3</span> = <span class="number">14</span>) 。每道菜都需要花费 <span class="number">1</span> 单位时间完成。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：satisfaction = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">20</span></span><br><span class="line">解释：按照原来顺序相反的时间做菜 (<span class="number">2</span>*<span class="number">1</span> + <span class="number">3</span>*<span class="number">2</span> + <span class="number">4</span>*<span class="number">3</span> = <span class="number">20</span>)</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：satisfaction = [<span class="number">-1</span>,<span class="number">-4</span>,<span class="number">-5</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：大家都不喜欢这些菜，所以不做任何菜可以获得最大的喜爱时间系数。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：satisfaction = [<span class="number">-2</span>,<span class="number">5</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">-3</span>]</span><br><span class="line">输出：<span class="number">35</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == satisfaction.length</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>-10^3 &lt;= satisfaction[i] &lt;= 10^3</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/reducing-dishes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reducing-dishes</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  动态规划  </p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>本题还是比较常见的DP，首先对菜单进行从小到大排序。</li><li>二维dp，<code>dp[i][j]</code>代表从前<code>i</code>道菜品中选择<code>j</code>道菜品所获得最大满意度。</li><li>递推公式为：<script type="math/tex; mode=display">dp[i][j] = max(dp[i-1][j],dp[i-1][j-1] + satisfaction[i]*j)</script></li><li>简单的二维DP，很容易就得到结果。</li></ol></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> dp[M][M];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSatisfaction</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; satisfaction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = satisfaction.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        sort(satisfaction.begin(),satisfaction.end());</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)&#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + satisfaction[i<span class="number">-1</span>]*j;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = max(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + satisfaction[i<span class="number">-1</span>]*j);</span><br><span class="line">                &#125;</span><br><span class="line">                res = max(res,dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;23周比赛&quot;&gt;&lt;a href=&quot;#23周比赛&quot; class=&quot;headerlink&quot; title=&quot;23周比赛&quot;&gt;&lt;/a&gt;23周比赛&lt;/h1&gt;&lt;p&gt;题目比较简单，都做出来了。&lt;/p&gt;&lt;h2 id=&quot;5360-统计最大组的数目&quot;&gt;&lt;a href=&quot;#5360-统计最大组的数目&quot; class=&quot;headerlink&quot; title=&quot;5360. 统计最大组的数目&quot;&gt;&lt;/a&gt;5360. 统计最大组的数目&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数 &lt;code&gt;n&lt;/code&gt;。请你先求出从 1 到 n 的每个整数 10 进制表示下的数位和（每一位上的数字相加），然后把数位和相等的数字放到同一个组中。&lt;/p&gt;&lt;p&gt;请你统计每个组中的数字数目，并返回数字数目并列最多的组有多少个。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：n = &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：总共有 &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; 个组，将 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 到 &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt; 按数位求和后这些组分别是：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;]，[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;]，[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;]，[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;]，[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]，[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]，[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]，[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]，[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]。总共有 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; 个组拥有的数字并列最多。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：n = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：总共有 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 个大小为 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 的组 [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]，[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：n = &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 4：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：n = &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 183周比赛</title>
    <link href="http://yoursite.com/2020/04/05/144/"/>
    <id>http://yoursite.com/2020/04/05/144/</id>
    <published>2020-04-05T11:03:32.352Z</published>
    <updated>2020-04-05T11:03:38.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="183周比赛"><a href="#183周比赛" class="headerlink" title="183周比赛"></a>183周比赛</h1><p>题目都比较简单，除了第三题稍微有点绕弯以外，其余的都比较简单。</p><h2 id="5376-非递增顺序的最小子序列"><a href="#5376-非递增顺序的最小子序列" class="headerlink" title="5376. 非递增顺序的最小子序列"></a>5376. 非递增顺序的最小子序列</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 <code>nums</code>，请你从中抽取一个子序列，满足该子序列的元素之和 严格 大于未包含在该子序列中的各元素之和。<br>如果存在多个解决方案，只需返回 长度最小 的子序列。如果仍然有多个解决方案，则返回 元素之和最大 的子序列。<br>与子数组不同的地方在于，「数组的子序列」不强调元素在原数组中的连续性，也就是说，它可以通过从数组中分离一些（也可能不分离）元素得到。<br>注意，题目数据保证满足所有约束条件的解决方案是 唯一 的。同时，返回的答案应当按 非递增顺序 排列。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>]</span><br><span class="line">输出：[<span class="number">10</span>,<span class="number">9</span>] </span><br><span class="line">解释：子序列 [<span class="number">10</span>,<span class="number">9</span>] 和 [<span class="number">10</span>,<span class="number">8</span>] 是最小的、满足元素之和大于其他各元素之和的子序列。但是 [<span class="number">10</span>,<span class="number">9</span>] 的元素之和最大。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">4</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">输出：[<span class="number">7</span>,<span class="number">7</span>,<span class="number">6</span>] </span><br><span class="line">解释：子序列 [<span class="number">7</span>,<span class="number">7</span>] 的和为 <span class="number">14</span> ，不严格大于剩下的其他元素之和（<span class="number">14</span> = <span class="number">4</span> + <span class="number">4</span> + <span class="number">6</span>）。因此，[<span class="number">7</span>,<span class="number">6</span>,<span class="number">7</span>] 是满足题意的最小子序列。注意，元素按非递增顺序返回。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="string">[6]</span></span><br><span class="line">输出：<span class="string">[6]</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 500</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-subsequence-in-non-increasing-order" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-subsequence-in-non-increasing-order</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>排序之后，暴力即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; minSubsequence(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        reverse(nums.begin(),nums.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums) sum += x;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            curr += nums[i];</span><br><span class="line">            res.push_back(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(curr &gt; sum - curr)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5377-将二进制表示减到-1-的步骤数"><a href="#5377-将二进制表示减到-1-的步骤数" class="headerlink" title="5377. 将二进制表示减到 1 的步骤数"></a>5377. 将二进制表示减到 1 的步骤数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个以二进制形式表示的数字 s 。请你返回按下述规则将其减少到 1 所需要的步骤数：<br>如果当前数字为偶数，则将其除以 2 。<br>如果当前数字为奇数，则将其加上 1 。<br>题目保证你总是可以按上述规则将测试用例变为 1 。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"1101"</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：<span class="string">"1101"</span> 表示十进制数 <span class="number">13</span> 。</span><br><span class="line">Step <span class="number">1</span>) <span class="number">13</span> 是奇数，加 <span class="number">1</span> 得到 <span class="number">14</span> </span><br><span class="line">Step <span class="number">2</span>) <span class="number">14</span> 是偶数，除 <span class="number">2</span> 得到 <span class="number">7</span></span><br><span class="line">Step <span class="number">3</span>) <span class="number">7</span>  是奇数，加 <span class="number">1</span> 得到 <span class="number">8</span></span><br><span class="line">Step <span class="number">4</span>) <span class="number">8</span>  是偶数，除 <span class="number">2</span> 得到 <span class="number">4</span>  </span><br><span class="line">Step <span class="number">5</span>) <span class="number">4</span>  是偶数，除 <span class="number">2</span> 得到 <span class="number">2</span> </span><br><span class="line">Step <span class="number">6</span>) <span class="number">2</span>  是偶数，除 <span class="number">2</span> 得到 <span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"10"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：<span class="string">"10"</span> 表示十进制数 <span class="number">2</span> 。</span><br><span class="line">Step <span class="number">1</span>) <span class="number">2</span> 是偶数，除 <span class="number">2</span> 得到 <span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"1"</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 500</code></li><li><code>s 由字符 &#39;0&#39; 或 &#39;1&#39; 组成</code></li><li><code>s[0] == &#39;1&#39;</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接模拟计算即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>由于本身的二进制长度很长，可能大于200.</li><li><code>python</code>或者<code>java</code>支持超长数目，所以可以直接计算即可。</li><li><code>c/c++</code>由于没有不支持超长整形，所以我们直接对二进制字符串本身进行模拟加法或者减法即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">increment</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = s.size()<span class="number">-1</span>; i &gt;=<span class="number">0</span> ; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'1'</span> &amp;&amp; carry == <span class="number">1</span>)&#123;</span><br><span class="line">                s[i] = <span class="string">'0'</span>;</span><br><span class="line">                carry = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                s[i] = s[i] + carry;</span><br><span class="line">                carry = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> carry == <span class="number">1</span>?(<span class="string">'1'</span>+ s):(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">decrement</span><span class="params">(<span class="built_in">string</span> &amp; s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.substr(<span class="number">0</span>,s.size()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSteps</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(s != <span class="string">"1"</span>)&#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">if</span>(s.back() == <span class="string">'1'</span>) s = increment(s);</span><br><span class="line">            <span class="keyword">else</span> s = decrement(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5195-最长快乐字符串"><a href="#5195-最长快乐字符串" class="headerlink" title="5195. 最长快乐字符串"></a>5195. 最长快乐字符串</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>如果字符串中不含有任何 <code>&#39;aaa&#39;，&#39;bbb&#39; 或 &#39;ccc&#39;</code>这样的字符串作为子串，那么该字符串就是一个「快乐字符串」。</p><p>给你三个整数 <code>a，b ，c，</code>请你返回 任意一个 满足下列全部条件的字符串 s：</p><ul><li><code>s</code>是一个尽可能长的快乐字符串。</li><li><code>s</code>中 最多 有a 个字母 ‘a’、b 个字母 ‘b’、c 个字母 ‘c’ 。</li><li><code>s</code>中只含有 ‘a’、’b’ 、’c’ 三种字母。</li></ul><p>如果不存在这样的字符串<code>s</code>，请返回一个空字符串 “”。<br>示例 1：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="selector-tag">a</span> = <span class="number">1</span>, <span class="selector-tag">b</span> = <span class="number">1</span>, c = <span class="number">7</span></span><br><span class="line">输出：<span class="string">"ccaccbcc"</span></span><br><span class="line">解释：<span class="string">"ccbccacc"</span> 也是一种正确答案。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="selector-tag">a</span> = <span class="number">2</span>, <span class="selector-tag">b</span> = <span class="number">2</span>, c = <span class="number">1</span></span><br><span class="line">输出：<span class="string">"aabbc"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="selector-tag">a</span> = <span class="number">7</span>, <span class="selector-tag">b</span> = <span class="number">1</span>, c = <span class="number">0</span></span><br><span class="line">输出：<span class="string">"aabaa"</span></span><br><span class="line">解释：这是该测试用例的唯一正确答案。</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>0 &lt;= a, b, c &lt;= 100</code></li><li><code>a + b + c &gt; 0</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/longest-happy-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-happy-string</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>每次优先取长度最长的那个字符，如果该字符之前已经出现了两次，则我们选择次等长度的。</li><li>但是这个题目确实出的不够好，因为实际也并没有对字符的数目进行限制。比较混乱。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestDiverseString</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span>((a+b+c) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> len = res.size();</span><br><span class="line">            <span class="keyword">int</span> x = max(a,max(b,c));</span><br><span class="line">            <span class="keyword">if</span>(x == a)&#123;</span><br><span class="line">                <span class="keyword">if</span>(len &lt; <span class="number">2</span> || res.substr(len<span class="number">-2</span>) != <span class="string">"aa"</span>)&#123;</span><br><span class="line">                    res += <span class="string">'a'</span>;</span><br><span class="line">                    a--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(max(b,c) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(b == max(b,c))&#123;</span><br><span class="line">                        res += <span class="string">'b'</span>;</span><br><span class="line">                        b--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        res += <span class="string">'c'</span>;</span><br><span class="line">                        c--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x == b)&#123;</span><br><span class="line">                <span class="keyword">if</span>(len &lt; <span class="number">2</span> || res.substr(len<span class="number">-2</span>) != <span class="string">"bb"</span>)&#123;</span><br><span class="line">                    res += <span class="string">'b'</span>;</span><br><span class="line">                    b--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(max(a,c) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a == max(a,c))&#123;</span><br><span class="line">                        res += <span class="string">'a'</span>;</span><br><span class="line">                        a--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        res += <span class="string">'c'</span>;</span><br><span class="line">                        c--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x == c)&#123;</span><br><span class="line">                <span class="keyword">if</span>(len &lt; <span class="number">2</span> || res.substr(len<span class="number">-2</span>) != <span class="string">"cc"</span>)&#123;</span><br><span class="line">                    res += <span class="string">'c'</span>;</span><br><span class="line">                    c--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(max(a,b) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a == max(a,b))&#123;</span><br><span class="line">                        res += <span class="string">'a'</span>;</span><br><span class="line">                        a--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        res += <span class="string">'b'</span>;</span><br><span class="line">                        b--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5379-石子游戏-III"><a href="#5379-石子游戏-III" class="headerlink" title="5379. 石子游戏 III"></a>5379. 石子游戏 III</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>Alice 和 Bob 用几堆石子在做游戏。几堆石子排成一行，每堆石子都对应一个得分，由数组 stoneValue 给出。</p><p>Alice 和 Bob 轮流取石子，Alice 总是先开始。在每个玩家的回合中，该玩家可以拿走剩下石子中的的前 1、2 或 3 堆石子 。比赛一直持续到所有石头都被拿走。</p><p>每个玩家的最终得分为他所拿到的每堆石子的对应得分之和。每个玩家的初始分数都是 0 。比赛的目标是决出最高分，得分最高的选手将会赢得比赛，比赛也可能会出现平局。</p><p>假设 Alice 和 Bob 都采取 最优策略 。如果 Alice 赢了就返回 “Alice” ，Bob 赢了就返回 “Bob”，平局（分数相同）返回 “Tie” 。</p><p>示例 1：</p><p>输入：values = [1,2,3,7]<br>输出：”Bob”<br>解释：Alice 总是会输，她的最佳选择是拿走前三堆，得分变成 6 。但是 Bob 的得分为 7，Bob 获胜。</p><p>示例 2：</p><p>输入：values = [1,2,3,-9]<br>输出：”Alice”<br>解释：Alice 要想获胜就必须在第一个回合拿走前三堆石子，给 Bob 留下负分。<br>如果 Alice 只拿走第一堆，那么她的得分为 1，接下来 Bob 拿走第二、三堆，得分为 5 。之后 Alice 只能拿到分数 -9 的石子堆，输掉比赛。<br>如果 Alice 拿走前两堆，那么她的得分为 3，接下来 Bob 拿走第三堆，得分为 3 。之后 Alice 只能拿到分数 -9 的石子堆，同样会输掉比赛。<br>注意，他们都应该采取 最优策略 ，所以在这里 Alice 将选择能够使她获胜的方案。</p><p>示例 3：</p><p>输入：values = [1,2,3,6]<br>输出：”Tie”<br>解释：Alice 无法赢得比赛。如果她决定选择前三堆，她可以以平局结束比赛，否则她就会输。</p><p>示例 4：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="string">"Alice"</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：values = [<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>]</span><br><span class="line">输出：<span class="string">"Tie"</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= values.length &lt;= 50000</code></li><li><code>-1000 &lt;= values[i] &lt;= 1000</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/stone-game-iii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/stone-game-iii</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p>  动态规划  </p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>比较传统的题目，我们设立dp动态规划。<code>dp[i]</code>代表从<code>i</code>处进行游戏时，在最优策略下直到游戏结束时，自己所能取到的最多的石子的数目。<code>sum[i]</code>代表从i到n的石子的总的数目；</li><li>递推公式为：<script type="math/tex; mode=display">dp[i] = max\left\{\begin{aligned}\sum_{k = 0}^{0}stones[i+k] + sum[i+1] - dp[i+1] \\\sum_{k = 0}^{1}stones[i+k] + sum[i+2] - dp[i+2] \\\sum_{k = 0}^{2}stones[i+k] + sum[i+3] - dp[i+3] \\\end{aligned}\right.</script></li><li>我们倒序从最后的元素开始计算，设dp[n] = 0;我们在O(N)的时间复杂度内既可以求出结果。</li></ol></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">stoneGameIII</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stoneValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = stoneValue.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n+<span class="number">1</span>,INT_MIN);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i) sum[i] = sum[i+<span class="number">1</span>] + stoneValue[i];</span><br><span class="line">      </span><br><span class="line">        dp[n] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i= n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n &amp;&amp; j &lt;= i + <span class="number">2</span>; j++)&#123;</span><br><span class="line">                curr += stoneValue[j];</span><br><span class="line">                dp[i] = max(dp[i],curr+sum[j+<span class="number">1</span>]-dp[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(dp[<span class="number">0</span>] == sum[<span class="number">0</span>] - dp[<span class="number">0</span>]) <span class="keyword">return</span> <span class="string">"Tie"</span>;</span><br><span class="line">        <span class="keyword">if</span>(dp[<span class="number">0</span>] &gt; sum[<span class="number">0</span>] - dp[<span class="number">0</span>]) <span class="keyword">return</span> <span class="string">"Alice"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Bob"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;183周比赛&quot;&gt;&lt;a href=&quot;#183周比赛&quot; class=&quot;headerlink&quot; title=&quot;183周比赛&quot;&gt;&lt;/a&gt;183周比赛&lt;/h1&gt;&lt;p&gt;题目都比较简单，除了第三题稍微有点绕弯以外，其余的都比较简单。&lt;/p&gt;&lt;h2 id=&quot;5376-非递增顺序的最小子序列&quot;&gt;&lt;a href=&quot;#5376-非递增顺序的最小子序列&quot; class=&quot;headerlink&quot; title=&quot;5376. 非递增顺序的最小子序列&quot;&gt;&lt;/a&gt;5376. 非递增顺序的最小子序列&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个数组 &lt;code&gt;nums&lt;/code&gt;，请你从中抽取一个子序列，满足该子序列的元素之和 严格 大于未包含在该子序列中的各元素之和。&lt;br&gt;如果存在多个解决方案，只需返回 长度最小 的子序列。如果仍然有多个解决方案，则返回 元素之和最大 的子序列。&lt;br&gt;与子数组不同的地方在于，「数组的子序列」不强调元素在原数组中的连续性，也就是说，它可以通过从数组中分离一些（也可能不分离）元素得到。&lt;br&gt;注意，题目数据保证满足所有约束条件的解决方案是 唯一 的。同时，返回的答案应当按 非递增顺序 排列。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>读书感想</title>
    <link href="http://yoursite.com/2020/04/01/143/"/>
    <id>http://yoursite.com/2020/04/01/143/</id>
    <published>2020-04-01T05:19:38.278Z</published>
    <updated>2020-04-01T05:19:48.091Z</updated>
    
    <content type="html"><![CDATA[<h3 id="少有人走的路"><a href="#少有人走的路" class="headerlink" title="少有人走的路"></a>少有人走的路</h3><p>最近自己一直在看关于心理方面和社会方面的书，越来越感慨好自己以往的过失与浪费生命。越来越想针对自身的错误来分析自身。<br>总结一下自己所犯的错误的原因如下：</p><h4 id="1-缺乏目标"><a href="#1-缺乏目标" class="headerlink" title="1.缺乏目标"></a>1.缺乏目标</h4><p>感慨自身缺乏目标的有内在的原因也有外在的原因。正是因为却反目标得人生导致了现在被动得自己，自己正所谓得随波逐流，本质上就是昏昏耗耗，其实许多周围人也不见得在这个问题上比自己做的更好，因为毕竟“现世太辛苦和匆忙”，能有时间和精力把健康、家庭、工作都兼顾好都已经非常不容易了，哪里还顾得上更远大得追求，所谓得人生活着得意义这种虚无缥缈得问题，更是少有人去思考。当然人类在进化过程中，进喜欢深度思考和做决策，毕竟深度思考和做决策都需要耗费极大的精力，承担极大的责任，冒着极大的风险，这是本身就是人类进化的结果导致，毕竟现世生活中越操心的人老的越快，反而那些什么都不思考的人活得最长寿。人类进化过程中少部分精英能够有极大的耐心，从内部打破这种依赖，深度去思考世界，思考社会。</p><a id="more"></a><ul><li>内在的原因是因为对自身不够自信，很少独立的去做自己的决定，做决定前害怕做错决定，殊不知人生中哪有会不做错误的决定，究其原因也是从小养成的习惯，从童年开始自己就是一个没有目标的人，做事情只想着做到最好，但没有明确的目标。包括高考，找工作，考研，结婚，买房。感觉人生中的几年大事似乎都是糊里糊涂的就过去了，从来没有认真的思考，这些工作，这些东西是否有过遵从自己的内心。当然了，虽然自己取得一定的成就，从偏远的农村出来，能够在大城市安身立命本身就是非常的不容易。但是时常回顾过往的三十几年，回想起来很多事情其实都过得糊里糊涂，虽然自我评价智商可以，但是很多更长远得目标并没有去实施。我想存在以上这些问题可能本身得出身有关，出身不易，大部分时间只顾的”眼前得苟且“，哪里还有时间去思考”远方得田野“。当然目标是生活稍微安定了以后，物质条件满足了以后，才有很多得闲暇时间来思考人生，来思考活着意义，来思考个人追求得价值观，正所谓得“饱暖思淫欲”吧，人的欲望总是随着周围得环境在不断放大。</li><li>外在得原因是没有进入一个更好的环境。周围人也绝大部分昏昏耗耗，找到志同道合得人已经非常难得，大毕竟大部分人都是普通人，哪有心思去思考人生的追求和意义。在这样物欲横流的社会，大部分都去谁随经济收入、房子、车子、名誉、地位了。有时候跟一些朋友探讨一些问题或者现象时，很少有人对这些话题感兴趣，毕竟大家都是俗人，吃饱饭、住大房子、开豪车、追求权力和地位，这才是最现实的需求。可能我自己觉得自身还是层次太低了，接触的真正的有目标有行动力的人群太少了，大都只能通过网上交流和认识一些网友。从自身来说，一直想跳出体制内这个圈子，不喜欢体制内这种氛围，大部分人都没啥追求的动力，都是安安稳稳的过日子，没有目标没有追求。当然，体制内对于普通人来说绝对时最好的选择，基本上一辈子不会有太大的风险，也不用费劲自己做决定和努力，只需要安安稳稳的过日子即可，一辈子虽不能大富大贵，但是大部分人身体健康，也没有失业的风险，但是自身的成就感太差，绝大分基层很少感受到自身存在的价值。在这种氛围下，时间长了人也会变得非常没有上进心，只想安安稳稳的混日子。所以非常需要一个良好的外部坏境来刺激自己进入到正循环。</li><li>解决办法：</li></ul><ol><li>每年定好自己的目标，每月定时公布自己的进度与进展。不要随意更改自己的目标。疫情过去了，终于可以正常上班了，计划用excel或者表格，定时在网上公布自己每天的进展和进度总结。只有日继月累才有成效。</li><li>今年要主动去寻求改变，改变自身和外部，希望能够跳出体制，找到一个更加让人上进的环境去奋斗。</li></ol><h4 id="2-缺乏自律"><a href="#2-缺乏自律" class="headerlink" title="2.缺乏自律"></a>2.缺乏自律</h4><p>只有自律的人生，才能有所成就和收获。现实社会中，能够真正做到自律的少之又少，我现在回想起来，自己真正进步最快的那段时光，第一段时间是在初二的时候，依稀还记得当时刚开始学习三角几何，那是一段让人充实而又难忘得自学时光。每天自己提前预习课本，每天自己定时自己得进度，每天回顾自身，回想起来那段时间也是自己进度最快得时候，完全凭借着自己得兴趣和热情，然而工作以来，很少再有这种冲动了。另外一段时光是自己考研的时候，每天自己安排生活，自己定好进度和目标，隔一天复习，那时候的自己是简单而又充实的，虽然物质生活过得很苦，但是精神上却非常满足。如今的社会中，诱惑太多，毕竟当自己</p><ul><li>自身的原因。还是对目标不够坚定，没有追求导致。只有心中有非常坚定的目标，才能坚持不懈的努力和追求。我想实际上真正投入后，工作带来的乐趣远大于游戏和娱乐的乐趣，因为工作带来的成就感会持久很长一段，而娱乐带来的快感只有一小段时间，而且长时间的娱乐和放松反而会给人带来浪费时间的愧疚感。</li><li>外界的原因。当前社会的诱惑太多，许多年轻人，包括我自己对于电子游戏、互联网媒体沉迷，长时间陷入不能自拔。这时一个很重要的问题所在，在所有容易收到诱惑的地方浪费了太多宝贵的时间，本来应该利用这些时间来锻炼身体，学习，陪伴关心家人，却都被自身浪费在了一些无所事事的社交媒体上，特别是疫情期间又无法外出，大家都憋在家中无所事事，只能通过社交媒体发泄自己的情绪和不满。每天尽量少看手机和微信，除工作必须以外，将手机使用时间控制在1个小时以内。这是非常重要的一个原因。</li><li>身体的原因。由于疫情期间不能正常外出作息，每天憋在家里，运动量严重不足，时间长了难免心里压抑，并且饮食结构严重不健康。希望快点能够恢复正常，恢复正常的活力，将身体养好。晚上睡觉前坚决不带手机到卧室，这样可以有效的改善自己晚睡的坏习惯。其实本来在武汉的疫情到来以前，晚睡的坏习惯早就改善了，可惜因为疫情的到来，严重的影响了自身的身体健康和作息习惯，要快速的调整过来。只有身心健康，一个人的心情才好，只有心情好，才能拥有事业的进步，才能拥有人生的选择权。</li><li>解决办法：</li></ul><ol><li>坚持锻炼身体。我想只有健康的体魄才是解决问题的根源。按照医学的统计，运动会促进体内的多巴胺的分泌，多巴胺会导致神经兴奋，这也是大多数人运动后心情愉快的根本原因。目前健身房还是没有开门，计划健身房开门后，还是坚持每周3-4次的游泳，每次半个小时。这点一定一定要坚持。</li><li>杜绝一切干扰自身的因素。坚持早上12点前，除非有重要事情，坚持不刷手机。退出所有不必要的微信群，QQ群。除了工作群和校友群以外，全部退出。因为绝大多数的群到了后期都是灌水，很少有真正有营养的东西值得自己去学习和交流，删除电脑上所有的电子游戏。所有不必要的微信公众号全部不再关注。晚上睡觉前坚决不带手机到卧室。</li><li>晚上10点30准时上床休息或看书，养成早睡早起的好习惯。</li><li>每天坚持早上到办公室做好一天的工作计划和安排。<h4 id="3-缺乏自信"><a href="#3-缺乏自信" class="headerlink" title="3.缺乏自信"></a>3.缺乏自信</h4>缺乏自信这个问题，我想跟自身的原生家庭有很大的影响，小时候形成的价值观太难改变了。从小父母给自己的感觉是父亲是个沉默寡言的老实人，顺从不会反抗。父亲做个好榜样其实对自身的影响非常大，很少做过让我们觉得骄傲的事情，依稀还记得小时候的自己又瘦又小，在整个村里面家庭条件都非常差，整天感觉家里面逆来顺受，很少因为这个家庭而感到骄傲。母亲那时候身体不好，时常生病，父亲总是唉声叹气，却很少主动想办法去解决问题，那时候给自己幼小的自己带来很多生活上的阴影。有时候回忆起来，感觉小时候家庭的负面影响太大了，有时候觉得自己读书读研，进入体制内能够到大城市定居真心不容易，历经的挫折和艰辛只有自己知道，这些从来很少跟父亲提到过一路走来的艰辛和不易，别人只看到你表面的光鲜，没看到你背后的努力和受到的委屈。</li></ol><ul><li>现在自己也当了父母了，时刻回忆起来自己小时候受到的挫折和鄙视。怎样给自己的下一代塑造一个健康和正面的心里非常重要，所以现在很少用负面消息去贬低自己的孩子，希望能够给他们正面的形象，让他们的童年能够真正的快乐和健康。每天晚上看着儿子和女儿两个小家伙开心的在床上蹦蹦跳跳的，觉得很知足。希望下一代能够不要再经历我们这一代的不幸。一代总比一代好。他们有着这么好的资源和生活条件，远比我们小时候幸福的多。</li></ul><h4 id="4-遵从自己得内心"><a href="#4-遵从自己得内心" class="headerlink" title="4. 遵从自己得内心"></a>4. 遵从自己得内心</h4><p>人到中年，就会越发感慨，见了许多的离别与生死。身边许多小时候的亲人一个接一个的走掉，人难免都会到达终点，开始思考人生的意义。人活着到底为了什么，怎么样活才能不白活一辈子。难得世上走一回，我觉得更应该要遵从自己的内心，活给自己看，自己活得开心才是最重要，整日的带着面具活着才是最没有意义的。所以以后对自己小孩的要求是千万不要从政，在体制内很少能够活出自己本来的面目，从上到小可能都需要带着面具活着。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;少有人走的路&quot;&gt;&lt;a href=&quot;#少有人走的路&quot; class=&quot;headerlink&quot; title=&quot;少有人走的路&quot;&gt;&lt;/a&gt;少有人走的路&lt;/h3&gt;&lt;p&gt;最近自己一直在看关于心理方面和社会方面的书，越来越感慨好自己以往的过失与浪费生命。越来越想针对自身的错误来分析自身。&lt;br&gt;总结一下自己所犯的错误的原因如下：&lt;/p&gt;&lt;h4 id=&quot;1-缺乏目标&quot;&gt;&lt;a href=&quot;#1-缺乏目标&quot; class=&quot;headerlink&quot; title=&quot;1.缺乏目标&quot;&gt;&lt;/a&gt;1.缺乏目标&lt;/h4&gt;&lt;p&gt;感慨自身缺乏目标的有内在的原因也有外在的原因。正是因为却反目标得人生导致了现在被动得自己，自己正所谓得随波逐流，本质上就是昏昏耗耗，其实许多周围人也不见得在这个问题上比自己做的更好，因为毕竟“现世太辛苦和匆忙”，能有时间和精力把健康、家庭、工作都兼顾好都已经非常不容易了，哪里还顾得上更远大得追求，所谓得人生活着得意义这种虚无缥缈得问题，更是少有人去思考。当然人类在进化过程中，进喜欢深度思考和做决策，毕竟深度思考和做决策都需要耗费极大的精力，承担极大的责任，冒着极大的风险，这是本身就是人类进化的结果导致，毕竟现世生活中越操心的人老的越快，反而那些什么都不思考的人活得最长寿。人类进化过程中少部分精英能够有极大的耐心，从内部打破这种依赖，深度去思考世界，思考社会。&lt;/p&gt;
    
    </summary>
    
    
      <category term="人生感悟" scheme="http://yoursite.com/categories/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="《少有人走得路》" scheme="http://yoursite.com/tags/%E3%80%8A%E5%B0%91%E6%9C%89%E4%BA%BA%E8%B5%B0%E5%BE%97%E8%B7%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 182周比赛</title>
    <link href="http://yoursite.com/2020/03/31/142/"/>
    <id>http://yoursite.com/2020/03/31/142/</id>
    <published>2020-03-31T06:10:48.236Z</published>
    <updated>2020-04-01T07:51:04.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="182周比赛"><a href="#182周比赛" class="headerlink" title="182周比赛"></a>182周比赛</h1><p>前三题都是暴力，最后一题比较难</p><h2 id="5368-找出数组中的幸运数"><a href="#5368-找出数组中的幸运数" class="headerlink" title="5368. 找出数组中的幸运数"></a>5368. 找出数组中的幸运数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在整数数组中，如果一个整数的出现频次和它的数值大小相等，我们就称这个整数为「幸运数」。</p><p>给你一个整数数组 <code>arr</code>，请你从中找出并返回一个幸运数。</p><p>如果数组中存在多个幸运数，只需返回 最大 的那个。<br>如果数组中不含幸运数，则返回 -1 。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：数组中唯一的幸运数是 <span class="number">2</span> ，因为数值 <span class="number">2</span> 的出现频次也是 <span class="number">2</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：<span class="number">1</span>、<span class="number">2</span> 以及 <span class="number">3</span> 都是幸运数，只需要返回其中最大的 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：数组中不存在幸运数。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">-1</span></span><br></pre></td></tr></table></figure></p><p>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 500</code></li><li><code>1 &lt;= arr[i] &lt;= 500</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-lucky-integer-in-an-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-lucky-integer-in-an-array</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>幸运数即出现的次数于数目本身相等，直接暴力统计数目的次数即可<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findLucky</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> a : arr)&#123;</span><br><span class="line">            cnt[a]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e : cnt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(e.first == e.second)&#123;</span><br><span class="line">                res = e.first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5369-统计作战单位数"><a href="#5369-统计作战单位数" class="headerlink" title="5369. 统计作战单位数"></a>5369. 统计作战单位数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><code>n</code>名士兵站成一排。每个士兵都有一个 独一无二 的评分 <code>rating</code>。</p><p>每 3 个士兵可以组成一个作战单位，分组规则如下：</p><ul><li>从队伍中选出下标分别为<code>i、j、k</code> 的 3 名士兵，他们的评分分别为 `rating[i]、rating[j]、rating[k]``</li><li>作战单位需满足： <code>rating[i] &lt; rating[j] &lt; rating[k]</code>或者 <code>rating[i] &gt; rating[j] &gt; rating[k]</code>，其中 <code>0 &lt;= i &lt; j &lt; k &lt; n</code><br>请你返回按上述条件可以组建的作战单位数量。每个士兵都可以是多个作战单位的一部分。</li></ul><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：rating = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：我们可以组建三个作战单位 (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)、(<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>)、(<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>) 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：rating = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：根据题目条件，我们无法组建作战单位。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：rating = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>n == rating.length</code></li><li><code>1 &lt;= n &lt;= 200</code></li><li><code>1 &lt;= rating[i] &lt;= 10^5</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-number-of-teams" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-number-of-teams</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 数据量很小，直接暴力即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>暴力三次循环，直接就可以算出来</li><li>稍微用点技巧O(n^2)。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTeams</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; rating)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rating.size() &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rating.size()<span class="number">-2</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; rating.size()<span class="number">-1</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j; k &lt; rating.size(); ++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(rating[i] &gt; rating[j] &amp;&amp; rating[j] &gt; rating[k])</span><br><span class="line">                        res++;</span><br><span class="line">                    <span class="keyword">if</span>(rating[i] &lt; rating[j] &amp;&amp; rating[j] &lt; rating[k])</span><br><span class="line">                        res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTeams</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; rating)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = rating.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n <span class="number">-1</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> l1 = <span class="number">0</span>,r1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> l2 = <span class="number">0</span>,r2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(rating[j] &lt; rating[i])&#123;</span><br><span class="line">                    l1++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rating[j] &gt; rating[i])&#123;</span><br><span class="line">                    l2++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(rating[j] &gt; rating[i])&#123;</span><br><span class="line">                    r1++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rating[j] &lt; rating[i])&#123;</span><br><span class="line">                    r2++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res += l1*r1;</span><br><span class="line">            res += l2*r2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5370-设计地铁系统"><a href="#5370-设计地铁系统" class="headerlink" title="5370. 设计地铁系统"></a>5370. 设计地铁系统</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>请你实现一个类 <code>UndergroundSystem</code>，它支持以下 3 种方法：</p><ol><li><code>checkIn(int id, string stationName, int t)</code></li></ol><ul><li>编号为 id 的乘客在 t 时刻进入地铁站 <code>stationName</code> 。</li><li>一个乘客在同一时间只能在一个地铁站进入或者离开。</li></ul><ol><li><code>checkOut(int id, string stationName, int t)</code></li></ol><ul><li>编号为 id 的乘客在 t 时刻离开地铁站 <code>stationName</code>。</li></ul><ol><li><code>getAverageTime(string startStation, string endStation)</code> </li></ol><ul><li>返回从地铁站 <code>startStation</code> 到地铁站<code>endStation</code> 的平均花费时间。</li><li>平均时间计算的行程包括当前为止所有从 <code>startStation</code> 直接到达<code>endStation</code> 的行程。</li><li>调用<code>getAverageTime</code> 时，询问的路线至少包含一趟行程。<br>你可以假设所有对<code>checkIn</code> 和 <code>checkOut</code>的调用都是符合逻辑的。也就是说，如果一个顾客在 t1 时刻到达某个地铁站，那么他离开的时间 t2 一定满足 t2 &gt; t1 。所有的事件都按时间顺序给出。</li></ul><p>示例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">"UndergroundSystem"</span>,<span class="string">"checkIn"</span>,<span class="string">"checkIn"</span>,<span class="string">"checkIn"</span>,<span class="string">"checkOut"</span>,<span class="string">"checkOut"</span>,<span class="string">"checkOut"</span>,<span class="string">"getAverageTime"</span>,<span class="string">"getAverageTime"</span>,<span class="string">"checkIn"</span>,<span class="string">"getAverageTime"</span>,<span class="string">"checkOut"</span>,<span class="string">"getAverageTime"</span>]</span><br><span class="line">[[],[<span class="number">45</span>,<span class="string">"Leyton"</span>,<span class="number">3</span>],[<span class="number">32</span>,<span class="string">"Paradise"</span>,<span class="number">8</span>],[<span class="number">27</span>,<span class="string">"Leyton"</span>,<span class="number">10</span>],[<span class="number">45</span>,<span class="string">"Waterloo"</span>,<span class="number">15</span>],[<span class="number">27</span>,<span class="string">"Waterloo"</span>,<span class="number">20</span>],[<span class="number">32</span>,<span class="string">"Cambridge"</span>,<span class="number">22</span>],[<span class="string">"Paradise"</span>,<span class="string">"Cambridge"</span>],[<span class="string">"Leyton"</span>,<span class="string">"Waterloo"</span>],[<span class="number">10</span>,<span class="string">"Leyton"</span>,<span class="number">24</span>],[<span class="string">"Leyton"</span>,<span class="string">"Waterloo"</span>],[<span class="number">10</span>,<span class="string">"Waterloo"</span>,<span class="number">38</span>],[<span class="string">"Leyton"</span>,<span class="string">"Waterloo"</span>]]</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[null,null,null,null,null,null,null,<span class="number">14.0</span>,<span class="number">11.0</span>,null,<span class="number">11.0</span>,null,<span class="number">12.0</span>]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">UndergroundSystem undergroundSystem = new UndergroundSystem();</span><br><span class="line">undergroundSystem.checkIn(<span class="number">45</span>, <span class="string">"Leyton"</span>, <span class="number">3</span>);</span><br><span class="line">undergroundSystem.checkIn(<span class="number">32</span>, <span class="string">"Paradise"</span>, <span class="number">8</span>);</span><br><span class="line">undergroundSystem.checkIn(<span class="number">27</span>, <span class="string">"Leyton"</span>, <span class="number">10</span>);</span><br><span class="line">undergroundSystem.checkOut(<span class="number">45</span>, <span class="string">"Waterloo"</span>, <span class="number">15</span>);</span><br><span class="line">undergroundSystem.checkOut(<span class="number">27</span>, <span class="string">"Waterloo"</span>, <span class="number">20</span>);</span><br><span class="line">undergroundSystem.checkOut(<span class="number">32</span>, <span class="string">"Cambridge"</span>, <span class="number">22</span>);</span><br><span class="line">undergroundSystem.getAverageTime(<span class="string">"Paradise"</span>, <span class="string">"Cambridge"</span>);       <span class="comment">// 返回 14.0。从 "Paradise"（时刻 8）到 "Cambridge"(时刻 22)的行程只有一趟</span></span><br><span class="line">undergroundSystem.getAverageTime(<span class="string">"Leyton"</span>, <span class="string">"Waterloo"</span>);          <span class="comment">// 返回 11.0。总共有 2 躺从 "Leyton" 到 "Waterloo" 的行程，编号为 id=45 的乘客出发于 time=3 到达于 time=15，编号为 id=27 的乘客于 time=10 出发于 time=20 到达。所以平均时间为 ( (15-3) + (20-10) ) / 2 = 11.0</span></span><br><span class="line">undergroundSystem.checkIn(<span class="number">10</span>, <span class="string">"Leyton"</span>, <span class="number">24</span>);</span><br><span class="line">undergroundSystem.getAverageTime(<span class="string">"Leyton"</span>, <span class="string">"Waterloo"</span>);          <span class="comment">// 返回 11.0</span></span><br><span class="line">undergroundSystem.checkOut(<span class="number">10</span>, <span class="string">"Waterloo"</span>, <span class="number">38</span>);</span><br><span class="line">undergroundSystem.getAverageTime(<span class="string">"Leyton"</span>, <span class="string">"Waterloo"</span>);          <span class="comment">// 返回 12.0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>总共最多有 <code>20000</code> 次操作。</li><li><code>1 &lt;= id, t &lt;= 10^6</code></li><li>所有的字符串包含大写字母，小写字母和数字。</li><li><code>1 &lt;= stationName.length &lt;= 10</code></li><li>与标准答案误差在<code>10^-5</code> 以内的结果都视为正确结果。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/design-underground-system" target="_blank" rel="noopener">https://leetcode-cn.com/problems/design-underground-system</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 系统设计题目</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>系统设计题目本身很简单，本周的5分钟就搞定了。没有涉及到太多技巧的东西。</li><li>存储每个人的进站信息，<code>checkout</code>时计算该人的花费的时间。并将该人的花费时间加入到统计信息中。</li><li>每次获取平均时间时，直接用耗费的总时间除以总人数。</li></ol></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UndergroundSystem</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    UndergroundSystem() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkIn</span><span class="params">(<span class="keyword">int</span> id, <span class="built_in">string</span> stationName, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        getIn[id] = make_pair(stationName,t);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkOut</span><span class="params">(<span class="keyword">int</span> id, <span class="built_in">string</span> stationName, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; p = <span class="keyword">this</span>-&gt;getIn[id];</span><br><span class="line">        <span class="keyword">int</span> cost = t - p.second;</span><br><span class="line">        <span class="built_in">string</span> key = p.first + <span class="string">":"</span> + stationName;</span><br><span class="line">        count[key]++;</span><br><span class="line">        sum[key] += cost;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getAverageTime</span><span class="params">(<span class="built_in">string</span> startStation, <span class="built_in">string</span> endStation)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> key = startStation + <span class="string">":"</span> + endStation;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">double</span>(sum[key])/count[key];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; count;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; sum;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt; getIn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your UndergroundSystem object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * UndergroundSystem* obj = new UndergroundSystem();</span></span><br><span class="line"><span class="comment"> * obj-&gt;checkIn(id,stationName,t);</span></span><br><span class="line"><span class="comment"> * obj-&gt;checkOut(id,stationName,t);</span></span><br><span class="line"><span class="comment"> * double param_3 = obj-&gt;getAverageTime(startStation,endStation);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="5371-找到所有好字符串"><a href="#5371-找到所有好字符串" class="headerlink" title="5371. 找到所有好字符串"></a>5371. 找到所有好字符串</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你两个长度为 n 的字符串 s1 和 s2 ，以及一个字符串<code>evil</code> 。请你返回 好字符串 的数目。</p><p>好字符串 的定义为：它的长度为 n ，字典序大于等于 s1 ，字典序小于等于 s2 ，且不包含 <code>evil</code>为子字符串。</p><p>由于答案可能很大，请你返回答案对 <code>10^9 + 7</code>取余的结果。</p><p>示例 1：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, s1 = <span class="string">"aa"</span>, s2 = <span class="string">"da"</span>, evil = <span class="string">"b"</span></span><br><span class="line">输出：<span class="number">51</span> </span><br><span class="line">解释：总共有 <span class="number">25</span> 个以 <span class="string">'a'</span> 开头的好字符串：<span class="string">"aa"</span>，<span class="string">"ac"</span>，<span class="string">"ad"</span>，<span class="params">...</span>，<span class="string">"az"</span>。还有 <span class="number">25</span> 个以 <span class="string">'c'</span> 开头的好字符串：<span class="string">"ca"</span>，<span class="string">"cc"</span>，<span class="string">"cd"</span>，<span class="params">...</span>，<span class="string">"cz"</span>。最后，还有一个以 <span class="string">'d'</span> 开头的好字符串：<span class="string">"da"</span>。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">8</span>, <span class="built_in">s1</span> = <span class="string">"leetcode"</span>, <span class="built_in">s2</span> = <span class="string">"leetgoes"</span>, evil = <span class="string">"leet"</span></span><br><span class="line">输出：<span class="number">0</span> </span><br><span class="line">解释：所有字典序大于等于 <span class="built_in">s1</span> 且小于等于 <span class="built_in">s2</span> 的字符串都以 evil 字符串 <span class="string">"leet"</span> 开头。所以没有好字符串。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">n</span> = <span class="number">2</span>, <span class="attr">s1</span> = <span class="string">"gx"</span>, <span class="attr">s2</span> = <span class="string">"gz"</span>, <span class="attr">evil</span> = <span class="string">"x"</span></span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>s1.length == n</code></li><li><code>s2.length == n</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>1 &lt;= evil.length &lt;= 50</code></li><li>所有字符串都只包含小写英文字母。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-all-good-strings" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-all-good-strings</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1000000007</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt[<span class="number">55</span>];</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">505</span>][<span class="number">55</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> fd[<span class="number">55</span>][<span class="number">27</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">subp</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">string</span>&amp; s, <span class="built_in">string</span>&amp; e)</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">int</span> l = e.length();</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; l; ++t)&#123;</span><br><span class="line">                    f[i][fd[t][j]][<span class="number">0</span>] = (f[i][fd[t][j]][<span class="number">0</span>] + f[i - <span class="number">1</span>][t][<span class="number">0</span>]) % M;</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; s[i - <span class="number">1</span>] - <span class="string">'a'</span>)</span><br><span class="line">                        f[i][fd[t][j]][<span class="number">0</span>] = (f[i][fd[t][j]][<span class="number">0</span>] + f[i - <span class="number">1</span>][t][<span class="number">1</span>]) % M;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (j == s[i - <span class="number">1</span>] - <span class="string">'a'</span>)</span><br><span class="line">                        f[i][fd[t][j]][<span class="number">1</span>] = (f[i][fd[t][j]][<span class="number">1</span>] + f[i - <span class="number">1</span>][t][<span class="number">1</span>]) % M;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; l; ++j)&#123;</span><br><span class="line">            res = (res + f[n][j][<span class="number">0</span>]) % M;</span><br><span class="line">            res = (res + f[n][j][<span class="number">1</span>]) % M;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findGoodStrings</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">string</span> s1, <span class="built_in">string</span> s2, <span class="built_in">string</span> evil)</span> </span>&#123;</span><br><span class="line">        nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> l = evil.size();</span><br><span class="line">        <span class="comment">// 构造 next 数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">-1</span>, i = <span class="number">1</span>; i &lt; l; ++i)&#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">-1</span> &amp;&amp; evil[i] != evil[j + <span class="number">1</span>])</span><br><span class="line">                j = nxt[j];</span><br><span class="line">            <span class="keyword">if</span> (evil[i] == evil[j + <span class="number">1</span>])</span><br><span class="line">                nxt[i] = ++j;</span><br><span class="line">            <span class="keyword">else</span> nxt[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算失配转移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">-1</span>; i &lt; l - <span class="number">1</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span> (evil[i + <span class="number">1</span>] - <span class="string">'a'</span> == j)</span><br><span class="line">                    fd[i + <span class="number">1</span>][j] = i + <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">-1</span>) fd[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> fd[i + <span class="number">1</span>][j] = fd[nxt[i] + <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res1 = subp(n, s2, evil), res2 = subp(n, s1, evil);</span><br><span class="line">        <span class="keyword">int</span> ans = (res1 + M - res2) % M;</span><br><span class="line">        <span class="comment">// 补一个 check</span></span><br><span class="line">        <span class="keyword">if</span> (s1.find(evil) == <span class="built_in">string</span>::npos) </span><br><span class="line">            ans = (ans + <span class="number">1</span>) % M;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;182周比赛&quot;&gt;&lt;a href=&quot;#182周比赛&quot; class=&quot;headerlink&quot; title=&quot;182周比赛&quot;&gt;&lt;/a&gt;182周比赛&lt;/h1&gt;&lt;p&gt;前三题都是暴力，最后一题比较难&lt;/p&gt;&lt;h2 id=&quot;5368-找出数组中的幸运数&quot;&gt;&lt;a href=&quot;#5368-找出数组中的幸运数&quot; class=&quot;headerlink&quot; title=&quot;5368. 找出数组中的幸运数&quot;&gt;&lt;/a&gt;5368. 找出数组中的幸运数&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;在整数数组中，如果一个整数的出现频次和它的数值大小相等，我们就称这个整数为「幸运数」。&lt;/p&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/code&gt;，请你从中找出并返回一个幸运数。&lt;/p&gt;&lt;p&gt;如果数组中存在多个幸运数，只需返回 最大 的那个。&lt;br&gt;如果数组中不含幸运数，则返回 -1 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 181周双周赛</title>
    <link href="http://yoursite.com/2020/03/25/141/"/>
    <id>http://yoursite.com/2020/03/25/141/</id>
    <published>2020-03-25T15:30:35.080Z</published>
    <updated>2020-03-31T02:15:05.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="181周双周比赛"><a href="#181周双周比赛" class="headerlink" title="181周双周比赛"></a>181周双周比赛</h1><p>周赛题目稍微好点</p><h2 id="5364-按既定顺序创建目标数组"><a href="#5364-按既定顺序创建目标数组" class="headerlink" title="5364. 按既定顺序创建目标数组"></a>5364. 按既定顺序创建目标数组</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你两个整数数组 <code>nums</code>和<code>index</code>。你需要按照以下规则创建目标数组：</p><p>目标数组<code>target</code> 最初为空。<br>按从左到右的顺序依次读取 <code>nums[i]</code>和 <code>index[i]</code>，在<code>target</code> 数组中的下标 <code>index[i]</code> 处插入值 <code>nums[i]</code> 。<br>重复上一步，直到在 <code>nums</code> 和 <code>index</code>中都没有要读取的元素。<br>请你返回目标数组。</p><a id="more"></a><p>题目保证数字插入位置总是存在。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], index = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">解释：</span><br><span class="line">nums       index     target</span><br><span class="line"><span class="number">0</span>            <span class="number">0</span>        [<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span>            <span class="number">1</span>        [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"><span class="number">2</span>            <span class="number">2</span>        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="number">3</span>            <span class="number">2</span>        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line"><span class="number">4</span>            <span class="number">1</span>        [<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>], index = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">解释：</span><br><span class="line">nums       index     target</span><br><span class="line"><span class="number">1</span>            <span class="number">0</span>        [<span class="number">1</span>]</span><br><span class="line"><span class="number">2</span>            <span class="number">1</span>        [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="number">3</span>            <span class="number">2</span>        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="number">4</span>            <span class="number">3</span>        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">0</span>            <span class="number">0</span>        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="string">[1]</span>, index = <span class="string">[0]</span></span><br><span class="line">输出：<span class="string">[1]</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length, index.length &lt;= 100</code></li><li><code>nums.length == index.length</code></li><li><code>0 &lt;= nums[i] &lt;= 100</code></li><li><code>0 &lt;= index[i] &lt;= i</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/increasing-decreasing-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/increasing-decreasing-string</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 类似于插入排序</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>需要向后移动数组<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; createTargetArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; index) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res[index[i]] == <span class="number">-1</span>)&#123;</span><br><span class="line">                res[index[i]] = nums[i];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = index[i]; nums[i] != <span class="number">-1</span> &amp;&amp; j &lt; n; ++j)&#123;</span><br><span class="line">                swap(nums[i],res[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5350-将整数按权重排序"><a href="#5350-将整数按权重排序" class="headerlink" title="5350. 将整数按权重排序"></a>5350. 将整数按权重排序</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>我们将整数 x 的 权重 定义为按照下述规则将 x 变成 1 所需要的步数：</p><ul><li>如果 x 是偶数，那么 x = x / 2<br>如果 x 是奇数，那么 x = 3 * x + 1<br>比方说，x=3 的权重为 7 。因为 3 需要 7 步变成 1 （3 —&gt; 10 —&gt; 5 —&gt; 16 —&gt; 8 —&gt; 4 —&gt; 2 —&gt; 1）。</li></ul><p>给你三个整数 lo， hi 和 k 。你的任务是将区间 [lo, hi] 之间的整数按照它们的权重 升序排序 ，如果大于等于 2 个整数有 相同 的权重，那么按照数字自身的数值 升序排序 。</p><p>请你返回区间 [lo, hi] 之间的整数按权重排序后的第 k 个数。</p><p>注意，题目保证对于任意整数 x （lo &lt;= x &lt;= hi） ，它变成 1 所需要的步数是一个 32 位有符号整数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：lo = <span class="number">12</span>, hi = <span class="number">15</span>, k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">13</span></span><br><span class="line">解释：<span class="number">12</span> 的权重为 <span class="number">9</span>（<span class="number">12</span> --&gt; <span class="number">6</span> --&gt; <span class="number">3</span> --&gt; <span class="number">10</span> --&gt; <span class="number">5</span> --&gt; <span class="number">16</span> --&gt; <span class="number">8</span> --&gt; <span class="number">4</span> --&gt; <span class="number">2</span> --&gt; <span class="number">1</span>）</span><br><span class="line"><span class="number">13</span> 的权重为 <span class="number">9</span></span><br><span class="line"><span class="number">14</span> 的权重为 <span class="number">17</span></span><br><span class="line"><span class="number">15</span> 的权重为 <span class="number">17</span></span><br><span class="line">区间内的数按权重排序以后的结果为 [<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>] 。对于 k = <span class="number">2</span> ，答案是第二个整数也就是 <span class="number">13</span> 。</span><br><span class="line">注意，<span class="number">12</span> 和 <span class="number">13</span> 有相同的权重，所以我们按照它们本身升序排序。<span class="number">14</span> 和 <span class="number">15</span> 同理。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：lo = <span class="number">1</span>, hi = <span class="number">1</span>, k = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：lo = <span class="number">7</span>, hi = <span class="number">11</span>, k = <span class="number">4</span></span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：区间内整数 [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>] 对应的权重为 [<span class="number">16</span>, <span class="number">3</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">14</span>] 。</span><br><span class="line">按权重排序后得到的结果为 [<span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">9</span>] 。</span><br><span class="line">排序后数组中第 <span class="number">4</span> 个数字为 <span class="number">7</span> 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：lo = <span class="number">10</span>, hi = <span class="number">20</span>, k = <span class="number">5</span></span><br><span class="line">输出：<span class="number">13</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：lo = <span class="number">1</span>, hi = <span class="number">1000</span>, k = <span class="number">777</span></span><br><span class="line">输出：<span class="number">570</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= lo &lt;= hi &lt;= 1000</code></li><li><code>1 &lt;= k &lt;= hi - lo + 1</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/sort-integers-by-the-power-value/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sort-integers-by-the-power-value/</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力求权重即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>递归求权重即可，也没啥技巧。<br>2。 当然也可以用map保存表项记录，方便查找。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">weight</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(num%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> + weight(num/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + weight(num*<span class="number">3</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pii &amp; a,pii &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.first == b.first) <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">        <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pii&gt; w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = lo; i &lt;= hi; ++i)&#123;</span><br><span class="line">            w.push_back(make_pair(weight(i),i));</span><br><span class="line">        &#125;</span><br><span class="line">        sort(w.begin(),w.end(),cmp);</span><br><span class="line">        <span class="keyword">return</span> w[k<span class="number">-1</span>].second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5366-检查网格中是否存在有效路径"><a href="#5366-检查网格中是否存在有效路径" class="headerlink" title="5366. 检查网格中是否存在有效路径"></a>5366. 检查网格中是否存在有效路径</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个 m x n 的网格 grid。网格里的每个单元都代表一条街道。grid[i][j] 的街道可以是：</p><p>1 表示连接左单元格和右单元格的街道。<br>2 表示连接上单元格和下单元格的街道。<br>3 表示连接左单元格和下单元格的街道。<br>4 表示连接右单元格和下单元格的街道。<br>5 表示连接左单元格和上单元格的街道。<br>6 表示连接右单元格和上单元格的街道。</p><p>你最开始从左上角的单元格 (0,0) 开始出发，网格中的「有效路径」是指从左上方的单元格 (0,0) 开始、一直到右下方的 (m-1,n-1) 结束的路径。该路径必须只沿着街道走。</p><p>注意：你 不能 变更街道。</p><p>如果网格中存在有效的路径，则返回 true，否则返回 false 。</p><p>示例 1：</p><p>输入：grid = [[2,4,3],[6,5,2]]<br>输出：true<br>解释：如图所示，你可以从 (0, 0) 开始，访问网格中的所有单元格并到达 (m - 1, n - 1) 。<br>示例 2：</p><p>输入：grid = [[1,2,1],[1,2,1]]<br>输出：false<br>解释：如图所示，单元格 (0, 0) 上的街道没有与任何其他单元格上的街道相连，你只会停在 (0, 0) 处。<br>示例 3：</p><p>输入：grid = [[1,1,2]]<br>输出：false<br>解释：你会停在 (0, 1)，而且无法到达 (0, 2) 。<br>示例 4：</p><p>输入：grid = [[1,1,1,1,1,1,3]]<br>输出：true<br>示例 5：</p><p>输入：grid = [[2],[2],[2],[2],[2],[2],[6]]<br>输出：true</p><p>提示：</p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 300</code></li><li><code>1 &lt;= grid[i][j] &lt;= 6</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/check-if-there-is-a-valid-path-in-a-grid/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-if-there-is-a-valid-path-in-a-grid/</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 图的搜索问题</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>最基本的图的搜索问题，基本上BFS或者DFS均可以解决该问题。</li><li>题目本身不难，但是需要把代码写的容易且不出错还是需要一点基本功。</li><li>假设4个方向，分别用0，1，2，3表示左右上下四个方向，设立next数目，<code>next[i][j]</code>表示以第<code>i</code>种方向进入第<code>j</code>种类型的表格后的路径方向，如果<code>next[i][j] = -1</code>则表示从这个方向无法进入该表格。比如：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next[<span class="string">0</span>][<span class="symbol">1</span>] = 0表示从右侧进入第1种类型的单元格后的后续方向也为从左到右。</span><br></pre></td></tr></table></figure></li><li>我们采用<code>BFS</code>解法。初始化时，单元格<code>0</code>可以接受两种方向，这个时本题的一个<code>corner</code>,稍微复杂点。我们每次需要判断队列中的元素是否可以进入。每次传递两个元素，方向和单元格的坐标。</li></ol></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasValidPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pii&gt; qu;</span><br><span class="line">        <span class="keyword">int</span> row = grid.size();</span><br><span class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; visit(row,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(col,<span class="literal">false</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> next[<span class="number">4</span>][<span class="number">7</span>];</span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">memset</span>(next,<span class="number">-1</span>,<span class="keyword">sizeof</span>(next));</span><br><span class="line">        <span class="comment">/*left*/</span></span><br><span class="line">        next[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">0</span>][<span class="number">4</span>] = <span class="number">3</span>;</span><br><span class="line">        next[<span class="number">0</span>][<span class="number">6</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">/*right*/</span></span><br><span class="line">        next[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        next[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">        next[<span class="number">1</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">/*up*/</span></span><br><span class="line">        next[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        next[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">2</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*down*/</span></span><br><span class="line">        next[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">        next[<span class="number">3</span>][<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">3</span>][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next[i][grid[<span class="number">0</span>][<span class="number">0</span>]]!= <span class="number">-1</span>)&#123;</span><br><span class="line">                qu.push(make_pair(i,<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visit[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> cd = qu.front().first;</span><br><span class="line">            <span class="keyword">int</span> cx = qu.front().second/col;</span><br><span class="line">            <span class="keyword">int</span> cy = qu.front().second%col;</span><br><span class="line">            qu.pop();</span><br><span class="line">            <span class="keyword">if</span>(next[cd][grid[cx][cy]] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(cx == row<span class="number">-1</span> &amp;&amp; cy == col<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> nd = next[cd][grid[cx][cy]];</span><br><span class="line">            <span class="keyword">int</span> nx = cx + d[nd][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = cy + d[nd][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(nx &lt; <span class="number">0</span> || nx &gt;= row || ny &lt; <span class="number">0</span> || ny &gt;= col) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(visit[nx][ny]) <span class="keyword">continue</span>;</span><br><span class="line">            qu.push(make_pair(nd,nx*col+ny));</span><br><span class="line">            visit[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5367-最长快乐前缀"><a href="#5367-最长快乐前缀" class="headerlink" title="5367. 最长快乐前缀"></a>5367. 最长快乐前缀</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>「快乐前缀」是在原字符串中既是 非空 前缀也是后缀（不包括原字符串自身）的字符串。</p><p>给你一个字符串 s，请你返回它的 最长快乐前缀。</p><p>如果不存在满足题意的前缀，则返回一个空字符串。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"level"</span></span><br><span class="line">输出：<span class="string">"l"</span></span><br><span class="line">解释：不包括 s 自己，一共有 <span class="number">4</span> 个前缀（<span class="string">"l"</span>, <span class="string">"le"</span>, <span class="string">"lev"</span>, <span class="string">"leve"</span>）和 <span class="number">4</span> 个后缀（<span class="string">"l"</span>, <span class="string">"el"</span>, <span class="string">"vel"</span>, <span class="string">"evel"</span>）。最长的既是前缀也是后缀的字符串是 <span class="string">"l"</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="string">``</span>s = <span class="string">"ababab"</span></span><br><span class="line">输出：<span class="string">"abab"</span></span><br><span class="line">解释：<span class="string">"abab"</span> 是最长的既是前缀也是后缀的字符串。题目允许前后缀在原字符串中重叠。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"leetcodeleet"</span></span><br><span class="line">输出：<span class="string">"leet"</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"a"</span></span><br><span class="line">输出：<span class="string">""</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s 只含有小写英文字母</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/longest-happy-prefix/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-happy-prefix/</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> KMP或者字符串KR hash算法</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>KMP算法，求next数组。</li><li>KR 字符串hash算法。这个是本身看到该题就想到用这个算法。KR hash算法在字符串种非常有用的一个算法，需要去重点掌握这个算法的应用。<br>对于字符串我们可以压缩用一个hash函数表示。非常容易。对于<code>base</code>和<code>mod</code>的应用，特别是求子串的hash函数，另外我们加一个判断，可以防止字符串hash之后出现冲突的判断，我认为这是一个在实际工程项目种也是非常应用很广的一个算法。</li><li>KMP字符串匹配算法。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Base = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> &amp; s,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = s.size()-l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != s[i+d]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPrefix</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; h(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; p(n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            h[i+<span class="number">1</span>] = (h[i]*Base + s[i])%Mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            p[i+<span class="number">1</span>] = (p[i]*Base)%Mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> get = [&amp;](<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;</span><br><span class="line">            <span class="keyword">return</span> (h[y] - h[x<span class="number">-1</span>]*p[y-x+<span class="number">1</span>]%Mod + Mod)%Mod;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(get(i,n) == h[n-i+<span class="number">1</span>]&amp;&amp;check(s,n-i+<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> s.substr(<span class="number">0</span>,n-i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPrefix</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next(n,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; s[i] != s[k]) k = next[k<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(s[k] == s[i]) next[i] = ++k;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> s.substr(n-next[n<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;181周双周比赛&quot;&gt;&lt;a href=&quot;#181周双周比赛&quot; class=&quot;headerlink&quot; title=&quot;181周双周比赛&quot;&gt;&lt;/a&gt;181周双周比赛&lt;/h1&gt;&lt;p&gt;周赛题目稍微好点&lt;/p&gt;&lt;h2 id=&quot;5364-按既定顺序创建目标数组&quot;&gt;&lt;a href=&quot;#5364-按既定顺序创建目标数组&quot; class=&quot;headerlink&quot; title=&quot;5364. 按既定顺序创建目标数组&quot;&gt;&lt;/a&gt;5364. 按既定顺序创建目标数组&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你两个整数数组 &lt;code&gt;nums&lt;/code&gt;和&lt;code&gt;index&lt;/code&gt;。你需要按照以下规则创建目标数组：&lt;/p&gt;&lt;p&gt;目标数组&lt;code&gt;target&lt;/code&gt; 最初为空。&lt;br&gt;按从左到右的顺序依次读取 &lt;code&gt;nums[i]&lt;/code&gt;和 &lt;code&gt;index[i]&lt;/code&gt;，在&lt;code&gt;target&lt;/code&gt; 数组中的下标 &lt;code&gt;index[i]&lt;/code&gt; 处插入值 &lt;code&gt;nums[i]&lt;/code&gt; 。&lt;br&gt;重复上一步，直到在 &lt;code&gt;nums&lt;/code&gt; 和 &lt;code&gt;index&lt;/code&gt;中都没有要读取的元素。&lt;br&gt;请你返回目标数组。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 22周双周赛</title>
    <link href="http://yoursite.com/2020/03/25/140/"/>
    <id>http://yoursite.com/2020/03/25/140/</id>
    <published>2020-03-25T15:30:25.681Z</published>
    <updated>2020-03-25T15:30:48.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="22周双周比赛"><a href="#22周双周比赛" class="headerlink" title="22周双周比赛"></a>22周双周比赛</h1><p>题目质量一般般，除了最后一题以外，其余的都是暴力即可。</p><h2 id="5348-两个数组间的距离值"><a href="#5348-两个数组间的距离值" class="headerlink" title="5348. 两个数组间的距离值"></a>5348. 两个数组间的距离值</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你两个整数数组 <code>arr1</code>， <code>arr2</code> 和一个整数 <code>d</code> ，请你返回两个数组之间的 距离值 。</p><p>「距离值」 定义为符合此描述的元素数目：对于元素<code>arr1[i]</code> ，不存在任何元素 <code>arr2[j]</code>满足 <code>|arr1[i]-arr2[j]| &lt;= d</code>。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入：arr1 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>], arr2 = [<span class="number">10</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">8</span>], d = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line">对于 arr1[<span class="number">0</span>]=<span class="number">4</span> 我们有：</span><br><span class="line">|<span class="number">4</span><span class="number">-10</span>|=<span class="number">6</span> &gt; d=<span class="number">2</span> </span><br><span class="line">|<span class="number">4</span><span class="number">-9</span>|=<span class="number">5</span> &gt; d=<span class="number">2</span> </span><br><span class="line">|<span class="number">4</span><span class="number">-1</span>|=<span class="number">3</span> &gt; d=<span class="number">2</span> </span><br><span class="line">|<span class="number">4</span><span class="number">-8</span>|=<span class="number">4</span> &gt; d=<span class="number">2</span> </span><br><span class="line">对于 arr1[<span class="number">1</span>]=<span class="number">5</span> 我们有：</span><br><span class="line">|<span class="number">5</span><span class="number">-10</span>|=<span class="number">5</span> &gt; d=<span class="number">2</span> </span><br><span class="line">|<span class="number">5</span><span class="number">-9</span>|=<span class="number">4</span> &gt; d=<span class="number">2</span> </span><br><span class="line">|<span class="number">5</span><span class="number">-1</span>|=<span class="number">4</span> &gt; d=<span class="number">2</span> </span><br><span class="line">|<span class="number">5</span><span class="number">-8</span>|=<span class="number">3</span> &gt; d=<span class="number">2</span></span><br><span class="line">对于 arr1[<span class="number">2</span>]=<span class="number">8</span> 我们有：</span><br><span class="line">|<span class="number">8</span><span class="number">-10</span>|=<span class="number">2</span> &lt;= d=<span class="number">2</span></span><br><span class="line">|<span class="number">8</span><span class="number">-9</span>|=<span class="number">1</span> &lt;= d=<span class="number">2</span></span><br><span class="line">|<span class="number">8</span><span class="number">-1</span>|=<span class="number">7</span> &gt; d=<span class="number">2</span></span><br><span class="line">|<span class="number">8</span><span class="number">-8</span>|=<span class="number">0</span> &lt;= d=<span class="number">2</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr1 = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>], arr2 = [<span class="number">-4</span>,<span class="number">-3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>], d = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr1 = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">100</span>,<span class="number">3</span>], arr2 = [<span class="number">-5</span>,<span class="number">-2</span>,<span class="number">10</span>,<span class="number">-3</span>,<span class="number">7</span>], d = <span class="number">6</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= arr1.length, arr2.length &lt;= 500</code></li><li><code>-10^3 &lt;= arr1[i], arr2[j] &lt;= 10^3</code></li><li><code>0 &lt;= d &lt;= 100</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/increasing-decreasing-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/increasing-decreasing-string</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力解决即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>暴力计算即可，时间复杂度O（n^2)。</li><li>二分查找即可，查找距离最近的d。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTheDistanceValue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr2, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr1.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">bool</span> isCan = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr2.size(); ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(arr1[i]-arr2[j]) &lt;= d)&#123;</span><br><span class="line">                    isCan = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isCan) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5178-四因数"><a href="#5178-四因数" class="headerlink" title="5178. 四因数"></a>5178. 四因数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums</code>，请你返回该数组中恰有四个因数的这些整数的各因数之和。</p><p>如果数组中不存在满足题意的整数，则返回 0 。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">21</span>,<span class="number">4</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">32</span></span><br><span class="line">解释：</span><br><span class="line"><span class="number">21</span> 有 <span class="number">4</span> 个因数：<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">21</span></span><br><span class="line"><span class="number">4</span> 有 <span class="number">3</span> 个因数：<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span></span><br><span class="line"><span class="number">7</span> 有 <span class="number">2</span> 个因数：<span class="number">1</span>, <span class="number">7</span></span><br><span class="line">答案仅为 <span class="number">21</span> 的所有因数的和。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li><code>1 &lt;= nums[i] &lt;= 10^5</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/four-divisors/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/four-divisors/</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力求因素</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>不知道这个题目想考什么，直接暴力计算数的因子数目即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">FourDivsors</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="built_in">sqrt</span>(num);</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = num+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; x; ++i )&#123;</span><br><span class="line">            <span class="keyword">if</span>(num%i == <span class="number">0</span> )&#123;</span><br><span class="line">                cnt += <span class="number">2</span>;</span><br><span class="line">                res += i;</span><br><span class="line">                res += (num/i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">2</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumFourDivisors</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)&#123;</span><br><span class="line">            sum += FourDivsors(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5349-安排电影院座位"><a href="#5349-安排电影院座位" class="headerlink" title="5349. 安排电影院座位"></a>5349. 安排电影院座位</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>如上图所示，电影院的观影厅中有<code>n</code>行座位，行编号从 1 到 n ，且每一行内总共有 10 个座位，列编号从 1 到 10 。</p><p>给你数组 <code>reservedSeats</code>，包含所有已经被预约了的座位。比如说，<code>researvedSeats[i]=[3,8]</code>，它表示第 3 行第 8 个座位被预约了。</p><p>请你返回 最多能安排多少个 4 人家庭 。4 人家庭要占据 同一行内连续 的 4 个座位。隔着过道的座位（比方说 [3,3] 和 [3,4]）不是连续的座位，但是如果你可以将 4 人家庭拆成过道两边各坐 2 人，这样子是允许的。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span>, reservedSeats = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">8</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">10</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：上图所示是最优的安排方案，总共可以安排 <span class="number">4</span> 个家庭。蓝色的叉表示被预约的座位，橙色的连续座位表示一个 <span class="number">4</span> 人家庭。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, reservedSeats = [[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">8</span>],[<span class="number">2</span>,<span class="number">6</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, reservedSeats = [[<span class="number">4</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 10^9</code></li><li><code>1 &lt;= reservedSeats.length &lt;= min(10*n, 10^4)</code></li><li><code>reservedSeats[i].length == 2</code></li><li><code>1 &lt;= reservedSeats[i][0] &lt;= n</code></li><li><code>1 &lt;= reservedSeats[i][1] &lt;= 10</code></li><li>所有 <code>reservedSeats[i]</code> 都是互不相同的。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/cinema-seat-allocation/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/cinema-seat-allocation/</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力计算</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>题目看起来很复杂，实际很简单。首先对于空的行，那么这行最多只有两个满足4人连坐的订票要求。</li><li>剩余的每行中分别判断即可，每排10个作为，只需要判断连续的（2345，4567，6789）这三种情况是否存在即可。</li><li>这个题目不管怎么优化都没有太大意思。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxNumberOfFamilies</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; reservedSeats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; seats;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e : reservedSeats)&#123;</span><br><span class="line">            seats[e[<span class="number">0</span>]].insert(e[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : seats)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!v.second.count(<span class="number">2</span>)&amp;&amp;!v.second.count(<span class="number">3</span>)&amp;&amp;</span><br><span class="line">               !v.second.count(<span class="number">4</span>)&amp;&amp;!v.second.count(<span class="number">5</span>))&#123;</span><br><span class="line">                res++;</span><br><span class="line">                v.second.insert(<span class="number">2</span>);</span><br><span class="line">                v.second.insert(<span class="number">3</span>);</span><br><span class="line">                v.second.insert(<span class="number">4</span>);</span><br><span class="line">                v.second.insert(<span class="number">5</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!v.second.count(<span class="number">4</span>)&amp;&amp;!v.second.count(<span class="number">5</span>)&amp;&amp;</span><br><span class="line">               !v.second.count(<span class="number">6</span>)&amp;&amp;!v.second.count(<span class="number">7</span>))&#123;</span><br><span class="line">                res++;</span><br><span class="line">                v.second.insert(<span class="number">4</span>);</span><br><span class="line">                v.second.insert(<span class="number">5</span>);</span><br><span class="line">                v.second.insert(<span class="number">6</span>);</span><br><span class="line">                v.second.insert(<span class="number">7</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!v.second.count(<span class="number">6</span>)&amp;&amp;!v.second.count(<span class="number">7</span>)&amp;&amp;</span><br><span class="line">               !v.second.count(<span class="number">8</span>)&amp;&amp;!v.second.count(<span class="number">9</span>))&#123;</span><br><span class="line">                res++;</span><br><span class="line">                v.second.insert(<span class="number">6</span>);</span><br><span class="line">                v.second.insert(<span class="number">7</span>);</span><br><span class="line">                v.second.insert(<span class="number">8</span>);</span><br><span class="line">                v.second.insert(<span class="number">9</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res += (n - seats.size())*<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5351-3n-块披萨"><a href="#5351-3n-块披萨" class="headerlink" title="5351. 3n 块披萨"></a>5351. 3n 块披萨</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个披萨，它由 3n 块不同大小的部分组成，现在你和你的朋友们需要按照如下规则来分披萨：</p><p>你挑选 任意 一块披萨。<br>Alice 将会挑选你所选择的披萨逆时针方向的下一块披萨。<br>Bob 将会挑选你所选择的披萨顺时针方向的下一块披萨。<br>重复上述过程直到没有披萨剩下。<br>每一块披萨的大小按顺时针方向由循环数组 <code>slices</code>表示。</p><p>请你返回你可以获得的披萨大小总和的最大值。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：slices = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">输出：<span class="number">10</span></span><br><span class="line">解释：选择大小为 <span class="number">4</span> 的披萨，Alice 和 Bob 分别挑选大小为 <span class="number">3</span> 和 <span class="number">5</span> 的披萨。然后你选择大小为 <span class="number">6</span> 的披萨，Alice 和 Bob 分别挑选大小为 <span class="number">2</span> 和 <span class="number">1</span> 的披萨。你获得的披萨总大小为 <span class="number">4</span> + <span class="number">6</span> = <span class="number">10</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：slices = [<span class="number">8</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">16</span></span><br><span class="line">解释：两轮都选大小为 <span class="number">8</span> 的披萨。如果你选择大小为 <span class="number">9</span> 的披萨，你的朋友们就会选择大小为 <span class="number">8</span> 的披萨，这种情况下你的总和不是最大的。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：slices = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">21</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：slices = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= slices.length &lt;= 500</code></li><li><code>slices.length % 3 == 0</code></li><li><code>1 &lt;= slices[i] &lt;= 1000</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/pizza-with-3n-slices/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/pizza-with-3n-slices/</a></p><h3 id="题意d"><a href="#题意d" class="headerlink" title="题意d"></a>题意d</h3><blockquote><p> 动态规划</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>dp跟213题基本上一样的思路，但是题目如何转换成将题目变化为从长度为<code>n</code>的序列中选出<code>n/3</code>个不相邻的数。</li><li>由于题目中数列成环，则<code>0</code>与<code>n-1</code>也是相邻的。</li><li>因此我们可以转换为从<code>0</code>到<code>n-2</code>中选出<code>n/3</code>个不相邻的数，要么从<code>1</code>到<code>n-1</code>个数中选出<code>n/3</code>个不相邻的数。</li><li>我们用两个dp即可实现。dp1选择从<code>[1,n-1]</code>,dp2选择从<code>[2,n]</code>。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSizeSlices</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; slices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = slices.size();</span><br><span class="line">        <span class="keyword">int</span> select = n/<span class="number">3</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp1(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(select+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp2(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(select+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        dp1[<span class="number">1</span>][<span class="number">1</span>] = slices[<span class="number">0</span>];</span><br><span class="line">        dp2[<span class="number">2</span>][<span class="number">1</span>] = slices[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= select; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; n; ++j)&#123;</span><br><span class="line">                dp1[j][i] = max(dp1[j<span class="number">-1</span>][i],dp1[j<span class="number">-2</span>][i<span class="number">-1</span>] + slices[j<span class="number">-1</span>]);</span><br><span class="line">                dp2[j+<span class="number">1</span>][i] = max(dp2[j][i],dp2[j<span class="number">-1</span>][i<span class="number">-1</span>] + slices[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max(dp1[n<span class="number">-1</span>][select],dp2[n][select]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;22周双周比赛&quot;&gt;&lt;a href=&quot;#22周双周比赛&quot; class=&quot;headerlink&quot; title=&quot;22周双周比赛&quot;&gt;&lt;/a&gt;22周双周比赛&lt;/h1&gt;&lt;p&gt;题目质量一般般，除了最后一题以外，其余的都是暴力即可。&lt;/p&gt;&lt;h2 id=&quot;5348-两个数组间的距离值&quot;&gt;&lt;a href=&quot;#5348-两个数组间的距离值&quot; class=&quot;headerlink&quot; title=&quot;5348. 两个数组间的距离值&quot;&gt;&lt;/a&gt;5348. 两个数组间的距离值&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你两个整数数组 &lt;code&gt;arr1&lt;/code&gt;， &lt;code&gt;arr2&lt;/code&gt; 和一个整数 &lt;code&gt;d&lt;/code&gt; ，请你返回两个数组之间的 距离值 。&lt;/p&gt;&lt;p&gt;「距离值」 定义为符合此描述的元素数目：对于元素&lt;code&gt;arr1[i]&lt;/code&gt; ，不存在任何元素 &lt;code&gt;arr2[j]&lt;/code&gt;满足 &lt;code&gt;|arr1[i]-arr2[j]| &amp;lt;= d&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 180周比赛</title>
    <link href="http://yoursite.com/2020/03/15/139/"/>
    <id>http://yoursite.com/2020/03/15/139/</id>
    <published>2020-03-15T11:51:24.662Z</published>
    <updated>2020-03-15T12:04:39.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="180周比赛"><a href="#180周比赛" class="headerlink" title="180周比赛"></a>180周比赛</h1><p>题目质量非常高，题目本身难度不是很大，适合面试。</p><h2 id="5356-矩阵中的幸运数"><a href="#5356-矩阵中的幸运数" class="headerlink" title="5356. 矩阵中的幸运数"></a>5356. 矩阵中的幸运数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个<code>m * n</code>的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。</p><p>幸运数是指矩阵中满足同时下列两个条件的元素：</p><p>在同一行的所有元素中最小<br>在同一列的所有元素中最大</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>],[<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>]]</span><br><span class="line">输出：[<span class="number">15</span>]</span><br><span class="line">解释：<span class="number">15</span> 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">9</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">7</span>],[<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">12</span>]]</span><br><span class="line">输出：[<span class="number">12</span>]</span><br><span class="line">解释：<span class="number">12</span> 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[<span class="number">7</span>,<span class="number">8</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：[<span class="number">7</span>]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= n, m &lt;= 50</code></li><li><code>1 &lt;= matrix[i][j] &lt;= 10^5</code></li><li>矩阵中的所有元素都是不同的</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力枚举即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>找到每列的最大值的行号，然后坚持该数是否为所在行的最小值。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; luckyNumbers (<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        <span class="keyword">int</span> row = matrix.size();</span><br><span class="line">        <span class="keyword">int</span> col = matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*calc col*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; col; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> maxRow = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">bool</span> isLucky = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; row; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[j][i] &gt; matrix[maxRow][i])&#123;</span><br><span class="line">                    maxRow = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[maxRow][j] &lt; matrix[maxRow][i])&#123;</span><br><span class="line">                    isLucky = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isLucky) res.push_back(matrix[maxRow][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5357-设计一个支持增量操作的栈"><a href="#5357-设计一个支持增量操作的栈" class="headerlink" title="5357. 设计一个支持增量操作的栈"></a>5357. 设计一个支持增量操作的栈</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>请你设计一个支持下述操作的栈。</p><p>实现自定义栈类 <code>CustomStack</code>：</p><ul><li><code>CustomStack(int maxSize)：</code>用 <code>maxSize</code> 初始化对象，<code>maxSize</code> 是栈中最多能容纳的元素数量，栈在增长到 <code>maxSize</code>之后则不支持 <code>push</code> 操作。</li><li><code>void push(int x)</code>：如果栈还未增长到<code>maxSize</code> ，就将<code>x</code>添加到栈顶。</li><li><code>int pop()</code>：返回栈顶的值，或栈为空时返回 -1 。</li><li><code>void inc(int k, int val)</code>：栈底的 k 个元素的值都增加 <code>val</code>。如果栈中元素总数小于 k ，则栈中的所有元素都增加 <code>val</code>。</li></ul><p>示例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">"CustomStack"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"pop"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"increment"</span>,<span class="string">"increment"</span>,<span class="string">"pop"</span>,<span class="string">"pop"</span>,<span class="string">"pop"</span>,<span class="string">"pop"</span>]</span><br><span class="line">[[<span class="number">3</span>],[<span class="number">1</span>],[<span class="number">2</span>],[],[<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>],[<span class="number">5</span>,<span class="number">100</span>],[<span class="number">2</span>,<span class="number">100</span>],[],[],[],[]]</span><br><span class="line">输出：</span><br><span class="line">[null,null,null,<span class="number">2</span>,null,null,null,null,null,<span class="number">103</span>,<span class="number">202</span>,<span class="number">201</span>,<span class="number">-1</span>]</span><br><span class="line">解释：</span><br><span class="line">CustomStack customStack = new CustomStack(<span class="number">3</span>); <span class="comment">// 栈是空的 []</span></span><br><span class="line">customStack.push(<span class="number">1</span>);                          <span class="comment">// 栈变为 [1]</span></span><br><span class="line">customStack.push(<span class="number">2</span>);                          <span class="comment">// 栈变为 [1, 2]</span></span><br><span class="line">customStack.pop();                            <span class="comment">// 返回 2 --&gt; 返回栈顶值 2，栈变为 [1]</span></span><br><span class="line">customStack.push(<span class="number">2</span>);                          <span class="comment">// 栈变为 [1, 2]</span></span><br><span class="line">customStack.push(<span class="number">3</span>);                          <span class="comment">// 栈变为 [1, 2, 3]</span></span><br><span class="line">customStack.push(<span class="number">4</span>);                          <span class="comment">// 栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4</span></span><br><span class="line">customStack.increment(<span class="number">5</span>, <span class="number">100</span>);                <span class="comment">// 栈变为 [101, 102, 103]</span></span><br><span class="line">customStack.increment(<span class="number">2</span>, <span class="number">100</span>);                <span class="comment">// 栈变为 [201, 202, 103]</span></span><br><span class="line">customStack.pop();                            <span class="comment">// 返回 103 --&gt; 返回栈顶值 103，栈变为 [201, 202]</span></span><br><span class="line">customStack.pop();                            <span class="comment">// 返回 202 --&gt; 返回栈顶值 202，栈变为 [201]</span></span><br><span class="line">customStack.pop();                            <span class="comment">// 返回 201 --&gt; 返回栈顶值 201，栈变为 []</span></span><br><span class="line">customStack.pop();                            <span class="comment">// 返回 -1 --&gt; 栈为空，返回 -1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= maxSize &lt;= 1000</code></li><li><code>1 &lt;= x &lt;= 1000</code></li><li><code>1 &lt;= k &lt;= 1000</code></li><li><code>0 &lt;= val &lt;= 100</code></li><li>每种方法 <code>increment</code>，<code>push</code> 以及 <code>pop</code>分别最多调用 <code>1000</code>次</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/design-a-stack-with-increment-operation" target="_blank" rel="noopener">https://leetcode-cn.com/problems/design-a-stack-with-increment-operation</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 辅助数组</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>设计一个辅助数据add. add[x]代表从栈底到x个元素需要增加的值add[x]。</li><li>进行<code>increment(k,val)</code>操作时，将<code>add[k]</code>增加<code>val</code>.</li><li>进行<code>push</code>操作时，正常增加栈的元素，需要判断当前栈空间的大小是否达到<code>maxsize</code>。</li><li>进行<code>pop</code>操作时，稍微复杂点，返回的值为栈顶的元素 加上<code>add[stack.size()]</code>的元素,同时将栈进行弹出，并将<code>add[stack.size()-1]</code>加上<code>add[stack.size()]</code>，同时将<code>add[stack.size()]</code>的值置为0;<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CustomStack(<span class="keyword">int</span> maxSize) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;capbility = maxSize;</span><br><span class="line">        <span class="keyword">this</span>-&gt;add = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1001</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.size() &gt;= <span class="keyword">this</span>-&gt;capbility) <span class="keyword">return</span>;</span><br><span class="line">        s.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.empty()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> sz = s.size();</span><br><span class="line">        <span class="keyword">int</span> curr = s.top() + add[sz];</span><br><span class="line">        add[sz<span class="number">-1</span>] += add[sz];</span><br><span class="line">        add[sz] = <span class="number">0</span>;</span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.empty()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(k &gt; s.size())&#123;</span><br><span class="line">            add[s.size()] += val;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            add[k] += val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> capbility;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; add;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CustomStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CustomStack* obj = new CustomStack(maxSize);</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * obj-&gt;increment(k,val);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5179-将二叉搜索树变平衡"><a href="#5179-将二叉搜索树变平衡" class="headerlink" title="5179. 将二叉搜索树变平衡"></a>5179. 将二叉搜索树变平衡</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一棵二叉搜索树，请你返回一棵 平衡后 的二叉搜索树，新生成的树应该与原来的树有着相同的节点值。</p><p>如果一棵二叉搜索树中，每个节点的两棵子树高度差不超过 1 ，我们就称这棵二叉搜索树是 平衡的 。</p><p>如果有多种构造方法，请你返回任意一种。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="literal">null</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">4</span>]</span><br><span class="line">解释：这不是唯一的正确答案，[<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="literal">null</span>] 也是一个可行的构造方案。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>树节点的数目在 1 到<code>10^4</code>之间。</li><li>树节点的值互不相同，且在 1 到 <code>10^5</code>之间。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/balance-a-binary-search-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/balance-a-binary-search-tree</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 使用二分法重建立二分查找树 </p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>AVL的重建，方法比较复杂，需要很复杂的扭转和偏移。竞赛时间有限，没有必要来重新建一遍。</li><li>遍历二分查找树，然后采用二分法重新建树，二分查找平衡树的建树过程很简单，严格的二分法即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">preOrderBst</span><span class="params">(TreeNode * root,<span class="built_in">vector</span>&lt;TreeNode *&gt; &amp; nodes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        preOrderBst(root-&gt;left,nodes);</span><br><span class="line">        nodes.push_back(root);</span><br><span class="line">        preOrderBst(root-&gt;right,nodes);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">TreeNode * <span class="title">buildBst</span><span class="params">(<span class="built_in">vector</span>&lt;TreeNode *&gt; &amp; nodes,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        nodes[mid]-&gt;left = buildBst(nodes,l,mid<span class="number">-1</span>);</span><br><span class="line">        nodes[mid]-&gt;right = buildBst(nodes,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">return</span> nodes[mid];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">TreeNode* <span class="title">balanceBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;TreeNode *&gt; nodes;</span><br><span class="line">        preOrderBst(root,nodes);</span><br><span class="line">        <span class="keyword">return</span> buildBst(nodes,<span class="number">0</span>,nodes.size()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5359-最大的团队表现值"><a href="#5359-最大的团队表现值" class="headerlink" title="5359. 最大的团队表现值"></a>5359. 最大的团队表现值</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>公司有编号为 1 到 n 的 n 个工程师，给你两个数组 <code>speed</code> 和 <code>efficiency</code>，其中<code>speed[i]</code>和 <code>efficiency[i]</code>分别代表第 i 位工程师的速度和效率。请你返回由最多 k 个工程师组成的 ​​​​​​最大团队表现值 ，由于答案可能很大，请你返回结果对 <code>10^9</code>+ 7 取余后的结果。</p><p>团队表现值 的定义为：一个团队中「所有工程师速度的和」乘以他们「效率值中的最小值」。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">6</span>, speed = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>], efficiency = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>], k = <span class="number">2</span></span><br><span class="line">输出：<span class="number">60</span></span><br><span class="line">解释：</span><br><span class="line">我们选择工程师 <span class="number">2</span>（speed=<span class="number">10</span> 且 efficiency=<span class="number">4</span>）和工程师 <span class="number">5</span>（speed=<span class="number">5</span> 且 efficiency=<span class="number">7</span>）。他们的团队表现值为 performance = (<span class="number">10</span> + <span class="number">5</span>) * min(<span class="number">4</span>, <span class="number">7</span>) = <span class="number">60</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">6</span>, speed = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>], efficiency = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>], k = <span class="number">3</span></span><br><span class="line">输出：<span class="number">68</span></span><br><span class="line">解释：</span><br><span class="line">此示例与第一个示例相同，除了 k = <span class="number">3</span> 。我们可以选择工程师 <span class="number">1</span> ，工程师 <span class="number">2</span> 和工程师 <span class="number">5</span> 得到最大的团队表现值。表现值为 performance = (<span class="number">2</span> + <span class="number">10</span> + <span class="number">5</span>) * min(<span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>) = <span class="number">68</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">6</span>, speed = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>], efficiency = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>], k = <span class="number">4</span></span><br><span class="line">输出：<span class="number">72</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>speed.length == n</code></li><li><code>efficiency.length == n</code></li><li><code>1 &lt;= speed[i] &lt;= 10^5</code></li><li><code>1 &lt;= efficiency[i] &lt;= 10^8</code></li><li><code>1 &lt;= k &lt;= n</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/contest/weekly-contest-180/problems/maximum-performance-of-a-team/" target="_blank" rel="noopener">https://leetcode-cn.com/contest/weekly-contest-180/problems/maximum-performance-of-a-team/</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 优先级队列</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>仔细分析一下题目，我们只需要再满足最低的效率<code>e</code>时，选取最大的K个<code>speed</code>即可，贪心算法即可。</li><li>我们将所有的工程师按照效率最大到小进行排列，每次选择速度最快的<code>k</code>个工程师，贪心算法用优先级队列即可，每次淘汰队列中的速度最小的值。</li><li>算法的时间复杂度为<code>nlogk</code>.</li><li>题目的还有一个<code>corner</code>，尽量用长整型来保存数据，在进行取模操作时，一定要在最后一步再进行取模，否则判断大小会可能出错。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pii &amp; a,pii &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.first == b.first) <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">        <span class="keyword">return</span> a.first &gt; b.first;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPerformance</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; speed, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; efficiency, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pii&gt; p;</span><br><span class="line">        </span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            p.push_back(make_pair(efficiency[i],speed[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p.begin(),p.end(),cmp);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            sum += p[i].second;</span><br><span class="line">            pq.push(p[i].second);</span><br><span class="line">            <span class="keyword">if</span>(pq.size() &gt; k)&#123;</span><br><span class="line">                sum -= pq.top();</span><br><span class="line">                pq.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            res = max(res,(sum*p[i].first));</span><br><span class="line">        &#125;    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;180周比赛&quot;&gt;&lt;a href=&quot;#180周比赛&quot; class=&quot;headerlink&quot; title=&quot;180周比赛&quot;&gt;&lt;/a&gt;180周比赛&lt;/h1&gt;&lt;p&gt;题目质量非常高，题目本身难度不是很大，适合面试。&lt;/p&gt;&lt;h2 id=&quot;5356-矩阵中的幸运数&quot;&gt;&lt;a href=&quot;#5356-矩阵中的幸运数&quot; class=&quot;headerlink&quot; title=&quot;5356. 矩阵中的幸运数&quot;&gt;&lt;/a&gt;5356. 矩阵中的幸运数&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个&lt;code&gt;m * n&lt;/code&gt;的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。&lt;/p&gt;&lt;p&gt;幸运数是指矩阵中满足同时下列两个条件的元素：&lt;/p&gt;&lt;p&gt;在同一行的所有元素中最小&lt;br&gt;在同一列的所有元素中最大&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：matrix = [[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：matrix = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：matrix = [[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 21周双周赛</title>
    <link href="http://yoursite.com/2020/03/09/138/"/>
    <id>http://yoursite.com/2020/03/09/138/</id>
    <published>2020-03-09T08:42:10.743Z</published>
    <updated>2020-03-09T08:42:20.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="21周双周比赛"><a href="#21周双周比赛" class="headerlink" title="21周双周比赛"></a>21周双周比赛</h1><p>题目质量非常高，四个题目都有难度。</p><h2 id="1370-上升下降字符串"><a href="#1370-上升下降字符串" class="headerlink" title="1370. 上升下降字符串"></a>1370. 上升下降字符串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 s ，请你根据下面的算法重新构造字符串：<br>从 s 中选出 最小 的字符，将它 接在 结果字符串的后面。<br>从 s 剩余字符中选出 最小 的字符，且该字符比上一个添加的字符大，将它 接在 结果字符串后面。<br>重复步骤 2 ，直到你没法从 s 中选择字符。<br>从 s 中选出 最大 的字符，将它 接在 结果字符串的后面。<br>从 s 剩余字符中选出 最大 的字符，且该字符比上一个添加的字符小，将它 接在 结果字符串后面。<br>重复步骤 5 ，直到你没法从 s 中选择字符。<br>重复步骤 1 到 6 ，直到 s 中所有字符都已经被选过。<br>在任何一步中，如果最小或者最大字符不止一个 ，你可以选择其中任意一个，并将其添加到结果字符串。</p><a id="more"></a><p>请你返回将 s 中字符重新排序后的 结果字符串 。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aaaabbbbcccc"</span></span><br><span class="line">输出：<span class="string">"abccbaabccba"</span></span><br><span class="line">解释：第一轮的步骤 <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span> 后，结果字符串为 result = <span class="string">"abc"</span></span><br><span class="line">第一轮的步骤 <span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span> 后，结果字符串为 result = <span class="string">"abccba"</span></span><br><span class="line">第一轮结束，现在 s = <span class="string">"aabbcc"</span> ，我们再次回到步骤 <span class="number">1</span></span><br><span class="line">第二轮的步骤 <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span> 后，结果字符串为 result = <span class="string">"abccbaabc"</span></span><br><span class="line">第二轮的步骤 <span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span> 后，结果字符串为 result = <span class="string">"abccbaabccba"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"rat"</span></span><br><span class="line">输出：<span class="string">"art"</span></span><br><span class="line">解释：单词 <span class="string">"rat"</span> 在上述算法重排序以后变成 <span class="string">"art"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"leetcode"</span></span><br><span class="line">输出：<span class="string">"cdelotee"</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"ggggggg"</span></span><br><span class="line">输出：<span class="string">"ggggggg"</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"spo"</span></span><br><span class="line">输出：<span class="string">"ops"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 500</code></li><li><code>s 只包含小写英文字母。</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/increasing-decreasing-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/increasing-decreasing-string</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接按照字符的排列顺序访问即可。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>每次按照字符大小的升序和降序各访问一遍，直到所有的字符均被访问过。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">sortString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            cnt[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    res += <span class="string">'a'</span> + i;</span><br><span class="line">                    cnt[i]--;</span><br><span class="line">                    n--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">25</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    res += <span class="string">'a'</span> + i;</span><br><span class="line">                    cnt[i]--;</span><br><span class="line">                    n--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1371-每个元音包含偶数次的最长子字符串"><a href="#1371-每个元音包含偶数次的最长子字符串" class="headerlink" title="1371. 每个元音包含偶数次的最长子字符串"></a>1371. 每个元音包含偶数次的最长子字符串</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 <code>&#39;a&#39;，&#39;e&#39;，&#39;i&#39;，&#39;o&#39;，&#39;u&#39;</code>，在子字符串中都恰好出现了偶数次。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"eleetminicoworoep"</span></span><br><span class="line">输出：<span class="number">13</span></span><br><span class="line">解释：最长子字符串是 <span class="string">"leetminicowor"</span> ，它包含 e，i，o 各 <span class="number">2</span> 个，以及 <span class="number">0</span> 个 a，u 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"leetcodeisgreat"</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：最长子字符串是 <span class="string">"leetc"</span> ，其中包含 <span class="number">2</span> 个 e 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"bcbcbc"</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：这个示例中，字符串 <span class="string">"bcbcbc"</span> 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 <span class="number">0</span> 次。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 5 x 10^5</code></li><li>s 只包含小写英文字母。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-the-longest-substring-containing-vowels-in-even-counts" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-longest-substring-containing-vowels-in-even-counts</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>将5个元音字母出现次数的奇偶视为一种状态，一共有32种状态，不妨使用一个整数代表状态，第0位为1表示a出现奇数次，第一位为1表示e出现奇数次……以此类推。仅有状态0符合题意。而如果子串[0，i]与字串[0,j]状态相同，那么字串[i+1,j]的状态一定是0，因此可以记录每个状态第一次出现的位置，此后再出现该状态时相减即可。需要注意状态0首次出现的位置应该设定为-1。</li><li>在计算状态的时候可以利用异或运算。</li><li>这题的解法确实非常巧妙，当时这道题目没有做出来，想不到还有这种解题思路，本次比赛这道题目估计是最难的了。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTheLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre(<span class="number">32</span>,INT_MAX);</span><br><span class="line">        pre[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> N=s.size();</span><br><span class="line">        <span class="keyword">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">            <span class="keyword">switch</span>(s[i])&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:cur^=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:cur^=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'i'</span>:cur^=<span class="number">4</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'o'</span>:cur^=<span class="number">8</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'u'</span>:cur^=<span class="number">16</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pre[cur]==INT_MAX) pre[cur]=i;</span><br><span class="line">            <span class="keyword">else</span> ans=max(ans,i-pre[cur]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1372-二叉树中的最长交错路径"><a href="#1372-二叉树中的最长交错路径" class="headerlink" title="1372. 二叉树中的最长交错路径"></a>1372. 二叉树中的最长交错路径</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一棵以 root 为根的二叉树，二叉树中的交错路径定义如下：</p><ul><li>选择二叉树中 任意 节点和一个方向（左或者右）。</li><li>如果前进方向为右，那么移动到当前节点的的右子节点，否则移动到它的左子节点。</li><li>改变前进方向：左变右或者右变左。</li><li>重复第二步和第三步，直到你在树中无法继续移动。<br>交错路径的长度定义为：访问过的节点数目 - 1（单个节点的路径长度为 0 ）。</li></ul><p>请你返回给定树中最长 交错路径 的长度。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：蓝色节点为树中最长交错路径（右 -&gt; 左 -&gt; 右）。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：蓝色节点为树中最长交错路径（左 -&gt; 右 -&gt; 左 -&gt; 右）。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>每棵树最多有 <code>50000</code>个节点。</li><li>每个节点的值在 <code>[1, 100]</code>之间。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/longest-zigzag-path-in-a-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-zigzag-path-in-a-binary-tree</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS </p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li><code>flag</code>用于标记当前的根节点是左孩子还是右孩子，按照交替访问的规则，如果当前的root节点是左孩子，按照规则应该访问<code>root</code>节点的右孩子，同时长度加1；如果当前的<code>root</code>节点是右孩子，按照规则应该访问root节点的左孩子，同时长度加1</li><li><code>count</code>用于标记，当前节点已经满足交替访问的长度。如果按照规则进行访问，则将长度置为1.</li><li>这个题目是个非常好的题目，收藏一下，以后可以多多进行复习。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TreeNode * root,<span class="keyword">int</span> count,<span class="keyword">int</span> flag,<span class="keyword">int</span> &amp; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        res = max(res,count);</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">            dfs(root-&gt;left,<span class="number">1</span>,<span class="number">0</span>,res);</span><br><span class="line">            dfs(root-&gt;right,count+<span class="number">1</span>,<span class="number">1</span>,res);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            dfs(root-&gt;left,count+<span class="number">1</span>,<span class="number">0</span>,res);</span><br><span class="line">            dfs(root-&gt;right,<span class="number">1</span>,<span class="number">1</span>,res);</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestZigZag</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        dfs(root-&gt;left,<span class="number">1</span>,<span class="number">0</span>,res);</span><br><span class="line">        dfs(root-&gt;right,<span class="number">1</span>,<span class="number">1</span>,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1373-二叉搜索子树的最大键值和"><a href="#1373-二叉搜索子树的最大键值和" class="headerlink" title="1373. 二叉搜索子树的最大键值和"></a>1373. 二叉搜索子树的最大键值和</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一棵以<code>root</code> 为根的 二叉树 ，请你返回 任意 二叉搜索子树的最大键值和。</p><p>二叉搜索树的定义如下：</p><p>任意节点的左子树中的键值都 小于 此节点的键值。<br>任意节点的右子树中的键值都 大于 此节点的键值。<br>任意节点的左子树和右子树都是二叉搜索树。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">输出：<span class="number">20</span></span><br><span class="line">解释：键值为 <span class="number">3</span> 的子树是和最大的二叉搜索树。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">4</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：键值为 <span class="number">2</span> 的单节点子树是和最大的二叉搜索树。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">-4</span>,<span class="number">-2</span>,<span class="number">-5</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：所有节点键值都为负数，和最大的二叉搜索树为空。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>每棵树最多有 <code>40000</code>个节点。</li><li>每个节点的键值在 <code>[-4 * 10^4 , 4 * 10^4]</code>之间。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-sum-bst-in-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-sum-bst-in-binary-tree</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 递归</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>本题的思路还是判断二叉树的子树是否为二叉搜索树，如果是二叉搜索树，则求最大的二叉搜索子树的和。本质上结合了判断二叉搜索和树的和两部分内容。题目还是非常不错，但是作为hard难度的题目还是简单了一点。</li><li>每次遍历根节点的子树，同时返回子树的和以及子树是否为二叉搜索树。</li><li>根据左右子树的返回结果判断以<code>root</code>为根节点的子树是否为二叉搜索树，如果是则返回子树的和。</li><li>稍微复杂点的在于如何判断二叉树为二叉树搜索树，即根节点的值大于左子树的最大值，根节点的值小于右子树的最小值。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TreeNode * root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; arr,<span class="keyword">int</span> &amp; curr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right;</span><br><span class="line">        <span class="keyword">int</span> sum = root-&gt;val;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> l = dfs(root-&gt;left,left,curr);</span><br><span class="line">        <span class="keyword">bool</span> r = dfs(root-&gt;right,right,curr);</span><br><span class="line">        <span class="keyword">if</span>(!l||!r) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(left.size() &gt; <span class="number">0</span> &amp;&amp; root-&gt;val &lt;= left[<span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(right.size() &gt; <span class="number">0</span> &amp;&amp; root-&gt;val &gt;= right[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(left.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            arr.push_back(left[<span class="number">0</span>]);</span><br><span class="line">            sum += left[<span class="number">2</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr.push_back(root-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(right.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            arr.push_back(right[<span class="number">1</span>]);</span><br><span class="line">            sum += right[<span class="number">2</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr.push_back(root-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        curr = max(curr,sum);</span><br><span class="line">        arr.push_back(sum);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSumBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        dfs(root,arr,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;21周双周比赛&quot;&gt;&lt;a href=&quot;#21周双周比赛&quot; class=&quot;headerlink&quot; title=&quot;21周双周比赛&quot;&gt;&lt;/a&gt;21周双周比赛&lt;/h1&gt;&lt;p&gt;题目质量非常高，四个题目都有难度。&lt;/p&gt;&lt;h2 id=&quot;1370-上升下降字符串&quot;&gt;&lt;a href=&quot;#1370-上升下降字符串&quot; class=&quot;headerlink&quot; title=&quot;1370. 上升下降字符串&quot;&gt;&lt;/a&gt;1370. 上升下降字符串&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个字符串 s ，请你根据下面的算法重新构造字符串：&lt;br&gt;从 s 中选出 最小 的字符，将它 接在 结果字符串的后面。&lt;br&gt;从 s 剩余字符中选出 最小 的字符，且该字符比上一个添加的字符大，将它 接在 结果字符串后面。&lt;br&gt;重复步骤 2 ，直到你没法从 s 中选择字符。&lt;br&gt;从 s 中选出 最大 的字符，将它 接在 结果字符串的后面。&lt;br&gt;从 s 剩余字符中选出 最大 的字符，且该字符比上一个添加的字符小，将它 接在 结果字符串后面。&lt;br&gt;重复步骤 5 ，直到你没法从 s 中选择字符。&lt;br&gt;重复步骤 1 到 6 ，直到 s 中所有字符都已经被选过。&lt;br&gt;在任何一步中，如果最小或者最大字符不止一个 ，你可以选择其中任意一个，并将其添加到结果字符串。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 179周 比赛</title>
    <link href="http://yoursite.com/2020/03/09/137/"/>
    <id>http://yoursite.com/2020/03/09/137/</id>
    <published>2020-03-09T08:12:04.560Z</published>
    <updated>2020-03-09T08:12:10.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="179周比赛"><a href="#179周比赛" class="headerlink" title="179周比赛"></a>179周比赛</h1><p>这周的题目质量一般，不如双周赛的题目好，题目比较简单。</p><h2 id="1374-生成每种字符都是奇数个的字符串"><a href="#1374-生成每种字符都是奇数个的字符串" class="headerlink" title="1374. 生成每种字符都是奇数个的字符串"></a>1374. 生成每种字符都是奇数个的字符串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 <code>n</code>，请你返回一个含 <code>n</code> 个字符的字符串，其中每种字符在该字符串中都恰好出现 奇数次 。</p><p>返回的字符串必须只含小写英文字母。如果存在多个满足题目要求的字符串，则返回其中任意一个即可。</p><a id="more"></a><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span></span><br><span class="line">输出：<span class="string">"pppz"</span></span><br><span class="line">解释：<span class="string">"pppz"</span> 是一个满足题目要求的字符串，因为 'p' 出现 <span class="number">3</span> 次，且 'z' 出现 <span class="number">1</span> 次。当然，还有很多其他字符串也满足题目要求，比如：<span class="string">"ohhh"</span> 和 <span class="string">"love"</span>。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="string">"xy"</span></span><br><span class="line">解释：<span class="string">"xy"</span> 是一个满足题目要求的字符串，因为 'x' 和 'y' 各出现 <span class="number">1</span> 次。当然，还有很多其他字符串也满足题目要求，比如：<span class="string">"ag"</span> 和 <span class="string">"ur"</span>。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">n</span> = <span class="number">7</span></span><br><span class="line">输出：<span class="string">"holasss"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 500</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/generate-a-string-with-characters-that-have-odd-counts" target="_blank" rel="noopener">https://leetcode-cn.com/problems/generate-a-string-with-characters-that-have-odd-counts</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接计算</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接计算当前的n为偶数还是奇数，如果<code>n</code>为奇数，则直接字符串由<code>n</code>个<code>a</code>组成即可。</li><li>如果<code>n</code>为偶数，字符串由<code>n-1</code>个<code>a</code>和<code>1</code>个<code>b</code>构成即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">generateTheString</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">                res += <span class="string">'a'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res += <span class="string">'b'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">                res += <span class="string">'a'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1375-灯泡开关-III"><a href="#1375-灯泡开关-III" class="headerlink" title="1375. 灯泡开关 III"></a>1375. 灯泡开关 III</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>房间中有 n 枚灯泡，编号从 1 到 n，自左向右排成一排。最初，所有的灯都是关着的。</p><p>在 k  时刻（ k 的取值范围是 0 到 n - 1），我们打开 <code>light[k]</code> 这个灯。</p><p>灯的颜色要想 变成蓝色 就必须同时满足下面两个条件：</p><p>灯处于打开状态。<br>排在它之前（左侧）的所有灯也都处于打开状态。<br>请返回能够让 所有开着的 灯都 变成蓝色 的时刻 数目 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：light = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：所有开着的灯都变蓝的时刻分别是 <span class="number">1</span>，<span class="number">2</span> 和 <span class="number">4</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：light = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：所有开着的灯都变蓝的时刻分别是 <span class="number">3</span> 和 <span class="number">4</span>（index<span class="number">-0</span>）。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：light = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：所有开着的灯都变蓝的时刻是 <span class="number">3</span>（index<span class="number">-0</span>）。</span><br><span class="line">第 <span class="number">4</span> 个灯在时刻 <span class="number">3</span> 变蓝。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：light = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：light = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>n == light.length</code></li><li><code>1 &lt;= n &lt;= 5 * 10^4</code></li><li><code>light 是 [1, 2, ..., n] 的一个排列。</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/bulb-switcher-iii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/bulb-switcher-iii</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 两种办法</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>两种办法均可求出。仔细分析题目，实际上要求，当点亮第<code>i</code>个灯时，要求从<code>1~i</code>为全排列。我们可以有两种办法。</p><ol><li>求前n项和是否等于当前最大数的等差数列和。记录前<code>i</code>个元素的和<code>sum</code>，并记录前<code>i</code>个元素的最大值<code>max</code>，判断 <code>sum == max*(max+1)/2</code>.</li><li>判断当前序列第<code>i</code>个元素时的最大值为max(i),  如果是则满足要求<code>max(i) == i</code>。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTimesAllBlue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; light.size(); ++i)&#123;</span><br><span class="line">            right = max(right,light[i]);</span><br><span class="line">            sum += light[i];</span><br><span class="line">            <span class="keyword">if</span>(sum == (<span class="keyword">long</span> <span class="keyword">long</span>)right*(right+<span class="number">1</span>)/<span class="number">2</span>) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTimesAllBlue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; light.size(); ++i)&#123;</span><br><span class="line">            r = max(r,light[i]);</span><br><span class="line">            <span class="keyword">if</span>(r == i+<span class="number">1</span>) res++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1376-通知所有员工所需的时间"><a href="#1376-通知所有员工所需的时间" class="headerlink" title="1376. 通知所有员工所需的时间"></a>1376. 通知所有员工所需的时间</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>公司里有 n 名员工，每个员工的 <code>ID</code> 都是独一无二的，编号从 <code>0</code>到 <code>n - 1</code>。公司的总负责人通过 <code>headID</code>进行标识。</p><p>在 <code>manager</code> 数组中，每个员工都有一个直属负责人，其中 <code>manager[i]</code>是第 i 名员工的直属负责人。对于总负责人，<code>manager[headID] = -1</code>。题目保证从属关系可以用树结构显示。</p><p>公司总负责人想要向公司所有员工通告一条紧急消息。他将会首先通知他的直属下属们，然后由这些下属通知他们的下属，直到所有的员工都得知这条紧急消息。</p><p>第 i 名员工需要 <code>informTime[i]</code>分钟来通知它的所有直属下属（也就是说在 <code>informTime[i]</code>分钟后，他的所有直属下属都可以开始传播这一消息）。</p><p>返回通知所有员工这一紧急消息所需要的 分钟数 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span>, headID = <span class="number">0</span>, manager = [<span class="number">-1</span>], informTime = [<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：公司总负责人是该公司的唯一一名员工。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">6</span>, headID = <span class="number">2</span>, manager = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>], informTime = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：id = <span class="number">2</span> 的员工是公司的总负责人，也是其他所有员工的直属负责人，他需要 <span class="number">1</span> 分钟来通知所有员工。</span><br><span class="line">上图显示了公司员工的树结构。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span>, headID = <span class="number">6</span>, manager = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">-1</span>], informTime = [<span class="number">0</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">21</span></span><br><span class="line">解释：总负责人 id = <span class="number">6</span>。他将在 <span class="number">1</span> 分钟内通知 id = <span class="number">5</span> 的员工。</span><br><span class="line">id = <span class="number">5</span> 的员工将在 <span class="number">2</span> 分钟内通知 id = <span class="number">4</span> 的员工。</span><br><span class="line">id = <span class="number">4</span> 的员工将在 <span class="number">3</span> 分钟内通知 id = <span class="number">3</span> 的员工。</span><br><span class="line">id = <span class="number">3</span> 的员工将在 <span class="number">4</span> 分钟内通知 id = <span class="number">2</span> 的员工。</span><br><span class="line">id = <span class="number">2</span> 的员工将在 <span class="number">5</span> 分钟内通知 id = <span class="number">1</span> 的员工。</span><br><span class="line">id = <span class="number">1</span> 的员工将在 <span class="number">6</span> 分钟内通知 id = <span class="number">0</span> 的员工。</span><br><span class="line">所需时间 = <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> + <span class="number">5</span> + <span class="number">6</span> = <span class="number">21</span> 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">15</span>, headID = <span class="number">0</span>, manager = [<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>], informTime = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：第一分钟总负责人通知员工 <span class="number">1</span> 和 <span class="number">2</span> 。</span><br><span class="line">第二分钟他们将会通知员工 <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> 和 <span class="number">6</span> 。</span><br><span class="line">第三分钟他们将会通知剩下的员工。</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, headID = <span class="number">2</span>, manager = [<span class="number">3</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">2</span>], informTime = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">162</span>,<span class="number">914</span>]</span><br><span class="line">输出：<span class="number">1076</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>0 &lt;= headID &lt; n</code></li><li><code>manager.length == n</code></li><li><code>0 &lt;= manager[i] &lt; n</code></li><li><code>manager[headID] == -1</code></li><li><code>informTime.length == n</code></li><li><code>0 &lt;= informTime[i] &lt;= 1000</code></li><li><code>如果员工 i 没有下属，informTime[i] == 0 。</code></li><li><code>题目 保证 所有员工都可以收到通知。</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/time-needed-to-inform-all-employees" target="_blank" rel="noopener">https://leetcode-cn.com/problems/time-needed-to-inform-all-employees</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS 或者 BFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>求树的根节点到叶子节点的路径的最大值,每一条边都权重。</li><li>解法非常简单，实际解法我们用<code>BFS</code>或者<code>DFS</code>均可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfMinutes</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> headID, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; manager, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; informTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pii&gt; qu;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; child(n);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; manager.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(manager[i] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                child[manager[i]].push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        qu.push(make_pair(headID,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = qu.front().first;</span><br><span class="line">            <span class="keyword">int</span> cost = qu.front().second;</span><br><span class="line">            qu.pop();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(informTime[curr] == <span class="number">0</span>)&#123;</span><br><span class="line">                res = max(res,cost);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> next : child[curr])&#123;</span><br><span class="line">                qu.push(make_pair(next,cost+informTime[curr]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> curr,<span class="keyword">int</span> tot,<span class="keyword">int</span> &amp; res,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; manager, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; informTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(manager[curr] == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = max(tot,res);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(manager[curr],tot+informTime[manager[curr]],res,manager,informTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfMinutes</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> headID, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; manager, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; informTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; informTime.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(informTime[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                dfs(i,<span class="number">0</span>,res,manager,informTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1377-T-秒后青蛙的位置"><a href="#1377-T-秒后青蛙的位置" class="headerlink" title="1377. T 秒后青蛙的位置"></a>1377. T 秒后青蛙的位置</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一棵由 n 个顶点组成的无向树，顶点编号从 1 到 n。青蛙从 顶点 1 开始起跳。规则如下：</p><p>在一秒内，青蛙从它所在的当前顶点跳到另一个 未访问 过的顶点（如果它们直接相连）。<br>青蛙无法跳回已经访问过的顶点。<br>如果青蛙可以跳到多个不同顶点，那么它跳到其中任意一个顶点上的机率都相同。<br>如果青蛙不能跳到任何未访问过的顶点上，那么它每次跳跃都会停留在原地。<br>无向树的边用数组 <code>edges</code>描述，其中<code>edges[i] = [fromi, toi]</code>意味着存在一条直接连通 <code>fromi</code>和<code>toi</code>两个顶点的边。</p><p>返回青蛙在<code>t</code>秒后位于目标顶点 <code>target</code> 上的概率。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span>, edges = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">5</span>]], t = <span class="number">2</span>, target = <span class="number">4</span></span><br><span class="line">输出：<span class="number">0.16666666666666666</span> </span><br><span class="line">解释：上图显示了青蛙的跳跃路径。青蛙从顶点 <span class="number">1</span> 起跳，第 <span class="number">1</span> 秒 有 <span class="number">1</span>/<span class="number">3</span> 的概率跳到顶点 <span class="number">2</span> ，然后第 <span class="number">2</span> 秒 有 <span class="number">1</span>/<span class="number">2</span> 的概率跳到顶点 <span class="number">4</span>，因此青蛙在 <span class="number">2</span> 秒后位于顶点 <span class="number">4</span> 的概率是 <span class="number">1</span>/<span class="number">3</span> * <span class="number">1</span>/<span class="number">2</span> = <span class="number">1</span>/<span class="number">6</span> = <span class="number">0.16666666666666666</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span>, edges = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">5</span>]], t = <span class="number">1</span>, target = <span class="number">7</span></span><br><span class="line">输出：<span class="number">0.3333333333333333</span></span><br><span class="line">解释：上图显示了青蛙的跳跃路径。青蛙从顶点 <span class="number">1</span> 起跳，有 <span class="number">1</span>/<span class="number">3</span> = <span class="number">0.3333333333333333</span> 的概率能够 <span class="number">1</span> 秒 后跳到顶点 <span class="number">7</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span>, edges = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">5</span>]], t = <span class="number">20</span>, target = <span class="number">6</span></span><br><span class="line">输出：<span class="number">0.16666666666666666</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 100</code></li><li><code>edges.length == n-1</code></li><li><code>edges[i].length == 2</code></li><li><code>1 &lt;= edges[i][0], edges[i][1] &lt;= n</code></li><li><code>1 &lt;= t &lt;= 50</code></li><li><code>1 &lt;= target &lt;= n</code></li><li>与准确值误差在 <code>10^-5</code> 之内的结果将被判定为正确。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/frog-position-after-t-seconds" target="_blank" rel="noopener">https://leetcode-cn.com/problems/frog-position-after-t-seconds</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS或者DFS均可</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>题目本身不是很难，但是感觉这个题目出的不好，计算每层的概率即可。本周全部<code>AC</code>的有几百人就可以看出这个题目确实不难。</li><li>采用<code>BFS</code>或者<code>DFS</code>即可，主要是父节点·<code>p</code>跳到与其相邻的节点的概率为<code>1/n</code>,n为节点<code>p</code>的孩子的数目。</li><li>采用<code>BFS</code>或者<code>DFS</code>的思路相同，将概率每层进行传递即可。</li><li>本题的<code>cornel</code>在于一旦<code>p</code>为叶子节点和非叶子的节点的处理，在<code>t &gt; 0</code>的时间内如果跳到了节点<code>p</code>且该节点为非叶子节点，在<code>t</code>时刻时，跳到节点<code>p</code>的概率为0；在<code>t &gt; 0</code>的时间内如果跳到了叶子节点<code>p</code>，在<code>t</code>时刻时，跳到节点<code>p</code>的概率为则为固定值.<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">frogPosition</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges, <span class="keyword">int</span> t, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt;&gt; qu;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; probability(n+<span class="number">1</span>,<span class="number">0.0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit(n+<span class="number">1</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; graph;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e : edges)&#123;</span><br><span class="line">            graph[e[<span class="number">0</span>]].insert(e[<span class="number">1</span>]);</span><br><span class="line">            graph[e[<span class="number">1</span>]].insert(e[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        qu.push(make_pair(<span class="number">1</span>,<span class="number">1.0</span>));</span><br><span class="line">        visit[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        probability[<span class="number">1</span>] = <span class="number">1.0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!qu.empty() &amp;&amp; t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sz = qu.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> curr = qu.front().first;</span><br><span class="line">                <span class="keyword">double</span> p = qu.front().second;</span><br><span class="line">                qu.pop();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> next : graph[curr])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(visit[next]) graph[curr].erase(next);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> next : graph[curr])&#123;</span><br><span class="line">                    visit[next] = <span class="literal">true</span>;</span><br><span class="line">                    qu.push(make_pair(next,p/graph[curr].size()));</span><br><span class="line">                    probability[next] = p/graph[curr].size();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(graph[curr].size() &gt; <span class="number">0</span>) probability[curr] = <span class="number">0.0</span>;</span><br><span class="line">                <span class="keyword">else</span> probability[curr] = p;</span><br><span class="line">                <span class="keyword">if</span>(curr == target &amp;&amp; t &gt; <span class="number">0</span>) <span class="keyword">return</span> probability[curr];</span><br><span class="line">            &#125;</span><br><span class="line">            t--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> probability[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;179周比赛&quot;&gt;&lt;a href=&quot;#179周比赛&quot; class=&quot;headerlink&quot; title=&quot;179周比赛&quot;&gt;&lt;/a&gt;179周比赛&lt;/h1&gt;&lt;p&gt;这周的题目质量一般，不如双周赛的题目好，题目比较简单。&lt;/p&gt;&lt;h2 id=&quot;1374-生成每种字符都是奇数个的字符串&quot;&gt;&lt;a href=&quot;#1374-生成每种字符都是奇数个的字符串&quot; class=&quot;headerlink&quot; title=&quot;1374. 生成每种字符都是奇数个的字符串&quot;&gt;&lt;/a&gt;1374. 生成每种字符都是奇数个的字符串&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数 &lt;code&gt;n&lt;/code&gt;，请你返回一个含 &lt;code&gt;n&lt;/code&gt; 个字符的字符串，其中每种字符在该字符串中都恰好出现 奇数次 。&lt;/p&gt;&lt;p&gt;返回的字符串必须只含小写英文字母。如果存在多个满足题目要求的字符串，则返回其中任意一个即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Maxflow</title>
    <link href="http://yoursite.com/2020/03/05/136/"/>
    <id>http://yoursite.com/2020/03/05/136/</id>
    <published>2020-03-05T14:50:55.362Z</published>
    <updated>2020-03-07T12:54:14.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="maxflow"><a href="#maxflow" class="headerlink" title="maxflow"></a>maxflow</h3><p>最近一直在学习<code>princeton</code>的算法课程，真心觉得质量很高，特别是每次的project，都需要用心和花费大的精力取完成，每次取得100分非常不容。最近把自己之前一直弄不清楚的<code>maxflow</code>算法搞清楚了，并且自己用<code>c++</code>完成了一个简单的<code>maxflow</code>算法，还是非常有成就感的。<br><img src="https://s2.ax1x.com/2020/03/05/3H57jS.png" alt="2"></p><ol><li>定义<code>flownetwork</code>的定义，本身即是一个带权重的右向图，每条边的权重代表这条边的能够达到的最大流量。对于每个顶点的规定流出的流量与流入的流量相等。</li><li>定义<code>flownetwork</code>的起点<code>s</code>与终点<code>t</code>.求出在每条边权重约束下，该有向图从s开始的最大流量。<br>核心问题是<code>minCnut</code>问题和<code>Ford-Fulkerson</code>算法。该问题确实非常经典，值得仔细取阅读和理解，但是算法本身的解法非常简单。</li><li><code>Ford-Fulkerson</code>算法的核心每次查找从起点<code>s</code>到<code>t</code>的路径(augmentpath)，路径上每段的残差（capblity - flow，该条边还能增加多少流）大于0且路径不存在环，找到该条路径上的最小的残差，更新路径上的所有的边<code>flow</code>，都增加路径的最小残存。其实这种办法得本质即为将所有能够从起点<code>s</code>到终点<code>t</code>得路径全部填充满流量，而实际将路径填充满得最大流量是根据路径上得最小流量为基准。<br><img src="https://s2.ax1x.com/2020/03/05/3H5Tc8.png" alt="1"></li><li>重复步骤3，直到在该有权图中无法再找到从<code>s</code>到<code>t</code>的路径即可。</li><li>所有符合条件的路径的最小残存之和即为<code>maxflow</code>。</li><li><code>minCut</code>即将有向图分为两个集合A,B.满足<code>capblity(A-&gt;B)</code> = <code>flow(A-&gt;B)</code>.即为最小分割。<h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3></li><li>时间复杂度为O（V^2E).</li></ol><a id="more"></a><h3 id="视频解说"><a href="#视频解说" class="headerlink" title="视频解说"></a>视频解说</h3><ol><li>在<code>Youtube</code>上找到一个非常经典的解说视频。<br><a href="https://www.youtube.com/watch?v=a0XlX0NwRhM" target="_blank" rel="noopener">视频地址</a></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>自己参照<code>princeton</code>的参考源代码，用c++重新写了一遍，虽然写的比较简单，但是对于普通的最大流的求值基本就够了。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FlowEdge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> flow;</span><br><span class="line">    <span class="keyword">int</span> capbility;</span><br><span class="line">    FlowEdge(<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> capbility)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;from = v;</span><br><span class="line">        <span class="keyword">this</span>-&gt;to = w;</span><br><span class="line">        <span class="keyword">this</span>-&gt;flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;capbility = capbility;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlowNetWork</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;pii,FlowEdge *&gt; edgs;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; adj; </span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; visit;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; edgeTo;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">others</span><span class="params">(FlowEdge * e,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(v == e-&gt;from) <span class="keyword">return</span> e-&gt;to;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v == e-&gt;to) <span class="keyword">return</span> e-&gt;from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">addResidualTo</span><span class="params">(FlowEdge * e,<span class="keyword">int</span> to,<span class="keyword">int</span> delta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(e-&gt;from == to) e-&gt;flow -= delta;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(e-&gt;to == to) e-&gt;flow += delta;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">residualTo</span><span class="params">(FlowEdge * e,<span class="keyword">int</span> to)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(e-&gt;to == to) <span class="keyword">return</span> e-&gt;capbility-e-&gt;flow;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(e-&gt;from == to) <span class="keyword">return</span> e-&gt;flow;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">FlowEdge * <span class="title">getEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span></span>&#123;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; forward = make_pair(from,to);</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; backward = make_pair(to,from);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;edgs.count(forward)) <span class="keyword">return</span> <span class="keyword">this</span>-&gt;edgs[forward];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;edgs.count(backward)) <span class="keyword">return</span> <span class="keyword">this</span>-&gt;edgs[backward];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">addEdges</span><span class="params">(FlowEdge * e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;adj[e-&gt;from].insert(e-&gt;to);</span><br><span class="line">        <span class="keyword">this</span>-&gt;adj[e-&gt;to].insert(e-&gt;from);</span><br><span class="line">        <span class="keyword">this</span>-&gt;edgs[make_pair(e-&gt;from,e-&gt;to)] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">addResidualToEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> delta)</span></span>&#123;</span><br><span class="line">        FlowEdge * edge =  getEdge(from,to);</span><br><span class="line">        <span class="keyword">if</span>(!edge) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> addResidualTo(edge,to,delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">residualToEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span></span>&#123;</span><br><span class="line">        FlowEdge * edge =  getEdge(from,to);</span><br><span class="line">        <span class="keyword">if</span>(!edge) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> residualTo(edge,to);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">augmentPath</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;visit.insert(s);</span><br><span class="line">        qu.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = qu.front();</span><br><span class="line">            qu.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(curr == t) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v : <span class="keyword">this</span>-&gt;adj[curr])&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;visit.count(v) || residualToEdge(curr,v) &lt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">this</span>-&gt;visit.insert(v);</span><br><span class="line">                <span class="keyword">this</span>-&gt;edgeTo[v] = curr;</span><br><span class="line">                qu.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;visit.count(t) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxFlow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;visit.clear();</span><br><span class="line">        <span class="keyword">this</span>-&gt;edgeTo.clear();</span><br><span class="line">        <span class="keyword">while</span>(augmentPath(s,t))&#123;</span><br><span class="line">            <span class="keyword">int</span> bottoleneck = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v = t; v != s; v = <span class="keyword">this</span>-&gt;edgeTo[v])&#123;</span><br><span class="line">                bottoleneck = min(bottoleneck,residualToEdge(<span class="keyword">this</span>-&gt;edgeTo[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v = t; v != s; v = <span class="keyword">this</span>-&gt;edgeTo[v])&#123;</span><br><span class="line">                addResidualToEdge(<span class="keyword">this</span>-&gt;edgeTo[v],v,bottoleneck);</span><br><span class="line">            &#125;</span><br><span class="line">            value += bottoleneck;</span><br><span class="line">            <span class="keyword">this</span>-&gt;edgeTo.clear();</span><br><span class="line">            <span class="keyword">this</span>-&gt;visit.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">inCut</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visit.count(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FlowNetWork G;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v1 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> v2 = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> v3 = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> v4 = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> v5 = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> v6 = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*test*/</span></span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(s,v1,<span class="number">10</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(s,v2,<span class="number">5</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(s,v3,<span class="number">15</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v1,v2,<span class="number">4</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v1,v4,<span class="number">9</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v1,v5,<span class="number">15</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v2,v3,<span class="number">4</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v2,v5,<span class="number">8</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v3,v6,<span class="number">16</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v4,v5,<span class="number">15</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v4,t,<span class="number">10</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v5,t,<span class="number">10</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v5,v6,<span class="number">15</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v6,t,<span class="number">10</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v6,v2,<span class="number">6</span>));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;G.maxFlow(s,t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G.inCut(i)) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">","</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">/*test*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">O(n) = \frac{2^{n}}{C^{k}_{n}}</script></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;maxflow&quot;&gt;&lt;a href=&quot;#maxflow&quot; class=&quot;headerlink&quot; title=&quot;maxflow&quot;&gt;&lt;/a&gt;maxflow&lt;/h3&gt;&lt;p&gt;最近一直在学习&lt;code&gt;princeton&lt;/code&gt;的算法课程，真心觉得质量很高，特别是每次的project，都需要用心和花费大的精力取完成，每次取得100分非常不容。最近把自己之前一直弄不清楚的&lt;code&gt;maxflow&lt;/code&gt;算法搞清楚了，并且自己用&lt;code&gt;c++&lt;/code&gt;完成了一个简单的&lt;code&gt;maxflow&lt;/code&gt;算法，还是非常有成就感的。&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/03/05/3H57jS.png&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;定义&lt;code&gt;flownetwork&lt;/code&gt;的定义，本身即是一个带权重的右向图，每条边的权重代表这条边的能够达到的最大流量。对于每个顶点的规定流出的流量与流入的流量相等。&lt;/li&gt;
&lt;li&gt;定义&lt;code&gt;flownetwork&lt;/code&gt;的起点&lt;code&gt;s&lt;/code&gt;与终点&lt;code&gt;t&lt;/code&gt;.求出在每条边权重约束下，该有向图从s开始的最大流量。&lt;br&gt;核心问题是&lt;code&gt;minCnut&lt;/code&gt;问题和&lt;code&gt;Ford-Fulkerson&lt;/code&gt;算法。该问题确实非常经典，值得仔细取阅读和理解，但是算法本身的解法非常简单。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ford-Fulkerson&lt;/code&gt;算法的核心每次查找从起点&lt;code&gt;s&lt;/code&gt;到&lt;code&gt;t&lt;/code&gt;的路径(augmentpath)，路径上每段的残差（capblity - flow，该条边还能增加多少流）大于0且路径不存在环，找到该条路径上的最小的残差，更新路径上的所有的边&lt;code&gt;flow&lt;/code&gt;，都增加路径的最小残存。其实这种办法得本质即为将所有能够从起点&lt;code&gt;s&lt;/code&gt;到终点&lt;code&gt;t&lt;/code&gt;得路径全部填充满流量，而实际将路径填充满得最大流量是根据路径上得最小流量为基准。&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/03/05/3H5Tc8.png&quot; alt=&quot;1&quot;&gt;&lt;/li&gt;
&lt;li&gt;重复步骤3，直到在该有权图中无法再找到从&lt;code&gt;s&lt;/code&gt;到&lt;code&gt;t&lt;/code&gt;的路径即可。&lt;/li&gt;
&lt;li&gt;所有符合条件的路径的最小残存之和即为&lt;code&gt;maxflow&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minCut&lt;/code&gt;即将有向图分为两个集合A,B.满足&lt;code&gt;capblity(A-&amp;gt;B)&lt;/code&gt; = &lt;code&gt;flow(A-&amp;gt;B)&lt;/code&gt;.即为最小分割。&lt;h3 id=&quot;时间复杂度分析&quot;&gt;&lt;a href=&quot;#时间复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度分析&quot;&gt;&lt;/a&gt;时间复杂度分析&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;时间复杂度为O（V^2E).&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 178周 比赛</title>
    <link href="http://yoursite.com/2020/03/01/135/"/>
    <id>http://yoursite.com/2020/03/01/135/</id>
    <published>2020-03-01T08:46:23.501Z</published>
    <updated>2020-03-01T08:46:33.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="178周比赛"><a href="#178周比赛" class="headerlink" title="178周比赛"></a>178周比赛</h1><p>还是周赛的题目质量好，难度适中，非常适合面试。</p><h2 id="5344-有多少小于当前数字的数字"><a href="#5344-有多少小于当前数字的数字" class="headerlink" title="5344. 有多少小于当前数字的数字"></a>5344. 有多少小于当前数字的数字</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 nums，对于其中每个元素<code>nums[i]</code>，请你统计数组中比它小的所有数字的数目。</p><p>换而言之，对于每个<code>nums[i]</code>你必须计算出有效的 j 的数量，其中 j 满足<code>j != i</code>且 <code>nums[j] &lt; nums[i]</code>。</p><a id="more"></a><p>以数组形式返回答案。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">解释： </span><br><span class="line">对于 nums[<span class="number">0</span>]=<span class="number">8</span> 存在四个比它小的数字：（<span class="number">1</span>，<span class="number">2</span>，<span class="number">2</span> 和 <span class="number">3</span>）。 </span><br><span class="line">对于 nums[<span class="number">1</span>]=<span class="number">1</span> 不存在比它小的数字。</span><br><span class="line">对于 nums[<span class="number">2</span>]=<span class="number">2</span> 存在一个比它小的数字：（<span class="number">1</span>）。 </span><br><span class="line">对于 nums[<span class="number">3</span>]=<span class="number">2</span> 存在一个比它小的数字：（<span class="number">1</span>）。 </span><br><span class="line">对于 nums[<span class="number">4</span>]=<span class="number">3</span> 存在三个比它小的数字：（<span class="number">1</span>，<span class="number">2</span> 和 <span class="number">2</span>）。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>2 &lt;= nums.length &lt;= 500</code></li><li><code>0 &lt;= nums[i] &lt;= 100</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/how-many-numbers-are-smaller-than-the-current-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/how-many-numbers-are-smaller-than-the-current-number</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序 + 二分查找</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>二分查找，直接查找排序后的序列中有多少个数小于当前给定的数。</li><li>map直接统计，map会自动排序，按照排序的序列统计前面的序列中有多少个数目比当前的数小。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; smallerNumbersThanCurrent(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; copy = nums;</span><br><span class="line">        sort(copy.begin(),copy.end());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            res[i] = lower_bound(copy.begin(),copy.end(),nums[i]) - copy.begin();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; smallerNumbersThanCurrent(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> n : nums)&#123;</span><br><span class="line">            cnt[n]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : cnt)&#123;</span><br><span class="line">            prev = cnt[x.first] + prev;</span><br><span class="line">            cnt[x.first] = prev - cnt[x.first];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)&#123;</span><br><span class="line">            res.push_back(cnt[nums[i]]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="15345-通过投票对团队排名"><a href="#15345-通过投票对团队排名" class="headerlink" title="15345. 通过投票对团队排名"></a>15345. 通过投票对团队排名</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>现在有一个特殊的排名系统，依据参赛团队在投票人心中的次序进行排名，每个投票者都需要按从高到低的顺序对参与排名的所有团队进行排位。</p><p>排名规则如下：</p><ul><li>参赛团队的排名次序依照其所获「排位第一」的票的多少决定。如果存在多个团队并列的情况，将继续考虑其「排位第二」的票的数量。以此类推，直到不再存在并列的情况。</li><li>如果在考虑完所有投票情况后仍然出现并列现象，则根据团队字母的字母顺序进行排名。<br>给你一个字符串数组 <code>votes</code>代表全体投票者给出的排位情况，请你根据上述排名规则对所有参赛团队进行排名。</li></ul><p>请你返回能表示按排名系统 排序后 的所有团队排名的字符串。</p><p>示例 1：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：votes = [<span class="string">"ABC"</span>,<span class="string">"ACB"</span>,<span class="string">"ABC"</span>,<span class="string">"ACB"</span>,<span class="string">"ACB"</span>]</span><br><span class="line">输出：<span class="string">"ACB"</span></span><br><span class="line">解释：A 队获得五票「排位第一」，没有其他队获得「排位第一」，所以 A 队排名第一。</span><br><span class="line"><span class="keyword">B </span>队获得两票「排位第二」，三票「排位第三」。</span><br><span class="line">C 队获得三票「排位第二」，两票「排位第三」。</span><br><span class="line">由于 C 队「排位第二」的票数较多，所以 C 队排第二，<span class="keyword">B </span>队排第三。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：votes = [<span class="string">"WXYZ"</span>,<span class="string">"XYZW"</span>]</span><br><span class="line">输出：<span class="string">"XWYZ"</span></span><br><span class="line">解释：<span class="keyword">X</span> 队在并列僵局打破后成为排名第一的团队。<span class="keyword">X</span> 队和 <span class="keyword">W</span> 队的「排位第一」票数一样，但是 <span class="keyword">X</span> 队有一票「排位第二」，而 <span class="keyword">W</span> 没有获得「排位第二」。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">votes</span> = [<span class="string">"ZMNAGUEDSJYLBOPHRQICWFXTVK"</span>]</span><br><span class="line">输出：<span class="string">"ZMNAGUEDSJYLBOPHRQICWFXTVK"</span></span><br><span class="line">解释：只有一个投票者，所以排名完全按照他的意愿。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：votes = [<span class="string">"BCA"</span>,<span class="string">"CAB"</span>,<span class="string">"CBA"</span>,<span class="string">"ABC"</span>,<span class="string">"ACB"</span>,<span class="string">"BAC"</span>]</span><br><span class="line">输出：<span class="string">"ABC"</span></span><br><span class="line">解释： </span><br><span class="line">A 队获得两票「排位第一」，两票「排位第二」，两票「排位第三」。</span><br><span class="line"><span class="keyword">B </span>队获得两票「排位第一」，两票「排位第二」，两票「排位第三」。</span><br><span class="line">C 队获得两票「排位第一」，两票「排位第二」，两票「排位第三」。</span><br><span class="line">完全并列，所以我们需要按照字母升序排名。</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">votes</span> = [<span class="string">"M"</span>,<span class="string">"M"</span>,<span class="string">"M"</span>,<span class="string">"M"</span>]</span><br><span class="line">输出：<span class="string">"M"</span></span><br><span class="line">解释：只有 M 队参赛，所以它排名第一。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= votes.length &lt;= 1000</code></li><li><code>1 &lt;= votes[i].length &lt;= 26</code></li><li><code>votes[i].length == votes[j].length for 0 &lt;= i, j &lt; votes.length</code></li><li><code>votes[i][j] 是英文 大写 字母</code></li><li><code>votes[i] 中的所有字母都是唯一的</code></li><li><code>votes[0] 中出现的所有字母 同样也 出现在 votes[j] 中，其中 1 &lt;= j &lt; votes.length</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/rank-teams-by-votes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rank-teams-by-votes</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接排序</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>数组保存每个队列的评选名次，并将每个队伍的评选名词结果按照从小到大进行排列。</li><li>然后将每个队伍的评选名次按照一定的顺序进行排序，最终即可得到最终结果。</li><li>技巧的关键在于如何排序，我们将转化为一个固定长度的数组，每个队伍的评选名词列表按照数组元素的大小进行比较，关键点在于如何比较。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; a,pair&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.second.size() &amp;&amp; i &lt; b.second.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.second[i] &lt; b.second[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(a.second[i] &gt; b.second[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">rankTeams</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; votes)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cnt(<span class="number">26</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; copy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; votes.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; votes[i].size(); ++j)&#123;</span><br><span class="line">                cnt[votes[i][j]-<span class="string">'A'</span>].push_back(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i].size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                sort(cnt[i].begin(),cnt[i].end());</span><br><span class="line">                copy.push_back(make_pair(i,cnt[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(copy.begin(),copy.end(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; copy.size(); ++i)&#123;</span><br><span class="line">            res += <span class="string">'A'</span> + copy[i].first;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5346-二叉树中的列表"><a href="#5346-二叉树中的列表" class="headerlink" title="5346. 二叉树中的列表"></a>5346. 二叉树中的列表</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一棵以 <code>root</code> 为根的二叉树和一个 <code>head</code>为第一个节点的链表。</p><p>如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应以 <code>head</code> 为首的链表中每个节点的值，那么请你返回 True ，否则返回 <code>False</code> 。</p><p>一直向下的路径的意思是：从树中某个节点开始，一直连续向下的路径。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>], root = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：树中蓝色的节点构成了与链表对应的子路径。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>], root = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>], root = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：二叉树中不存在一一对应链表的路径。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>二叉树和链表中的每个节点的值都满足<code>1 &lt;= node.val &lt;= 100</code>。</li><li>链表包含的节点数目在 1 到 100 之间。</li><li>二叉树包含的节点数目在 1 到 2500 之间。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/linked-list-in-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-in-binary-tree</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>按层次遍历二叉树，对每个节点进行与链表匹配。</li><li>与链表匹配，用DFS即可，每次根节点匹配头节点，根节点的子节点匹配下一个节点。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(ListNode * head,TreeNode * root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val != head-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(head-&gt;next,root-&gt;left)||dfs(head-&gt;next,root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubPath</span><span class="params">(ListNode* head, TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(dfs(head,root)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> isSubPath(head,root-&gt;left)||isSubPath(head,root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5347-使网格图至少有一条有效路径的最小代价"><a href="#5347-使网格图至少有一条有效路径的最小代价" class="headerlink" title="5347. 使网格图至少有一条有效路径的最小代价"></a>5347. 使网格图至少有一条有效路径的最小代价</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个 m x n 的网格图 <code>grid</code> 。 <code>grid</code>中每个格子都有一个数字，对应着从该格子出发下一步走的方向。 <code>grid[i][j]</code>中的数字可能为以下几种情况：</p><ul><li>1 ，下一步往右走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i][j + 1]</code></li><li>2 ，下一步往左走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i][j - 1]</code></li><li>3 ，下一步往下走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i + 1][j]</code></li><li>4 ，下一步往上走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i - 1][j]</code><br>注意网格图中可能会有 无效数字 ，因为它们可能指向 grid 以外的区域。</li></ul><p>一开始，你会从最左上角的格子 (0,0) 出发。我们定义一条 有效路径 为从格子 (0,0) 出发，每一步都顺着数字对应方向走，最终在最右下角的格子 (m - 1, n - 1) 结束的路径。有效路径 不需要是最短路径 。</p><p>你可以花费<code>cost = 1</code> 的代价修改一个格子中的数字，但每个格子中的数字 只能修改一次 。</p><p>请你返回让网格图至少有一条有效路径的最小代价。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：你将从点 (<span class="number">0</span>, <span class="number">0</span>) 出发。</span><br><span class="line">到达 (<span class="number">3</span>, <span class="number">3</span>) 的路径为： (<span class="number">0</span>, <span class="number">0</span>) --&gt; (<span class="number">0</span>, <span class="number">1</span>) --&gt; (<span class="number">0</span>, <span class="number">2</span>) --&gt; (<span class="number">0</span>, <span class="number">3</span>) 花费代价 cost = <span class="number">1</span> 使方向向下 --&gt; (<span class="number">1</span>, <span class="number">3</span>) --&gt; (<span class="number">1</span>, <span class="number">2</span>) --&gt; (<span class="number">1</span>, <span class="number">1</span>) --&gt; (<span class="number">1</span>, <span class="number">0</span>) 花费代价 cost = <span class="number">1</span> 使方向向下 --&gt; (<span class="number">2</span>, <span class="number">0</span>) --&gt; (<span class="number">2</span>, <span class="number">1</span>) --&gt; (<span class="number">2</span>, <span class="number">2</span>) --&gt; (<span class="number">2</span>, <span class="number">3</span>) 花费代价 cost = <span class="number">1</span> 使方向向下 --&gt; (<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">总花费为 cost = <span class="number">3.</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>]]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：不修改任何数字你就可以从 (<span class="number">0</span>, <span class="number">0</span>) 到达 (<span class="number">2</span>, <span class="number">2</span>) 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">3</span>]]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = <span class="string">[[4]]</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS + 优先级队列</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>一般这种求最短路径的题目基本上就是几种解法：BFS,DFS,DP，刚开始准备用dp来做，发现dp的递推公式有问题，最后放弃掉。</li><li>最后发现此题应该利用类似的贪心的算法，因为题目中要求是求的最小代价，而不是最短路径。所以我们应当在做一次更改后，应当尽可能的将更改路径后所有能够遍历的节点全部进行遍历一遍。</li><li>我们设dp[x][y]位从<code>(0,0)</code>开始向<code>(x,y)</code>遍历时最小代价。我们一旦利用bfs遍历到某个节点时，应该判断当前的代价<code>cost</code>是否小于(x,y)本身的代价<code>dp[x][y]</code>,如果是则将(x,y)节点加入队列中进行再次遍历。</li><li>我们利用优先级队列优先遍历代价较低的节点。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(pii &amp;  a,pii &amp; b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = grid.size();</span><br><span class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(row,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col,INT_MAX));</span><br><span class="line">        priority_queue&lt;pii,<span class="built_in">vector</span>&lt;pii&gt;,cmp&gt; pq;</span><br><span class="line">        </span><br><span class="line">        pq.push(make_pair(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = pq.top().first/col;</span><br><span class="line">            <span class="keyword">int</span> y = pq.top().first%col;</span><br><span class="line">            <span class="keyword">int</span> step = pq.top().second;</span><br><span class="line">            pq.pop();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(x == row<span class="number">-1</span> &amp;&amp; y == col<span class="number">-1</span>) <span class="keyword">return</span> step;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> x1 = x + d[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> y1 = y + d[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(x1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; row &amp;&amp; y1 &gt;= <span class="number">0</span> &amp;&amp; y1 &lt; col)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[x][y] == i+<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(dp[x1][y1] &gt; dp[x][y])&#123;</span><br><span class="line">                            dp[x1][y1] = dp[x][y];</span><br><span class="line">                            pq.push(make_pair(x1*col+y1,dp[x1][y1]));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(dp[x1][y1] &gt; dp[x][y] + <span class="number">1</span>)&#123;</span><br><span class="line">                            dp[x1][y1] = dp[x][y] + <span class="number">1</span>;</span><br><span class="line">                            pq.push(make_pair(x1*col+y1,dp[x1][y1]));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;178周比赛&quot;&gt;&lt;a href=&quot;#178周比赛&quot; class=&quot;headerlink&quot; title=&quot;178周比赛&quot;&gt;&lt;/a&gt;178周比赛&lt;/h1&gt;&lt;p&gt;还是周赛的题目质量好，难度适中，非常适合面试。&lt;/p&gt;&lt;h2 id=&quot;5344-有多少小于当前数字的数字&quot;&gt;&lt;a href=&quot;#5344-有多少小于当前数字的数字&quot; class=&quot;headerlink&quot; title=&quot;5344. 有多少小于当前数字的数字&quot;&gt;&lt;/a&gt;5344. 有多少小于当前数字的数字&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个数组 nums，对于其中每个元素&lt;code&gt;nums[i]&lt;/code&gt;，请你统计数组中比它小的所有数字的数目。&lt;/p&gt;&lt;p&gt;换而言之，对于每个&lt;code&gt;nums[i]&lt;/code&gt;你必须计算出有效的 j 的数量，其中 j 满足&lt;code&gt;j != i&lt;/code&gt;且 &lt;code&gt;nums[j] &amp;lt; nums[i]&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 20周 双周赛</title>
    <link href="http://yoursite.com/2020/02/23/134/"/>
    <id>http://yoursite.com/2020/02/23/134/</id>
    <published>2020-02-23T14:47:49.847Z</published>
    <updated>2020-02-23T14:50:00.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20双周比赛"><a href="#20双周比赛" class="headerlink" title="20双周比赛"></a>20双周比赛</h1><p>第三题稍微有点难度，其余都比较简单</p><h2 id="5323-根据数字二进制下-1-的数目排序"><a href="#5323-根据数字二进制下-1-的数目排序" class="headerlink" title="5323. 根据数字二进制下 1 的数目排序"></a>5323. 根据数字二进制下 1 的数目排序</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code> 。请你将数组中的元素按照其二进制表示中数字 1 的数目升序排序。</p><p>如果存在多个数字二进制中 1 的数目相同，则必须将它们按照数值大小升序排列。</p><p>请你返回排序后的数组。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">解释：[<span class="number">0</span>] 是唯一一个有 <span class="number">0</span> 个 <span class="number">1</span> 的数。</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>] 都有 <span class="number">1</span> 个 <span class="number">1</span> 。</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>] 有 <span class="number">2</span> 个 <span class="number">1</span> 。</span><br><span class="line">[<span class="number">7</span>] 有 <span class="number">3</span> 个 <span class="number">1</span> 。</span><br><span class="line">按照 <span class="number">1</span> 的个数排序得到的结果数组为 [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1024</span>,<span class="number">512</span>,<span class="number">256</span>,<span class="number">128</span>,<span class="number">64</span>,<span class="number">32</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">256</span>,<span class="number">512</span>,<span class="number">1024</span>]</span><br><span class="line">解释：数组中所有整数二进制下都只有 <span class="number">1</span> 个 <span class="number">1</span> ，所以你需要按照数值大小将它们排序。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">10000</span>,<span class="number">10000</span>]</span><br><span class="line">输出：[<span class="number">10000</span>,<span class="number">10000</span>]</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">19</span>]</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>,<span class="number">10000</span>]</span><br><span class="line">输出：[<span class="number">10</span>,<span class="number">100</span>,<span class="number">10000</span>,<span class="number">1000</span>]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 500</code></li><li><code>0 &lt;= arr[i] &lt;= 10^4</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/sort-integers-by-the-number-of-1-bits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sort-integers-by-the-number-of-1-bits</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接比较数种含有1的个数大小进行比较，自定义排序函数即可。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countOne</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">        x = x&amp;(x<span class="number">-1</span>);</span><br><span class="line">        res++;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> &amp; a,<span class="keyword">int</span> &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(countOne(a) == countOne(b)) <span class="keyword">return</span> a &lt; b;</span><br><span class="line">        <span class="keyword">return</span> countOne(a) &lt; countOne(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sortByBits(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr) &#123;</span><br><span class="line">        sort(arr.begin(),arr.end(),cmp);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1357-每隔-n-个顾客打折"><a href="#1357-每隔-n-个顾客打折" class="headerlink" title="1357. 每隔 n 个顾客打折"></a>1357. 每隔 n 个顾客打折</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>超市里正在举行打折活动，每隔 n 个顾客会得到 discount 的折扣。</p><p>超市里有一些商品，第 i 种商品为 <code>products[i]</code> 且每件单品的价格为<code>prices[i]</code>。</p><p>结账系统会统计顾客的数目，每隔 n 个顾客结账时，该顾客的账单都会打折，折扣为 discount （也就是如果原本账单为 x ，那么实际金额会变成<code>x - (discount * x) / 100 ）</code>，然后系统会重新开始计数。</p><p>顾客会购买一些商品， <code>product[i]</code>是顾客购买的第 i 种商品， <code>amount[i]</code> 是对应的购买该种商品的数目。</p><p>请你实现<code>Cashier</code>类：</p><ul><li><code>Cashier(int n, int discount, int[] products, int[] prices)</code>初始化实例对象，参数分别为打折频率 n ，折扣大小 <code>discount</code>，超市里的商品列表 <code>products</code> 和它们的价格 <code>prices</code>。</li><li><code>double getBill(int[] product, int[] amount)</code> 返回账单的实际金额（如果有打折，请返回打折后的结果）。返回结果与标准答案误差在 <code>10^-5</code>以内都视为正确结果。</li></ul><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[<span class="string">"Cashier"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>]</span><br><span class="line">[[<span class="number">3</span>,<span class="number">50</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">100</span>]],[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]],[[<span class="number">3</span>,<span class="number">7</span>],[<span class="number">10</span>,<span class="number">10</span>]],[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]],[[<span class="number">4</span>],[<span class="number">10</span>]],[[<span class="number">7</span>,<span class="number">3</span>],[<span class="number">10</span>,<span class="number">10</span>]],[[<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">7</span>]],[[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>]]]</span><br><span class="line">输出</span><br><span class="line">[null,<span class="number">500.0</span>,<span class="number">4000.0</span>,<span class="number">800.0</span>,<span class="number">4000.0</span>,<span class="number">4000.0</span>,<span class="number">7350.0</span>,<span class="number">2500.0</span>]</span><br><span class="line">解释</span><br><span class="line">Cashier cashier = new Cashier(<span class="number">3</span>,<span class="number">50</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">100</span>]);</span><br><span class="line">cashier.getBill([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]);                        <span class="comment">// 返回 500.0, 账单金额为 = 1 * 100 + 2 * 200 = 500.</span></span><br><span class="line">cashier.getBill([<span class="number">3</span>,<span class="number">7</span>],[<span class="number">10</span>,<span class="number">10</span>]);                      <span class="comment">// 返回 4000.0</span></span><br><span class="line">cashier.getBill([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]);    <span class="comment">// 返回 800.0 ，账单原本为 1600.0 ，但由于该顾客是第三位顾客，他将得到 50% 的折扣，所以实际金额为 1600 - 1600 * (50 / 100) = 800 。</span></span><br><span class="line">cashier.getBill([<span class="number">4</span>],[<span class="number">10</span>]);                           <span class="comment">// 返回 4000.0</span></span><br><span class="line">cashier.getBill([<span class="number">7</span>,<span class="number">3</span>],[<span class="number">10</span>,<span class="number">10</span>]);                      <span class="comment">// 返回 4000.0</span></span><br><span class="line">cashier.getBill([<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">7</span>]); <span class="comment">// 返回 7350.0 ，账单原本为 14700.0 ，但由于系统计数再次达到三，该顾客将得到 50% 的折扣，实际金额为 7350.0 。</span></span><br><span class="line">cashier.getBill([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>]);                    <span class="comment">// 返回 2500.0</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>1 &lt;= n &lt;= 10^4</li><li>0 &lt;= discount &lt;= 100</li><li>1 &lt;= products.length &lt;= 200</li><li>1 &lt;= products[i] &lt;= 200</li><li>products 列表中 不会 有重复的元素。</li><li>prices.length == products.length</li><li>1 &lt;= prices[i] &lt;= 1000</li><li>1 &lt;= product.length &lt;= products.length</li><li>product[i] 在 products 出现过。</li><li>amount.length == product.length</li><li>1 &lt;= amount[i] &lt;= 1000</li><li>最多有 1000 次对 getBill 函数的调用。</li><li>返回结果与标准答案误差在 10^-5 以内都视为正确结果。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/apply-discount-every-n-orders" target="_blank" rel="noopener">https://leetcode-cn.com/problems/apply-discount-every-n-orders</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接计算即可，题目非常简单</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>用map保存货物和价格的对应关系。</li><li>直接计算即可，每次到达打折的次数进行打折即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cashier</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Cashier(<span class="keyword">int</span> n, <span class="keyword">int</span> discount, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; products, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;freq = n;</span><br><span class="line">        <span class="keyword">this</span>-&gt;discount = discount;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; products.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;products[products[i]] = prices[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;curr = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getBill</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; product, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; product.size(); ++i)&#123;</span><br><span class="line">            res += <span class="keyword">this</span>-&gt;products[product[i]]*amount[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;curr == freq<span class="number">-1</span>)&#123;</span><br><span class="line">            res *= <span class="keyword">double</span>(<span class="number">100</span>-discount)/<span class="number">100</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;curr = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;curr++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> freq;</span><br><span class="line">    <span class="keyword">int</span> discount;</span><br><span class="line">    <span class="keyword">int</span> curr;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; products;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Cashier object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Cashier* obj = new Cashier(n, discount, products, prices);</span></span><br><span class="line"><span class="comment"> * double param_1 = obj-&gt;getBill(product,amount);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5325-包含所有三种字符的子字符串数目"><a href="#5325-包含所有三种字符的子字符串数目" class="headerlink" title="5325. 包含所有三种字符的子字符串数目"></a>5325. 包含所有三种字符的子字符串数目</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>s</code>，它只包含三种字符<code>a</code>, <code>b</code>和<code>c</code> 。</p><p>请你返回 <code>a，b</code> 和 <code>c</code>都 至少 出现过一次的子字符串数目。</p><p>示例 1：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"abcabc"</span></span><br><span class="line">输出：<span class="number">10</span></span><br><span class="line">解释：包含 a，<span class="selector-tag">b</span> 和 c 各至少一次的子字符串为 <span class="string">"abc"</span>, <span class="string">"abca"</span>, <span class="string">"abcab"</span>, <span class="string">"abcabc"</span>, <span class="string">"bca"</span>, <span class="string">"bcab"</span>, <span class="string">"bcabc"</span>, <span class="string">"cab"</span>, <span class="string">"cabc"</span> 和 <span class="string">"abc"</span> (相同字符串算多次)。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aaacb"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：包含 a，<span class="selector-tag">b</span> 和 c 各至少一次的子字符串为 <span class="string">"aaacb"</span>, <span class="string">"aacb"</span> 和 <span class="string">"acb"</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"abc"</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>3 &lt;= s.length &lt;= 5 x 10^4</code></li><li>s 只包含字符 a，b 和 c 。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-substrings-containing-all-three-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-substrings-containing-all-three-characters</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>每次滑动窗口，往后开始搜索，如果发现窗口满足包含有三种字符，则计算这时符合条件的子串的数目，同时将窗口向右移动一位。</li><li>发现题解中有一个非常好的解法dp，每次取满足三个字符的最小位，这个解法确实非常好。每次记录当前字符串的中<code>&#39;a&#39;,&#39;b&#39;,&#39;c&#39;</code>的最大位置。每次直接取最小的位置，最小位置往左叠加有 <code>(n+1)</code>的字串。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfSubstrings</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>((cnt[<span class="number">0</span>] == <span class="number">0</span> || cnt[<span class="number">1</span>] == <span class="number">0</span> || cnt[<span class="number">2</span>] == <span class="number">0</span>) &amp;&amp; r &lt; n<span class="number">-1</span>)&#123;</span><br><span class="line">                r++;</span><br><span class="line">                cnt[s[r]-<span class="string">'a'</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt[<span class="number">0</span>] &gt; <span class="number">0</span> &amp;&amp; cnt[<span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; cnt[<span class="number">2</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                res += n-r;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[s[i]-<span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfSubstrings</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr(<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            curr[s[i]-<span class="string">'a'</span>] = i+<span class="number">1</span>;</span><br><span class="line">            res += min(curr[<span class="number">0</span>],min(curr[<span class="number">1</span>],curr[<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5326-有效的快递序列数目"><a href="#5326-有效的快递序列数目" class="headerlink" title="5326. 有效的快递序列数目"></a>5326. 有效的快递序列数目</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3>给你 n 笔订单，每笔订单都需要快递服务。</li></ol></blockquote><p>请你统计所有有效的 收件/配送 序列的数目，确保第 i 个物品的配送服务 delivery(i) 总是在其收件服务 <code>pickup(i)</code> 之后。</p><p>由于答案可能很大，请返回答案对 10^9 + 7 取余的结果。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：只有一种序列 (P1, D1)，物品 <span class="number">1</span> 的配送服务（D1）在物品 <span class="number">1</span> 的收件服务（P1）后。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：所有可能的序列包括：</span><br><span class="line">(<span class="built_in">P1</span>,<span class="built_in">P2</span>,<span class="built_in">D1</span>,<span class="built_in">D2</span>)，(<span class="built_in">P1</span>,<span class="built_in">P2</span>,<span class="built_in">D2</span>,<span class="built_in">D1</span>)，(<span class="built_in">P1</span>,<span class="built_in">D1</span>,<span class="built_in">P2</span>,<span class="built_in">D2</span>)，(<span class="built_in">P2</span>,<span class="built_in">P1</span>,<span class="built_in">D1</span>,<span class="built_in">D2</span>)，(<span class="built_in">P2</span>,<span class="built_in">P1</span>,<span class="built_in">D2</span>,<span class="built_in">D1</span>) 和 (<span class="built_in">P2</span>,<span class="built_in">D2</span>,<span class="built_in">P1</span>,<span class="built_in">D1</span>)。</span><br><span class="line">(<span class="built_in">P1</span>,<span class="built_in">D2</span>,<span class="built_in">P2</span>,<span class="built_in">D1</span>) 是一个无效的序列，因为物品 <span class="number">2</span> 的收件服务（<span class="built_in">P2</span>）不应在物品 <span class="number">2</span> 的配送服务（<span class="built_in">D2</span>）之后。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">90</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 500</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-all-valid-pickup-and-delivery-options" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-all-valid-pickup-and-delivery-options</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排列组合问题</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>我们可以看到每次1笔订单，则增加两个选项。比如现在有<code>n</code>个订单，则其排列可能为：<figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">x</span><span class="number">1</span>,<span class="keyword">x</span><span class="number">2</span>,<span class="keyword">x</span><span class="number">3</span>,...,xn,y<span class="number">1</span>,y<span class="number">2</span>,y<span class="number">3</span>,...,yn</span><br></pre></td></tr></table></figure>现在我们需要将<code>p(n+1),d(n+1)</code>加入到其中，我们可以看到总共有<code>2*n+1</code>为位置可以作为候选：<figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">x</span> p1 <span class="symbol">x</span> p2 ... <span class="symbol">x</span> d1 <span class="symbol">x</span> d2 <span class="symbol">x</span> d3 ... <span class="symbol">x</span> dn <span class="symbol">x</span></span><br></pre></td></tr></table></figure>其中<code>x</code>为可选的位置。<br>要门从所有可选的位置(2n+1)中选两个，然后d总是在p后面，或者从中选1个,而n笔订单的可能排序数目为`F(n)则这时可选择的位置为：</li></ol></blockquote><script type="math/tex; mode=display">F(n+1) = F(n)(C_{2*n+1}^{2} + C_{2*n+1}^{1})</script><p>按照这个计算，本题为基本的高中代数题目。</p><ol><li>注意溢出的问题，采用<code>long long</code>类型存储数组。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countOrders</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> x = (i<span class="number">-1</span>)*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            res = res*(x*(x<span class="number">-1</span>)/<span class="number">2</span>+x)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;20双周比赛&quot;&gt;&lt;a href=&quot;#20双周比赛&quot; class=&quot;headerlink&quot; title=&quot;20双周比赛&quot;&gt;&lt;/a&gt;20双周比赛&lt;/h1&gt;&lt;p&gt;第三题稍微有点难度，其余都比较简单&lt;/p&gt;&lt;h2 id=&quot;5323-根据数字二进制下-1-的数目排序&quot;&gt;&lt;a href=&quot;#5323-根据数字二进制下-1-的数目排序&quot; class=&quot;headerlink&quot; title=&quot;5323. 根据数字二进制下 1 的数目排序&quot;&gt;&lt;/a&gt;5323. 根据数字二进制下 1 的数目排序&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/code&gt; 。请你将数组中的元素按照其二进制表示中数字 1 的数目升序排序。&lt;/p&gt;&lt;p&gt;如果存在多个数字二进制中 1 的数目相同，则必须将它们按照数值大小升序排列。&lt;/p&gt;&lt;p&gt;请你返回排序后的数组。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] 是唯一一个有 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; 个 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 的数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;] 都有 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 个 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;] 有 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 个 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;] 有 &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; 个 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;按照 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 的个数排序得到的结果数组为 [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：数组中所有整数二进制下都只有 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 个 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ，所以你需要按照数值大小将它们排序。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 4：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 5：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 177 场周赛</title>
    <link href="http://yoursite.com/2020/02/23/133/"/>
    <id>http://yoursite.com/2020/02/23/133/</id>
    <published>2020-02-23T10:51:42.799Z</published>
    <updated>2020-02-23T10:51:55.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="177场双周比赛"><a href="#177场双周比赛" class="headerlink" title="177场双周比赛"></a>177场双周比赛</h1><p>177周的题目本身比较简单</p><h2 id="5169-日期之间隔几天"><a href="#5169-日期之间隔几天" class="headerlink" title="5169. 日期之间隔几天"></a>5169. 日期之间隔几天</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请你编写一个程序来计算两个日期之间隔了多少天。</p><p>日期以字符串形式给出，格式为 <code>YYYY-MM-DD</code>，如示例所示。</p><p>示例 1：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">date1</span> = <span class="string">"2019-06-29"</span>, <span class="attr">date2</span> = <span class="string">"2019-06-30"</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">date1</span> = <span class="string">"2020-01-15"</span>, <span class="attr">date2</span> = <span class="string">"2019-12-31"</span></span><br><span class="line">输出：<span class="number">15</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-days-between-two-dates" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-days-between-two-dates</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力统计</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接使用库函数</li><li>直接计算两个日期距离<code>1971年</code>的天数，求两个天数之差的绝对值。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">daysBetweenDates</span><span class="params">(self, date1, date2)</span>:</span></span><br><span class="line">        d1 = datetime.datetime.strptime(date1,<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">        d2 = datetime.datetime.strptime(date2,<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">        <span class="keyword">return</span> abs((d1-d2).days)</span><br></pre></td></tr></table></figure><h2 id="5170-验证二叉树"><a href="#5170-验证二叉树" class="headerlink" title="5170. 验证二叉树"></a>5170. 验证二叉树</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>二叉树上有 n 个节点，按从<code>0</code> 到 <code>n - 1</code>编号，其中节点 i 的两个子节点分别是 <code>leftChild[i]</code>和 <code>rightChild[i]</code>。</p><p>只有 所有 节点能够形成且 只 形成 一颗 有效的二叉树时，返回<code>true</code>；否则返回 <code>false</code>。</p><p>如果节点 i 没有左子节点，那么 <code>leftChild[i]</code>就等于 -1。右子节点也符合该规则。</p><p>注意：节点没有值，本问题中仅仅使用节点编号。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, leftChild = [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-1</span>], rightChild = [<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, leftChild = [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-1</span>], rightChild = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, leftChild = [<span class="number">1</span>,<span class="number">0</span>], rightChild = [<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">6</span>, leftChild = [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">-1</span>], rightChild = [<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">5</span>,<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= n &lt;= 10^4</code></li><li><code>leftChild.length == rightChild.length == n</code></li><li><code>-1 &lt;= leftChild[i], rightChild[i] &lt;= n - 1</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/validate-binary-tree-nodes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/validate-binary-tree-nodes</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 判断节点的入度</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>统计每个节点的入度。</li><li>如果存在节点的入度大于1则返回<code>false</code>,且有且只有一个存在入度为<code>0</code>的节点。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">validateBinaryTreeNodes</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; leftChild, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; rightChild)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in(n,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(leftChild[i] != <span class="number">-1</span>) in[leftChild[i]]++;</span><br><span class="line">            <span class="keyword">if</span>(rightChild[i] != <span class="number">-1</span>) in[rightChild[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i] &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(in[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(root &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                root = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5171-最接近的因数"><a href="#5171-最接近的因数" class="headerlink" title="5171. 最接近的因数"></a>5171. 最接近的因数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 <code>num</code>，请你找出同时满足下面全部要求的两个整数：<br>两数乘积等于 <code>num + 1</code> 或 <code>num + 2</code>.<br>以绝对差进行度量，两数大小最接近<br>你可以按任意顺序返回这两个整数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">8</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">解释：对于 num + <span class="number">1</span> = <span class="number">9</span>，最接近的两个因数是 <span class="number">3</span> &amp; <span class="number">3</span>；对于 num + <span class="number">2</span> = <span class="number">10</span>, 最接近的两个因数是 <span class="number">2</span> &amp; <span class="number">5</span>，因此返回 <span class="number">3</span> &amp; <span class="number">3</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">123</span></span><br><span class="line">输出：[<span class="number">5</span>,<span class="number">25</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">999</span></span><br><span class="line">输出：[<span class="number">40</span>,<span class="number">25</span>]</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= num &lt;= 10^9</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/closest-divisors" target="_blank" rel="noopener">https://leetcode-cn.com/problems/closest-divisors</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力计算</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>直接从大开始向小遍历，很容易得到最大值。直接暴力即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; divisors(<span class="keyword">int</span> num)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="built_in">sqrt</span>(num); i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num%i == <span class="number">0</span>)&#123;</span><br><span class="line">                res = &#123;i,num/i&#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; closestDivisors(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">int</span> x1 = num + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x2 = num + <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; close1 = divisors(x1);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; close2 = divisors(x2);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(close1[<span class="number">0</span>]-close1[<span class="number">1</span>]) &gt; <span class="built_in">abs</span>(close2[<span class="number">0</span>] - close2[<span class="number">1</span>]))&#123;</span><br><span class="line">            <span class="keyword">return</span> close2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> close1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5172-形成三的最大倍数"><a href="#5172-形成三的最大倍数" class="headerlink" title="5172. 形成三的最大倍数"></a>5172. 形成三的最大倍数</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3>给你一个整数数组 <code>target</code> 。一开始，你有一个数组 A ，它的所有元素均为 1 ，你可以执行以下操作：</li></ol></blockquote><p>令 x 为你数组里所有元素的和<br>选择满足 <code>0 &lt;= i &lt; target.size</code>的任意下标 i ，并让 A 数组里下标为 i 处的值为 x 。<br>你可以重复该过程任意次<br>如果能从 A 开始构造出目标数组<code>target</code>，请你返回<code>True</code>，否则返回 <code>False</code>。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：从 [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>] 开始</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], 和为 <span class="number">3</span> ，选择下标 <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>], 和为 <span class="number">5</span>， 选择下标 <span class="number">2</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], 和为 <span class="number">9</span>， 选择下标 <span class="number">0</span></span><br><span class="line">[<span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>] 完成</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：不可能从 [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>] 出发构造目标数组。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>N == target.length</code></li><li><code>1 &lt;= target.length &lt;= 5 * 10^4</code></li><li><code>1 &lt;= target[i] &lt;= 10^9</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/construct-target-array-with-multiple-sums" target="_blank" rel="noopener">https://leetcode-cn.com/problems/construct-target-array-with-multiple-sums</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 余数问题</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>直接计算，算出所有数字总和的<code>sum</code>,去掉部分数组元素，让数组元素的总和能够被<code>3</code>整出。按照我们只需要去掉最小的数即可。分为三种情况：</li></ol><ul><li>如果<code>sum%3 == 0</code>,直接按照元素从大到小组成字符串，返回即可;</li><li>如果<code>sum%3 == 1</code>,去掉<code>x%3 == 1</code>的最小的一个元素，或者去掉<code>x%3 == 2</code>的最小的两个元素；</li><li>如果<code>sum%3 == 2</code>,去掉<code>x%3 == 2</code>的最小的一个元素，或者去掉<code>x%3 == 1</code>的最小的两个元素；</li><li>按照以上规则，优先去掉1个元素，其次尝试去掉2个元素，如果都不能满足，则返回空字符串；</li></ul><ol><li>dp，稍微比较复杂一些，设<code>dp[i][j]</code>为前<code>i</code>个元素组成的字符串且余数为<code>j</code>的最大的字符串：</li><li>详细的dp递推公式可以参考代码，比较简单。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; digits)</span></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = digits.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(digits[i] &gt;= <span class="number">0</span>) res += digits[i] + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res.size() &gt; <span class="number">0</span> &amp;&amp; res[<span class="number">0</span>] == <span class="string">'0'</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; digits,<span class="keyword">int</span> x,<span class="keyword">int</span> tot)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tot &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(digits[i]%<span class="number">3</span> == x)&#123;</span><br><span class="line">                digits[i] = <span class="number">-1</span>;</span><br><span class="line">                tot--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tot == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">largestMultipleOfThree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = digits.size();</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">        sort(digits.begin(),digits.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            sum += digits[i];</span><br><span class="line">            cnt[digits[i]%<span class="number">3</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">3</span> == <span class="number">0</span>) <span class="keyword">return</span> str(digits);</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[<span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                remove(digits,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> str(digits);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt[<span class="number">2</span>] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                remove(digits,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">return</span> str(digits);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">3</span> == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[<span class="number">2</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                remove(digits,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> str(digits);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt[<span class="number">1</span>] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                remove(digits,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">return</span> str(digits);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> &amp; a,<span class="keyword">int</span> &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">maxStr</span><span class="params">(<span class="built_in">string</span>  a,<span class="built_in">string</span>  b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == <span class="string">'0'</span>) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">if</span>(b[<span class="number">0</span>] == <span class="string">'0'</span>) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">if</span>(a.size() &gt; b.size()) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">if</span>(b.size() &gt; a.size()) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">largestMultipleOfThree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = digits.size();</span><br><span class="line">        sort(digits.begin(),digits.end(),cmp);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; dp(<span class="number">3</span>,<span class="string">""</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; dp1(<span class="number">3</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; d : digits)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = <span class="string">'0'</span> + d;</span><br><span class="line">            dp1 = dp;</span><br><span class="line">            dp1[d%<span class="number">3</span>] = maxStr(dp[d%<span class="number">3</span>],dp[<span class="number">0</span>]+c);</span><br><span class="line">            <span class="keyword">if</span>(d%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                dp1[<span class="number">0</span>] = dp[<span class="number">0</span>] + c;</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">1</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">1</span>] = dp[<span class="number">1</span>] + c;</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">2</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">2</span>] = dp[<span class="number">2</span>] + c;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(d%<span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">2</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">0</span>] = maxStr(dp[<span class="number">0</span>],dp[<span class="number">2</span>] + c);</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">1</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">2</span>] = maxStr(dp[<span class="number">2</span>],dp[<span class="number">1</span>] + c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(d%<span class="number">3</span> == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">1</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">0</span>] = maxStr(dp[<span class="number">0</span>],dp[<span class="number">1</span>] + c);</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">2</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">1</span>] = maxStr(dp[<span class="number">1</span>],dp[<span class="number">2</span>] + c);</span><br><span class="line">            &#125;</span><br><span class="line">            dp = dp1;</span><br><span class="line">            <span class="keyword">if</span>(dp[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">'0'</span>) dp[<span class="number">0</span>] = <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">'0'</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;177场双周比赛&quot;&gt;&lt;a href=&quot;#177场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;177场双周比赛&quot;&gt;&lt;/a&gt;177场双周比赛&lt;/h1&gt;&lt;p&gt;177周的题目本身比较简单&lt;/p&gt;&lt;h2 id=&quot;5169-日期之间隔几天&quot;&gt;&lt;a href=&quot;#5169-日期之间隔几天&quot; class=&quot;headerlink&quot; title=&quot;5169. 日期之间隔几天&quot;&gt;&lt;/a&gt;5169. 日期之间隔几天&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;请你编写一个程序来计算两个日期之间隔了多少天。&lt;/p&gt;&lt;p&gt;日期以字符串形式给出，格式为 &lt;code&gt;YYYY-MM-DD&lt;/code&gt;，如示例所示。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;attr&quot;&gt;date1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;2019-06-29&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;date2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;2019-06-30&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;attr&quot;&gt;date1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;2020-01-15&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;date2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;2019-12-31&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 176 场周赛</title>
    <link href="http://yoursite.com/2020/02/18/132/"/>
    <id>http://yoursite.com/2020/02/18/132/</id>
    <published>2020-02-18T15:09:55.548Z</published>
    <updated>2020-02-23T06:26:22.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="176场双周比赛"><a href="#176场双周比赛" class="headerlink" title="176场双周比赛"></a>176场双周比赛</h1><p>176周的题目比较难</p><h2 id="1351-统计有序矩阵中的负数"><a href="#1351-统计有序矩阵中的负数" class="headerlink" title="1351. 统计有序矩阵中的负数"></a>1351. 统计有序矩阵中的负数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个 <code>m * n</code> 的矩阵 <code>grid</code>，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。 </p><p>请你统计并返回 <code>grid</code> 中 负数 的数目。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">-1</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-2</span>],[<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>]]</span><br><span class="line">输出：<span class="number">8</span></span><br><span class="line">解释：矩阵中共有 <span class="number">8</span> 个负数。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">3</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">-1</span>],[<span class="number">-1</span>,<span class="number">-1</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = <span class="string">[[-1]]</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li><li><code>`-100 &lt;= grid[i][j] &lt;= 100</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-negative-numbers-in-a-sorted-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-negative-numbers-in-a-sorted-matrix</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力统计</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>送分题，暴力统计即可</li></ol></blockquote><script type="math/tex; mode=display">\frac{1}{2}</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countNegatives</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = grid.size();</span><br><span class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] &lt; <span class="number">0</span>) res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1352-最后-K-个数的乘积"><a href="#1352-最后-K-个数的乘积" class="headerlink" title="1352. 最后 K 个数的乘积"></a>1352. 最后 K 个数的乘积</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>请你实现一个「数字乘积类」ProductOfNumbers，要求支持下述两种方法：</p><ol><li><code>add(int num)</code></li></ol><p>将数字 num 添加到当前数字列表的最后面。</p><ol><li><code>getProduct(int k)</code></li></ol><p>返回当前数字列表中，最后 k 个数字的乘积。<br>你可以假设当前列表中始终 至少 包含 k 个数字。<br>题目数据保证：任何时候，任一连续数字序列的乘积都在 32-bit 整数范围内，不会溢出。</p><p>示例：</p><p>输入：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"ProductOfNumbers"</span>,<span class="string">"add"</span>,<span class="string">"add"</span>,<span class="string">"add"</span>,<span class="string">"add"</span>,<span class="string">"add"</span>,<span class="string">"getProduct"</span>,<span class="string">"getProduct"</span>,<span class="string">"getProduct"</span>,<span class="string">"add"</span>,<span class="string">"getProduct"</span>]</span><br><span class="line">[[],[<span class="number">3</span>],[<span class="number">0</span>],[<span class="number">2</span>],[<span class="number">5</span>],[<span class="number">4</span>],[<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>],[<span class="number">8</span>],[<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="literal">null</span>,<span class="number">32</span>]</span><br></pre></td></tr></table></figure><br>解释：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ProductOfNumbers productOfNumbers = new ProductOfNumbers();</span><br><span class="line">productOfNumbers.add(<span class="number">3</span>);        <span class="comment">// [3]</span></span><br><span class="line">productOfNumbers.add(<span class="number">0</span>);        <span class="comment">// [3,0]</span></span><br><span class="line">productOfNumbers.add(<span class="number">2</span>);        <span class="comment">// [3,0,2]</span></span><br><span class="line">productOfNumbers.add(<span class="number">5</span>);        <span class="comment">// [3,0,2,5]</span></span><br><span class="line">productOfNumbers.add(<span class="number">4</span>);        <span class="comment">// [3,0,2,5,4]</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">2</span>); <span class="comment">// 返回 20 。最后 2 个数字的乘积是 5 * 4 = 20</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">3</span>); <span class="comment">// 返回 40 。最后 3 个数字的乘积是 2 * 5 * 4 = 40</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">4</span>); <span class="comment">// 返回  0 。最后 4 个数字的乘积是 0 * 2 * 5 * 4 = 0</span></span><br><span class="line">productOfNumbers.add(<span class="number">8</span>);        <span class="comment">// [3,0,2,5,4,8]</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">2</span>); <span class="comment">// 返回 32 。最后 2 个数字的乘积是 4 * 8 = 32</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>add 和 getProduct</code>两种操作加起来总共不会超过 40000 次。</li><li><code>0 &lt;= num &lt;= 100</code></li><li><code>1 &lt;= k &lt;= 40000</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/product-of-the-last-k-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/product-of-the-last-k-numbers</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 利用滑动窗口</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>保存前<code>n</code>项的乘积，<code>s[k] = prev[n]/prev[n-k]</code>;</li><li>此题的关键在于处理前<code>n</code>项存在<code>0</code>的问题，。实际做题的时候没有处理好这个问题。</li><li>因为有0的问题，一旦乘数中还有<code>0</code>则表示该乘积结果为<code>0</code>;</li><li>我们保存前<code>n</code>项的乘积，一旦遇到乘数<code>0</code>则将保存的缓存的乘积数组清零，因为此时所有的查询结果都为<code>0</code>;</li><li>查询长度大于缓存长度则表示遇到了乘数<code>0</code>,直接返回<code>0</code>即可，否则我们利用滑动窗口除法即可得到结果。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductOfNumbers</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ProductOfNumbers() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">            prev.clear();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(prev.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            prev.push_back(num);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            prev.push_back(prev.back()*num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getProduct</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &gt; prev.size()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(k == prev.size()) <span class="keyword">return</span> prev.back();</span><br><span class="line">        <span class="keyword">return</span> prev.back()/prev[prev.size()-k<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prev;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your ProductOfNumbers object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * ProductOfNumbers* obj = new ProductOfNumbers();</span></span><br><span class="line"><span class="comment"> * obj-&gt;add(num);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;getProduct(k);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1353-最多可以参加的会议数目"><a href="#1353-最多可以参加的会议数目" class="headerlink" title="1353. 最多可以参加的会议数目"></a>1353. 最多可以参加的会议数目</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 <code>events</code>，其中<code>events[i] = [startDayi, endDayi]</code>，表示会议 i 开始于<code>startDayi</code>，结束于 <code>endDayi</code> 。</p><p>你可以在满足 <code>startDayi &lt;= d &lt;= endDayi</code> 中的任意一天 d 参加会议 i 。注意，一天只能参加一个会议。</p><p>请你返回你可以参加的 最大 会议数目。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：events = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：你可以参加所有的三个会议。</span><br><span class="line">安排会议的一种方案如上图。</span><br><span class="line">第 <span class="number">1</span> 天参加第一个会议。</span><br><span class="line">第 <span class="number">2</span> 天参加第二个会议。</span><br><span class="line">第 <span class="number">3</span> 天参加第三个会议。</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：events= [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：events = [[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：events = <span class="string">[[1,100000]]</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：events = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= events.length &lt;= 10^5</code></li><li><code>events[i].length == 2</code></li><li><code>1 &lt;= events[i][0] &lt;= events[i][1] &lt;= 10^5</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>我们按照会议的开始时间先后进行排序，如果开始时间相同，则按照结束时间的先后进行排序。</li><li>我们用<code>last</code>表示最近一次参加会议的时间。</li><li>我们从优先级队列种取出一个会议<code>event :[start,end]</code>。有以下三种情况，如果当前 <code>event</code>的结束时间小于等于<code>last</code>,则表示该会议肯定无法参加，否则该会议则有机会参会，我们将所有不能参加的会议全部从队列种剔除掉。</li><li>从队列中取出<code>start &gt; last</code>的会议，我们分情况进行讨论，如果<code>start &gt; last</code>则按照贪心的优先参加该会议，参加会议后，此时<code>last</code>变为当前<code>start</code>,即<code>last = end</code>;</li><li>从队列中取出<code>start &lt;= last</code>的会议，我们认为该会议肯定只能从<code>[last + 1,end]</code>时间内才可以参加,我们直接将该会议更改为<code>[last+1,end]</code>,并将其再次加入到队列中，等待下一次可能参加的机会;</li><li>重复3、4、5步骤，直到队列为空即可。</li><li>该种解法优点是比较容易理解，缺点是时间复杂度很高，在某些特定的数据下会超时。</li><li>还有一种更好的解法按照会议结束时间排序。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxEvents</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; events)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = events.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;,cmp&gt; pq;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; e : events)&#123;</span><br><span class="line">            pq.push(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr = pq.top();</span><br><span class="line">            <span class="keyword">if</span>(curr[<span class="number">1</span>] &lt;= last)&#123;</span><br><span class="line">                pq.pop();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(curr[<span class="number">0</span>] &gt; last)&#123;</span><br><span class="line">                last = curr[<span class="number">0</span>];</span><br><span class="line">                res++;</span><br><span class="line">                pq.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(curr[<span class="number">0</span>] &lt;= last)&#123;</span><br><span class="line">                curr[<span class="number">0</span>] = last+<span class="number">1</span>;</span><br><span class="line">                pq.pop();</span><br><span class="line">                pq.push(curr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxEvents</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; events)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = events.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*按照结束时间先后进行排序*/</span></span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; pq; </span><br><span class="line">        sort(events.begin(),events.end(),cmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n || !pq.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!pq.empty() &amp;&amp; pq.top() &lt; last)&#123;</span><br><span class="line">                pq.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; n &amp;&amp; events[i][<span class="number">0</span>] == last)&#123;</span><br><span class="line">                pq.push(events[i][<span class="number">1</span>]);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!pq.empty())&#123;</span><br><span class="line">                res++;</span><br><span class="line">                pq.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            last++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1354-多次求和构造目标数组"><a href="#1354-多次求和构造目标数组" class="headerlink" title="1354. 多次求和构造目标数组"></a>1354. 多次求和构造目标数组</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>target</code> 。一开始，你有一个数组 A ，它的所有元素均为 1 ，你可以执行以下操作：</p><p>令 x 为你数组里所有元素的和<br>选择满足 <code>0 &lt;= i &lt; target.size</code>的任意下标 i ，并让 A 数组里下标为 i 处的值为 x 。<br>你可以重复该过程任意次<br>如果能从 A 开始构造出目标数组<code>target</code>，请你返回<code>True</code>，否则返回 <code>False</code>。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：从 [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>] 开始</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], 和为 <span class="number">3</span> ，选择下标 <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>], 和为 <span class="number">5</span>， 选择下标 <span class="number">2</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], 和为 <span class="number">9</span>， 选择下标 <span class="number">0</span></span><br><span class="line">[<span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>] 完成</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：不可能从 [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>] 出发构造目标数组。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>N == target.length</code></li><li><code>1 &lt;= target.length &lt;= 5 * 10^4</code></li><li><code>1 &lt;= target[i] &lt;= 10^9</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/construct-target-array-with-multiple-sums" target="_blank" rel="noopener">https://leetcode-cn.com/problems/construct-target-array-with-multiple-sums</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 递归逆序</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>逆推很容易想到，但是如何降低时间复杂度和剪枝不太容易想到。</li><li>如何快速的剪枝使得第一大的数比第二大的数要小，这个需要一点技巧，如果第一大的数比第二大的数大，那么此时最大的数每次会固定减去一个值，即<code>sum-max</code>即除最大数以外的所有数字的和。</li><li>最大数每次减去多少，那么该数组的和也会每次固定减去多少。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPossible</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; t : target)&#123;</span><br><span class="line">            sum += t;</span><br><span class="line">            pq.push(t);</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!(pq.top() == <span class="number">1</span> &amp;&amp; sum == target.size()))&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = pq.top();</span><br><span class="line">            <span class="keyword">if</span>(curr &lt; <span class="number">0</span> || sum &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(curr &lt;= sum - curr) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(sum &lt;= target.size()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            pq.pop();</span><br><span class="line">            <span class="keyword">int</span> x = (curr-pq.top()<span class="number">-1</span>)/(sum-curr)+<span class="number">1</span>;</span><br><span class="line">            pq.push(curr-(sum-curr)*x);</span><br><span class="line">            sum -= (sum-curr)*x;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;176场双周比赛&quot;&gt;&lt;a href=&quot;#176场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;176场双周比赛&quot;&gt;&lt;/a&gt;176场双周比赛&lt;/h1&gt;&lt;p&gt;176周的题目比较难&lt;/p&gt;&lt;h2 id=&quot;1351-统计有序矩阵中的负数&quot;&gt;&lt;a href=&quot;#1351-统计有序矩阵中的负数&quot; class=&quot;headerlink&quot; title=&quot;1351. 统计有序矩阵中的负数&quot;&gt;&lt;/a&gt;1351. 统计有序矩阵中的负数&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个 &lt;code&gt;m * n&lt;/code&gt; 的矩阵 &lt;code&gt;grid&lt;/code&gt;，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。 &lt;/p&gt;&lt;p&gt;请你统计并返回 &lt;code&gt;grid&lt;/code&gt; 中 负数 的数目。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：grid = [[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-3&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：矩阵中共有 &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; 个负数。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：grid = [[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：grid = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 4：&lt;br&gt;&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：grid = &lt;span class=&quot;string&quot;&gt;[[-1]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 175 场周赛</title>
    <link href="http://yoursite.com/2020/02/09/131/"/>
    <id>http://yoursite.com/2020/02/09/131/</id>
    <published>2020-02-09T15:42:21.679Z</published>
    <updated>2020-02-12T02:01:29.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="175场双周比赛"><a href="#175场双周比赛" class="headerlink" title="175场双周比赛"></a>175场双周比赛</h1><p>最后一题，题目比较难，没做出来。</p><h2 id="5332-检查整数及其两倍数是否存在"><a href="#5332-检查整数及其两倍数是否存在" class="headerlink" title="5332. 检查整数及其两倍数是否存在"></a>5332. 检查整数及其两倍数是否存在</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code>，请你检查是否存在两个整数 N 和 M，满足 <code>N</code>是<code>M</code>的两倍（即，<code>N = 2 * M</code>）。</p><p>更正式地，检查是否存在两个下标<code>i</code> 和<code>j</code> 满足：</p><ul><li><code>i != j</code></li><li><code>0 &lt;= i, j &lt; arr.length</code></li><li><code>arr[i] == 2 * arr[j]</code></li></ul><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">10</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：N = <span class="number">10</span> 是 M = <span class="number">5</span> 的两倍，即 <span class="number">10</span> = <span class="number">2</span> * <span class="number">5</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">11</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：N = <span class="number">14</span> 是 M = <span class="number">7</span> 的两倍，即 <span class="number">14</span> = <span class="number">2</span> * <span class="number">7</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">11</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：在该情况下不存在 N 和 M 满足 N = <span class="number">2</span> * M 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>2 &lt;= arr.length &lt;= 500</code></li><li><code>-10^3 &lt;= arr[i] &lt;= 10^3</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/check-if-n-and-its-double-exist" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-if-n-and-its-double-exist</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力统计即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>暴力统计即可，注意元素<code>0</code>的两倍还是自身。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkIfExist</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">            cnt[arr[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == <span class="number">0</span> &amp;&amp; cnt[<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(cnt.count(arr[i]*<span class="number">2</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5333-制造字母异位词的最小步骤数"><a href="#5333-制造字母异位词的最小步骤数" class="headerlink" title="5333. 制造字母异位词的最小步骤数"></a>5333. 制造字母异位词的最小步骤数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你两个长度相等的字符串 s 和 t。每一个步骤中，你可以选择将 t 中的 任一字符 替换为 另一个字符。</p><p>返回使 t 成为 s 的字母异位词的最小步骤数。</p><p>字母异位词 指字母相同，但排列不同的字符串。</p><p>示例 1：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出：s = <span class="string">"bab"</span>, <span class="built_in">t</span> = <span class="string">"aba"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">提示：用 'b' 替换 <span class="built_in">t</span> 中的第一个 'a'，<span class="built_in">t</span> = <span class="string">"bba"</span> 是 s 的一个字母异位词。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出：s = <span class="string">"leetcode"</span>, t = <span class="string">"practice"</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">提示：用合适的字符替换 t 中的 'p', 'r', 'a', 'i' 和 'c'，使 t 变成 s 的字母异位词。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="attr">s</span> = <span class="string">"anagram"</span>, <span class="attr">t</span> = <span class="string">"mangaar"</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">提示：<span class="string">"anagram"</span> 和 <span class="string">"mangaar"</span> 本身就是一组字母异位词。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="attr">s</span> = <span class="string">"xxyyzz"</span>, <span class="attr">t</span> = <span class="string">"xxyyzz"</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="attr">s</span> = <span class="string">"friend"</span>, <span class="attr">t</span> = <span class="string">"family"</span></span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 50000</code></li><li><code>s.length == t.length</code></li><li><code>s 和 t 只包含小写英文字母</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-number-of-steps-to-make-two-strings-anagram" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-number-of-steps-to-make-two-strings-anagram</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 统计差异的字母数目即可。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>直接统计字符串中字母频次的差异即可，即字符串<code>t</code>中存在多少个字母与字符串<code>s</code>不同；</li><li>题目中文翻译有问题，有个问题没有讲清楚。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSteps</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            cnt[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">            cnt[t[i]-<span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i] &gt; <span class="number">0</span>) res += <span class="built_in">abs</span>(cnt[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1348-推文计数"><a href="#1348-推文计数" class="headerlink" title="1348. 推文计数"></a>1348. 推文计数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>请你实现一个能够支持以下两种方法的推文计数类 <code>TweetCounts</code>：</p><ol><li><code>recordTweet(string tweetName, int time)</code></li></ol><ul><li>记录推文发布情况：用户 <code>tweetName</code>在 time（以 秒 为单位）时刻发布了一条推文。</li></ul><ol><li><code>getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime)</code></li></ol><ul><li>返回从开始时间<code>startTime</code>（以 秒 为单位）到结束时间 endTime（以 秒 为单位）内，每 分 minute，时 hour 或者 日 day （取决于 freq）内指定用户 tweetName 发布的推文总数。</li><li>freq 的值始终为 分 minute，时 hour 或者 日 day 之一，表示获取指定用户 tweetName 发布推文次数的时间间隔。</li><li>第一个时间间隔始终从 startTime 开始，因此时间间隔为<code>[startTime, startTime + delta*1&gt;,  [startTime + delta*1, startTime + delta*2&gt;, [startTime + delta*2, startTime + delta*3&gt;, ... , [startTime + delta*i, min(startTime + delta*(i+1), endTime + 1)&gt;，</code>其中 i 和 delta（取决于 freq）都是非负整数。</li></ul><p>示例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">"TweetCounts"</span>,<span class="string">"recordTweet"</span>,<span class="string">"recordTweet"</span>,<span class="string">"recordTweet"</span>,<span class="string">"getTweetCountsPerFrequency"</span>,<span class="string">"getTweetCountsPerFrequency"</span>,<span class="string">"recordTweet"</span>,<span class="string">"getTweetCountsPerFrequency"</span>]</span><br><span class="line">[[],[<span class="string">"tweet3"</span>,<span class="number">0</span>],[<span class="string">"tweet3"</span>,<span class="number">60</span>],[<span class="string">"tweet3"</span>,<span class="number">10</span>],[<span class="string">"minute"</span>,<span class="string">"tweet3"</span>,<span class="number">0</span>,<span class="number">59</span>],[<span class="string">"minute"</span>,<span class="string">"tweet3"</span>,<span class="number">0</span>,<span class="number">60</span>],[<span class="string">"tweet3"</span>,<span class="number">120</span>],[<span class="string">"hour"</span>,<span class="string">"tweet3"</span>,<span class="number">0</span>,<span class="number">210</span>]]</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[null,null,null,null,[<span class="number">2</span>],[<span class="number">2</span>,<span class="number">1</span>],null,[<span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">TweetCounts tweetCounts = new TweetCounts();</span><br><span class="line">tweetCounts.recordTweet(<span class="string">"tweet3"</span>, <span class="number">0</span>);</span><br><span class="line">tweetCounts.recordTweet(<span class="string">"tweet3"</span>, <span class="number">60</span>);</span><br><span class="line">tweetCounts.recordTweet(<span class="string">"tweet3"</span>, <span class="number">10</span>);                             <span class="comment">// "tweet3" 发布推文的时间分别是 0, 10 和 60 。</span></span><br><span class="line">tweetCounts.getTweetCountsPerFrequency(<span class="string">"minute"</span>, <span class="string">"tweet3"</span>, <span class="number">0</span>, <span class="number">59</span>); <span class="comment">// 返回 [2]。统计频率是每分钟（60 秒），因此只有一个有效时间间隔 [0,60&gt; - &gt; 2 条推文。</span></span><br><span class="line">tweetCounts.getTweetCountsPerFrequency(<span class="string">"minute"</span>, <span class="string">"tweet3"</span>, <span class="number">0</span>, <span class="number">60</span>); <span class="comment">// 返回 [2,1]。统计频率是每分钟（60 秒），因此有两个有效时间间隔 1) [0,60&gt; - &gt; 2 条推文，和 2) [60,61&gt; - &gt; 1 条推文。 </span></span><br><span class="line">tweetCounts.recordTweet(<span class="string">"tweet3"</span>, <span class="number">120</span>);                            <span class="comment">// "tweet3" 发布推文的时间分别是 0, 10, 60 和 120 。</span></span><br><span class="line">tweetCounts.getTweetCountsPerFrequency(<span class="string">"hour"</span>, <span class="string">"tweet3"</span>, <span class="number">0</span>, <span class="number">210</span>);  <span class="comment">// 返回 [4]。统计频率是每小时（3600 秒），因此只有一个有效时间间隔 [0,211&gt; - &gt; 4 条推文。</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>同时考虑<code>recordTweet</code> 和 <code>getTweetCountsPerFrequency</code>，最多有 10000 次操作。</li><li><code>0 &lt;= time, startTime, endTime &lt;= 10^9</code></li><li><code>0 &lt;= endTime - startTime &lt;= 10^4</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/tweet-counts-per-frequency" target="_blank" rel="noopener">https://leetcode-cn.com/problems/tweet-counts-per-frequency</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 题目讲的太麻烦了</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>统计所有用户的发推文的时间序列即可。由于题目中涉及到时间统计，肯定会用到二分查找，我们用<code>set</code>来保存时间序列，会按照时间的大小进行自动排序。</li><li>按照频率依次统计每个间隔里面发的推文的数目即可。基本的二分查找即可实现，没有太多难度。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TweetCounts</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TweetCounts() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordTweet</span><span class="params">(<span class="built_in">string</span> tweetName, <span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cnt[tweetName].insert(time);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getFreq</span><span class="params">(<span class="built_in">string</span> freq)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(freq == <span class="string">"minute"</span>) <span class="keyword">return</span> <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(freq == <span class="string">"hour"</span>) <span class="keyword">return</span> <span class="number">3600</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">86400</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getTweetCountsPerFrequency(<span class="built_in">string</span> freq, <span class="built_in">string</span> tweetName, <span class="keyword">int</span> startTime, <span class="keyword">int</span> endTime) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> f = getFreq(freq);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = startTime; i &lt;= endTime; i = i + f)&#123;</span><br><span class="line">            <span class="keyword">auto</span> l = cnt[tweetName].lower_bound(i);</span><br><span class="line">            <span class="keyword">auto</span> r = cnt[tweetName].lower_bound(min(i+f,endTime+<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(l != r)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; cnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your TweetCounts object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * TweetCounts* obj = new TweetCounts();</span></span><br><span class="line"><span class="comment"> * obj-&gt;recordTweet(tweetName,time);</span></span><br><span class="line"><span class="comment"> * vector&lt;int&gt; param_2 = obj-&gt;getTweetCountsPerFrequency(freq,tweetName,startTime,endTime);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5335-参加考试的最大学生数"><a href="#5335-参加考试的最大学生数" class="headerlink" title="5335. 参加考试的最大学生数"></a>5335. 参加考试的最大学生数</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个 m * n 的矩阵 <code>seats</code> 表示教室中的座位分布。如果座位是坏的（不可用），就用 ‘#’ 表示；否则，用 ‘.’ 表示。</p><p>学生可以看到左侧、右侧、左上、右上这四个方向上紧邻他的学生的答卷，但是看不到直接坐在他前面或者后面的学生的答卷。请你计算并返回该考场可以容纳的一起参加考试且无法作弊的最大学生人数。</p><p>学生必须坐在状况良好的座位上。</p><p>示例 1：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：seats = [[<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">              [<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"."</span>],</span><br><span class="line">              [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：教师可以让 <span class="number">4</span> 个学生坐在可用的座位上，这样他们就无法在考试中作弊。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：seats = [[<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">              [<span class="string">"#"</span>,<span class="string">"#"</span>],</span><br><span class="line">              [<span class="string">"#"</span>,<span class="string">"."</span>],</span><br><span class="line">              [<span class="string">"#"</span>,<span class="string">"#"</span>],</span><br><span class="line">              [<span class="string">"."</span>,<span class="string">"#"</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：让所有学生坐在可用的座位上。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：seats = [[<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">              [<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"."</span>],</span><br><span class="line">              [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">              [<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"."</span>],</span><br><span class="line">              [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"#"</span>]]</span><br><span class="line">输出：<span class="number">10</span></span><br><span class="line">解释：让学生坐在第 <span class="number">1</span>、<span class="number">3</span> 和 <span class="number">5</span> 列的可用座位上。</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>seats</code> 只包含字符 ‘.’ 和’#’</li><li><code>m == seats.length</code></li><li><code>n == seats[i].length</code></li><li><code>1 &lt;= m &lt;= 8</code></li><li><code>1 &lt;= n &lt;= 8</code><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><a href="https://leetcode-cn.com/problems/maximum-students-taking-exam/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-students-taking-exam/</a><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 题目非常有新意，状态压缩dp</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3></blockquote></li></ul><ol><li>题目还是非常有新意的，状态压缩dp。</li><li>仔细分析一下，实际上每一行仅仅与上一行有关系，即本行的座位分布仅仅会影响到下一行的座位分布，我们用位图来代替每一行的座位。</li><li>状态检查，仔细检查每一行的座位分布，有两种情况下该座位不能被分配，一是本身该座位就是坏的，二是本身该座位相邻座位存在学生分配。如果有这两种情况，则该行的状态为非法的。</li><li>仔细还需要检查本行<code>i</code>的状态<code>mask(i)</code>与前一行状态<code>mask(2)</code>的分配问题。即左上方与右上方不能同时存在学生。则需要仔细检查。</li><li>递推公式为：<code>dp[i][mask1] = dp[i-1][mask2] + count[i][mask1]</code>,其中<code>count[i][mask1]</code>代表第<code>i</code>行在座位分布<code>mask1</code>下的学生总数目。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">bitTst</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((mask&amp;(<span class="number">1</span>&lt;&lt;n))&gt;&gt;n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">check1</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bitTst(mask,i<span class="number">-1</span>)&amp;&amp;bitTst(mask,i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">check2</span><span class="params">(<span class="keyword">int</span> mask1,<span class="keyword">int</span> mask2,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; bitTst(mask1,i) &amp;&amp; bitTst(mask2,i<span class="number">-1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; bitTst(mask1,i) &amp;&amp; bitTst(mask2,i+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxStudents</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; seats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = seats.size();</span><br><span class="line">        <span class="keyword">int</span> col = seats[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(row+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>&lt;&lt;col,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial row*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span>&lt;&lt;col); ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!check1(j,col))&#123;</span><br><span class="line">                    dp[i][j] = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; col; ++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(bitTst(j,k)&amp;&amp;seats[i<span class="number">-1</span>][k] == <span class="string">'#'</span>)&#123;</span><br><span class="line">                       count = <span class="number">-1</span>;</span><br><span class="line">                       <span class="keyword">continue</span>; </span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">if</span>(bitTst(j,k)) count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(count == <span class="number">-1</span>)&#123;</span><br><span class="line">                    dp[i][j] = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; (<span class="number">1</span>&lt;&lt;col); ++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[i<span class="number">-1</span>][k] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(check2(j,k,col))&#123;</span><br><span class="line">                        dp[i][j] = max(dp[i][j],dp[i<span class="number">-1</span>][k] + count);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res = max(res,dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;175场双周比赛&quot;&gt;&lt;a href=&quot;#175场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;175场双周比赛&quot;&gt;&lt;/a&gt;175场双周比赛&lt;/h1&gt;&lt;p&gt;最后一题，题目比较难，没做出来。&lt;/p&gt;&lt;h2 id=&quot;5332-检查整数及其两倍数是否存在&quot;&gt;&lt;a href=&quot;#5332-检查整数及其两倍数是否存在&quot; class=&quot;headerlink&quot; title=&quot;5332. 检查整数及其两倍数是否存在&quot;&gt;&lt;/a&gt;5332. 检查整数及其两倍数是否存在&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/code&gt;，请你检查是否存在两个整数 N 和 M，满足 &lt;code&gt;N&lt;/code&gt;是&lt;code&gt;M&lt;/code&gt;的两倍（即，&lt;code&gt;N = 2 * M&lt;/code&gt;）。&lt;/p&gt;&lt;p&gt;更正式地，检查是否存在两个下标&lt;code&gt;i&lt;/code&gt; 和&lt;code&gt;j&lt;/code&gt; 满足：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i != j&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= i, j &amp;lt; arr.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr[i] == 2 * arr[j]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 19 场双周赛</title>
    <link href="http://yoursite.com/2020/02/09/130/"/>
    <id>http://yoursite.com/2020/02/09/130/</id>
    <published>2020-02-09T09:42:31.040Z</published>
    <updated>2020-02-09T09:42:38.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19场双周比赛"><a href="#19场双周比赛" class="headerlink" title="19场双周比赛"></a>19场双周比赛</h1><p>双周赛一般情况下，题目比较简单。</p><h2 id="5311-将数字变成-0-的操作次数"><a href="#5311-将数字变成-0-的操作次数" class="headerlink" title="5311. 将数字变成 0 的操作次数"></a>5311. 将数字变成 0 的操作次数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个非负整数<code>num</code>，请你返回将它变成 0 所需要的步数。 如果当前数字是偶数，你需要把它除以 2 ；否则，减去 1 。<br>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">14</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：</span><br><span class="line">步骤 <span class="number">1</span>) <span class="number">14</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">7</span> 。</span><br><span class="line">步骤 <span class="number">2</span>） <span class="number">7</span> 是奇数，减 <span class="number">1</span> 得到 <span class="number">6</span> 。</span><br><span class="line">步骤 <span class="number">3</span>） <span class="number">6</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">3</span> 。</span><br><span class="line">步骤 <span class="number">4</span>） <span class="number">3</span> 是奇数，减 <span class="number">1</span> 得到 <span class="number">2</span> 。</span><br><span class="line">步骤 <span class="number">5</span>） <span class="number">2</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">1</span> 。</span><br><span class="line">步骤 <span class="number">6</span>） <span class="number">1</span> 是奇数，减 <span class="number">1</span> 得到 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">8</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：</span><br><span class="line">步骤 <span class="number">1</span>） <span class="number">8</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">4</span> 。</span><br><span class="line">步骤 <span class="number">2</span>） <span class="number">4</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">2</span> 。</span><br><span class="line">步骤 <span class="number">3</span>） <span class="number">2</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">1</span> 。</span><br><span class="line">步骤 <span class="number">4</span>） <span class="number">1</span> 是奇数，减 <span class="number">1</span> 得到 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">123</span></span><br><span class="line">输出：<span class="number">12</span></span><br></pre></td></tr></table></figure><br>提示：</p><a id="more"></a><ul><li><code>0 &lt;= num &lt;= 10^6</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接计算</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>递归或者非递归均可。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfSteps</span> <span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(num%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> numberOfSteps(num/<span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> numberOfSteps(num<span class="number">-1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5312-大小为-K-且平均值大于等于阈值的子数组数目"><a href="#5312-大小为-K-且平均值大于等于阈值的子数组数目" class="headerlink" title="5312. 大小为 K 且平均值大于等于阈值的子数组数目"></a>5312. 大小为 K 且平均值大于等于阈值的子数组数目</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code>和两个整数<code>k</code>和 <code>threshold</code> 。</p><p>请你返回长度为<code>k</code>且平均值大于等于<code>threshold</code>的子数组数目。<br>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">8</span>], k = <span class="number">3</span>, threshold = <span class="number">4</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：子数组 [<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>] 和 [<span class="number">5</span>,<span class="number">5</span>,<span class="number">8</span>] 的平均值分别为 <span class="number">4</span>，<span class="number">5</span> 和 <span class="number">6</span> 。其他长度为 <span class="number">3</span> 的子数组的平均值都小于 <span class="number">4</span> （threshold 的值)。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], k = <span class="number">1</span>, threshold = <span class="number">0</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>], k = <span class="number">3</span>, threshold = <span class="number">5</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：前 <span class="number">6</span> 个长度为 <span class="number">3</span> 的子数组平均值都大于 <span class="number">5</span> 。注意平均值不是整数。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>], k = <span class="number">7</span>, threshold = <span class="number">7</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>], k = <span class="number">4</span>, threshold = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 10^5</code></li><li><code>1 &lt;= arr[i] &lt;= 10^4</code></li><li><code>1 &lt;= k &lt;= arr.length</code></li><li><code>0 &lt;= threshold &lt;= 10^4</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>长度为<code>k</code>的滑动窗口统计子数组的总和，如果子数组的和大于<code>k*threshold</code>,则该子数组满足条件。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfSubarrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> k, <span class="keyword">int</span> threshold)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            left += arr[i];</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= k<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(left &gt;= threshold*k) res++;</span><br><span class="line">                left -= arr[i-k+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5313-时钟指针的夹角"><a href="#5313-时钟指针的夹角" class="headerlink" title="5313. 时钟指针的夹角"></a>5313. 时钟指针的夹角</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你两个数 <code>hour</code> 和<code>minutes</code>。请你返回在时钟上，由给定时间的时针和分针组成的较小角的角度（60 单位制）。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：hour = <span class="number">12</span>, minutes = <span class="number">30</span></span><br><span class="line">输出：<span class="number">165</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：hour = <span class="number">3</span>, minutes = <span class="number">30</span></span><br><span class="line">输出；<span class="number">75</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：hour = <span class="number">3</span>, minutes = <span class="number">15</span></span><br><span class="line">输出：<span class="number">7.5</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：hour = <span class="number">4</span>, minutes = <span class="number">50</span></span><br><span class="line">输出：<span class="number">155</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：hour = <span class="number">12</span>, minutes = <span class="number">0</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= hour &lt;= 12</code></li><li><code>0 &lt;= minutes &lt;= 59</code></li><li>与标准答案误差在 <code>10^-5</code> 以内的结果都被视为正确结果。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/angle-between-hands-of-a-clock" target="_blank" rel="noopener">https://leetcode-cn.com/problems/angle-between-hands-of-a-clock</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 求两个角度的夹角</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>先求出时针的夹角<code>00:00</code>的。时钟的夹角为：<script type="math/tex; mode=display">\angle A = \frac{h+m/60}{12}*2\pi \\\angle A = 30h + \frac{m}{2}</script></li><li>求出分针的与<code>00:00</code>的夹角。<script type="math/tex; mode=display">\angle B = \frac{m}{60}*2\pi \\\angle B = 60m</script></li><li>将两个角度取差的绝对值，即为分针与时针的夹角。因为题目中求出较小的夹角，即求出小于180度的夹角，我们取<code>abs(A-B), 360-abs(A-B)</code>中较小的夹角即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">angleClock</span><span class="params">(<span class="keyword">int</span> hour, <span class="keyword">int</span> minutes)</span> </span>&#123;</span><br><span class="line">        hour = hour%<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">double</span> h = hour*<span class="number">30</span> + <span class="keyword">double</span>(minutes)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">double</span> m = minutes*<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> min(<span class="number">360</span> - <span class="built_in">abs</span>(h-m),<span class="built_in">abs</span>(h-m)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5314-跳跃游戏-IV"><a href="#5314-跳跃游戏-IV" class="headerlink" title="5314. 跳跃游戏 IV"></a>5314. 跳跃游戏 IV</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组<code>arr</code> ，你一开始在数组的第一个元素处（下标为 0）。</p><p>每一步，你可以从下标 i 跳到下标：</p><ul><li><code>i + 1</code> 满足：<code>i + 1 &lt; arr.length</code></li><li><code>i - 1</code>满足：<code>i - 1 &gt;= 0</code></li><li><code>j</code>满足：<code>arr[i] == arr[j]</code> 且 <code>i != j</code></li></ul><p>请你返回到达数组最后一个元素的下标处所需的 <code>最少操作次数</code> 。<br>注意：任何时候你都不能跳到数组外面。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">100</span>,<span class="number">-23</span>,<span class="number">-23</span>,<span class="number">404</span>,<span class="number">100</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">404</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：那你需要跳跃 <span class="number">3</span> 次，下标依次为 <span class="number">0</span> --&gt; <span class="number">4</span> --&gt; <span class="number">3</span> --&gt; <span class="number">9</span> 。下标 <span class="number">9</span> 为数组的最后一个元素的下标。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：一开始就在最后一个元素处，所以你不需要跳跃。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：你可以直接从下标 <span class="number">0</span> 处跳到下标 <span class="number">7</span> 处，也就是数组的最后一个元素处。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">22</span>,<span class="number">13</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 5 * 10^4</code></li><li><code>-10^8 &lt;= arr[i] &lt;= 10^8</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/jump-game-iv" target="_blank" rel="noopener">https://leetcode-cn.com/problems/jump-game-iv</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>看到类似的跳跃题目，基本上就是固定的几种解法，<code>dfs</code>,<code>bfs</code>,<code>dp</code>.</li><li>具体的题目具体分析，首先看一下<code>dp</code>,能够使用<code>dp</code>的最重要的两个特征，当前状态与后续无关，当前状态能够通过前序状态进行推出，本题中虽然可以看到当前状态能够满足前序状态推出，但是后续状态的时间复杂度会非常高，所以排除<code>dp</code>这种解法。</li><li>本题的数据数量为<code>5 * 10^4</code>的数量级，用DFS如果不进行剪枝，则容易造成超时。且一般情况下<code>DFS</code>与<code>BFS</code>时可以相互转换的。本题还是采用<code>BFS</code>求最小距离的方法，每次当前元素<code>curr</code>扩展下一跳，下一条有三种选择<code>(curr-1,curr+1,same as curr)</code>,直到首先到达终点为止。</li><li>本题的<code>corner</code>在于每次选择相同元素作为下一条时，要将相同元素去掉，否则所有的相同元素都会被遍历<code>m</code>次方。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minJumps</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cnt;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit(n,<span class="literal">false</span>);  </span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            cnt[arr[i]].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        visit[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        qu.push(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> sz = qu.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> curr = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                <span class="keyword">if</span>(curr == n<span class="number">-1</span>) <span class="keyword">return</span> step;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> next : cnt[arr[curr]])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!visit[next])&#123;</span><br><span class="line">                        qu.push(next);</span><br><span class="line">                        visit[next] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cnt.erase(arr[curr]);</span><br><span class="line">                <span class="keyword">if</span>(curr + <span class="number">1</span> &lt; n &amp;&amp; !visit[curr+<span class="number">1</span>])&#123;</span><br><span class="line">                    qu.push(curr+<span class="number">1</span>);</span><br><span class="line">                    visit[curr+<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(curr - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; !visit[curr<span class="number">-1</span>])&#123;</span><br><span class="line">                    qu.push(curr<span class="number">-1</span>);</span><br><span class="line">                    visit[curr<span class="number">-1</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;19场双周比赛&quot;&gt;&lt;a href=&quot;#19场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;19场双周比赛&quot;&gt;&lt;/a&gt;19场双周比赛&lt;/h1&gt;&lt;p&gt;双周赛一般情况下，题目比较简单。&lt;/p&gt;&lt;h2 id=&quot;5311-将数字变成-0-的操作次数&quot;&gt;&lt;a href=&quot;#5311-将数字变成-0-的操作次数&quot; class=&quot;headerlink&quot; title=&quot;5311. 将数字变成 0 的操作次数&quot;&gt;&lt;/a&gt;5311. 将数字变成 0 的操作次数&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个非负整数&lt;code&gt;num&lt;/code&gt;，请你返回将它变成 0 所需要的步数。 如果当前数字是偶数，你需要把它除以 2 ；否则，减去 1 。&lt;br&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：num = &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 是奇数，减 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; 是奇数，减 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 是奇数，减 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：num = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 是奇数，减 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：num = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;提示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
