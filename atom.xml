<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blow in the wind</title>
  
  <subtitle>just code for fun</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-09T08:42:20.135Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mike meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Leetcode】 第 21周双周赛</title>
    <link href="http://yoursite.com/2020/03/09/138/"/>
    <id>http://yoursite.com/2020/03/09/138/</id>
    <published>2020-03-09T08:42:10.743Z</published>
    <updated>2020-03-09T08:42:20.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="21周双周比赛"><a href="#21周双周比赛" class="headerlink" title="21周双周比赛"></a>21周双周比赛</h1><p>题目质量非常高，四个题目都有难度。</p><h2 id="1370-上升下降字符串"><a href="#1370-上升下降字符串" class="headerlink" title="1370. 上升下降字符串"></a>1370. 上升下降字符串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 s ，请你根据下面的算法重新构造字符串：<br>从 s 中选出 最小 的字符，将它 接在 结果字符串的后面。<br>从 s 剩余字符中选出 最小 的字符，且该字符比上一个添加的字符大，将它 接在 结果字符串后面。<br>重复步骤 2 ，直到你没法从 s 中选择字符。<br>从 s 中选出 最大 的字符，将它 接在 结果字符串的后面。<br>从 s 剩余字符中选出 最大 的字符，且该字符比上一个添加的字符小，将它 接在 结果字符串后面。<br>重复步骤 5 ，直到你没法从 s 中选择字符。<br>重复步骤 1 到 6 ，直到 s 中所有字符都已经被选过。<br>在任何一步中，如果最小或者最大字符不止一个 ，你可以选择其中任意一个，并将其添加到结果字符串。</p><a id="more"></a><p>请你返回将 s 中字符重新排序后的 结果字符串 。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aaaabbbbcccc"</span></span><br><span class="line">输出：<span class="string">"abccbaabccba"</span></span><br><span class="line">解释：第一轮的步骤 <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span> 后，结果字符串为 result = <span class="string">"abc"</span></span><br><span class="line">第一轮的步骤 <span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span> 后，结果字符串为 result = <span class="string">"abccba"</span></span><br><span class="line">第一轮结束，现在 s = <span class="string">"aabbcc"</span> ，我们再次回到步骤 <span class="number">1</span></span><br><span class="line">第二轮的步骤 <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span> 后，结果字符串为 result = <span class="string">"abccbaabc"</span></span><br><span class="line">第二轮的步骤 <span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span> 后，结果字符串为 result = <span class="string">"abccbaabccba"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"rat"</span></span><br><span class="line">输出：<span class="string">"art"</span></span><br><span class="line">解释：单词 <span class="string">"rat"</span> 在上述算法重排序以后变成 <span class="string">"art"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"leetcode"</span></span><br><span class="line">输出：<span class="string">"cdelotee"</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"ggggggg"</span></span><br><span class="line">输出：<span class="string">"ggggggg"</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"spo"</span></span><br><span class="line">输出：<span class="string">"ops"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 500</code></li><li><code>s 只包含小写英文字母。</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/increasing-decreasing-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/increasing-decreasing-string</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接按照字符的排列顺序访问即可。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>每次按照字符大小的升序和降序各访问一遍，直到所有的字符均被访问过。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">sortString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            cnt[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    res += <span class="string">'a'</span> + i;</span><br><span class="line">                    cnt[i]--;</span><br><span class="line">                    n--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">25</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    res += <span class="string">'a'</span> + i;</span><br><span class="line">                    cnt[i]--;</span><br><span class="line">                    n--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1371-每个元音包含偶数次的最长子字符串"><a href="#1371-每个元音包含偶数次的最长子字符串" class="headerlink" title="1371. 每个元音包含偶数次的最长子字符串"></a>1371. 每个元音包含偶数次的最长子字符串</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 <code>&#39;a&#39;，&#39;e&#39;，&#39;i&#39;，&#39;o&#39;，&#39;u&#39;</code>，在子字符串中都恰好出现了偶数次。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"eleetminicoworoep"</span></span><br><span class="line">输出：<span class="number">13</span></span><br><span class="line">解释：最长子字符串是 <span class="string">"leetminicowor"</span> ，它包含 e，i，o 各 <span class="number">2</span> 个，以及 <span class="number">0</span> 个 a，u 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"leetcodeisgreat"</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：最长子字符串是 <span class="string">"leetc"</span> ，其中包含 <span class="number">2</span> 个 e 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"bcbcbc"</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：这个示例中，字符串 <span class="string">"bcbcbc"</span> 本身就是最长的，因为所有的元音 a，e，i，o，u 都出现了 <span class="number">0</span> 次。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 5 x 10^5</code></li><li>s 只包含小写英文字母。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-the-longest-substring-containing-vowels-in-even-counts" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-longest-substring-containing-vowels-in-even-counts</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>将5个元音字母出现次数的奇偶视为一种状态，一共有32种状态，不妨使用一个整数代表状态，第0位为1表示a出现奇数次，第一位为1表示e出现奇数次……以此类推。仅有状态0符合题意。而如果子串[0，i]与字串[0,j]状态相同，那么字串[i+1,j]的状态一定是0，因此可以记录每个状态第一次出现的位置，此后再出现该状态时相减即可。需要注意状态0首次出现的位置应该设定为-1。</li><li>在计算状态的时候可以利用异或运算。</li><li>这题的解法确实非常巧妙，当时这道题目没有做出来，想不到还有这种解题思路，本次比赛这道题目估计是最难的了。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTheLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre(<span class="number">32</span>,INT_MAX);</span><br><span class="line">        pre[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> N=s.size();</span><br><span class="line">        <span class="keyword">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">            <span class="keyword">switch</span>(s[i])&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:cur^=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:cur^=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'i'</span>:cur^=<span class="number">4</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'o'</span>:cur^=<span class="number">8</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'u'</span>:cur^=<span class="number">16</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pre[cur]==INT_MAX) pre[cur]=i;</span><br><span class="line">            <span class="keyword">else</span> ans=max(ans,i-pre[cur]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1372-二叉树中的最长交错路径"><a href="#1372-二叉树中的最长交错路径" class="headerlink" title="1372. 二叉树中的最长交错路径"></a>1372. 二叉树中的最长交错路径</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一棵以 root 为根的二叉树，二叉树中的交错路径定义如下：</p><ul><li>选择二叉树中 任意 节点和一个方向（左或者右）。</li><li>如果前进方向为右，那么移动到当前节点的的右子节点，否则移动到它的左子节点。</li><li>改变前进方向：左变右或者右变左。</li><li>重复第二步和第三步，直到你在树中无法继续移动。<br>交错路径的长度定义为：访问过的节点数目 - 1（单个节点的路径长度为 0 ）。</li></ul><p>请你返回给定树中最长 交错路径 的长度。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：蓝色节点为树中最长交错路径（右 -&gt; 左 -&gt; 右）。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：蓝色节点为树中最长交错路径（左 -&gt; 右 -&gt; 左 -&gt; 右）。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>每棵树最多有 <code>50000</code>个节点。</li><li>每个节点的值在 <code>[1, 100]</code>之间。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/longest-zigzag-path-in-a-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-zigzag-path-in-a-binary-tree</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS </p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li><code>flag</code>用于标记当前的根节点是左孩子还是右孩子，按照交替访问的规则，如果当前的root节点是左孩子，按照规则应该访问<code>root</code>节点的右孩子，同时长度加1；如果当前的<code>root</code>节点是右孩子，按照规则应该访问root节点的左孩子，同时长度加1</li><li><code>count</code>用于标记，当前节点已经满足交替访问的长度。如果按照规则进行访问，则将长度置为1.</li><li>这个题目是个非常好的题目，收藏一下，以后可以多多进行复习。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TreeNode * root,<span class="keyword">int</span> count,<span class="keyword">int</span> flag,<span class="keyword">int</span> &amp; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        res = max(res,count);</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">            dfs(root-&gt;left,<span class="number">1</span>,<span class="number">0</span>,res);</span><br><span class="line">            dfs(root-&gt;right,count+<span class="number">1</span>,<span class="number">1</span>,res);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            dfs(root-&gt;left,count+<span class="number">1</span>,<span class="number">0</span>,res);</span><br><span class="line">            dfs(root-&gt;right,<span class="number">1</span>,<span class="number">1</span>,res);</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestZigZag</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        dfs(root-&gt;left,<span class="number">1</span>,<span class="number">0</span>,res);</span><br><span class="line">        dfs(root-&gt;right,<span class="number">1</span>,<span class="number">1</span>,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1373-二叉搜索子树的最大键值和"><a href="#1373-二叉搜索子树的最大键值和" class="headerlink" title="1373. 二叉搜索子树的最大键值和"></a>1373. 二叉搜索子树的最大键值和</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一棵以<code>root</code> 为根的 二叉树 ，请你返回 任意 二叉搜索子树的最大键值和。</p><p>二叉搜索树的定义如下：</p><p>任意节点的左子树中的键值都 小于 此节点的键值。<br>任意节点的右子树中的键值都 大于 此节点的键值。<br>任意节点的左子树和右子树都是二叉搜索树。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">输出：<span class="number">20</span></span><br><span class="line">解释：键值为 <span class="number">3</span> 的子树是和最大的二叉搜索树。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">4</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：键值为 <span class="number">2</span> 的单节点子树是和最大的二叉搜索树。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">-4</span>,<span class="number">-2</span>,<span class="number">-5</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：所有节点键值都为负数，和最大的二叉搜索树为空。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>每棵树最多有 <code>40000</code>个节点。</li><li>每个节点的键值在 <code>[-4 * 10^4 , 4 * 10^4]</code>之间。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-sum-bst-in-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-sum-bst-in-binary-tree</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 递归</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>本题的思路还是判断二叉树的子树是否为二叉搜索树，如果是二叉搜索树，则求最大的二叉搜索子树的和。本质上结合了判断二叉搜索和树的和两部分内容。题目还是非常不错，但是作为hard难度的题目还是简单了一点。</li><li>每次遍历根节点的子树，同时返回子树的和以及子树是否为二叉搜索树。</li><li>根据左右子树的返回结果判断以<code>root</code>为根节点的子树是否为二叉搜索树，如果是则返回子树的和。</li><li>稍微复杂点的在于如何判断二叉树为二叉树搜索树，即根节点的值大于左子树的最大值，根节点的值小于右子树的最小值。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TreeNode * root,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; arr,<span class="keyword">int</span> &amp; curr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; right;</span><br><span class="line">        <span class="keyword">int</span> sum = root-&gt;val;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> l = dfs(root-&gt;left,left,curr);</span><br><span class="line">        <span class="keyword">bool</span> r = dfs(root-&gt;right,right,curr);</span><br><span class="line">        <span class="keyword">if</span>(!l||!r) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(left.size() &gt; <span class="number">0</span> &amp;&amp; root-&gt;val &lt;= left[<span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(right.size() &gt; <span class="number">0</span> &amp;&amp; root-&gt;val &gt;= right[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(left.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            arr.push_back(left[<span class="number">0</span>]);</span><br><span class="line">            sum += left[<span class="number">2</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr.push_back(root-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(right.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            arr.push_back(right[<span class="number">1</span>]);</span><br><span class="line">            sum += right[<span class="number">2</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr.push_back(root-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        curr = max(curr,sum);</span><br><span class="line">        arr.push_back(sum);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSumBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        dfs(root,arr,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;21周双周比赛&quot;&gt;&lt;a href=&quot;#21周双周比赛&quot; class=&quot;headerlink&quot; title=&quot;21周双周比赛&quot;&gt;&lt;/a&gt;21周双周比赛&lt;/h1&gt;&lt;p&gt;题目质量非常高，四个题目都有难度。&lt;/p&gt;&lt;h2 id=&quot;1370-上升下降字符串&quot;&gt;&lt;a href=&quot;#1370-上升下降字符串&quot; class=&quot;headerlink&quot; title=&quot;1370. 上升下降字符串&quot;&gt;&lt;/a&gt;1370. 上升下降字符串&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个字符串 s ，请你根据下面的算法重新构造字符串：&lt;br&gt;从 s 中选出 最小 的字符，将它 接在 结果字符串的后面。&lt;br&gt;从 s 剩余字符中选出 最小 的字符，且该字符比上一个添加的字符大，将它 接在 结果字符串后面。&lt;br&gt;重复步骤 2 ，直到你没法从 s 中选择字符。&lt;br&gt;从 s 中选出 最大 的字符，将它 接在 结果字符串的后面。&lt;br&gt;从 s 剩余字符中选出 最大 的字符，且该字符比上一个添加的字符小，将它 接在 结果字符串后面。&lt;br&gt;重复步骤 5 ，直到你没法从 s 中选择字符。&lt;br&gt;重复步骤 1 到 6 ，直到 s 中所有字符都已经被选过。&lt;br&gt;在任何一步中，如果最小或者最大字符不止一个 ，你可以选择其中任意一个，并将其添加到结果字符串。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 179周 比赛</title>
    <link href="http://yoursite.com/2020/03/09/137/"/>
    <id>http://yoursite.com/2020/03/09/137/</id>
    <published>2020-03-09T08:12:04.560Z</published>
    <updated>2020-03-09T08:12:10.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="179周比赛"><a href="#179周比赛" class="headerlink" title="179周比赛"></a>179周比赛</h1><p>这周的题目质量一般，不如双周赛的题目好，题目比较简单。</p><h2 id="1374-生成每种字符都是奇数个的字符串"><a href="#1374-生成每种字符都是奇数个的字符串" class="headerlink" title="1374. 生成每种字符都是奇数个的字符串"></a>1374. 生成每种字符都是奇数个的字符串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 <code>n</code>，请你返回一个含 <code>n</code> 个字符的字符串，其中每种字符在该字符串中都恰好出现 奇数次 。</p><p>返回的字符串必须只含小写英文字母。如果存在多个满足题目要求的字符串，则返回其中任意一个即可。</p><a id="more"></a><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span></span><br><span class="line">输出：<span class="string">"pppz"</span></span><br><span class="line">解释：<span class="string">"pppz"</span> 是一个满足题目要求的字符串，因为 'p' 出现 <span class="number">3</span> 次，且 'z' 出现 <span class="number">1</span> 次。当然，还有很多其他字符串也满足题目要求，比如：<span class="string">"ohhh"</span> 和 <span class="string">"love"</span>。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="string">"xy"</span></span><br><span class="line">解释：<span class="string">"xy"</span> 是一个满足题目要求的字符串，因为 'x' 和 'y' 各出现 <span class="number">1</span> 次。当然，还有很多其他字符串也满足题目要求，比如：<span class="string">"ag"</span> 和 <span class="string">"ur"</span>。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">n</span> = <span class="number">7</span></span><br><span class="line">输出：<span class="string">"holasss"</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 500</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/generate-a-string-with-characters-that-have-odd-counts" target="_blank" rel="noopener">https://leetcode-cn.com/problems/generate-a-string-with-characters-that-have-odd-counts</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接计算</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接计算当前的n为偶数还是奇数，如果<code>n</code>为奇数，则直接字符串由<code>n</code>个<code>a</code>组成即可。</li><li>如果<code>n</code>为偶数，字符串由<code>n-1</code>个<code>a</code>和<code>1</code>个<code>b</code>构成即可。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">generateTheString</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">                res += <span class="string">'a'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res += <span class="string">'b'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">                res += <span class="string">'a'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1375-灯泡开关-III"><a href="#1375-灯泡开关-III" class="headerlink" title="1375. 灯泡开关 III"></a>1375. 灯泡开关 III</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>房间中有 n 枚灯泡，编号从 1 到 n，自左向右排成一排。最初，所有的灯都是关着的。</p><p>在 k  时刻（ k 的取值范围是 0 到 n - 1），我们打开 <code>light[k]</code> 这个灯。</p><p>灯的颜色要想 变成蓝色 就必须同时满足下面两个条件：</p><p>灯处于打开状态。<br>排在它之前（左侧）的所有灯也都处于打开状态。<br>请返回能够让 所有开着的 灯都 变成蓝色 的时刻 数目 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：light = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：所有开着的灯都变蓝的时刻分别是 <span class="number">1</span>，<span class="number">2</span> 和 <span class="number">4</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：light = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：所有开着的灯都变蓝的时刻分别是 <span class="number">3</span> 和 <span class="number">4</span>（index<span class="number">-0</span>）。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：light = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：所有开着的灯都变蓝的时刻是 <span class="number">3</span>（index<span class="number">-0</span>）。</span><br><span class="line">第 <span class="number">4</span> 个灯在时刻 <span class="number">3</span> 变蓝。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：light = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：light = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>n == light.length</code></li><li><code>1 &lt;= n &lt;= 5 * 10^4</code></li><li><code>light 是 [1, 2, ..., n] 的一个排列。</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/bulb-switcher-iii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/bulb-switcher-iii</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 两种办法</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>两种办法均可求出。仔细分析题目，实际上要求，当点亮第<code>i</code>个灯时，要求从<code>1~i</code>为全排列。我们可以有两种办法。</p><ol><li>求前n项和是否等于当前最大数的等差数列和。记录前<code>i</code>个元素的和<code>sum</code>，并记录前<code>i</code>个元素的最大值<code>max</code>，判断 <code>sum == max*(max+1)/2</code>.</li><li>判断当前序列第<code>i</code>个元素时的最大值为max(i),  如果是则满足要求<code>max(i) == i</code>。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTimesAllBlue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; light.size(); ++i)&#123;</span><br><span class="line">            right = max(right,light[i]);</span><br><span class="line">            sum += light[i];</span><br><span class="line">            <span class="keyword">if</span>(sum == (<span class="keyword">long</span> <span class="keyword">long</span>)right*(right+<span class="number">1</span>)/<span class="number">2</span>) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTimesAllBlue</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; light.size(); ++i)&#123;</span><br><span class="line">            r = max(r,light[i]);</span><br><span class="line">            <span class="keyword">if</span>(r == i+<span class="number">1</span>) res++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1376-通知所有员工所需的时间"><a href="#1376-通知所有员工所需的时间" class="headerlink" title="1376. 通知所有员工所需的时间"></a>1376. 通知所有员工所需的时间</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>公司里有 n 名员工，每个员工的 <code>ID</code> 都是独一无二的，编号从 <code>0</code>到 <code>n - 1</code>。公司的总负责人通过 <code>headID</code>进行标识。</p><p>在 <code>manager</code> 数组中，每个员工都有一个直属负责人，其中 <code>manager[i]</code>是第 i 名员工的直属负责人。对于总负责人，<code>manager[headID] = -1</code>。题目保证从属关系可以用树结构显示。</p><p>公司总负责人想要向公司所有员工通告一条紧急消息。他将会首先通知他的直属下属们，然后由这些下属通知他们的下属，直到所有的员工都得知这条紧急消息。</p><p>第 i 名员工需要 <code>informTime[i]</code>分钟来通知它的所有直属下属（也就是说在 <code>informTime[i]</code>分钟后，他的所有直属下属都可以开始传播这一消息）。</p><p>返回通知所有员工这一紧急消息所需要的 分钟数 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span>, headID = <span class="number">0</span>, manager = [<span class="number">-1</span>], informTime = [<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：公司总负责人是该公司的唯一一名员工。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">6</span>, headID = <span class="number">2</span>, manager = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>], informTime = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：id = <span class="number">2</span> 的员工是公司的总负责人，也是其他所有员工的直属负责人，他需要 <span class="number">1</span> 分钟来通知所有员工。</span><br><span class="line">上图显示了公司员工的树结构。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span>, headID = <span class="number">6</span>, manager = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">-1</span>], informTime = [<span class="number">0</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">21</span></span><br><span class="line">解释：总负责人 id = <span class="number">6</span>。他将在 <span class="number">1</span> 分钟内通知 id = <span class="number">5</span> 的员工。</span><br><span class="line">id = <span class="number">5</span> 的员工将在 <span class="number">2</span> 分钟内通知 id = <span class="number">4</span> 的员工。</span><br><span class="line">id = <span class="number">4</span> 的员工将在 <span class="number">3</span> 分钟内通知 id = <span class="number">3</span> 的员工。</span><br><span class="line">id = <span class="number">3</span> 的员工将在 <span class="number">4</span> 分钟内通知 id = <span class="number">2</span> 的员工。</span><br><span class="line">id = <span class="number">2</span> 的员工将在 <span class="number">5</span> 分钟内通知 id = <span class="number">1</span> 的员工。</span><br><span class="line">id = <span class="number">1</span> 的员工将在 <span class="number">6</span> 分钟内通知 id = <span class="number">0</span> 的员工。</span><br><span class="line">所需时间 = <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> + <span class="number">5</span> + <span class="number">6</span> = <span class="number">21</span> 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">15</span>, headID = <span class="number">0</span>, manager = [<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>], informTime = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：第一分钟总负责人通知员工 <span class="number">1</span> 和 <span class="number">2</span> 。</span><br><span class="line">第二分钟他们将会通知员工 <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> 和 <span class="number">6</span> 。</span><br><span class="line">第三分钟他们将会通知剩下的员工。</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, headID = <span class="number">2</span>, manager = [<span class="number">3</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">2</span>], informTime = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">162</span>,<span class="number">914</span>]</span><br><span class="line">输出：<span class="number">1076</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>0 &lt;= headID &lt; n</code></li><li><code>manager.length == n</code></li><li><code>0 &lt;= manager[i] &lt; n</code></li><li><code>manager[headID] == -1</code></li><li><code>informTime.length == n</code></li><li><code>0 &lt;= informTime[i] &lt;= 1000</code></li><li><code>如果员工 i 没有下属，informTime[i] == 0 。</code></li><li><code>题目 保证 所有员工都可以收到通知。</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/time-needed-to-inform-all-employees" target="_blank" rel="noopener">https://leetcode-cn.com/problems/time-needed-to-inform-all-employees</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS 或者 BFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>求树的根节点到叶子节点的路径的最大值,每一条边都权重。</li><li>解法非常简单，实际解法我们用<code>BFS</code>或者<code>DFS</code>均可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfMinutes</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> headID, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; manager, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; informTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pii&gt; qu;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; child(n);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; manager.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(manager[i] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                child[manager[i]].push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        qu.push(make_pair(headID,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = qu.front().first;</span><br><span class="line">            <span class="keyword">int</span> cost = qu.front().second;</span><br><span class="line">            qu.pop();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(informTime[curr] == <span class="number">0</span>)&#123;</span><br><span class="line">                res = max(res,cost);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> next : child[curr])&#123;</span><br><span class="line">                qu.push(make_pair(next,cost+informTime[curr]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> curr,<span class="keyword">int</span> tot,<span class="keyword">int</span> &amp; res,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; manager, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; informTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(manager[curr] == <span class="number">-1</span>) &#123;</span><br><span class="line">            res = max(tot,res);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(manager[curr],tot+informTime[manager[curr]],res,manager,informTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfMinutes</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> headID, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; manager, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; informTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; informTime.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(informTime[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                dfs(i,<span class="number">0</span>,res,manager,informTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1377-T-秒后青蛙的位置"><a href="#1377-T-秒后青蛙的位置" class="headerlink" title="1377. T 秒后青蛙的位置"></a>1377. T 秒后青蛙的位置</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一棵由 n 个顶点组成的无向树，顶点编号从 1 到 n。青蛙从 顶点 1 开始起跳。规则如下：</p><p>在一秒内，青蛙从它所在的当前顶点跳到另一个 未访问 过的顶点（如果它们直接相连）。<br>青蛙无法跳回已经访问过的顶点。<br>如果青蛙可以跳到多个不同顶点，那么它跳到其中任意一个顶点上的机率都相同。<br>如果青蛙不能跳到任何未访问过的顶点上，那么它每次跳跃都会停留在原地。<br>无向树的边用数组 <code>edges</code>描述，其中<code>edges[i] = [fromi, toi]</code>意味着存在一条直接连通 <code>fromi</code>和<code>toi</code>两个顶点的边。</p><p>返回青蛙在<code>t</code>秒后位于目标顶点 <code>target</code> 上的概率。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span>, edges = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">5</span>]], t = <span class="number">2</span>, target = <span class="number">4</span></span><br><span class="line">输出：<span class="number">0.16666666666666666</span> </span><br><span class="line">解释：上图显示了青蛙的跳跃路径。青蛙从顶点 <span class="number">1</span> 起跳，第 <span class="number">1</span> 秒 有 <span class="number">1</span>/<span class="number">3</span> 的概率跳到顶点 <span class="number">2</span> ，然后第 <span class="number">2</span> 秒 有 <span class="number">1</span>/<span class="number">2</span> 的概率跳到顶点 <span class="number">4</span>，因此青蛙在 <span class="number">2</span> 秒后位于顶点 <span class="number">4</span> 的概率是 <span class="number">1</span>/<span class="number">3</span> * <span class="number">1</span>/<span class="number">2</span> = <span class="number">1</span>/<span class="number">6</span> = <span class="number">0.16666666666666666</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span>, edges = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">5</span>]], t = <span class="number">1</span>, target = <span class="number">7</span></span><br><span class="line">输出：<span class="number">0.3333333333333333</span></span><br><span class="line">解释：上图显示了青蛙的跳跃路径。青蛙从顶点 <span class="number">1</span> 起跳，有 <span class="number">1</span>/<span class="number">3</span> = <span class="number">0.3333333333333333</span> 的概率能够 <span class="number">1</span> 秒 后跳到顶点 <span class="number">7</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span>, edges = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">5</span>]], t = <span class="number">20</span>, target = <span class="number">6</span></span><br><span class="line">输出：<span class="number">0.16666666666666666</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 100</code></li><li><code>edges.length == n-1</code></li><li><code>edges[i].length == 2</code></li><li><code>1 &lt;= edges[i][0], edges[i][1] &lt;= n</code></li><li><code>1 &lt;= t &lt;= 50</code></li><li><code>1 &lt;= target &lt;= n</code></li><li>与准确值误差在 <code>10^-5</code> 之内的结果将被判定为正确。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/frog-position-after-t-seconds" target="_blank" rel="noopener">https://leetcode-cn.com/problems/frog-position-after-t-seconds</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS或者DFS均可</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>题目本身不是很难，但是感觉这个题目出的不好，计算每层的概率即可。本周全部<code>AC</code>的有几百人就可以看出这个题目确实不难。</li><li>采用<code>BFS</code>或者<code>DFS</code>即可，主要是父节点·<code>p</code>跳到与其相邻的节点的概率为<code>1/n</code>,n为节点<code>p</code>的孩子的数目。</li><li>采用<code>BFS</code>或者<code>DFS</code>的思路相同，将概率每层进行传递即可。</li><li>本题的<code>cornel</code>在于一旦<code>p</code>为叶子节点和非叶子的节点的处理，在<code>t &gt; 0</code>的时间内如果跳到了节点<code>p</code>且该节点为非叶子节点，在<code>t</code>时刻时，跳到节点<code>p</code>的概率为0；在<code>t &gt; 0</code>的时间内如果跳到了叶子节点<code>p</code>，在<code>t</code>时刻时，跳到节点<code>p</code>的概率为则为固定值.<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">frogPosition</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges, <span class="keyword">int</span> t, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt;&gt; qu;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; probability(n+<span class="number">1</span>,<span class="number">0.0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit(n+<span class="number">1</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; graph;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e : edges)&#123;</span><br><span class="line">            graph[e[<span class="number">0</span>]].insert(e[<span class="number">1</span>]);</span><br><span class="line">            graph[e[<span class="number">1</span>]].insert(e[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        qu.push(make_pair(<span class="number">1</span>,<span class="number">1.0</span>));</span><br><span class="line">        visit[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        probability[<span class="number">1</span>] = <span class="number">1.0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!qu.empty() &amp;&amp; t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sz = qu.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> curr = qu.front().first;</span><br><span class="line">                <span class="keyword">double</span> p = qu.front().second;</span><br><span class="line">                qu.pop();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> next : graph[curr])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(visit[next]) graph[curr].erase(next);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> next : graph[curr])&#123;</span><br><span class="line">                    visit[next] = <span class="literal">true</span>;</span><br><span class="line">                    qu.push(make_pair(next,p/graph[curr].size()));</span><br><span class="line">                    probability[next] = p/graph[curr].size();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(graph[curr].size() &gt; <span class="number">0</span>) probability[curr] = <span class="number">0.0</span>;</span><br><span class="line">                <span class="keyword">else</span> probability[curr] = p;</span><br><span class="line">                <span class="keyword">if</span>(curr == target &amp;&amp; t &gt; <span class="number">0</span>) <span class="keyword">return</span> probability[curr];</span><br><span class="line">            &#125;</span><br><span class="line">            t--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> probability[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;179周比赛&quot;&gt;&lt;a href=&quot;#179周比赛&quot; class=&quot;headerlink&quot; title=&quot;179周比赛&quot;&gt;&lt;/a&gt;179周比赛&lt;/h1&gt;&lt;p&gt;这周的题目质量一般，不如双周赛的题目好，题目比较简单。&lt;/p&gt;&lt;h2 id=&quot;1374-生成每种字符都是奇数个的字符串&quot;&gt;&lt;a href=&quot;#1374-生成每种字符都是奇数个的字符串&quot; class=&quot;headerlink&quot; title=&quot;1374. 生成每种字符都是奇数个的字符串&quot;&gt;&lt;/a&gt;1374. 生成每种字符都是奇数个的字符串&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数 &lt;code&gt;n&lt;/code&gt;，请你返回一个含 &lt;code&gt;n&lt;/code&gt; 个字符的字符串，其中每种字符在该字符串中都恰好出现 奇数次 。&lt;/p&gt;&lt;p&gt;返回的字符串必须只含小写英文字母。如果存在多个满足题目要求的字符串，则返回其中任意一个即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Maxflow</title>
    <link href="http://yoursite.com/2020/03/05/136/"/>
    <id>http://yoursite.com/2020/03/05/136/</id>
    <published>2020-03-05T14:50:55.362Z</published>
    <updated>2020-03-07T12:54:14.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="maxflow"><a href="#maxflow" class="headerlink" title="maxflow"></a>maxflow</h3><p>最近一直在学习<code>princeton</code>的算法课程，真心觉得质量很高，特别是每次的project，都需要用心和花费大的精力取完成，每次取得100分非常不容。最近把自己之前一直弄不清楚的<code>maxflow</code>算法搞清楚了，并且自己用<code>c++</code>完成了一个简单的<code>maxflow</code>算法，还是非常有成就感的。<br><img src="https://s2.ax1x.com/2020/03/05/3H57jS.png" alt="2"></p><ol><li>定义<code>flownetwork</code>的定义，本身即是一个带权重的右向图，每条边的权重代表这条边的能够达到的最大流量。对于每个顶点的规定流出的流量与流入的流量相等。</li><li>定义<code>flownetwork</code>的起点<code>s</code>与终点<code>t</code>.求出在每条边权重约束下，该有向图从s开始的最大流量。<br>核心问题是<code>minCnut</code>问题和<code>Ford-Fulkerson</code>算法。该问题确实非常经典，值得仔细取阅读和理解，但是算法本身的解法非常简单。</li><li><code>Ford-Fulkerson</code>算法的核心每次查找从起点<code>s</code>到<code>t</code>的路径(augmentpath)，路径上每段的残差（capblity - flow，该条边还能增加多少流）大于0且路径不存在环，找到该条路径上的最小的残差，更新路径上的所有的边<code>flow</code>，都增加路径的最小残存。其实这种办法得本质即为将所有能够从起点<code>s</code>到终点<code>t</code>得路径全部填充满流量，而实际将路径填充满得最大流量是根据路径上得最小流量为基准。<br><img src="https://s2.ax1x.com/2020/03/05/3H5Tc8.png" alt="1"></li><li>重复步骤3，直到在该有权图中无法再找到从<code>s</code>到<code>t</code>的路径即可。</li><li>所有符合条件的路径的最小残存之和即为<code>maxflow</code>。</li><li><code>minCut</code>即将有向图分为两个集合A,B.满足<code>capblity(A-&gt;B)</code> = <code>flow(A-&gt;B)</code>.即为最小分割。<h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3></li><li>时间复杂度为O（V^2E).</li></ol><a id="more"></a><h3 id="视频解说"><a href="#视频解说" class="headerlink" title="视频解说"></a>视频解说</h3><ol><li>在<code>Youtube</code>上找到一个非常经典的解说视频。<br><a href="https://www.youtube.com/watch?v=a0XlX0NwRhM" target="_blank" rel="noopener">视频地址</a></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>自己参照<code>princeton</code>的参考源代码，用c++重新写了一遍，虽然写的比较简单，但是对于普通的最大流的求值基本就够了。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FlowEdge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> flow;</span><br><span class="line">    <span class="keyword">int</span> capbility;</span><br><span class="line">    FlowEdge(<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> capbility)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;from = v;</span><br><span class="line">        <span class="keyword">this</span>-&gt;to = w;</span><br><span class="line">        <span class="keyword">this</span>-&gt;flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;capbility = capbility;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlowNetWork</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;pii,FlowEdge *&gt; edgs;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; adj; </span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; visit;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; edgeTo;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">others</span><span class="params">(FlowEdge * e,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(v == e-&gt;from) <span class="keyword">return</span> e-&gt;to;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v == e-&gt;to) <span class="keyword">return</span> e-&gt;from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">addResidualTo</span><span class="params">(FlowEdge * e,<span class="keyword">int</span> to,<span class="keyword">int</span> delta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(e-&gt;from == to) e-&gt;flow -= delta;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(e-&gt;to == to) e-&gt;flow += delta;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">residualTo</span><span class="params">(FlowEdge * e,<span class="keyword">int</span> to)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(e-&gt;to == to) <span class="keyword">return</span> e-&gt;capbility-e-&gt;flow;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(e-&gt;from == to) <span class="keyword">return</span> e-&gt;flow;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">FlowEdge * <span class="title">getEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span></span>&#123;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; forward = make_pair(from,to);</span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; backward = make_pair(to,from);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;edgs.count(forward)) <span class="keyword">return</span> <span class="keyword">this</span>-&gt;edgs[forward];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;edgs.count(backward)) <span class="keyword">return</span> <span class="keyword">this</span>-&gt;edgs[backward];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">addEdges</span><span class="params">(FlowEdge * e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;adj[e-&gt;from].insert(e-&gt;to);</span><br><span class="line">        <span class="keyword">this</span>-&gt;adj[e-&gt;to].insert(e-&gt;from);</span><br><span class="line">        <span class="keyword">this</span>-&gt;edgs[make_pair(e-&gt;from,e-&gt;to)] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">addResidualToEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> delta)</span></span>&#123;</span><br><span class="line">        FlowEdge * edge =  getEdge(from,to);</span><br><span class="line">        <span class="keyword">if</span>(!edge) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> addResidualTo(edge,to,delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">residualToEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span></span>&#123;</span><br><span class="line">        FlowEdge * edge =  getEdge(from,to);</span><br><span class="line">        <span class="keyword">if</span>(!edge) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> residualTo(edge,to);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">augmentPath</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;visit.insert(s);</span><br><span class="line">        qu.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = qu.front();</span><br><span class="line">            qu.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(curr == t) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v : <span class="keyword">this</span>-&gt;adj[curr])&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;visit.count(v) || residualToEdge(curr,v) &lt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">this</span>-&gt;visit.insert(v);</span><br><span class="line">                <span class="keyword">this</span>-&gt;edgeTo[v] = curr;</span><br><span class="line">                qu.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;visit.count(t) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxFlow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;visit.clear();</span><br><span class="line">        <span class="keyword">this</span>-&gt;edgeTo.clear();</span><br><span class="line">        <span class="keyword">while</span>(augmentPath(s,t))&#123;</span><br><span class="line">            <span class="keyword">int</span> bottoleneck = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v = t; v != s; v = <span class="keyword">this</span>-&gt;edgeTo[v])&#123;</span><br><span class="line">                bottoleneck = min(bottoleneck,residualToEdge(<span class="keyword">this</span>-&gt;edgeTo[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v = t; v != s; v = <span class="keyword">this</span>-&gt;edgeTo[v])&#123;</span><br><span class="line">                addResidualToEdge(<span class="keyword">this</span>-&gt;edgeTo[v],v,bottoleneck);</span><br><span class="line">            &#125;</span><br><span class="line">            value += bottoleneck;</span><br><span class="line">            <span class="keyword">this</span>-&gt;edgeTo.clear();</span><br><span class="line">            <span class="keyword">this</span>-&gt;visit.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">inCut</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visit.count(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FlowNetWork G;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v1 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> v2 = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> v3 = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> v4 = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> v5 = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> v6 = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*test*/</span></span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(s,v1,<span class="number">10</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(s,v2,<span class="number">5</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(s,v3,<span class="number">15</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v1,v2,<span class="number">4</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v1,v4,<span class="number">9</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v1,v5,<span class="number">15</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v2,v3,<span class="number">4</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v2,v5,<span class="number">8</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v3,v6,<span class="number">16</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v4,v5,<span class="number">15</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v4,t,<span class="number">10</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v5,t,<span class="number">10</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v5,v6,<span class="number">15</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v6,t,<span class="number">10</span>));</span><br><span class="line">    G.addEdges(<span class="keyword">new</span> FlowEdge(v6,v2,<span class="number">6</span>));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;G.maxFlow(s,t)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G.inCut(i)) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">","</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">/*test*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">O(n) = \frac{2^{n}}{C^{k}_{n}}</script></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;maxflow&quot;&gt;&lt;a href=&quot;#maxflow&quot; class=&quot;headerlink&quot; title=&quot;maxflow&quot;&gt;&lt;/a&gt;maxflow&lt;/h3&gt;&lt;p&gt;最近一直在学习&lt;code&gt;princeton&lt;/code&gt;的算法课程，真心觉得质量很高，特别是每次的project，都需要用心和花费大的精力取完成，每次取得100分非常不容。最近把自己之前一直弄不清楚的&lt;code&gt;maxflow&lt;/code&gt;算法搞清楚了，并且自己用&lt;code&gt;c++&lt;/code&gt;完成了一个简单的&lt;code&gt;maxflow&lt;/code&gt;算法，还是非常有成就感的。&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/03/05/3H57jS.png&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;定义&lt;code&gt;flownetwork&lt;/code&gt;的定义，本身即是一个带权重的右向图，每条边的权重代表这条边的能够达到的最大流量。对于每个顶点的规定流出的流量与流入的流量相等。&lt;/li&gt;
&lt;li&gt;定义&lt;code&gt;flownetwork&lt;/code&gt;的起点&lt;code&gt;s&lt;/code&gt;与终点&lt;code&gt;t&lt;/code&gt;.求出在每条边权重约束下，该有向图从s开始的最大流量。&lt;br&gt;核心问题是&lt;code&gt;minCnut&lt;/code&gt;问题和&lt;code&gt;Ford-Fulkerson&lt;/code&gt;算法。该问题确实非常经典，值得仔细取阅读和理解，但是算法本身的解法非常简单。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ford-Fulkerson&lt;/code&gt;算法的核心每次查找从起点&lt;code&gt;s&lt;/code&gt;到&lt;code&gt;t&lt;/code&gt;的路径(augmentpath)，路径上每段的残差（capblity - flow，该条边还能增加多少流）大于0且路径不存在环，找到该条路径上的最小的残差，更新路径上的所有的边&lt;code&gt;flow&lt;/code&gt;，都增加路径的最小残存。其实这种办法得本质即为将所有能够从起点&lt;code&gt;s&lt;/code&gt;到终点&lt;code&gt;t&lt;/code&gt;得路径全部填充满流量，而实际将路径填充满得最大流量是根据路径上得最小流量为基准。&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/03/05/3H5Tc8.png&quot; alt=&quot;1&quot;&gt;&lt;/li&gt;
&lt;li&gt;重复步骤3，直到在该有权图中无法再找到从&lt;code&gt;s&lt;/code&gt;到&lt;code&gt;t&lt;/code&gt;的路径即可。&lt;/li&gt;
&lt;li&gt;所有符合条件的路径的最小残存之和即为&lt;code&gt;maxflow&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minCut&lt;/code&gt;即将有向图分为两个集合A,B.满足&lt;code&gt;capblity(A-&amp;gt;B)&lt;/code&gt; = &lt;code&gt;flow(A-&amp;gt;B)&lt;/code&gt;.即为最小分割。&lt;h3 id=&quot;时间复杂度分析&quot;&gt;&lt;a href=&quot;#时间复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度分析&quot;&gt;&lt;/a&gt;时间复杂度分析&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;时间复杂度为O（V^2E).&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 178周 比赛</title>
    <link href="http://yoursite.com/2020/03/01/135/"/>
    <id>http://yoursite.com/2020/03/01/135/</id>
    <published>2020-03-01T08:46:23.501Z</published>
    <updated>2020-03-01T08:46:33.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="178周比赛"><a href="#178周比赛" class="headerlink" title="178周比赛"></a>178周比赛</h1><p>还是周赛的题目质量好，难度适中，非常适合面试。</p><h2 id="5344-有多少小于当前数字的数字"><a href="#5344-有多少小于当前数字的数字" class="headerlink" title="5344. 有多少小于当前数字的数字"></a>5344. 有多少小于当前数字的数字</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 nums，对于其中每个元素<code>nums[i]</code>，请你统计数组中比它小的所有数字的数目。</p><p>换而言之，对于每个<code>nums[i]</code>你必须计算出有效的 j 的数量，其中 j 满足<code>j != i</code>且 <code>nums[j] &lt; nums[i]</code>。</p><a id="more"></a><p>以数组形式返回答案。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">解释： </span><br><span class="line">对于 nums[<span class="number">0</span>]=<span class="number">8</span> 存在四个比它小的数字：（<span class="number">1</span>，<span class="number">2</span>，<span class="number">2</span> 和 <span class="number">3</span>）。 </span><br><span class="line">对于 nums[<span class="number">1</span>]=<span class="number">1</span> 不存在比它小的数字。</span><br><span class="line">对于 nums[<span class="number">2</span>]=<span class="number">2</span> 存在一个比它小的数字：（<span class="number">1</span>）。 </span><br><span class="line">对于 nums[<span class="number">3</span>]=<span class="number">2</span> 存在一个比它小的数字：（<span class="number">1</span>）。 </span><br><span class="line">对于 nums[<span class="number">4</span>]=<span class="number">3</span> 存在三个比它小的数字：（<span class="number">1</span>，<span class="number">2</span> 和 <span class="number">2</span>）。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>2 &lt;= nums.length &lt;= 500</code></li><li><code>0 &lt;= nums[i] &lt;= 100</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/how-many-numbers-are-smaller-than-the-current-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/how-many-numbers-are-smaller-than-the-current-number</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序 + 二分查找</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>二分查找，直接查找排序后的序列中有多少个数小于当前给定的数。</li><li>map直接统计，map会自动排序，按照排序的序列统计前面的序列中有多少个数目比当前的数小。<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; smallerNumbersThanCurrent(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; copy = nums;</span><br><span class="line">        sort(copy.begin(),copy.end());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            res[i] = lower_bound(copy.begin(),copy.end(),nums[i]) - copy.begin();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; smallerNumbersThanCurrent(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> n : nums)&#123;</span><br><span class="line">            cnt[n]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : cnt)&#123;</span><br><span class="line">            prev = cnt[x.first] + prev;</span><br><span class="line">            cnt[x.first] = prev - cnt[x.first];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i)&#123;</span><br><span class="line">            res.push_back(cnt[nums[i]]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="15345-通过投票对团队排名"><a href="#15345-通过投票对团队排名" class="headerlink" title="15345. 通过投票对团队排名"></a>15345. 通过投票对团队排名</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>现在有一个特殊的排名系统，依据参赛团队在投票人心中的次序进行排名，每个投票者都需要按从高到低的顺序对参与排名的所有团队进行排位。</p><p>排名规则如下：</p><ul><li>参赛团队的排名次序依照其所获「排位第一」的票的多少决定。如果存在多个团队并列的情况，将继续考虑其「排位第二」的票的数量。以此类推，直到不再存在并列的情况。</li><li>如果在考虑完所有投票情况后仍然出现并列现象，则根据团队字母的字母顺序进行排名。<br>给你一个字符串数组 <code>votes</code>代表全体投票者给出的排位情况，请你根据上述排名规则对所有参赛团队进行排名。</li></ul><p>请你返回能表示按排名系统 排序后 的所有团队排名的字符串。</p><p>示例 1：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：votes = [<span class="string">"ABC"</span>,<span class="string">"ACB"</span>,<span class="string">"ABC"</span>,<span class="string">"ACB"</span>,<span class="string">"ACB"</span>]</span><br><span class="line">输出：<span class="string">"ACB"</span></span><br><span class="line">解释：A 队获得五票「排位第一」，没有其他队获得「排位第一」，所以 A 队排名第一。</span><br><span class="line"><span class="keyword">B </span>队获得两票「排位第二」，三票「排位第三」。</span><br><span class="line">C 队获得三票「排位第二」，两票「排位第三」。</span><br><span class="line">由于 C 队「排位第二」的票数较多，所以 C 队排第二，<span class="keyword">B </span>队排第三。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：votes = [<span class="string">"WXYZ"</span>,<span class="string">"XYZW"</span>]</span><br><span class="line">输出：<span class="string">"XWYZ"</span></span><br><span class="line">解释：<span class="keyword">X</span> 队在并列僵局打破后成为排名第一的团队。<span class="keyword">X</span> 队和 <span class="keyword">W</span> 队的「排位第一」票数一样，但是 <span class="keyword">X</span> 队有一票「排位第二」，而 <span class="keyword">W</span> 没有获得「排位第二」。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">votes</span> = [<span class="string">"ZMNAGUEDSJYLBOPHRQICWFXTVK"</span>]</span><br><span class="line">输出：<span class="string">"ZMNAGUEDSJYLBOPHRQICWFXTVK"</span></span><br><span class="line">解释：只有一个投票者，所以排名完全按照他的意愿。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：votes = [<span class="string">"BCA"</span>,<span class="string">"CAB"</span>,<span class="string">"CBA"</span>,<span class="string">"ABC"</span>,<span class="string">"ACB"</span>,<span class="string">"BAC"</span>]</span><br><span class="line">输出：<span class="string">"ABC"</span></span><br><span class="line">解释： </span><br><span class="line">A 队获得两票「排位第一」，两票「排位第二」，两票「排位第三」。</span><br><span class="line"><span class="keyword">B </span>队获得两票「排位第一」，两票「排位第二」，两票「排位第三」。</span><br><span class="line">C 队获得两票「排位第一」，两票「排位第二」，两票「排位第三」。</span><br><span class="line">完全并列，所以我们需要按照字母升序排名。</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">votes</span> = [<span class="string">"M"</span>,<span class="string">"M"</span>,<span class="string">"M"</span>,<span class="string">"M"</span>]</span><br><span class="line">输出：<span class="string">"M"</span></span><br><span class="line">解释：只有 M 队参赛，所以它排名第一。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= votes.length &lt;= 1000</code></li><li><code>1 &lt;= votes[i].length &lt;= 26</code></li><li><code>votes[i].length == votes[j].length for 0 &lt;= i, j &lt; votes.length</code></li><li><code>votes[i][j] 是英文 大写 字母</code></li><li><code>votes[i] 中的所有字母都是唯一的</code></li><li><code>votes[0] 中出现的所有字母 同样也 出现在 votes[j] 中，其中 1 &lt;= j &lt; votes.length</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/rank-teams-by-votes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rank-teams-by-votes</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接排序</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>数组保存每个队列的评选名次，并将每个队伍的评选名词结果按照从小到大进行排列。</li><li>然后将每个队伍的评选名次按照一定的顺序进行排序，最终即可得到最终结果。</li><li>技巧的关键在于如何排序，我们将转化为一个固定长度的数组，每个队伍的评选名词列表按照数组元素的大小进行比较，关键点在于如何比较。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; a,pair&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.second.size() &amp;&amp; i &lt; b.second.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.second[i] &lt; b.second[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(a.second[i] &gt; b.second[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">rankTeams</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; votes)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cnt(<span class="number">26</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; copy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; votes.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; votes[i].size(); ++j)&#123;</span><br><span class="line">                cnt[votes[i][j]-<span class="string">'A'</span>].push_back(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i].size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                sort(cnt[i].begin(),cnt[i].end());</span><br><span class="line">                copy.push_back(make_pair(i,cnt[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(copy.begin(),copy.end(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; copy.size(); ++i)&#123;</span><br><span class="line">            res += <span class="string">'A'</span> + copy[i].first;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5346-二叉树中的列表"><a href="#5346-二叉树中的列表" class="headerlink" title="5346. 二叉树中的列表"></a>5346. 二叉树中的列表</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一棵以 <code>root</code> 为根的二叉树和一个 <code>head</code>为第一个节点的链表。</p><p>如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应以 <code>head</code> 为首的链表中每个节点的值，那么请你返回 True ，否则返回 <code>False</code> 。</p><p>一直向下的路径的意思是：从树中某个节点开始，一直连续向下的路径。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>], root = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：树中蓝色的节点构成了与链表对应的子路径。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>], root = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>], root = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：二叉树中不存在一一对应链表的路径。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>二叉树和链表中的每个节点的值都满足<code>1 &lt;= node.val &lt;= 100</code>。</li><li>链表包含的节点数目在 1 到 100 之间。</li><li>二叉树包含的节点数目在 1 到 2500 之间。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/linked-list-in-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-in-binary-tree</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>按层次遍历二叉树，对每个节点进行与链表匹配。</li><li>与链表匹配，用DFS即可，每次根节点匹配头节点，根节点的子节点匹配下一个节点。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(ListNode * head,TreeNode * root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val != head-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(head-&gt;next,root-&gt;left)||dfs(head-&gt;next,root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubPath</span><span class="params">(ListNode* head, TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(dfs(head,root)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> isSubPath(head,root-&gt;left)||isSubPath(head,root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5347-使网格图至少有一条有效路径的最小代价"><a href="#5347-使网格图至少有一条有效路径的最小代价" class="headerlink" title="5347. 使网格图至少有一条有效路径的最小代价"></a>5347. 使网格图至少有一条有效路径的最小代价</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个 m x n 的网格图 <code>grid</code> 。 <code>grid</code>中每个格子都有一个数字，对应着从该格子出发下一步走的方向。 <code>grid[i][j]</code>中的数字可能为以下几种情况：</p><ul><li>1 ，下一步往右走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i][j + 1]</code></li><li>2 ，下一步往左走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i][j - 1]</code></li><li>3 ，下一步往下走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i + 1][j]</code></li><li>4 ，下一步往上走，也就是你会从 <code>grid[i][j]</code>走到 <code>grid[i - 1][j]</code><br>注意网格图中可能会有 无效数字 ，因为它们可能指向 grid 以外的区域。</li></ul><p>一开始，你会从最左上角的格子 (0,0) 出发。我们定义一条 有效路径 为从格子 (0,0) 出发，每一步都顺着数字对应方向走，最终在最右下角的格子 (m - 1, n - 1) 结束的路径。有效路径 不需要是最短路径 。</p><p>你可以花费<code>cost = 1</code> 的代价修改一个格子中的数字，但每个格子中的数字 只能修改一次 。</p><p>请你返回让网格图至少有一条有效路径的最小代价。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：你将从点 (<span class="number">0</span>, <span class="number">0</span>) 出发。</span><br><span class="line">到达 (<span class="number">3</span>, <span class="number">3</span>) 的路径为： (<span class="number">0</span>, <span class="number">0</span>) --&gt; (<span class="number">0</span>, <span class="number">1</span>) --&gt; (<span class="number">0</span>, <span class="number">2</span>) --&gt; (<span class="number">0</span>, <span class="number">3</span>) 花费代价 cost = <span class="number">1</span> 使方向向下 --&gt; (<span class="number">1</span>, <span class="number">3</span>) --&gt; (<span class="number">1</span>, <span class="number">2</span>) --&gt; (<span class="number">1</span>, <span class="number">1</span>) --&gt; (<span class="number">1</span>, <span class="number">0</span>) 花费代价 cost = <span class="number">1</span> 使方向向下 --&gt; (<span class="number">2</span>, <span class="number">0</span>) --&gt; (<span class="number">2</span>, <span class="number">1</span>) --&gt; (<span class="number">2</span>, <span class="number">2</span>) --&gt; (<span class="number">2</span>, <span class="number">3</span>) 花费代价 cost = <span class="number">1</span> 使方向向下 --&gt; (<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">总花费为 cost = <span class="number">3.</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>]]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：不修改任何数字你就可以从 (<span class="number">0</span>, <span class="number">0</span>) 到达 (<span class="number">2</span>, <span class="number">2</span>) 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">3</span>]]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = <span class="string">[[4]]</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS + 优先级队列</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>一般这种求最短路径的题目基本上就是几种解法：BFS,DFS,DP，刚开始准备用dp来做，发现dp的递推公式有问题，最后放弃掉。</li><li>最后发现此题应该利用类似的贪心的算法，因为题目中要求是求的最小代价，而不是最短路径。所以我们应当在做一次更改后，应当尽可能的将更改路径后所有能够遍历的节点全部进行遍历一遍。</li><li>我们设dp[x][y]位从<code>(0,0)</code>开始向<code>(x,y)</code>遍历时最小代价。我们一旦利用bfs遍历到某个节点时，应该判断当前的代价<code>cost</code>是否小于(x,y)本身的代价<code>dp[x][y]</code>,如果是则将(x,y)节点加入队列中进行再次遍历。</li><li>我们利用优先级队列优先遍历代价较低的节点。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(pii &amp;  a,pii &amp; b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = grid.size();</span><br><span class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(row,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col,INT_MAX));</span><br><span class="line">        priority_queue&lt;pii,<span class="built_in">vector</span>&lt;pii&gt;,cmp&gt; pq;</span><br><span class="line">        </span><br><span class="line">        pq.push(make_pair(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> x = pq.top().first/col;</span><br><span class="line">            <span class="keyword">int</span> y = pq.top().first%col;</span><br><span class="line">            <span class="keyword">int</span> step = pq.top().second;</span><br><span class="line">            pq.pop();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(x == row<span class="number">-1</span> &amp;&amp; y == col<span class="number">-1</span>) <span class="keyword">return</span> step;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> x1 = x + d[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> y1 = y + d[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(x1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; row &amp;&amp; y1 &gt;= <span class="number">0</span> &amp;&amp; y1 &lt; col)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[x][y] == i+<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(dp[x1][y1] &gt; dp[x][y])&#123;</span><br><span class="line">                            dp[x1][y1] = dp[x][y];</span><br><span class="line">                            pq.push(make_pair(x1*col+y1,dp[x1][y1]));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(dp[x1][y1] &gt; dp[x][y] + <span class="number">1</span>)&#123;</span><br><span class="line">                            dp[x1][y1] = dp[x][y] + <span class="number">1</span>;</span><br><span class="line">                            pq.push(make_pair(x1*col+y1,dp[x1][y1]));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;178周比赛&quot;&gt;&lt;a href=&quot;#178周比赛&quot; class=&quot;headerlink&quot; title=&quot;178周比赛&quot;&gt;&lt;/a&gt;178周比赛&lt;/h1&gt;&lt;p&gt;还是周赛的题目质量好，难度适中，非常适合面试。&lt;/p&gt;&lt;h2 id=&quot;5344-有多少小于当前数字的数字&quot;&gt;&lt;a href=&quot;#5344-有多少小于当前数字的数字&quot; class=&quot;headerlink&quot; title=&quot;5344. 有多少小于当前数字的数字&quot;&gt;&lt;/a&gt;5344. 有多少小于当前数字的数字&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个数组 nums，对于其中每个元素&lt;code&gt;nums[i]&lt;/code&gt;，请你统计数组中比它小的所有数字的数目。&lt;/p&gt;&lt;p&gt;换而言之，对于每个&lt;code&gt;nums[i]&lt;/code&gt;你必须计算出有效的 j 的数量，其中 j 满足&lt;code&gt;j != i&lt;/code&gt;且 &lt;code&gt;nums[j] &amp;lt; nums[i]&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 20周 双周赛</title>
    <link href="http://yoursite.com/2020/02/23/134/"/>
    <id>http://yoursite.com/2020/02/23/134/</id>
    <published>2020-02-23T14:47:49.847Z</published>
    <updated>2020-02-23T14:50:00.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20双周比赛"><a href="#20双周比赛" class="headerlink" title="20双周比赛"></a>20双周比赛</h1><p>第三题稍微有点难度，其余都比较简单</p><h2 id="5323-根据数字二进制下-1-的数目排序"><a href="#5323-根据数字二进制下-1-的数目排序" class="headerlink" title="5323. 根据数字二进制下 1 的数目排序"></a>5323. 根据数字二进制下 1 的数目排序</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code> 。请你将数组中的元素按照其二进制表示中数字 1 的数目升序排序。</p><p>如果存在多个数字二进制中 1 的数目相同，则必须将它们按照数值大小升序排列。</p><p>请你返回排序后的数组。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">解释：[<span class="number">0</span>] 是唯一一个有 <span class="number">0</span> 个 <span class="number">1</span> 的数。</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>] 都有 <span class="number">1</span> 个 <span class="number">1</span> 。</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>] 有 <span class="number">2</span> 个 <span class="number">1</span> 。</span><br><span class="line">[<span class="number">7</span>] 有 <span class="number">3</span> 个 <span class="number">1</span> 。</span><br><span class="line">按照 <span class="number">1</span> 的个数排序得到的结果数组为 [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1024</span>,<span class="number">512</span>,<span class="number">256</span>,<span class="number">128</span>,<span class="number">64</span>,<span class="number">32</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">256</span>,<span class="number">512</span>,<span class="number">1024</span>]</span><br><span class="line">解释：数组中所有整数二进制下都只有 <span class="number">1</span> 个 <span class="number">1</span> ，所以你需要按照数值大小将它们排序。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">10000</span>,<span class="number">10000</span>]</span><br><span class="line">输出：[<span class="number">10000</span>,<span class="number">10000</span>]</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">19</span>]</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>,<span class="number">10000</span>]</span><br><span class="line">输出：[<span class="number">10</span>,<span class="number">100</span>,<span class="number">10000</span>,<span class="number">1000</span>]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 500</code></li><li><code>0 &lt;= arr[i] &lt;= 10^4</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/sort-integers-by-the-number-of-1-bits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sort-integers-by-the-number-of-1-bits</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接比较数种含有1的个数大小进行比较，自定义排序函数即可。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countOne</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">        x = x&amp;(x<span class="number">-1</span>);</span><br><span class="line">        res++;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> &amp; a,<span class="keyword">int</span> &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(countOne(a) == countOne(b)) <span class="keyword">return</span> a &lt; b;</span><br><span class="line">        <span class="keyword">return</span> countOne(a) &lt; countOne(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sortByBits(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr) &#123;</span><br><span class="line">        sort(arr.begin(),arr.end(),cmp);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1357-每隔-n-个顾客打折"><a href="#1357-每隔-n-个顾客打折" class="headerlink" title="1357. 每隔 n 个顾客打折"></a>1357. 每隔 n 个顾客打折</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>超市里正在举行打折活动，每隔 n 个顾客会得到 discount 的折扣。</p><p>超市里有一些商品，第 i 种商品为 <code>products[i]</code> 且每件单品的价格为<code>prices[i]</code>。</p><p>结账系统会统计顾客的数目，每隔 n 个顾客结账时，该顾客的账单都会打折，折扣为 discount （也就是如果原本账单为 x ，那么实际金额会变成<code>x - (discount * x) / 100 ）</code>，然后系统会重新开始计数。</p><p>顾客会购买一些商品， <code>product[i]</code>是顾客购买的第 i 种商品， <code>amount[i]</code> 是对应的购买该种商品的数目。</p><p>请你实现<code>Cashier</code>类：</p><ul><li><code>Cashier(int n, int discount, int[] products, int[] prices)</code>初始化实例对象，参数分别为打折频率 n ，折扣大小 <code>discount</code>，超市里的商品列表 <code>products</code> 和它们的价格 <code>prices</code>。</li><li><code>double getBill(int[] product, int[] amount)</code> 返回账单的实际金额（如果有打折，请返回打折后的结果）。返回结果与标准答案误差在 <code>10^-5</code>以内都视为正确结果。</li></ul><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[<span class="string">"Cashier"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>,<span class="string">"getBill"</span>]</span><br><span class="line">[[<span class="number">3</span>,<span class="number">50</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">100</span>]],[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]],[[<span class="number">3</span>,<span class="number">7</span>],[<span class="number">10</span>,<span class="number">10</span>]],[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]],[[<span class="number">4</span>],[<span class="number">10</span>]],[[<span class="number">7</span>,<span class="number">3</span>],[<span class="number">10</span>,<span class="number">10</span>]],[[<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">7</span>]],[[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>]]]</span><br><span class="line">输出</span><br><span class="line">[null,<span class="number">500.0</span>,<span class="number">4000.0</span>,<span class="number">800.0</span>,<span class="number">4000.0</span>,<span class="number">4000.0</span>,<span class="number">7350.0</span>,<span class="number">2500.0</span>]</span><br><span class="line">解释</span><br><span class="line">Cashier cashier = new Cashier(<span class="number">3</span>,<span class="number">50</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">100</span>]);</span><br><span class="line">cashier.getBill([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]);                        <span class="comment">// 返回 500.0, 账单金额为 = 1 * 100 + 2 * 200 = 500.</span></span><br><span class="line">cashier.getBill([<span class="number">3</span>,<span class="number">7</span>],[<span class="number">10</span>,<span class="number">10</span>]);                      <span class="comment">// 返回 4000.0</span></span><br><span class="line">cashier.getBill([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]);    <span class="comment">// 返回 800.0 ，账单原本为 1600.0 ，但由于该顾客是第三位顾客，他将得到 50% 的折扣，所以实际金额为 1600 - 1600 * (50 / 100) = 800 。</span></span><br><span class="line">cashier.getBill([<span class="number">4</span>],[<span class="number">10</span>]);                           <span class="comment">// 返回 4000.0</span></span><br><span class="line">cashier.getBill([<span class="number">7</span>,<span class="number">3</span>],[<span class="number">10</span>,<span class="number">10</span>]);                      <span class="comment">// 返回 4000.0</span></span><br><span class="line">cashier.getBill([<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">7</span>]); <span class="comment">// 返回 7350.0 ，账单原本为 14700.0 ，但由于系统计数再次达到三，该顾客将得到 50% 的折扣，实际金额为 7350.0 。</span></span><br><span class="line">cashier.getBill([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>]);                    <span class="comment">// 返回 2500.0</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>1 &lt;= n &lt;= 10^4</li><li>0 &lt;= discount &lt;= 100</li><li>1 &lt;= products.length &lt;= 200</li><li>1 &lt;= products[i] &lt;= 200</li><li>products 列表中 不会 有重复的元素。</li><li>prices.length == products.length</li><li>1 &lt;= prices[i] &lt;= 1000</li><li>1 &lt;= product.length &lt;= products.length</li><li>product[i] 在 products 出现过。</li><li>amount.length == product.length</li><li>1 &lt;= amount[i] &lt;= 1000</li><li>最多有 1000 次对 getBill 函数的调用。</li><li>返回结果与标准答案误差在 10^-5 以内都视为正确结果。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/apply-discount-every-n-orders" target="_blank" rel="noopener">https://leetcode-cn.com/problems/apply-discount-every-n-orders</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接计算即可，题目非常简单</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>用map保存货物和价格的对应关系。</li><li>直接计算即可，每次到达打折的次数进行打折即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cashier</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Cashier(<span class="keyword">int</span> n, <span class="keyword">int</span> discount, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; products, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;freq = n;</span><br><span class="line">        <span class="keyword">this</span>-&gt;discount = discount;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; products.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;products[products[i]] = prices[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;curr = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getBill</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; product, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; product.size(); ++i)&#123;</span><br><span class="line">            res += <span class="keyword">this</span>-&gt;products[product[i]]*amount[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;curr == freq<span class="number">-1</span>)&#123;</span><br><span class="line">            res *= <span class="keyword">double</span>(<span class="number">100</span>-discount)/<span class="number">100</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;curr = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;curr++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> freq;</span><br><span class="line">    <span class="keyword">int</span> discount;</span><br><span class="line">    <span class="keyword">int</span> curr;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; products;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Cashier object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Cashier* obj = new Cashier(n, discount, products, prices);</span></span><br><span class="line"><span class="comment"> * double param_1 = obj-&gt;getBill(product,amount);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5325-包含所有三种字符的子字符串数目"><a href="#5325-包含所有三种字符的子字符串数目" class="headerlink" title="5325. 包含所有三种字符的子字符串数目"></a>5325. 包含所有三种字符的子字符串数目</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>s</code>，它只包含三种字符<code>a</code>, <code>b</code>和<code>c</code> 。</p><p>请你返回 <code>a，b</code> 和 <code>c</code>都 至少 出现过一次的子字符串数目。</p><p>示例 1：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"abcabc"</span></span><br><span class="line">输出：<span class="number">10</span></span><br><span class="line">解释：包含 a，<span class="selector-tag">b</span> 和 c 各至少一次的子字符串为 <span class="string">"abc"</span>, <span class="string">"abca"</span>, <span class="string">"abcab"</span>, <span class="string">"abcabc"</span>, <span class="string">"bca"</span>, <span class="string">"bcab"</span>, <span class="string">"bcabc"</span>, <span class="string">"cab"</span>, <span class="string">"cabc"</span> 和 <span class="string">"abc"</span> (相同字符串算多次)。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"aaacb"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：包含 a，<span class="selector-tag">b</span> 和 c 各至少一次的子字符串为 <span class="string">"aaacb"</span>, <span class="string">"aacb"</span> 和 <span class="string">"acb"</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"abc"</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>3 &lt;= s.length &lt;= 5 x 10^4</code></li><li>s 只包含字符 a，b 和 c 。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-substrings-containing-all-three-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-substrings-containing-all-three-characters</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>每次滑动窗口，往后开始搜索，如果发现窗口满足包含有三种字符，则计算这时符合条件的子串的数目，同时将窗口向右移动一位。</li><li>发现题解中有一个非常好的解法dp，每次取满足三个字符的最小位，这个解法确实非常好。每次记录当前字符串的中<code>&#39;a&#39;,&#39;b&#39;,&#39;c&#39;</code>的最大位置。每次直接取最小的位置，最小位置往左叠加有 <code>(n+1)</code>的字串。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfSubstrings</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>((cnt[<span class="number">0</span>] == <span class="number">0</span> || cnt[<span class="number">1</span>] == <span class="number">0</span> || cnt[<span class="number">2</span>] == <span class="number">0</span>) &amp;&amp; r &lt; n<span class="number">-1</span>)&#123;</span><br><span class="line">                r++;</span><br><span class="line">                cnt[s[r]-<span class="string">'a'</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt[<span class="number">0</span>] &gt; <span class="number">0</span> &amp;&amp; cnt[<span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; cnt[<span class="number">2</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                res += n-r;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[s[i]-<span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfSubstrings</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr(<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            curr[s[i]-<span class="string">'a'</span>] = i+<span class="number">1</span>;</span><br><span class="line">            res += min(curr[<span class="number">0</span>],min(curr[<span class="number">1</span>],curr[<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5326-有效的快递序列数目"><a href="#5326-有效的快递序列数目" class="headerlink" title="5326. 有效的快递序列数目"></a>5326. 有效的快递序列数目</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3>给你 n 笔订单，每笔订单都需要快递服务。</li></ol></blockquote><p>请你统计所有有效的 收件/配送 序列的数目，确保第 i 个物品的配送服务 delivery(i) 总是在其收件服务 <code>pickup(i)</code> 之后。</p><p>由于答案可能很大，请返回答案对 10^9 + 7 取余的结果。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：只有一种序列 (P1, D1)，物品 <span class="number">1</span> 的配送服务（D1）在物品 <span class="number">1</span> 的收件服务（P1）后。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：所有可能的序列包括：</span><br><span class="line">(<span class="built_in">P1</span>,<span class="built_in">P2</span>,<span class="built_in">D1</span>,<span class="built_in">D2</span>)，(<span class="built_in">P1</span>,<span class="built_in">P2</span>,<span class="built_in">D2</span>,<span class="built_in">D1</span>)，(<span class="built_in">P1</span>,<span class="built_in">D1</span>,<span class="built_in">P2</span>,<span class="built_in">D2</span>)，(<span class="built_in">P2</span>,<span class="built_in">P1</span>,<span class="built_in">D1</span>,<span class="built_in">D2</span>)，(<span class="built_in">P2</span>,<span class="built_in">P1</span>,<span class="built_in">D2</span>,<span class="built_in">D1</span>) 和 (<span class="built_in">P2</span>,<span class="built_in">D2</span>,<span class="built_in">P1</span>,<span class="built_in">D1</span>)。</span><br><span class="line">(<span class="built_in">P1</span>,<span class="built_in">D2</span>,<span class="built_in">P2</span>,<span class="built_in">D1</span>) 是一个无效的序列，因为物品 <span class="number">2</span> 的收件服务（<span class="built_in">P2</span>）不应在物品 <span class="number">2</span> 的配送服务（<span class="built_in">D2</span>）之后。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">90</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= n &lt;= 500</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-all-valid-pickup-and-delivery-options" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-all-valid-pickup-and-delivery-options</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排列组合问题</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>我们可以看到每次1笔订单，则增加两个选项。比如现在有<code>n</code>个订单，则其排列可能为：<figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">x</span><span class="number">1</span>,<span class="keyword">x</span><span class="number">2</span>,<span class="keyword">x</span><span class="number">3</span>,...,xn,y<span class="number">1</span>,y<span class="number">2</span>,y<span class="number">3</span>,...,yn</span><br></pre></td></tr></table></figure>现在我们需要将<code>p(n+1),d(n+1)</code>加入到其中，我们可以看到总共有<code>2*n+1</code>为位置可以作为候选：<figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">x</span> p1 <span class="symbol">x</span> p2 ... <span class="symbol">x</span> d1 <span class="symbol">x</span> d2 <span class="symbol">x</span> d3 ... <span class="symbol">x</span> dn <span class="symbol">x</span></span><br></pre></td></tr></table></figure>其中<code>x</code>为可选的位置。<br>要门从所有可选的位置(2n+1)中选两个，然后d总是在p后面，或者从中选1个,而n笔订单的可能排序数目为`F(n)则这时可选择的位置为：</li></ol></blockquote><script type="math/tex; mode=display">F(n+1) = F(n)(C_{2*n+1}^{2} + C_{2*n+1}^{1})</script><p>按照这个计算，本题为基本的高中代数题目。</p><ol><li>注意溢出的问题，采用<code>long long</code>类型存储数组。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countOrders</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> x = (i<span class="number">-1</span>)*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            res = res*(x*(x<span class="number">-1</span>)/<span class="number">2</span>+x)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;20双周比赛&quot;&gt;&lt;a href=&quot;#20双周比赛&quot; class=&quot;headerlink&quot; title=&quot;20双周比赛&quot;&gt;&lt;/a&gt;20双周比赛&lt;/h1&gt;&lt;p&gt;第三题稍微有点难度，其余都比较简单&lt;/p&gt;&lt;h2 id=&quot;5323-根据数字二进制下-1-的数目排序&quot;&gt;&lt;a href=&quot;#5323-根据数字二进制下-1-的数目排序&quot; class=&quot;headerlink&quot; title=&quot;5323. 根据数字二进制下 1 的数目排序&quot;&gt;&lt;/a&gt;5323. 根据数字二进制下 1 的数目排序&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/code&gt; 。请你将数组中的元素按照其二进制表示中数字 1 的数目升序排序。&lt;/p&gt;&lt;p&gt;如果存在多个数字二进制中 1 的数目相同，则必须将它们按照数值大小升序排列。&lt;/p&gt;&lt;p&gt;请你返回排序后的数组。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] 是唯一一个有 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; 个 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 的数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;] 都有 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 个 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;] 有 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 个 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;] 有 &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; 个 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;按照 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 的个数排序得到的结果数组为 [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：数组中所有整数二进制下都只有 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 个 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ，所以你需要按照数值大小将它们排序。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 4：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 5：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 177 场周赛</title>
    <link href="http://yoursite.com/2020/02/23/133/"/>
    <id>http://yoursite.com/2020/02/23/133/</id>
    <published>2020-02-23T10:51:42.799Z</published>
    <updated>2020-02-23T10:51:55.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="177场双周比赛"><a href="#177场双周比赛" class="headerlink" title="177场双周比赛"></a>177场双周比赛</h1><p>177周的题目本身比较简单</p><h2 id="5169-日期之间隔几天"><a href="#5169-日期之间隔几天" class="headerlink" title="5169. 日期之间隔几天"></a>5169. 日期之间隔几天</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>请你编写一个程序来计算两个日期之间隔了多少天。</p><p>日期以字符串形式给出，格式为 <code>YYYY-MM-DD</code>，如示例所示。</p><p>示例 1：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">date1</span> = <span class="string">"2019-06-29"</span>, <span class="attr">date2</span> = <span class="string">"2019-06-30"</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">date1</span> = <span class="string">"2020-01-15"</span>, <span class="attr">date2</span> = <span class="string">"2019-12-31"</span></span><br><span class="line">输出：<span class="number">15</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-days-between-two-dates" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-days-between-two-dates</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力统计</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接使用库函数</li><li>直接计算两个日期距离<code>1971年</code>的天数，求两个天数之差的绝对值。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">daysBetweenDates</span><span class="params">(self, date1, date2)</span>:</span></span><br><span class="line">        d1 = datetime.datetime.strptime(date1,<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">        d2 = datetime.datetime.strptime(date2,<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">        <span class="keyword">return</span> abs((d1-d2).days)</span><br></pre></td></tr></table></figure><h2 id="5170-验证二叉树"><a href="#5170-验证二叉树" class="headerlink" title="5170. 验证二叉树"></a>5170. 验证二叉树</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>二叉树上有 n 个节点，按从<code>0</code> 到 <code>n - 1</code>编号，其中节点 i 的两个子节点分别是 <code>leftChild[i]</code>和 <code>rightChild[i]</code>。</p><p>只有 所有 节点能够形成且 只 形成 一颗 有效的二叉树时，返回<code>true</code>；否则返回 <code>false</code>。</p><p>如果节点 i 没有左子节点，那么 <code>leftChild[i]</code>就等于 -1。右子节点也符合该规则。</p><p>注意：节点没有值，本问题中仅仅使用节点编号。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, leftChild = [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-1</span>], rightChild = [<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, leftChild = [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">-1</span>], rightChild = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, leftChild = [<span class="number">1</span>,<span class="number">0</span>], rightChild = [<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">6</span>, leftChild = [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">-1</span>], rightChild = [<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">5</span>,<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= n &lt;= 10^4</code></li><li><code>leftChild.length == rightChild.length == n</code></li><li><code>-1 &lt;= leftChild[i], rightChild[i] &lt;= n - 1</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/validate-binary-tree-nodes" target="_blank" rel="noopener">https://leetcode-cn.com/problems/validate-binary-tree-nodes</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 判断节点的入度</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>统计每个节点的入度。</li><li>如果存在节点的入度大于1则返回<code>false</code>,且有且只有一个存在入度为<code>0</code>的节点。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">validateBinaryTreeNodes</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; leftChild, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; rightChild)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in(n,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(leftChild[i] != <span class="number">-1</span>) in[leftChild[i]]++;</span><br><span class="line">            <span class="keyword">if</span>(rightChild[i] != <span class="number">-1</span>) in[rightChild[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i] &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(in[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(root &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                root = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5171-最接近的因数"><a href="#5171-最接近的因数" class="headerlink" title="5171. 最接近的因数"></a>5171. 最接近的因数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数 <code>num</code>，请你找出同时满足下面全部要求的两个整数：<br>两数乘积等于 <code>num + 1</code> 或 <code>num + 2</code>.<br>以绝对差进行度量，两数大小最接近<br>你可以按任意顺序返回这两个整数。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">8</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">解释：对于 num + <span class="number">1</span> = <span class="number">9</span>，最接近的两个因数是 <span class="number">3</span> &amp; <span class="number">3</span>；对于 num + <span class="number">2</span> = <span class="number">10</span>, 最接近的两个因数是 <span class="number">2</span> &amp; <span class="number">5</span>，因此返回 <span class="number">3</span> &amp; <span class="number">3</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">123</span></span><br><span class="line">输出：[<span class="number">5</span>,<span class="number">25</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">999</span></span><br><span class="line">输出：[<span class="number">40</span>,<span class="number">25</span>]</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= num &lt;= 10^9</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/closest-divisors" target="_blank" rel="noopener">https://leetcode-cn.com/problems/closest-divisors</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力计算</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>直接从大开始向小遍历，很容易得到最大值。直接暴力即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; divisors(<span class="keyword">int</span> num)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="built_in">sqrt</span>(num); i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num%i == <span class="number">0</span>)&#123;</span><br><span class="line">                res = &#123;i,num/i&#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; closestDivisors(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">int</span> x1 = num + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x2 = num + <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; close1 = divisors(x1);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; close2 = divisors(x2);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(close1[<span class="number">0</span>]-close1[<span class="number">1</span>]) &gt; <span class="built_in">abs</span>(close2[<span class="number">0</span>] - close2[<span class="number">1</span>]))&#123;</span><br><span class="line">            <span class="keyword">return</span> close2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> close1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5172-形成三的最大倍数"><a href="#5172-形成三的最大倍数" class="headerlink" title="5172. 形成三的最大倍数"></a>5172. 形成三的最大倍数</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3>给你一个整数数组 <code>target</code> 。一开始，你有一个数组 A ，它的所有元素均为 1 ，你可以执行以下操作：</li></ol></blockquote><p>令 x 为你数组里所有元素的和<br>选择满足 <code>0 &lt;= i &lt; target.size</code>的任意下标 i ，并让 A 数组里下标为 i 处的值为 x 。<br>你可以重复该过程任意次<br>如果能从 A 开始构造出目标数组<code>target</code>，请你返回<code>True</code>，否则返回 <code>False</code>。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：从 [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>] 开始</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], 和为 <span class="number">3</span> ，选择下标 <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>], 和为 <span class="number">5</span>， 选择下标 <span class="number">2</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], 和为 <span class="number">9</span>， 选择下标 <span class="number">0</span></span><br><span class="line">[<span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>] 完成</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：不可能从 [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>] 出发构造目标数组。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>N == target.length</code></li><li><code>1 &lt;= target.length &lt;= 5 * 10^4</code></li><li><code>1 &lt;= target[i] &lt;= 10^9</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/construct-target-array-with-multiple-sums" target="_blank" rel="noopener">https://leetcode-cn.com/problems/construct-target-array-with-multiple-sums</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 余数问题</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>直接计算，算出所有数字总和的<code>sum</code>,去掉部分数组元素，让数组元素的总和能够被<code>3</code>整出。按照我们只需要去掉最小的数即可。分为三种情况：</li></ol><ul><li>如果<code>sum%3 == 0</code>,直接按照元素从大到小组成字符串，返回即可;</li><li>如果<code>sum%3 == 1</code>,去掉<code>x%3 == 1</code>的最小的一个元素，或者去掉<code>x%3 == 2</code>的最小的两个元素；</li><li>如果<code>sum%3 == 2</code>,去掉<code>x%3 == 2</code>的最小的一个元素，或者去掉<code>x%3 == 1</code>的最小的两个元素；</li><li>按照以上规则，优先去掉1个元素，其次尝试去掉2个元素，如果都不能满足，则返回空字符串；</li></ul><ol><li>dp，稍微比较复杂一些，设<code>dp[i][j]</code>为前<code>i</code>个元素组成的字符串且余数为<code>j</code>的最大的字符串：</li><li>详细的dp递推公式可以参考代码，比较简单。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; digits)</span></span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = digits.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(digits[i] &gt;= <span class="number">0</span>) res += digits[i] + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res.size() &gt; <span class="number">0</span> &amp;&amp; res[<span class="number">0</span>] == <span class="string">'0'</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; digits,<span class="keyword">int</span> x,<span class="keyword">int</span> tot)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tot &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(digits[i]%<span class="number">3</span> == x)&#123;</span><br><span class="line">                digits[i] = <span class="number">-1</span>;</span><br><span class="line">                tot--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tot == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">largestMultipleOfThree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = digits.size();</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">        sort(digits.begin(),digits.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            sum += digits[i];</span><br><span class="line">            cnt[digits[i]%<span class="number">3</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">3</span> == <span class="number">0</span>) <span class="keyword">return</span> str(digits);</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[<span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                remove(digits,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> str(digits);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt[<span class="number">2</span>] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                remove(digits,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">return</span> str(digits);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">3</span> == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[<span class="number">2</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                remove(digits,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> str(digits);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt[<span class="number">1</span>] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                remove(digits,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">return</span> str(digits);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> &amp; a,<span class="keyword">int</span> &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">maxStr</span><span class="params">(<span class="built_in">string</span>  a,<span class="built_in">string</span>  b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == <span class="string">'0'</span>) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">if</span>(b[<span class="number">0</span>] == <span class="string">'0'</span>) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">if</span>(a.size() &gt; b.size()) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">if</span>(b.size() &gt; a.size()) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">largestMultipleOfThree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = digits.size();</span><br><span class="line">        sort(digits.begin(),digits.end(),cmp);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; dp(<span class="number">3</span>,<span class="string">""</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; dp1(<span class="number">3</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; d : digits)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = <span class="string">'0'</span> + d;</span><br><span class="line">            dp1 = dp;</span><br><span class="line">            dp1[d%<span class="number">3</span>] = maxStr(dp[d%<span class="number">3</span>],dp[<span class="number">0</span>]+c);</span><br><span class="line">            <span class="keyword">if</span>(d%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                dp1[<span class="number">0</span>] = dp[<span class="number">0</span>] + c;</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">1</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">1</span>] = dp[<span class="number">1</span>] + c;</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">2</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">2</span>] = dp[<span class="number">2</span>] + c;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(d%<span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">2</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">0</span>] = maxStr(dp[<span class="number">0</span>],dp[<span class="number">2</span>] + c);</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">1</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">2</span>] = maxStr(dp[<span class="number">2</span>],dp[<span class="number">1</span>] + c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(d%<span class="number">3</span> == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">1</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">0</span>] = maxStr(dp[<span class="number">0</span>],dp[<span class="number">1</span>] + c);</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">2</span>].size() &gt; <span class="number">0</span>) dp1[<span class="number">1</span>] = maxStr(dp[<span class="number">1</span>],dp[<span class="number">2</span>] + c);</span><br><span class="line">            &#125;</span><br><span class="line">            dp = dp1;</span><br><span class="line">            <span class="keyword">if</span>(dp[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">'0'</span>) dp[<span class="number">0</span>] = <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">'0'</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;177场双周比赛&quot;&gt;&lt;a href=&quot;#177场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;177场双周比赛&quot;&gt;&lt;/a&gt;177场双周比赛&lt;/h1&gt;&lt;p&gt;177周的题目本身比较简单&lt;/p&gt;&lt;h2 id=&quot;5169-日期之间隔几天&quot;&gt;&lt;a href=&quot;#5169-日期之间隔几天&quot; class=&quot;headerlink&quot; title=&quot;5169. 日期之间隔几天&quot;&gt;&lt;/a&gt;5169. 日期之间隔几天&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;请你编写一个程序来计算两个日期之间隔了多少天。&lt;/p&gt;&lt;p&gt;日期以字符串形式给出，格式为 &lt;code&gt;YYYY-MM-DD&lt;/code&gt;，如示例所示。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;attr&quot;&gt;date1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;2019-06-29&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;date2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;2019-06-30&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;span class=&quot;attr&quot;&gt;date1&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;2020-01-15&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;date2&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;2019-12-31&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 176 场周赛</title>
    <link href="http://yoursite.com/2020/02/18/132/"/>
    <id>http://yoursite.com/2020/02/18/132/</id>
    <published>2020-02-18T15:09:55.548Z</published>
    <updated>2020-02-23T06:26:22.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="176场双周比赛"><a href="#176场双周比赛" class="headerlink" title="176场双周比赛"></a>176场双周比赛</h1><p>176周的题目比较难</p><h2 id="1351-统计有序矩阵中的负数"><a href="#1351-统计有序矩阵中的负数" class="headerlink" title="1351. 统计有序矩阵中的负数"></a>1351. 统计有序矩阵中的负数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个 <code>m * n</code> 的矩阵 <code>grid</code>，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。 </p><p>请你统计并返回 <code>grid</code> 中 负数 的数目。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">-1</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-2</span>],[<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>]]</span><br><span class="line">输出：<span class="number">8</span></span><br><span class="line">解释：矩阵中共有 <span class="number">8</span> 个负数。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">3</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[<span class="number">1</span>,<span class="number">-1</span>],[<span class="number">-1</span>,<span class="number">-1</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = <span class="string">[[-1]]</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li><li><code>`-100 &lt;= grid[i][j] &lt;= 100</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/count-negative-numbers-in-a-sorted-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-negative-numbers-in-a-sorted-matrix</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力统计</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>送分题，暴力统计即可</li></ol></blockquote><script type="math/tex; mode=display">\frac{1}{2}</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countNegatives</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = grid.size();</span><br><span class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] &lt; <span class="number">0</span>) res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1352-最后-K-个数的乘积"><a href="#1352-最后-K-个数的乘积" class="headerlink" title="1352. 最后 K 个数的乘积"></a>1352. 最后 K 个数的乘积</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>请你实现一个「数字乘积类」ProductOfNumbers，要求支持下述两种方法：</p><ol><li><code>add(int num)</code></li></ol><p>将数字 num 添加到当前数字列表的最后面。</p><ol><li><code>getProduct(int k)</code></li></ol><p>返回当前数字列表中，最后 k 个数字的乘积。<br>你可以假设当前列表中始终 至少 包含 k 个数字。<br>题目数据保证：任何时候，任一连续数字序列的乘积都在 32-bit 整数范围内，不会溢出。</p><p>示例：</p><p>输入：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"ProductOfNumbers"</span>,<span class="string">"add"</span>,<span class="string">"add"</span>,<span class="string">"add"</span>,<span class="string">"add"</span>,<span class="string">"add"</span>,<span class="string">"getProduct"</span>,<span class="string">"getProduct"</span>,<span class="string">"getProduct"</span>,<span class="string">"add"</span>,<span class="string">"getProduct"</span>]</span><br><span class="line">[[],[<span class="number">3</span>],[<span class="number">0</span>],[<span class="number">2</span>],[<span class="number">5</span>],[<span class="number">4</span>],[<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>],[<span class="number">8</span>],[<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">0</span>,<span class="literal">null</span>,<span class="number">32</span>]</span><br></pre></td></tr></table></figure><br>解释：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ProductOfNumbers productOfNumbers = new ProductOfNumbers();</span><br><span class="line">productOfNumbers.add(<span class="number">3</span>);        <span class="comment">// [3]</span></span><br><span class="line">productOfNumbers.add(<span class="number">0</span>);        <span class="comment">// [3,0]</span></span><br><span class="line">productOfNumbers.add(<span class="number">2</span>);        <span class="comment">// [3,0,2]</span></span><br><span class="line">productOfNumbers.add(<span class="number">5</span>);        <span class="comment">// [3,0,2,5]</span></span><br><span class="line">productOfNumbers.add(<span class="number">4</span>);        <span class="comment">// [3,0,2,5,4]</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">2</span>); <span class="comment">// 返回 20 。最后 2 个数字的乘积是 5 * 4 = 20</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">3</span>); <span class="comment">// 返回 40 。最后 3 个数字的乘积是 2 * 5 * 4 = 40</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">4</span>); <span class="comment">// 返回  0 。最后 4 个数字的乘积是 0 * 2 * 5 * 4 = 0</span></span><br><span class="line">productOfNumbers.add(<span class="number">8</span>);        <span class="comment">// [3,0,2,5,4,8]</span></span><br><span class="line">productOfNumbers.getProduct(<span class="number">2</span>); <span class="comment">// 返回 32 。最后 2 个数字的乘积是 4 * 8 = 32</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>add 和 getProduct</code>两种操作加起来总共不会超过 40000 次。</li><li><code>0 &lt;= num &lt;= 100</code></li><li><code>1 &lt;= k &lt;= 40000</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/product-of-the-last-k-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/product-of-the-last-k-numbers</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 利用滑动窗口</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>保存前<code>n</code>项的乘积，<code>s[k] = prev[n]/prev[n-k]</code>;</li><li>此题的关键在于处理前<code>n</code>项存在<code>0</code>的问题，。实际做题的时候没有处理好这个问题。</li><li>因为有0的问题，一旦乘数中还有<code>0</code>则表示该乘积结果为<code>0</code>;</li><li>我们保存前<code>n</code>项的乘积，一旦遇到乘数<code>0</code>则将保存的缓存的乘积数组清零，因为此时所有的查询结果都为<code>0</code>;</li><li>查询长度大于缓存长度则表示遇到了乘数<code>0</code>,直接返回<code>0</code>即可，否则我们利用滑动窗口除法即可得到结果。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductOfNumbers</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ProductOfNumbers() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">            prev.clear();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(prev.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            prev.push_back(num);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            prev.push_back(prev.back()*num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getProduct</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &gt; prev.size()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(k == prev.size()) <span class="keyword">return</span> prev.back();</span><br><span class="line">        <span class="keyword">return</span> prev.back()/prev[prev.size()-k<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prev;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your ProductOfNumbers object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * ProductOfNumbers* obj = new ProductOfNumbers();</span></span><br><span class="line"><span class="comment"> * obj-&gt;add(num);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;getProduct(k);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1353-最多可以参加的会议数目"><a href="#1353-最多可以参加的会议数目" class="headerlink" title="1353. 最多可以参加的会议数目"></a>1353. 最多可以参加的会议数目</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 <code>events</code>，其中<code>events[i] = [startDayi, endDayi]</code>，表示会议 i 开始于<code>startDayi</code>，结束于 <code>endDayi</code> 。</p><p>你可以在满足 <code>startDayi &lt;= d &lt;= endDayi</code> 中的任意一天 d 参加会议 i 。注意，一天只能参加一个会议。</p><p>请你返回你可以参加的 最大 会议数目。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：events = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：你可以参加所有的三个会议。</span><br><span class="line">安排会议的一种方案如上图。</span><br><span class="line">第 <span class="number">1</span> 天参加第一个会议。</span><br><span class="line">第 <span class="number">2</span> 天参加第二个会议。</span><br><span class="line">第 <span class="number">3</span> 天参加第三个会议。</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：events= [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：events = [[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：events = <span class="string">[[1,100000]]</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：events = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= events.length &lt;= 10^5</code></li><li><code>events[i].length == 2</code></li><li><code>1 &lt;= events[i][0] &lt;= events[i][1] &lt;= 10^5</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心算法</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>我们按照会议的开始时间先后进行排序，如果开始时间相同，则按照结束时间的先后进行排序。</li><li>我们用<code>last</code>表示最近一次参加会议的时间。</li><li>我们从优先级队列种取出一个会议<code>event :[start,end]</code>。有以下三种情况，如果当前 <code>event</code>的结束时间小于等于<code>last</code>,则表示该会议肯定无法参加，否则该会议则有机会参会，我们将所有不能参加的会议全部从队列种剔除掉。</li><li>从队列中取出<code>start &gt; last</code>的会议，我们分情况进行讨论，如果<code>start &gt; last</code>则按照贪心的优先参加该会议，参加会议后，此时<code>last</code>变为当前<code>start</code>,即<code>last = end</code>;</li><li>从队列中取出<code>start &lt;= last</code>的会议，我们认为该会议肯定只能从<code>[last + 1,end]</code>时间内才可以参加,我们直接将该会议更改为<code>[last+1,end]</code>,并将其再次加入到队列中，等待下一次可能参加的机会;</li><li>重复3、4、5步骤，直到队列为空即可。</li><li>该种解法优点是比较容易理解，缺点是时间复杂度很高，在某些特定的数据下会超时。</li><li>还有一种更好的解法按照会议结束时间排序。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxEvents</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; events)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = events.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;,cmp&gt; pq;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; e : events)&#123;</span><br><span class="line">            pq.push(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr = pq.top();</span><br><span class="line">            <span class="keyword">if</span>(curr[<span class="number">1</span>] &lt;= last)&#123;</span><br><span class="line">                pq.pop();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(curr[<span class="number">0</span>] &gt; last)&#123;</span><br><span class="line">                last = curr[<span class="number">0</span>];</span><br><span class="line">                res++;</span><br><span class="line">                pq.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(curr[<span class="number">0</span>] &lt;= last)&#123;</span><br><span class="line">                curr[<span class="number">0</span>] = last+<span class="number">1</span>;</span><br><span class="line">                pq.pop();</span><br><span class="line">                pq.push(curr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxEvents</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; events)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = events.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*按照结束时间先后进行排序*/</span></span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; pq; </span><br><span class="line">        sort(events.begin(),events.end(),cmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n || !pq.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!pq.empty() &amp;&amp; pq.top() &lt; last)&#123;</span><br><span class="line">                pq.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; n &amp;&amp; events[i][<span class="number">0</span>] == last)&#123;</span><br><span class="line">                pq.push(events[i][<span class="number">1</span>]);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!pq.empty())&#123;</span><br><span class="line">                res++;</span><br><span class="line">                pq.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            last++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1354-多次求和构造目标数组"><a href="#1354-多次求和构造目标数组" class="headerlink" title="1354. 多次求和构造目标数组"></a>1354. 多次求和构造目标数组</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>target</code> 。一开始，你有一个数组 A ，它的所有元素均为 1 ，你可以执行以下操作：</p><p>令 x 为你数组里所有元素的和<br>选择满足 <code>0 &lt;= i &lt; target.size</code>的任意下标 i ，并让 A 数组里下标为 i 处的值为 x 。<br>你可以重复该过程任意次<br>如果能从 A 开始构造出目标数组<code>target</code>，请你返回<code>True</code>，否则返回 <code>False</code>。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：从 [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>] 开始</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], 和为 <span class="number">3</span> ，选择下标 <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>], 和为 <span class="number">5</span>， 选择下标 <span class="number">2</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], 和为 <span class="number">9</span>， 选择下标 <span class="number">0</span></span><br><span class="line">[<span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>] 完成</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：不可能从 [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>] 出发构造目标数组。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = [<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>N == target.length</code></li><li><code>1 &lt;= target.length &lt;= 5 * 10^4</code></li><li><code>1 &lt;= target[i] &lt;= 10^9</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/construct-target-array-with-multiple-sums" target="_blank" rel="noopener">https://leetcode-cn.com/problems/construct-target-array-with-multiple-sums</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 递归逆序</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>逆推很容易想到，但是如何降低时间复杂度和剪枝不太容易想到。</li><li>如何快速的剪枝使得第一大的数比第二大的数要小，这个需要一点技巧，如果第一大的数比第二大的数大，那么此时最大的数每次会固定减去一个值，即<code>sum-max</code>即除最大数以外的所有数字的和。</li><li>最大数每次减去多少，那么该数组的和也会每次固定减去多少。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPossible</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt;&gt; pq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; t : target)&#123;</span><br><span class="line">            sum += t;</span><br><span class="line">            pq.push(t);</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!(pq.top() == <span class="number">1</span> &amp;&amp; sum == target.size()))&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = pq.top();</span><br><span class="line">            <span class="keyword">if</span>(curr &lt; <span class="number">0</span> || sum &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(curr &lt;= sum - curr) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(sum &lt;= target.size()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            pq.pop();</span><br><span class="line">            <span class="keyword">int</span> x = (curr-pq.top()<span class="number">-1</span>)/(sum-curr)+<span class="number">1</span>;</span><br><span class="line">            pq.push(curr-(sum-curr)*x);</span><br><span class="line">            sum -= (sum-curr)*x;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;176场双周比赛&quot;&gt;&lt;a href=&quot;#176场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;176场双周比赛&quot;&gt;&lt;/a&gt;176场双周比赛&lt;/h1&gt;&lt;p&gt;176周的题目比较难&lt;/p&gt;&lt;h2 id=&quot;1351-统计有序矩阵中的负数&quot;&gt;&lt;a href=&quot;#1351-统计有序矩阵中的负数&quot; class=&quot;headerlink&quot; title=&quot;1351. 统计有序矩阵中的负数&quot;&gt;&lt;/a&gt;1351. 统计有序矩阵中的负数&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个 &lt;code&gt;m * n&lt;/code&gt; 的矩阵 &lt;code&gt;grid&lt;/code&gt;，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。 &lt;/p&gt;&lt;p&gt;请你统计并返回 &lt;code&gt;grid&lt;/code&gt; 中 负数 的数目。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：grid = [[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-3&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：矩阵中共有 &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; 个负数。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：grid = [[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：grid = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 4：&lt;br&gt;&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：grid = &lt;span class=&quot;string&quot;&gt;[[-1]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 175 场周赛</title>
    <link href="http://yoursite.com/2020/02/09/131/"/>
    <id>http://yoursite.com/2020/02/09/131/</id>
    <published>2020-02-09T15:42:21.679Z</published>
    <updated>2020-02-12T02:01:29.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="175场双周比赛"><a href="#175场双周比赛" class="headerlink" title="175场双周比赛"></a>175场双周比赛</h1><p>最后一题，题目比较难，没做出来。</p><h2 id="5332-检查整数及其两倍数是否存在"><a href="#5332-检查整数及其两倍数是否存在" class="headerlink" title="5332. 检查整数及其两倍数是否存在"></a>5332. 检查整数及其两倍数是否存在</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code>，请你检查是否存在两个整数 N 和 M，满足 <code>N</code>是<code>M</code>的两倍（即，<code>N = 2 * M</code>）。</p><p>更正式地，检查是否存在两个下标<code>i</code> 和<code>j</code> 满足：</p><ul><li><code>i != j</code></li><li><code>0 &lt;= i, j &lt; arr.length</code></li><li><code>arr[i] == 2 * arr[j]</code></li></ul><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">10</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：N = <span class="number">10</span> 是 M = <span class="number">5</span> 的两倍，即 <span class="number">10</span> = <span class="number">2</span> * <span class="number">5</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">11</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：N = <span class="number">14</span> 是 M = <span class="number">7</span> 的两倍，即 <span class="number">14</span> = <span class="number">2</span> * <span class="number">7</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">11</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：在该情况下不存在 N 和 M 满足 N = <span class="number">2</span> * M 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>2 &lt;= arr.length &lt;= 500</code></li><li><code>-10^3 &lt;= arr[i] &lt;= 10^3</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/check-if-n-and-its-double-exist" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-if-n-and-its-double-exist</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力统计即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>暴力统计即可，注意元素<code>0</code>的两倍还是自身。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkIfExist</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">            cnt[arr[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == <span class="number">0</span> &amp;&amp; cnt[<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(cnt.count(arr[i]*<span class="number">2</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5333-制造字母异位词的最小步骤数"><a href="#5333-制造字母异位词的最小步骤数" class="headerlink" title="5333. 制造字母异位词的最小步骤数"></a>5333. 制造字母异位词的最小步骤数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你两个长度相等的字符串 s 和 t。每一个步骤中，你可以选择将 t 中的 任一字符 替换为 另一个字符。</p><p>返回使 t 成为 s 的字母异位词的最小步骤数。</p><p>字母异位词 指字母相同，但排列不同的字符串。</p><p>示例 1：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出：s = <span class="string">"bab"</span>, <span class="built_in">t</span> = <span class="string">"aba"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">提示：用 'b' 替换 <span class="built_in">t</span> 中的第一个 'a'，<span class="built_in">t</span> = <span class="string">"bba"</span> 是 s 的一个字母异位词。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出：s = <span class="string">"leetcode"</span>, t = <span class="string">"practice"</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">提示：用合适的字符替换 t 中的 'p', 'r', 'a', 'i' 和 'c'，使 t 变成 s 的字母异位词。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="attr">s</span> = <span class="string">"anagram"</span>, <span class="attr">t</span> = <span class="string">"mangaar"</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">提示：<span class="string">"anagram"</span> 和 <span class="string">"mangaar"</span> 本身就是一组字母异位词。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="attr">s</span> = <span class="string">"xxyyzz"</span>, <span class="attr">t</span> = <span class="string">"xxyyzz"</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出：<span class="attr">s</span> = <span class="string">"friend"</span>, <span class="attr">t</span> = <span class="string">"family"</span></span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 50000</code></li><li><code>s.length == t.length</code></li><li><code>s 和 t 只包含小写英文字母</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-number-of-steps-to-make-two-strings-anagram" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-number-of-steps-to-make-two-strings-anagram</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 统计差异的字母数目即可。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>直接统计字符串中字母频次的差异即可，即字符串<code>t</code>中存在多少个字母与字符串<code>s</code>不同；</li><li>题目中文翻译有问题，有个问题没有讲清楚。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSteps</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">26</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            cnt[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">            cnt[t[i]-<span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i] &gt; <span class="number">0</span>) res += <span class="built_in">abs</span>(cnt[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1348-推文计数"><a href="#1348-推文计数" class="headerlink" title="1348. 推文计数"></a>1348. 推文计数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>请你实现一个能够支持以下两种方法的推文计数类 <code>TweetCounts</code>：</p><ol><li><code>recordTweet(string tweetName, int time)</code></li></ol><ul><li>记录推文发布情况：用户 <code>tweetName</code>在 time（以 秒 为单位）时刻发布了一条推文。</li></ul><ol><li><code>getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime)</code></li></ol><ul><li>返回从开始时间<code>startTime</code>（以 秒 为单位）到结束时间 endTime（以 秒 为单位）内，每 分 minute，时 hour 或者 日 day （取决于 freq）内指定用户 tweetName 发布的推文总数。</li><li>freq 的值始终为 分 minute，时 hour 或者 日 day 之一，表示获取指定用户 tweetName 发布推文次数的时间间隔。</li><li>第一个时间间隔始终从 startTime 开始，因此时间间隔为<code>[startTime, startTime + delta*1&gt;,  [startTime + delta*1, startTime + delta*2&gt;, [startTime + delta*2, startTime + delta*3&gt;, ... , [startTime + delta*i, min(startTime + delta*(i+1), endTime + 1)&gt;，</code>其中 i 和 delta（取决于 freq）都是非负整数。</li></ul><p>示例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">"TweetCounts"</span>,<span class="string">"recordTweet"</span>,<span class="string">"recordTweet"</span>,<span class="string">"recordTweet"</span>,<span class="string">"getTweetCountsPerFrequency"</span>,<span class="string">"getTweetCountsPerFrequency"</span>,<span class="string">"recordTweet"</span>,<span class="string">"getTweetCountsPerFrequency"</span>]</span><br><span class="line">[[],[<span class="string">"tweet3"</span>,<span class="number">0</span>],[<span class="string">"tweet3"</span>,<span class="number">60</span>],[<span class="string">"tweet3"</span>,<span class="number">10</span>],[<span class="string">"minute"</span>,<span class="string">"tweet3"</span>,<span class="number">0</span>,<span class="number">59</span>],[<span class="string">"minute"</span>,<span class="string">"tweet3"</span>,<span class="number">0</span>,<span class="number">60</span>],[<span class="string">"tweet3"</span>,<span class="number">120</span>],[<span class="string">"hour"</span>,<span class="string">"tweet3"</span>,<span class="number">0</span>,<span class="number">210</span>]]</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[null,null,null,null,[<span class="number">2</span>],[<span class="number">2</span>,<span class="number">1</span>],null,[<span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">TweetCounts tweetCounts = new TweetCounts();</span><br><span class="line">tweetCounts.recordTweet(<span class="string">"tweet3"</span>, <span class="number">0</span>);</span><br><span class="line">tweetCounts.recordTweet(<span class="string">"tweet3"</span>, <span class="number">60</span>);</span><br><span class="line">tweetCounts.recordTweet(<span class="string">"tweet3"</span>, <span class="number">10</span>);                             <span class="comment">// "tweet3" 发布推文的时间分别是 0, 10 和 60 。</span></span><br><span class="line">tweetCounts.getTweetCountsPerFrequency(<span class="string">"minute"</span>, <span class="string">"tweet3"</span>, <span class="number">0</span>, <span class="number">59</span>); <span class="comment">// 返回 [2]。统计频率是每分钟（60 秒），因此只有一个有效时间间隔 [0,60&gt; - &gt; 2 条推文。</span></span><br><span class="line">tweetCounts.getTweetCountsPerFrequency(<span class="string">"minute"</span>, <span class="string">"tweet3"</span>, <span class="number">0</span>, <span class="number">60</span>); <span class="comment">// 返回 [2,1]。统计频率是每分钟（60 秒），因此有两个有效时间间隔 1) [0,60&gt; - &gt; 2 条推文，和 2) [60,61&gt; - &gt; 1 条推文。 </span></span><br><span class="line">tweetCounts.recordTweet(<span class="string">"tweet3"</span>, <span class="number">120</span>);                            <span class="comment">// "tweet3" 发布推文的时间分别是 0, 10, 60 和 120 。</span></span><br><span class="line">tweetCounts.getTweetCountsPerFrequency(<span class="string">"hour"</span>, <span class="string">"tweet3"</span>, <span class="number">0</span>, <span class="number">210</span>);  <span class="comment">// 返回 [4]。统计频率是每小时（3600 秒），因此只有一个有效时间间隔 [0,211&gt; - &gt; 4 条推文。</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>同时考虑<code>recordTweet</code> 和 <code>getTweetCountsPerFrequency</code>，最多有 10000 次操作。</li><li><code>0 &lt;= time, startTime, endTime &lt;= 10^9</code></li><li><code>0 &lt;= endTime - startTime &lt;= 10^4</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/tweet-counts-per-frequency" target="_blank" rel="noopener">https://leetcode-cn.com/problems/tweet-counts-per-frequency</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 题目讲的太麻烦了</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>统计所有用户的发推文的时间序列即可。由于题目中涉及到时间统计，肯定会用到二分查找，我们用<code>set</code>来保存时间序列，会按照时间的大小进行自动排序。</li><li>按照频率依次统计每个间隔里面发的推文的数目即可。基本的二分查找即可实现，没有太多难度。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TweetCounts</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TweetCounts() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordTweet</span><span class="params">(<span class="built_in">string</span> tweetName, <span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cnt[tweetName].insert(time);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getFreq</span><span class="params">(<span class="built_in">string</span> freq)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(freq == <span class="string">"minute"</span>) <span class="keyword">return</span> <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(freq == <span class="string">"hour"</span>) <span class="keyword">return</span> <span class="number">3600</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">86400</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getTweetCountsPerFrequency(<span class="built_in">string</span> freq, <span class="built_in">string</span> tweetName, <span class="keyword">int</span> startTime, <span class="keyword">int</span> endTime) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> f = getFreq(freq);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = startTime; i &lt;= endTime; i = i + f)&#123;</span><br><span class="line">            <span class="keyword">auto</span> l = cnt[tweetName].lower_bound(i);</span><br><span class="line">            <span class="keyword">auto</span> r = cnt[tweetName].lower_bound(min(i+f,endTime+<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(l != r)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; cnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your TweetCounts object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * TweetCounts* obj = new TweetCounts();</span></span><br><span class="line"><span class="comment"> * obj-&gt;recordTweet(tweetName,time);</span></span><br><span class="line"><span class="comment"> * vector&lt;int&gt; param_2 = obj-&gt;getTweetCountsPerFrequency(freq,tweetName,startTime,endTime);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5335-参加考试的最大学生数"><a href="#5335-参加考试的最大学生数" class="headerlink" title="5335. 参加考试的最大学生数"></a>5335. 参加考试的最大学生数</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个 m * n 的矩阵 <code>seats</code> 表示教室中的座位分布。如果座位是坏的（不可用），就用 ‘#’ 表示；否则，用 ‘.’ 表示。</p><p>学生可以看到左侧、右侧、左上、右上这四个方向上紧邻他的学生的答卷，但是看不到直接坐在他前面或者后面的学生的答卷。请你计算并返回该考场可以容纳的一起参加考试且无法作弊的最大学生人数。</p><p>学生必须坐在状况良好的座位上。</p><p>示例 1：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：seats = [[<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">              [<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"."</span>],</span><br><span class="line">              [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：教师可以让 <span class="number">4</span> 个学生坐在可用的座位上，这样他们就无法在考试中作弊。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：seats = [[<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">              [<span class="string">"#"</span>,<span class="string">"#"</span>],</span><br><span class="line">              [<span class="string">"#"</span>,<span class="string">"."</span>],</span><br><span class="line">              [<span class="string">"#"</span>,<span class="string">"#"</span>],</span><br><span class="line">              [<span class="string">"."</span>,<span class="string">"#"</span>]]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：让所有学生坐在可用的座位上。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：seats = [[<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"#"</span>],</span><br><span class="line">              [<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"."</span>],</span><br><span class="line">              [<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>],</span><br><span class="line">              [<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"#"</span>,<span class="string">"."</span>],</span><br><span class="line">              [<span class="string">"#"</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"."</span>,<span class="string">"#"</span>]]</span><br><span class="line">输出：<span class="number">10</span></span><br><span class="line">解释：让学生坐在第 <span class="number">1</span>、<span class="number">3</span> 和 <span class="number">5</span> 列的可用座位上。</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>seats</code> 只包含字符 ‘.’ 和’#’</li><li><code>m == seats.length</code></li><li><code>n == seats[i].length</code></li><li><code>1 &lt;= m &lt;= 8</code></li><li><code>1 &lt;= n &lt;= 8</code><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><a href="https://leetcode-cn.com/problems/maximum-students-taking-exam/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-students-taking-exam/</a><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 题目非常有新意，状态压缩dp</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3></blockquote></li></ul><ol><li>题目还是非常有新意的，状态压缩dp。</li><li>仔细分析一下，实际上每一行仅仅与上一行有关系，即本行的座位分布仅仅会影响到下一行的座位分布，我们用位图来代替每一行的座位。</li><li>状态检查，仔细检查每一行的座位分布，有两种情况下该座位不能被分配，一是本身该座位就是坏的，二是本身该座位相邻座位存在学生分配。如果有这两种情况，则该行的状态为非法的。</li><li>仔细还需要检查本行<code>i</code>的状态<code>mask(i)</code>与前一行状态<code>mask(2)</code>的分配问题。即左上方与右上方不能同时存在学生。则需要仔细检查。</li><li>递推公式为：<code>dp[i][mask1] = dp[i-1][mask2] + count[i][mask1]</code>,其中<code>count[i][mask1]</code>代表第<code>i</code>行在座位分布<code>mask1</code>下的学生总数目。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">bitTst</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((mask&amp;(<span class="number">1</span>&lt;&lt;n))&gt;&gt;n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">check1</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bitTst(mask,i<span class="number">-1</span>)&amp;&amp;bitTst(mask,i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">check2</span><span class="params">(<span class="keyword">int</span> mask1,<span class="keyword">int</span> mask2,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; bitTst(mask1,i) &amp;&amp; bitTst(mask2,i<span class="number">-1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span> &lt; n &amp;&amp; bitTst(mask1,i) &amp;&amp; bitTst(mask2,i+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxStudents</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; seats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = seats.size();</span><br><span class="line">        <span class="keyword">int</span> col = seats[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(row+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>&lt;&lt;col,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial row*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span>&lt;&lt;col); ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!check1(j,col))&#123;</span><br><span class="line">                    dp[i][j] = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; col; ++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(bitTst(j,k)&amp;&amp;seats[i<span class="number">-1</span>][k] == <span class="string">'#'</span>)&#123;</span><br><span class="line">                       count = <span class="number">-1</span>;</span><br><span class="line">                       <span class="keyword">continue</span>; </span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">if</span>(bitTst(j,k)) count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(count == <span class="number">-1</span>)&#123;</span><br><span class="line">                    dp[i][j] = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; (<span class="number">1</span>&lt;&lt;col); ++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[i<span class="number">-1</span>][k] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(check2(j,k,col))&#123;</span><br><span class="line">                        dp[i][j] = max(dp[i][j],dp[i<span class="number">-1</span>][k] + count);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res = max(res,dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;175场双周比赛&quot;&gt;&lt;a href=&quot;#175场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;175场双周比赛&quot;&gt;&lt;/a&gt;175场双周比赛&lt;/h1&gt;&lt;p&gt;最后一题，题目比较难，没做出来。&lt;/p&gt;&lt;h2 id=&quot;5332-检查整数及其两倍数是否存在&quot;&gt;&lt;a href=&quot;#5332-检查整数及其两倍数是否存在&quot; class=&quot;headerlink&quot; title=&quot;5332. 检查整数及其两倍数是否存在&quot;&gt;&lt;/a&gt;5332. 检查整数及其两倍数是否存在&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/code&gt;，请你检查是否存在两个整数 N 和 M，满足 &lt;code&gt;N&lt;/code&gt;是&lt;code&gt;M&lt;/code&gt;的两倍（即，&lt;code&gt;N = 2 * M&lt;/code&gt;）。&lt;/p&gt;&lt;p&gt;更正式地，检查是否存在两个下标&lt;code&gt;i&lt;/code&gt; 和&lt;code&gt;j&lt;/code&gt; 满足：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i != j&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= i, j &amp;lt; arr.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr[i] == 2 * arr[j]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 19 场双周赛</title>
    <link href="http://yoursite.com/2020/02/09/130/"/>
    <id>http://yoursite.com/2020/02/09/130/</id>
    <published>2020-02-09T09:42:31.040Z</published>
    <updated>2020-02-09T09:42:38.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19场双周比赛"><a href="#19场双周比赛" class="headerlink" title="19场双周比赛"></a>19场双周比赛</h1><p>双周赛一般情况下，题目比较简单。</p><h2 id="5311-将数字变成-0-的操作次数"><a href="#5311-将数字变成-0-的操作次数" class="headerlink" title="5311. 将数字变成 0 的操作次数"></a>5311. 将数字变成 0 的操作次数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个非负整数<code>num</code>，请你返回将它变成 0 所需要的步数。 如果当前数字是偶数，你需要把它除以 2 ；否则，减去 1 。<br>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">14</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：</span><br><span class="line">步骤 <span class="number">1</span>) <span class="number">14</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">7</span> 。</span><br><span class="line">步骤 <span class="number">2</span>） <span class="number">7</span> 是奇数，减 <span class="number">1</span> 得到 <span class="number">6</span> 。</span><br><span class="line">步骤 <span class="number">3</span>） <span class="number">6</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">3</span> 。</span><br><span class="line">步骤 <span class="number">4</span>） <span class="number">3</span> 是奇数，减 <span class="number">1</span> 得到 <span class="number">2</span> 。</span><br><span class="line">步骤 <span class="number">5</span>） <span class="number">2</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">1</span> 。</span><br><span class="line">步骤 <span class="number">6</span>） <span class="number">1</span> 是奇数，减 <span class="number">1</span> 得到 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">8</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：</span><br><span class="line">步骤 <span class="number">1</span>） <span class="number">8</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">4</span> 。</span><br><span class="line">步骤 <span class="number">2</span>） <span class="number">4</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">2</span> 。</span><br><span class="line">步骤 <span class="number">3</span>） <span class="number">2</span> 是偶数，除以 <span class="number">2</span> 得到 <span class="number">1</span> 。</span><br><span class="line">步骤 <span class="number">4</span>） <span class="number">1</span> 是奇数，减 <span class="number">1</span> 得到 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">123</span></span><br><span class="line">输出：<span class="number">12</span></span><br></pre></td></tr></table></figure><br>提示：</p><a id="more"></a><ul><li><code>0 &lt;= num &lt;= 10^6</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接计算</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>递归或者非递归均可。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfSteps</span> <span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(num%<span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> numberOfSteps(num/<span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> numberOfSteps(num<span class="number">-1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5312-大小为-K-且平均值大于等于阈值的子数组数目"><a href="#5312-大小为-K-且平均值大于等于阈值的子数组数目" class="headerlink" title="5312. 大小为 K 且平均值大于等于阈值的子数组数目"></a>5312. 大小为 K 且平均值大于等于阈值的子数组数目</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code>和两个整数<code>k</code>和 <code>threshold</code> 。</p><p>请你返回长度为<code>k</code>且平均值大于等于<code>threshold</code>的子数组数目。<br>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">8</span>], k = <span class="number">3</span>, threshold = <span class="number">4</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：子数组 [<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>] 和 [<span class="number">5</span>,<span class="number">5</span>,<span class="number">8</span>] 的平均值分别为 <span class="number">4</span>，<span class="number">5</span> 和 <span class="number">6</span> 。其他长度为 <span class="number">3</span> 的子数组的平均值都小于 <span class="number">4</span> （threshold 的值)。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], k = <span class="number">1</span>, threshold = <span class="number">0</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>], k = <span class="number">3</span>, threshold = <span class="number">5</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：前 <span class="number">6</span> 个长度为 <span class="number">3</span> 的子数组平均值都大于 <span class="number">5</span> 。注意平均值不是整数。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>], k = <span class="number">7</span>, threshold = <span class="number">7</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>], k = <span class="number">4</span>, threshold = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 10^5</code></li><li><code>1 &lt;= arr[i] &lt;= 10^4</code></li><li><code>1 &lt;= k &lt;= arr.length</code></li><li><code>0 &lt;= threshold &lt;= 10^4</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>长度为<code>k</code>的滑动窗口统计子数组的总和，如果子数组的和大于<code>k*threshold</code>,则该子数组满足条件。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numOfSubarrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> k, <span class="keyword">int</span> threshold)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            left += arr[i];</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= k<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(left &gt;= threshold*k) res++;</span><br><span class="line">                left -= arr[i-k+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5313-时钟指针的夹角"><a href="#5313-时钟指针的夹角" class="headerlink" title="5313. 时钟指针的夹角"></a>5313. 时钟指针的夹角</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你两个数 <code>hour</code> 和<code>minutes</code>。请你返回在时钟上，由给定时间的时针和分针组成的较小角的角度（60 单位制）。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：hour = <span class="number">12</span>, minutes = <span class="number">30</span></span><br><span class="line">输出：<span class="number">165</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：hour = <span class="number">3</span>, minutes = <span class="number">30</span></span><br><span class="line">输出；<span class="number">75</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：hour = <span class="number">3</span>, minutes = <span class="number">15</span></span><br><span class="line">输出：<span class="number">7.5</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：hour = <span class="number">4</span>, minutes = <span class="number">50</span></span><br><span class="line">输出：<span class="number">155</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：hour = <span class="number">12</span>, minutes = <span class="number">0</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= hour &lt;= 12</code></li><li><code>0 &lt;= minutes &lt;= 59</code></li><li>与标准答案误差在 <code>10^-5</code> 以内的结果都被视为正确结果。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/angle-between-hands-of-a-clock" target="_blank" rel="noopener">https://leetcode-cn.com/problems/angle-between-hands-of-a-clock</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 求两个角度的夹角</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>先求出时针的夹角<code>00:00</code>的。时钟的夹角为：<script type="math/tex; mode=display">\angle A = \frac{h+m/60}{12}*2\pi \\\angle A = 30h + \frac{m}{2}</script></li><li>求出分针的与<code>00:00</code>的夹角。<script type="math/tex; mode=display">\angle B = \frac{m}{60}*2\pi \\\angle B = 60m</script></li><li>将两个角度取差的绝对值，即为分针与时针的夹角。因为题目中求出较小的夹角，即求出小于180度的夹角，我们取<code>abs(A-B), 360-abs(A-B)</code>中较小的夹角即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">angleClock</span><span class="params">(<span class="keyword">int</span> hour, <span class="keyword">int</span> minutes)</span> </span>&#123;</span><br><span class="line">        hour = hour%<span class="number">12</span>;</span><br><span class="line">        <span class="keyword">double</span> h = hour*<span class="number">30</span> + <span class="keyword">double</span>(minutes)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">double</span> m = minutes*<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> min(<span class="number">360</span> - <span class="built_in">abs</span>(h-m),<span class="built_in">abs</span>(h-m)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5314-跳跃游戏-IV"><a href="#5314-跳跃游戏-IV" class="headerlink" title="5314. 跳跃游戏 IV"></a>5314. 跳跃游戏 IV</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组<code>arr</code> ，你一开始在数组的第一个元素处（下标为 0）。</p><p>每一步，你可以从下标 i 跳到下标：</p><ul><li><code>i + 1</code> 满足：<code>i + 1 &lt; arr.length</code></li><li><code>i - 1</code>满足：<code>i - 1 &gt;= 0</code></li><li><code>j</code>满足：<code>arr[i] == arr[j]</code> 且 <code>i != j</code></li></ul><p>请你返回到达数组最后一个元素的下标处所需的 <code>最少操作次数</code> 。<br>注意：任何时候你都不能跳到数组外面。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">100</span>,<span class="number">-23</span>,<span class="number">-23</span>,<span class="number">404</span>,<span class="number">100</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">404</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：那你需要跳跃 <span class="number">3</span> 次，下标依次为 <span class="number">0</span> --&gt; <span class="number">4</span> --&gt; <span class="number">3</span> --&gt; <span class="number">9</span> 。下标 <span class="number">9</span> 为数组的最后一个元素的下标。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：一开始就在最后一个元素处，所以你不需要跳跃。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：你可以直接从下标 <span class="number">0</span> 处跳到下标 <span class="number">7</span> 处，也就是数组的最后一个元素处。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">22</span>,<span class="number">13</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 5 * 10^4</code></li><li><code>-10^8 &lt;= arr[i] &lt;= 10^8</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/jump-game-iv" target="_blank" rel="noopener">https://leetcode-cn.com/problems/jump-game-iv</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>看到类似的跳跃题目，基本上就是固定的几种解法，<code>dfs</code>,<code>bfs</code>,<code>dp</code>.</li><li>具体的题目具体分析，首先看一下<code>dp</code>,能够使用<code>dp</code>的最重要的两个特征，当前状态与后续无关，当前状态能够通过前序状态进行推出，本题中虽然可以看到当前状态能够满足前序状态推出，但是后续状态的时间复杂度会非常高，所以排除<code>dp</code>这种解法。</li><li>本题的数据数量为<code>5 * 10^4</code>的数量级，用DFS如果不进行剪枝，则容易造成超时。且一般情况下<code>DFS</code>与<code>BFS</code>时可以相互转换的。本题还是采用<code>BFS</code>求最小距离的方法，每次当前元素<code>curr</code>扩展下一跳，下一条有三种选择<code>(curr-1,curr+1,same as curr)</code>,直到首先到达终点为止。</li><li>本题的<code>corner</code>在于每次选择相同元素作为下一条时，要将相同元素去掉，否则所有的相同元素都会被遍历<code>m</code>次方。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minJumps</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cnt;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit(n,<span class="literal">false</span>);  </span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            cnt[arr[i]].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        visit[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        qu.push(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> sz = qu.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> curr = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                <span class="keyword">if</span>(curr == n<span class="number">-1</span>) <span class="keyword">return</span> step;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> next : cnt[arr[curr]])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!visit[next])&#123;</span><br><span class="line">                        qu.push(next);</span><br><span class="line">                        visit[next] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cnt.erase(arr[curr]);</span><br><span class="line">                <span class="keyword">if</span>(curr + <span class="number">1</span> &lt; n &amp;&amp; !visit[curr+<span class="number">1</span>])&#123;</span><br><span class="line">                    qu.push(curr+<span class="number">1</span>);</span><br><span class="line">                    visit[curr+<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(curr - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; !visit[curr<span class="number">-1</span>])&#123;</span><br><span class="line">                    qu.push(curr<span class="number">-1</span>);</span><br><span class="line">                    visit[curr<span class="number">-1</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;19场双周比赛&quot;&gt;&lt;a href=&quot;#19场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;19场双周比赛&quot;&gt;&lt;/a&gt;19场双周比赛&lt;/h1&gt;&lt;p&gt;双周赛一般情况下，题目比较简单。&lt;/p&gt;&lt;h2 id=&quot;5311-将数字变成-0-的操作次数&quot;&gt;&lt;a href=&quot;#5311-将数字变成-0-的操作次数&quot; class=&quot;headerlink&quot; title=&quot;5311. 将数字变成 0 的操作次数&quot;&gt;&lt;/a&gt;5311. 将数字变成 0 的操作次数&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个非负整数&lt;code&gt;num&lt;/code&gt;，请你返回将它变成 0 所需要的步数。 如果当前数字是偶数，你需要把它除以 2 ；否则，减去 1 。&lt;br&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：num = &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 是奇数，减 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; 是奇数，减 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 是奇数，减 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：num = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 是偶数，除以 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;步骤 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;） &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 是奇数，减 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 得到 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：num = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;提示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 174 场周赛</title>
    <link href="http://yoursite.com/2020/01/31/129/"/>
    <id>http://yoursite.com/2020/01/31/129/</id>
    <published>2020-01-31T04:58:49.415Z</published>
    <updated>2020-02-02T08:38:37.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="174场双周比赛"><a href="#174场双周比赛" class="headerlink" title="174场双周比赛"></a>174场双周比赛</h1><p>整体题目不算很难，也没有特别偏的题目，难度非常适合面试，难度适中，质量很高。</p><h2 id="5328-方阵中战斗力最弱的-K-行"><a href="#5328-方阵中战斗力最弱的-K-行" class="headerlink" title="5328. 方阵中战斗力最弱的 K 行"></a>5328. 方阵中战斗力最弱的 K 行</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个大小为 <code>m * n</code>的方阵 <code>mat</code>，方阵由若干军人和平民组成，分别用 0 和 1 表示。</p><p>请你返回方阵中战斗力最弱的 <code>k</code> 行的索引，按从最弱到最强排序。</p><p>如果第<code>i</code> 行的军人数量少于第 <code>j</code> 行，或者两行军人数量相同但<code>i</code>小于<code>j</code>，那么我们认为第<code>i</code>行的战斗力比第<code>j</code>行弱。</p><a id="more"></a><p>军人 总是 排在一行中的靠前位置，也就是说 1 总是出现在 0 之前。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = </span><br><span class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]], </span><br><span class="line">k = <span class="number">3</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">解释：</span><br><span class="line">每行中的军人数目：</span><br><span class="line">行 <span class="number">0</span> -&gt; <span class="number">2</span> </span><br><span class="line">行 <span class="number">1</span> -&gt; <span class="number">4</span> </span><br><span class="line">行 <span class="number">2</span> -&gt; <span class="number">1</span> </span><br><span class="line">行 <span class="number">3</span> -&gt; <span class="number">2</span> </span><br><span class="line">行 <span class="number">4</span> -&gt; <span class="number">5</span> </span><br><span class="line">从最弱到最强对这些行排序后得到 [<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = </span><br><span class="line">[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]], </span><br><span class="line">k = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">解释： </span><br><span class="line">每行中的军人数目：</span><br><span class="line">行 <span class="number">0</span> -&gt; <span class="number">1</span> </span><br><span class="line">行 <span class="number">1</span> -&gt; <span class="number">4</span> </span><br><span class="line">行 <span class="number">2</span> -&gt; <span class="number">1</span> </span><br><span class="line">行 <span class="number">3</span> -&gt; <span class="number">1</span> </span><br><span class="line">从最弱到最强对这些行排序后得到 [<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>2 &lt;= n, m &lt;= 100</code></li><li><code>1 &lt;= k &lt;= m</code></li><li><code>matrix[i][j] 不是 0 就是 1</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力统计排序即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>题目数据量非常小，直接统计每行的数据，然后排序，取前<code>k</code>个即可。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removePalindromeSub</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> rev = s;</span><br><span class="line">        reverse(rev.begin(),rev.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(s == rev) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5329-数组大小减半"><a href="#5329-数组大小减半" class="headerlink" title="5329. 数组大小减半"></a>5329. 数组大小减半</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组<code>arr</code>。你可以从中选出一个整数集合，并删除这些整数在数组中的每次出现。<br>返回 至少 能删除数组中的一半整数的整数集合的最小大小。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：选择 &#123;<span class="number">3</span>,<span class="number">7</span>&#125; 使得结果数组为 [<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>]、长度为 <span class="number">5</span>（原数组长度的一半）。</span><br><span class="line">大小为 <span class="number">2</span> 的可行集合有 &#123;<span class="number">3</span>,<span class="number">5</span>&#125;,&#123;<span class="number">3</span>,<span class="number">2</span>&#125;,&#123;<span class="number">5</span>,<span class="number">2</span>&#125;。</span><br><span class="line">选择 &#123;<span class="number">2</span>,<span class="number">7</span>&#125; 是不可行的，它的结果数组为 [<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]，新数组长度大于原数组的二分之一。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：我们只能选择集合 &#123;<span class="number">7</span>&#125;，结果数组为空。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">9</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 10^5</code></li><li><code>arr.length</code> 为偶数</li><li><code>1 &lt;= arr[i] &lt;= 10^5</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/reduce-array-size-to-the-half" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reduce-array-size-to-the-half</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 贪心</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>统计所有数字出现的次数，按照次数大小进行排序；</li><li>从数组中按照出现频率大小取出元素，直到取出元素的总数大于元素总数的一半即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSetSize</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count;</span><br><span class="line">        <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; a : arr )&#123;</span><br><span class="line">            cnt[a]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; x : cnt)&#123;</span><br><span class="line">            count.push_back(x.second);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(count.begin(),count.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = count.size()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            curr += count[i];</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">if</span>(curr &gt;= arr.size()/<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5330-分裂二叉树的最大乘积"><a href="#5330-分裂二叉树的最大乘积" class="headerlink" title="5330. 分裂二叉树的最大乘积"></a>5330. 分裂二叉树的最大乘积</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一棵二叉树，它的根为<code>root</code>。请你删除 1 条边，使二叉树分裂成两棵子树，且它们子树和的乘积尽可能大。</p><p>由于答案可能会很大，请你将结果对 10^9 + 7 取模后再返回。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">输出：<span class="number">110</span></span><br><span class="line">解释：删除红色的边，得到 <span class="number">2</span> 棵子树，和分别为 <span class="number">11</span> 和 <span class="number">10</span> 。它们的乘积是 <span class="number">110</span> （<span class="number">11</span>*<span class="number">10</span>）</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">输出：<span class="number">90</span></span><br><span class="line">解释：移除红色的边，得到 <span class="number">2</span> 棵子树，和分别是 <span class="number">15</span> 和 <span class="number">6</span> 。它们的乘积为 <span class="number">90</span> （<span class="number">15</span>*<span class="number">6</span>）</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1025</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>每棵树最多有 <code>50000</code> 个节点，且至少有 2 个节点。</li><li>每个节点的值在<code>[1, 10000]</code>之间。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-product-of-splitted-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-product-of-splitted-binary-tree</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>首先求得整颗树的节点元素之和；</li><li>递归遍历每一个子树，求出当前子树的和，用当前子树的和乘以剩余的数（总和减去当前子树的和）即判断当前的积是否为最大值。</li><li>本题的难点在于最大值会溢出，且返回取模的数，因此我们每次进行递归时直接保留最大积的两个乘数，最后返回结果时再进行取模。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(TreeNode * root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l = sum(root-&gt;left);</span><br><span class="line">        <span class="keyword">int</span> r = sum(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> l + r + root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode * root,ll allsum,ll &amp; left,ll &amp; right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ll lsum = dfs(root-&gt;left,allsum,left,right);</span><br><span class="line">        <span class="keyword">if</span>(lsum*(allsum-lsum) &gt; left*right)&#123;</span><br><span class="line">            left = lsum;</span><br><span class="line">            right = allsum-lsum;</span><br><span class="line">        &#125;</span><br><span class="line">        ll rsum = dfs(root-&gt;right,allsum,left,right);</span><br><span class="line">        <span class="keyword">if</span>(rsum*(allsum-rsum) &gt; left*right)&#123;</span><br><span class="line">            left = rsum;</span><br><span class="line">            right = allsum - rsum;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> lsum + rsum + root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        ll allsum = sum(root);</span><br><span class="line">        ll left = <span class="number">0</span>;</span><br><span class="line">        ll right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        dfs(root,allsum,left,right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (left*right)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5331-跳跃游戏-V"><a href="#5331-跳跃游戏-V" class="headerlink" title="5331. 跳跃游戏 V"></a>5331. 跳跃游戏 V</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code> 和一个整数 <code>d</code> 。每一步你可以从下标 i 跳到：<br><figure class="highlight plain"><figcaption><span>+ x``` ，其中``` i + x < arr.length``` 且``` 0 < x <</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```i - x``` ，其中 ```i - x &gt;= 0``` 且``` 0 &lt; x &lt;= d``` 。</span><br><span class="line">除此以外，你从下标 i 跳到下标 j 需要满足：```arr[i] &gt; arr[j] ```且``` arr[i] &gt; arr[k]``` ，其中下标 ```k``` 是所有 i 到 j 之间的数字（更正式的，```min(i, j) &lt; k &lt; max(i, j)```）。</span><br><span class="line">你可以选择数组的任意下标开始跳跃。请你返回你 最多 可以访问多少个下标。</span><br><span class="line">请注意，任何时刻你都不能跳到数组的外面。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br></pre></td></tr></table></figure><br>输入：arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2<br>输出：4<br>解释：你可以从下标 10 出发，然后如上图依次经过 10 —&gt; 8 —&gt; 6 —&gt; 7 。<br>注意，如果你从下标 6 开始，你只能跳到下标 7 处。你不能跳到下标 5 处因为 13 &gt; 9 。你也不能跳到下标 4 处，因为下标 5 在下标 4 和 6 之间且 13 &gt; 9 。<br>类似的，你不能从下标 3 处跳到下标 2 或者下标 1 处。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><br>输入：arr = [3,3,3,3,3], d = 3<br>输出：1<br>解释：你可以从任意下标处开始且你永远无法跳到任何其他坐标。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">3</span>：</span><br></pre></td></tr></table></figure><br>输入：arr = [7,6,5,4,3,2,1], d = 1<br>输出：7<br>解释：从下标 0 处开始，你可以按照数值从大到小，访问所有的下标。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">4</span>：</span><br></pre></td></tr></table></figure><br>输入：arr = [7,1,7,1,7,1], d = 2<br>输出：2<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">5</span>：</span><br></pre></td></tr></table></figure><br>输入：arr = [66], d = 1<br>输出：1<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提示：</span><br><span class="line">+ ```<span class="number">1</span> &lt;= arr.length &lt;= <span class="number">1000</span></span><br></pre></td></tr></table></figure></p><ul><li><code>1 &lt;= arr[i] &lt;= 10^5</code></li><li><code>1 &lt;= d &lt;= arr.length</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/jump-game-v" target="_blank" rel="noopener">https://leetcode-cn.com/problems/jump-game-v</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DP</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>按照题目的要求，从<code>i</code>处起跳的范围为<code>[i-d,i+d]</code>,且跳跃到<code>j</code>时，必须满足<code>arr[i] &gt; arr[j]</code>.且有限制条件<code>arr[j]</code>必须大于所有从<code>i</code>到<code>j-1</code>或者<code>j+1</code>的所有元素。</li><li>本题刚开始拿到后，准备用<code>BFS</code>来解题的，后来自己推算了一下，发现时间复杂度会存在问题，并且<code>BFS</code>剪枝的问题不好解决。</li><li>后来仔细分析了一下，发现本题中的关键在于只能从大的元素往小的元素进行跳跃。所以其实最小的元素开始的最大跳数一定是1.</li><li>将数组按照从大到小进行排序，设<code>dp[i]</code>代表跳到当前元素<code>i</code>时的最大跳数。则<script type="math/tex; mode=display">dp[i] = max(dp[i],dp[pre] + 1)</script>关键在于确定元素<code>i</code>的上一跳时哪个元素，从规律上看上一跳的源数字的大小肯定大于 <code>arr[i]</code>.通过仔细分析，首先上一跳元素<code>prev</code>的范围肯定存在于<code>[i-d,i+d]</code>,且<code>arr[prev] &gt; arr[i]</code>,且<code>arr[prev]</code>一定大于<code>[prev+1,i]</code>或者<code>[i,prev-1]</code>区间的所有元素。这样就能构成递推公式，即<code>dp[i]</code>只与比<code>dp[i]</code>大的元素之间发生交集，因此可以采用<code>dp</code>来做解答。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pii &amp; a,pii &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.first == b.first)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxJumps</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;pii&gt; prev;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            prev.push_back(make_pair(arr[i],i));</span><br><span class="line">        &#125;</span><br><span class="line">        sort(prev.begin(),prev.end(),cmp);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> maxV = prev[i].first;</span><br><span class="line">            <span class="keyword">int</span> curr = prev[i].second;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= d &amp;&amp; curr + j &lt; n; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[curr+j] &gt; maxV)&#123;</span><br><span class="line">                    maxV = arr[curr+j];</span><br><span class="line">                    dp[curr] = max(dp[curr],dp[curr+j]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maxV = prev[i].first;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= d &amp;&amp; curr - j &gt;= <span class="number">0</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[curr-j] &gt; maxV)&#123;</span><br><span class="line">                    maxV = arr[curr-j];</span><br><span class="line">                    dp[curr] = max(dp[curr],dp[curr-j]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            res = max(res,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;174场双周比赛&quot;&gt;&lt;a href=&quot;#174场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;174场双周比赛&quot;&gt;&lt;/a&gt;174场双周比赛&lt;/h1&gt;&lt;p&gt;整体题目不算很难，也没有特别偏的题目，难度非常适合面试，难度适中，质量很高。&lt;/p&gt;&lt;h2 id=&quot;5328-方阵中战斗力最弱的-K-行&quot;&gt;&lt;a href=&quot;#5328-方阵中战斗力最弱的-K-行&quot; class=&quot;headerlink&quot; title=&quot;5328. 方阵中战斗力最弱的 K 行&quot;&gt;&lt;/a&gt;5328. 方阵中战斗力最弱的 K 行&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个大小为 &lt;code&gt;m * n&lt;/code&gt;的方阵 &lt;code&gt;mat&lt;/code&gt;，方阵由若干军人和平民组成，分别用 0 和 1 表示。&lt;/p&gt;&lt;p&gt;请你返回方阵中战斗力最弱的 &lt;code&gt;k&lt;/code&gt; 行的索引，按从最弱到最强排序。&lt;/p&gt;&lt;p&gt;如果第&lt;code&gt;i&lt;/code&gt; 行的军人数量少于第 &lt;code&gt;j&lt;/code&gt; 行，或者两行军人数量相同但&lt;code&gt;i&lt;/code&gt;小于&lt;code&gt;j&lt;/code&gt;，那么我们认为第&lt;code&gt;i&lt;/code&gt;行的战斗力比第&lt;code&gt;j&lt;/code&gt;行弱。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Codeforces】 C. NEKO&#39;s Maze Game</title>
    <link href="http://yoursite.com/2020/01/29/128/"/>
    <id>http://yoursite.com/2020/01/29/128/</id>
    <published>2020-01-29T04:27:07.557Z</published>
    <updated>2020-01-29T08:39:01.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codeforces"><a href="#codeforces" class="headerlink" title="codeforces"></a>codeforces</h1><p>题目比leetcode质量高多了。</p><h2 id="C-NEKO’s-Maze-Game"><a href="#C-NEKO’s-Maze-Game" class="headerlink" title="C. NEKO’s Maze Game"></a>C. NEKO’s Maze Game</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>NEKO#ΦωΦ has just got a new maze game on her PC!</p><p>The game’s main puzzle is a maze, in the forms of a <code>2×n</code> rectangle grid. NEKO’s task is to lead a Nekomimi girl from cell<code>(1,1)</code> to the gate at <code>(2,n)</code> and escape the maze. The girl can only move between cells sharing a common side.</p><a id="more"></a><p>However, at some moments during the game, some cells may change their state: either from normal ground to lava (which forbids movement into that cell), or vice versa (which makes that cell passable again). Initially all cells are of the ground type.</p><p>After hours of streaming, NEKO finally figured out there are only q such moments: the i-th moment toggles the state of cell<code>(ri,ci)</code> (either from ground to lava or vice versa).</p><p>Knowing this, NEKO wonders, after each of the q moments, whether it is still possible to move from cell <code>(1,1)</code> to cell<code>(2,n)</code> without going through any lava cells.</p><p>Although NEKO is a great streamer and gamer, she still can’t get through quizzes and problems requiring large amount of Brain Power. Can you help her?</p><p>Input<br>The first line contains integers<code>n, q (2≤n≤1e5, 1≤q≤1e5)</code>.</p><p>The i-th of q following lines contains two integers ri, ci <code>(1≤ri≤2, 1≤ci≤n)</code>, denoting the coordinates of the cell to be flipped at the i-th moment.</p><p>It is guaranteed that cells<code>(1,1)</code>and <code>(2,n)</code>never appear in the query list.</p><p>Output<br>For each moment, if it is possible to travel from cell <code>(1,1)</code> to cell <code>(2,n)</code>, print “Yes”, otherwise print “No”. There should be exactly q answers, one after every update.</p><p>You can print the words in any case (either lowercase, uppercase or mixed).</p><p>Example<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">input</span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line">output</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">No</span><br><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Note</span><br></pre></td></tr></table></figure><br>We’ll crack down the example test here:</p><p>After the first query, the girl still able to reach the goal. One of the shortest path ways should be: <code>(1,1)→(1,2)→(1,3)→(1,4)→(1,5)→(2,5)</code>.<br>After the second query, it’s impossible to move to the goal, since the farthest cell she could reach is<code>(1,3)</code>.<br>After the fourth query, the<code>(2,3)</code> is not blocked, but now all the<code>4-th</code>column is blocked, so she still can’t reach the goal.<br>After the fifth query, the column barrier has been lifted, thus she can go to the final goal again.</p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://codeforces.com/contest/1293/problem/C" target="_blank" rel="noopener">https://codeforces.com/contest/1293/problem/C</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 给定一个<code>2xn</code>矩阵，每次输入数据对矩阵元素进行翻转</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>统计所有能够构成阻塞的关键节点的数量。</li><li>每次通过周围四个方向来判断，新加入的方块是否构成切断路径的关键节点。</li><li>如果存在关键节点，则此次路径就不通，否则路径是可达的。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max_col,count;</span><br><span class="line">    <span class="keyword">int</span> bad_neighbors = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">set</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; cells;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;max_col,&amp;count);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> row,col;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;row,&amp;col);</span><br><span class="line">        row--;</span><br><span class="line">        col--;</span><br><span class="line">        <span class="keyword">bool</span> was_forbidden  = cells.count(make_pair(row,col));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r = row - <span class="number">1</span>; r &lt;= row + <span class="number">1</span> ; r++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = col - <span class="number">1</span>; c &lt;= col + <span class="number">1</span>; c++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(r &lt; <span class="number">0</span> || r &gt;= <span class="number">2</span> || c &lt; <span class="number">0</span> || c &gt;= max_col) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(r == row) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(cells.count(make_pair(r,c)))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(was_forbidden)&#123;</span><br><span class="line">                        bad_neighbors--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        bad_neighbors++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(was_forbidden)&#123;</span><br><span class="line">            cells.erase(make_pair(row,col));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cells.insert(make_pair(row,col));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bad_neighbors &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;codeforces&quot;&gt;&lt;a href=&quot;#codeforces&quot; class=&quot;headerlink&quot; title=&quot;codeforces&quot;&gt;&lt;/a&gt;codeforces&lt;/h1&gt;&lt;p&gt;题目比leetcode质量高多了。&lt;/p&gt;&lt;h2 id=&quot;C-NEKO’s-Maze-Game&quot;&gt;&lt;a href=&quot;#C-NEKO’s-Maze-Game&quot; class=&quot;headerlink&quot; title=&quot;C. NEKO’s Maze Game&quot;&gt;&lt;/a&gt;C. NEKO’s Maze Game&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;NEKO#ΦωΦ has just got a new maze game on her PC!&lt;/p&gt;&lt;p&gt;The game’s main puzzle is a maze, in the forms of a &lt;code&gt;2×n&lt;/code&gt; rectangle grid. NEKO’s task is to lead a Nekomimi girl from cell&lt;code&gt;(1,1)&lt;/code&gt; to the gate at &lt;code&gt;(2,n)&lt;/code&gt; and escape the maze. The girl can only move between cells sharing a common side.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="codeforces" scheme="http://yoursite.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 18 场周赛</title>
    <link href="http://yoursite.com/2020/01/27/127/"/>
    <id>http://yoursite.com/2020/01/27/127/</id>
    <published>2020-01-27T07:19:06.186Z</published>
    <updated>2020-01-27T15:41:17.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18场双周比赛"><a href="#18场双周比赛" class="headerlink" title="18场双周比赛"></a>18场双周比赛</h1><p>最后一题不太会做</p><h2 id="5155-数组序号转换"><a href="#5155-数组序号转换" class="headerlink" title="5155. 数组序号转换"></a>5155. 数组序号转换</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>arr</code> ，请你将数组中的每个元素替换为它们排序后的序号。</p><p>序号代表了一个元素有多大。序号编号的规则如下：</p><p>序号从 1 开始编号。<br>一个元素越大，那么序号越大。如果两个元素相等，那么它们的序号相同。<br>每个数字的序号都应该尽可能地小。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">40</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">解释：<span class="number">40</span> 是最大的元素。 <span class="number">10</span> 是最小的元素。 <span class="number">20</span> 是第二小的数字。 <span class="number">30</span> 是第三小的数字。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">解释：所有元素有相同的序号。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">37</span>,<span class="number">12</span>,<span class="number">28</span>,<span class="number">9</span>,<span class="number">100</span>,<span class="number">56</span>,<span class="number">80</span>,<span class="number">5</span>,<span class="number">12</span>]</span><br><span class="line">输出：[<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li><code>0 &lt;= arr.length &lt;= 105</code></li><li><code>-109 &lt;= arr[i] &lt;= 109</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/rank-transform-of-an-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rank-transform-of-an-array</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>排序即可，为了方便用了<code>map</code>自动排序功能。</li><li>排序然后依次输出即可确定排序位置。</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrayRankTransform(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; count;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            count[arr[i]].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; x : count)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; curr : count[x.first])&#123;</span><br><span class="line">                res[curr] = idx;</span><br><span class="line">            &#125;</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5151-破坏回文串"><a href="#5151-破坏回文串" class="headerlink" title="5151. 破坏回文串"></a>5151. 破坏回文串</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个回文字符串 <code>palindrome</code> ，请你将其中 一个 字符用任意小写英文字母替换，使得结果字符串的字典序最小，且 不是 回文串。</p><p>请你返回结果字符串。如果无法做到，则返回一个空串。</p><p>示例 1：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">palindrome</span> = <span class="string">"abccba"</span></span><br><span class="line">输出：<span class="string">"aaccba"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">palindrome</span> = <span class="string">"a"</span></span><br><span class="line">输出：<span class="string">""</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= palindrome.length &lt;= 1000</code></li><li><code>palindrome</code>只包含小写英文字母。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/break-a-palindrome" target="_blank" rel="noopener">https://leetcode-cn.com/problems/break-a-palindrome</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 替换</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>题目中要求字典序最小，我们只需要找到第一个不为<code>a</code>的元素进行替换成<code>a</code>即可。</li><li>如果所有的回文元素都为<code>a</code>的话，我们替换字符串最后一个字符为<code>b</code>即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">breakPalindrome</span><span class="params">(<span class="built_in">string</span> palindrome)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = palindrome.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(palindrome.size() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">while</span>(l &lt; r &amp;&amp; palindrome[l] == <span class="string">'a'</span>)&#123;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">            palindrome[l] = <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">return</span> palindrome;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            palindrome[palindrome.size()<span class="number">-1</span>] = <span class="string">'b'</span>;</span><br><span class="line">            <span class="keyword">return</span> palindrome;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="1329-将矩阵按对角线排序"><a href="#1329-将矩阵按对角线排序" class="headerlink" title="1329. 将矩阵按对角线排序"></a>1329. 将矩阵按对角线排序</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个 <code>m * n</code> 的整数矩阵 <code>mat</code> ，请你将同一条对角线上的元素（从左上到右下）按升序排序后，返回排好序的矩阵。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li><li><code>1 &lt;= mat[i][j] &lt;= 100</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/sort-the-matrix-diagonally" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sort-the-matrix-diagonally</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 按照对角线进行访问即可</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>将每个对角线元素取出，然后排序；排序之后再将元素按照从小到大放回去即可；<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; diagonalSort(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat) &#123;</span><br><span class="line">        <span class="keyword">int</span> row = mat.size();</span><br><span class="line">        <span class="keyword">int</span> col = mat[<span class="number">0</span>].size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; line;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = i,y = <span class="number">0</span>; x &lt; row &amp;&amp; y &lt; col;x++,y++)&#123;</span><br><span class="line">                line.push_back(mat[x][y]);</span><br><span class="line">            &#125;</span><br><span class="line">            sort(line.begin(),line.end());</span><br><span class="line">            <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = i,y = <span class="number">0</span>; x &lt; row &amp;&amp; y &lt; col;x++,y++)&#123;</span><br><span class="line">                mat[x][y] = line[curr];</span><br><span class="line">                curr++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; col; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; line;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>,y = i; x &lt; row &amp;&amp; y &lt; col;x++,y++)&#123;</span><br><span class="line">                line.push_back(mat[x][y]);</span><br><span class="line">            &#125;</span><br><span class="line">            sort(line.begin(),line.end());</span><br><span class="line">            <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>,y = i; x &lt; row &amp;&amp; y &lt; col;x++,y++)&#123;</span><br><span class="line">                mat[x][y] = line[curr];</span><br><span class="line">                curr++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5154-翻转子数组得到最大的数组值"><a href="#5154-翻转子数组得到最大的数组值" class="headerlink" title="5154. 翻转子数组得到最大的数组值"></a>5154. 翻转子数组得到最大的数组值</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个整数数组 <code>nums</code> 。「 数组值」定义为所有满足<code>0 &lt;= i &lt; nums.length-1</code>的 <code>|nums[i]-nums[i+1]|</code> 的和。</p><p>你可以选择给定数组的任意子数组，并将该子数组翻转。但你只能执行这个操作 一次 。</p><p>请你找到可行的最大 数组值 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">10</span></span><br><span class="line">解释：通过翻转子数组 [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>] ，数组变成 [<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>] ，数组值为 <span class="number">10</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">24</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="number">68</span></span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 3*10^4</code></li><li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/reverse-subarray-to-maximize-array-value" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-subarray-to-maximize-array-value</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 对绝对值进行展开，题目确实不怎么会，主要是数学问题。</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>对绝对值进行展开之后的符号运算。</li><li>首先我们我们可以很容易算出，如果数组不进行翻转或者直接从<code>0~n-1</code>进行反转，则这时数组的数组值为：<script type="math/tex; mode=display">F(N) = \sum^{n}_{i=1}abs(nums[i]-nums[i-1])</script></li><li>如果数组中第i个元素与第j个元素之间进行了翻转，则数组的值为：<script type="math/tex; mode=display">F(i,j) = F(N) - abs(nums[i+1]-nums[i]) - abs(nums[j+1]-nums[j]) + abs(nums[j+1]-nums[i]) + abs(nums[j]-nums[i-1])</script></li><li>我们所需要做的时确定<code>i</code>和<code>j</code>.我们实际上把后缀式进行数学符号展开，去掉绝对值。<script type="math/tex; mode=display">S = abs(nums[j+1]-nums[i]) + abs(nums[j]-nums[i-1]) \\S1 = nums[j+1] - nums[i] + nums[j] - nums[i-1] \\S2 = -nums[j+1] + nums[i] + nums[j] - nums[i-1] \\S3 = nums[j+1] - nums[i]  - nums[j] + nums[i-1] \\S4 = -nums[j+1] + nums[i] - nums[j] + nums[i-1] \\</script>对上述的多项式进行合并:<script type="math/tex; mode=display">S11 = (nums[j+1] + nums[j]) - (nums[i] + nums[i-1]) \\S21 = (-nums[j+1] + nums[j]) -(-nums[i] + nums[i-1]) \\S31 = (nums[j+1] - nums[j]) - (nums[i]  - nums[i-1]) \\S41 = (-nums[j+1] - nums[j]) - (-nums[i] - nums[i-1]) \\</script>求上述四种多项式的最大值即可。</li><li>我们只需要求出前数组前<code>j-1</code>项中所列的四种多项式的最大值即可。与我们当前的式子进行相加。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxValueAfterReverse</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            ans += <span class="built_in">abs</span>(nums[i] - nums[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        ll raw = ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            ans = max(ans,raw+<span class="built_in">abs</span>(nums[n<span class="number">-1</span>]-nums[i<span class="number">-1</span>])-<span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            ans = max(ans,raw+<span class="built_in">abs</span>(nums[i+<span class="number">1</span>]-nums[<span class="number">0</span>])-<span class="built_in">abs</span>(nums[i+<span class="number">1</span>]-nums[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> mx1 = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> mx2 = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> mx3 = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> mx4 = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            ans = max(ans,raw + mx1 + nums[i] + nums[i<span class="number">-1</span>] - <span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            ans = max(ans,raw + mx2 - nums[i] + nums[i<span class="number">-1</span>] - <span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            ans = max(ans,raw + mx3 + nums[i] - nums[i<span class="number">-1</span>] - <span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            ans = max(ans,raw + mx4 - nums[i] - nums[i<span class="number">-1</span>] - <span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            mx1 = max(mx1,-(nums[i]+nums[i<span class="number">-1</span>])-<span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            mx2 = max(mx2,-(-nums[i]+nums[i<span class="number">-1</span>])-<span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            mx3 = max(mx3,-(nums[i]-nums[i<span class="number">-1</span>])-<span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">            mx4 = max(mx4,-(-nums[i]-nums[i<span class="number">-1</span>])-<span class="built_in">abs</span>(nums[i]-nums[i<span class="number">-1</span>]));</span><br><span class="line">        &#125; </span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;18场双周比赛&quot;&gt;&lt;a href=&quot;#18场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;18场双周比赛&quot;&gt;&lt;/a&gt;18场双周比赛&lt;/h1&gt;&lt;p&gt;最后一题不太会做&lt;/p&gt;&lt;h2 id=&quot;5155-数组序号转换&quot;&gt;&lt;a href=&quot;#5155-数组序号转换&quot; class=&quot;headerlink&quot; title=&quot;5155. 数组序号转换&quot;&gt;&lt;/a&gt;5155. 数组序号转换&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/code&gt; ，请你将数组中的每个元素替换为它们排序后的序号。&lt;/p&gt;&lt;p&gt;序号代表了一个元素有多大。序号编号的规则如下：&lt;/p&gt;&lt;p&gt;序号从 1 开始编号。&lt;br&gt;一个元素越大，那么序号越大。如果两个元素相等，那么它们的序号相同。&lt;br&gt;每个数字的序号都应该尽可能地小。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt; 是最大的元素。 &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; 是最小的元素。 &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; 是第二小的数字。 &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt; 是第三小的数字。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：所有元素有相同的序号。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 3：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：arr = [&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;56&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 173 场周赛</title>
    <link href="http://yoursite.com/2020/01/26/126/"/>
    <id>http://yoursite.com/2020/01/26/126/</id>
    <published>2020-01-26T14:38:04.582Z</published>
    <updated>2020-01-27T15:37:51.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="173场双周比赛"><a href="#173场双周比赛" class="headerlink" title="173场双周比赛"></a>173场双周比赛</h1><p>题目整体比较简单，不如昨天的题目难。</p><h2 id="5319-删除回文子序列"><a href="#5319-删除回文子序列" class="headerlink" title="5319. 删除回文子序列"></a>5319. 删除回文子序列</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>s</code>，它仅由字母<code>&#39;a&#39;</code> 和<code>&#39;b&#39;</code>组成。每一次删除操作都可以从 <code>s</code>中删除一个回文 子序列。</p><p>返回删除给定字符串中所有字符（字符串为空）的最小删除次数。</p><p>「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。</p><a id="more"></a><p>「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"ababa"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：字符串本身就是回文序列，只需要删除一次。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"abb"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="string">"abb"</span> -&gt; <span class="string">"bb"</span> -&gt; <span class="string">""</span>. </span><br><span class="line">先删除回文子序列 <span class="string">"a"</span>，然后再删除 <span class="string">"bb"</span>。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"baabb"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="string">"baabb"</span> -&gt; <span class="string">"b"</span> -&gt; <span class="string">""</span>. </span><br><span class="line">先删除回文子序列 <span class="string">"baab"</span>，然后再删除 <span class="string">"b"</span>。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">""</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>0 &lt;= s.length &lt;= 1000</code></li><li><code>s 仅包含字母 &#39;a&#39;  和 &#39;b&#39;</code></li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/remove-palindromic-subsequences" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-palindromic-subsequences</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 题目比较混淆</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>题目描述有点问题，容易造成混淆，回文子串和回文子序列。</li><li>字符串中只包括<code>a</code>和<code>b</code>,只有三种情况，字符串为空，只需要0次即可；</li><li>字符串为回文字符串，只需要<code>1</code>次，否则只需要两次，一次删除<code>a</code>,一次删除<code>b</code>.</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removePalindromeSub</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> rev = s;</span><br><span class="line">        reverse(rev.begin(),rev.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(s == rev) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5320-餐厅过滤器"><a href="#5320-餐厅过滤器" class="headerlink" title="5320. 餐厅过滤器"></a>5320. 餐厅过滤器</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个餐馆信息数组 <code>restaurants</code>，其中  <code>restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]</code>。你必须使用以下三个过滤器来过滤这些餐馆信息。</p><p>其中素食者友好过滤器 <code>veganFriendly</code> 的值可以为 <code>true</code> 或者 <code>false</code>，如果为 true 就意味着你应该只包括 <code>veganFriendlyi</code>为 true 的餐馆，为 false 则意味着可以包括任何餐馆。此外，我们还有最大价格<code>maxPrice</code>和最大距离 maxDistance 两个过滤器，它们分别考虑餐厅的价格因素和距离因素的最大值。</p><p>过滤后返回餐馆的 id，按照 <code>rating</code> 从高到低排序。如果 rating 相同，那么按 id 从高到低排序。简单起见， veganFriendlyi 和 <code>veganFriendly</code>为 true 时取值为 1，为 false 时，取值为 0 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：restaurants = [[<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">40</span>,<span class="number">10</span>],[<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">30</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>],[<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">15</span>,<span class="number">1</span>]], veganFriendly = <span class="number">1</span>, maxPrice = <span class="number">50</span>, maxDistance = <span class="number">10</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>] </span><br><span class="line">解释： </span><br><span class="line">这些餐馆为：</span><br><span class="line">餐馆 <span class="number">1</span> [id=<span class="number">1</span>, rating=<span class="number">4</span>, veganFriendly=<span class="number">1</span>, price=<span class="number">40</span>, distance=<span class="number">10</span>]</span><br><span class="line">餐馆 <span class="number">2</span> [id=<span class="number">2</span>, rating=<span class="number">8</span>, veganFriendly=<span class="number">0</span>, price=<span class="number">50</span>, distance=<span class="number">5</span>]</span><br><span class="line">餐馆 <span class="number">3</span> [id=<span class="number">3</span>, rating=<span class="number">8</span>, veganFriendly=<span class="number">1</span>, price=<span class="number">30</span>, distance=<span class="number">4</span>]</span><br><span class="line">餐馆 <span class="number">4</span> [id=<span class="number">4</span>, rating=<span class="number">10</span>, veganFriendly=<span class="number">0</span>, price=<span class="number">10</span>, distance=<span class="number">3</span>]</span><br><span class="line">餐馆 <span class="number">5</span> [id=<span class="number">5</span>, rating=<span class="number">1</span>, veganFriendly=<span class="number">1</span>, price=<span class="number">15</span>, distance=<span class="number">1</span>] </span><br><span class="line">在按照 veganFriendly = <span class="number">1</span>, maxPrice = <span class="number">50</span> 和 maxDistance = <span class="number">10</span> 进行过滤后，我们得到了餐馆 <span class="number">3</span>, 餐馆 <span class="number">1</span> 和 餐馆 <span class="number">5</span>（按评分从高到低排序）。</span><br><span class="line">``` </span><br><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><br>输入：restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10<br>输出：[4,3,2,1,5]<br>解释：餐馆与示例 1 相同，但在 veganFriendly = 0 的过滤条件下，应该考虑所有餐馆.<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 <span class="number">3</span>：</span><br></pre></td></tr></table></figure><br>输入：restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3<br>输出：[4,5]<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">+ ```<span class="number">1</span> &lt;= restaurants.length &lt;= <span class="number">10</span>^<span class="number">4</span></span><br></pre></td></tr></table></figure></p><ul><li><code>restaurants[i].length == 5</code></li><li><code>1 &lt;= idi, ratingi, pricei, distancei &lt;= 10^5</code></li><li><code>1 &lt;= maxPrice, maxDistance &lt;= 10^5</code></li><li><code>veganFriendlyi</code> 和 <code>veganFriendly</code> 的值为 0 或 1 所有 idi 各不相同。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance" target="_blank" rel="noopener">https://leetcode-cn.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 排序</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>按照题目要求过滤，然后就行排序即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>] == b[<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; filterRestaurants(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; restaurants, <span class="keyword">int</span> veganFriendly, <span class="keyword">int</span> maxPrice, <span class="keyword">int</span> maxDistance) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; filter;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : restaurants)&#123;</span><br><span class="line">            <span class="keyword">if</span>(veganFriendly&amp;&amp;v[<span class="number">2</span>])||!veganFriendly</span><br><span class="line">            <span class="keyword">if</span>(veganFriendly == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(v[<span class="number">2</span>] == <span class="number">1</span> &amp;&amp; v[<span class="number">3</span>] &lt;= maxPrice &amp;&amp; v[<span class="number">4</span>] &lt;= maxDistance)&#123;</span><br><span class="line">                    filter.push_back(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(v[<span class="number">3</span>] &lt;= maxPrice &amp;&amp; v[<span class="number">4</span>] &lt;= maxDistance)&#123;</span><br><span class="line">                    filter.push_back(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        sort(filter.begin(),filter.end(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : filter)&#123;</span><br><span class="line">            res.push_back(v[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5321-阈值距离内邻居最少的城市"><a href="#5321-阈值距离内邻居最少的城市" class="headerlink" title="5321. 阈值距离内邻居最少的城市"></a>5321. 阈值距离内邻居最少的城市</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>有 n 个城市，按从 0 到 n-1 编号。给你一个边数组<code>edges</code>，其中 <code>edges[i] = [fromi, toi, weighti]</code>代表 <code>fromi</code>和 <code>toi</code>两个城市之间的双向加权边，距离阈值是一个整数 <code>distanceThreshold</code>。</p><p>返回能通过某些路径到达其他城市数目最少、且路径距离 最大 为 <code>distanceThreshold</code>的城市。如果有多个这样的城市，则返回编号最大的城市。</p><p>注意，连接城市 i 和 j 的路径的距离等于沿该路径的所有边的权重之和。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, edges = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]], distanceThreshold = <span class="number">4</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：城市分布图如上。</span><br><span class="line">每个城市阈值距离 distanceThreshold = <span class="number">4</span> 内的邻居城市分别是：</span><br><span class="line">城市 <span class="number">0</span> -&gt; [城市 <span class="number">1</span>, 城市 <span class="number">2</span>] </span><br><span class="line">城市 <span class="number">1</span> -&gt; [城市 <span class="number">0</span>, 城市 <span class="number">2</span>, 城市 <span class="number">3</span>] </span><br><span class="line">城市 <span class="number">2</span> -&gt; [城市 <span class="number">0</span>, 城市 <span class="number">1</span>, 城市 <span class="number">3</span>] </span><br><span class="line">城市 <span class="number">3</span> -&gt; [城市 <span class="number">1</span>, 城市 <span class="number">2</span>] </span><br><span class="line">城市 <span class="number">0</span> 和 <span class="number">3</span> 在阈值距离 <span class="number">4</span> 以内都有 <span class="number">2</span> 个邻居城市，但是我们必须返回城市 <span class="number">3</span>，因为它的编号最大。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, edges = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>]], distanceThreshold = <span class="number">2</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：城市分布图如上。 </span><br><span class="line">每个城市阈值距离 distanceThreshold = <span class="number">2</span> 内的邻居城市分别是：</span><br><span class="line">城市 <span class="number">0</span> -&gt; [城市 <span class="number">1</span>] </span><br><span class="line">城市 <span class="number">1</span> -&gt; [城市 <span class="number">0</span>, 城市 <span class="number">4</span>] </span><br><span class="line">城市 <span class="number">2</span> -&gt; [城市 <span class="number">3</span>, 城市 <span class="number">4</span>] </span><br><span class="line">城市 <span class="number">3</span> -&gt; [城市 <span class="number">2</span>, 城市 <span class="number">4</span>]</span><br><span class="line">城市 <span class="number">4</span> -&gt; [城市 <span class="number">1</span>, 城市 <span class="number">2</span>, 城市 <span class="number">3</span>] </span><br><span class="line">城市 <span class="number">0</span> 在阈值距离 <span class="number">4</span> 以内只有 <span class="number">1</span> 个邻居城市。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>2 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li><li><code>edges[i].length == 3</code></li><li><code>0 &lt;= fromi &lt; toi &lt; n</code></li><li><code>1 &lt;= weighti, distanceThreshold &lt;= 10^4</code>所有 <code>(fromi, toi)</code>都是不同的。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li><code>dijistra</code>,求每个顶点到其他顶点的最短距离。</li><li><code>BFS</code>即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTheCity</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges, <span class="keyword">int</span> distanceThreshold)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;pii&gt;&gt; graph;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minConnect = n;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : edges)&#123;</span><br><span class="line">            graph[v[<span class="number">0</span>]].push_back(make_pair(v[<span class="number">1</span>],v[<span class="number">2</span>]));</span><br><span class="line">            graph[v[<span class="number">1</span>]].push_back(make_pair(v[<span class="number">0</span>],v[<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; distance(n,INT_MAX);</span><br><span class="line">            <span class="built_in">queue</span>&lt;pii&gt; qu;</span><br><span class="line">            qu.push(make_pair(i,<span class="number">0</span>));</span><br><span class="line">            distance[i] = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(!qu.empty())&#123;</span><br><span class="line">                pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; curr = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : graph[curr.first])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(curr.second + v.second &gt; distanceThreshold) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(distance[v.first] &gt; curr.second + v.second)&#123;</span><br><span class="line">                        distance[v.first] = curr.second + v.second;</span><br><span class="line">                        qu.push(make_pair(v.first,distance[v.first]));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> connect = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(distance[j] &lt; INT_MAX)&#123;</span><br><span class="line">                    connect++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connect &lt;= minConnect)&#123;</span><br><span class="line">                minConnect = connect;</span><br><span class="line">                res = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5322-工作计划的最低难度"><a href="#5322-工作计划的最低难度" class="headerlink" title="5322. 工作计划的最低难度"></a>5322. 工作计划的最低难度</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>你需要制定一份 d 天的工作计划表。工作之间存在依赖，要想执行第 i 项工作，你必须完成全部 j 项工作<code>（ 0 &lt;= j &lt; i）。</code></p><p>你每天 至少 需要完成一项任务。工作计划的总难度是这 d 天每一天的难度之和，而一天的工作难度是当天应该完成工作的最大难度。</p><p>给你一个整数数组 <code>jobDifficulty</code> 和一个整数 d，分别代表工作难度和需要计划的天数。第 i 项工作的难度是<code>jobDifficulty[i]</code>。</p><p>返回整个工作计划的 最小难度 。如果无法制定工作计划，则返回 -1 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：jobDifficulty = [<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>], d = <span class="number">2</span></span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：第一天，您可以完成前 <span class="number">5</span> 项工作，总难度 = <span class="number">6.</span></span><br><span class="line">第二天，您可以完成最后一项工作，总难度 = <span class="number">1.</span></span><br><span class="line">计划表的难度 = <span class="number">6</span> + <span class="number">1</span> = <span class="number">7</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：jobDifficulty = [<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>], d = <span class="number">4</span></span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：就算你每天完成一项工作，仍然有一天是空闲的，你无法制定一份能够满足既定工作时间的计划表。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：jobDifficulty = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], d = <span class="number">3</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：工作计划为每天一项工作，总难度为 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：jobDifficulty = [<span class="number">7</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">1</span>], d = <span class="number">3</span></span><br><span class="line">输出：<span class="number">15</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：jobDifficulty = [<span class="number">11</span>,<span class="number">111</span>,<span class="number">22</span>,<span class="number">222</span>,<span class="number">33</span>,<span class="number">333</span>,<span class="number">44</span>,<span class="number">444</span>], d = <span class="number">6</span></span><br><span class="line">输出：<span class="number">843</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= jobDifficulty.length &lt;= 300</code></li><li><code>0 &lt;= jobDifficulty[i] &lt;= 1000</code></li><li><code>1 &lt;= d &lt;= 10</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-difficulty-of-a-job-schedule" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-difficulty-of-a-job-schedule</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DP</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>常规的<code>dp</code>,基本上递推公式即可，类似的题目不少。</li><li><code>dp[i][j]</code>代表前<code>i</code>项任务在<code>j</code>天内完成的最低难度，<code>cost[i][j]</code>代表数组区间从<code>i</code>到<code>j</code>的最大值。<script type="math/tex; mode=display">cost[i][j] = max(cost[i][j-1],jobDifficulty[j]) \\dp[i][j] = min(dp[i][j],dp[k][j-1]+cost[k+1][i]) \:\: (i-1\ge k\ge j-1)</script><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDifficulty</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; jobDifficulty, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = jobDifficulty.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(d+<span class="number">1</span>,INT_MAX));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n &lt; d)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] = max(dp[i<span class="number">-1</span>][<span class="number">1</span>],jobDifficulty[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= d; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; ++j)&#123;</span><br><span class="line">                <span class="keyword">int</span> mx = jobDifficulty[j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j<span class="number">-1</span>; k &gt;= i<span class="number">-1</span>; --k)&#123;</span><br><span class="line">                    dp[j][i] = min(dp[j][i],dp[k][i<span class="number">-1</span>] + mx);</span><br><span class="line">                    mx = max(mx,jobDifficulty[k<span class="number">-1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n][d];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;173场双周比赛&quot;&gt;&lt;a href=&quot;#173场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;173场双周比赛&quot;&gt;&lt;/a&gt;173场双周比赛&lt;/h1&gt;&lt;p&gt;题目整体比较简单，不如昨天的题目难。&lt;/p&gt;&lt;h2 id=&quot;5319-删除回文子序列&quot;&gt;&lt;a href=&quot;#5319-删除回文子序列&quot; class=&quot;headerlink&quot; title=&quot;5319. 删除回文子序列&quot;&gt;&lt;/a&gt;5319. 删除回文子序列&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt;，它仅由字母&lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt; 和&lt;code&gt;&amp;#39;b&amp;#39;&lt;/code&gt;组成。每一次删除操作都可以从 &lt;code&gt;s&lt;/code&gt;中删除一个回文 子序列。&lt;/p&gt;&lt;p&gt;返回删除给定字符串中所有字符（字符串为空）的最小删除次数。&lt;/p&gt;&lt;p&gt;「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>CollisionSystem</title>
    <link href="http://yoursite.com/2020/01/21/125/"/>
    <id>http://yoursite.com/2020/01/21/125/</id>
    <published>2020-01-21T07:44:24.707Z</published>
    <updated>2020-01-23T14:51:12.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CollisionSystem"><a href="#CollisionSystem" class="headerlink" title="CollisionSystem"></a>CollisionSystem</h3><p>最近一直在学习<code>princeton</code>的算法课程一，已经坚持刷了两个星期了，完成了四个<code>project</code>整体感觉难度很大，比一般工作中遇到的<code>project</code>难度大多了，让我这种工作了几年的老鸟，吭哧吭哧的啃了半天，一个<code>project</code>也要花上两三天才能完成，感觉很多问题都想不到，感觉国外的课程还真是难的一比。<br>印象比较深的就是这个粒子碰撞仿真系统，这个星期弄了一个星期，先把<code>java</code>版本的调好，然后把java版本的代码写了<code>python</code>版本，基本上全部调试好了，但是碰撞时的计算由于是浮点数的计算，涉及到阈值的处理，没有处理好，所以一直有问题。<br>两个粒子在碰撞时，由于计算误差的原因，导致在很短的时间出现二次碰撞，因此计算时一直存在一定的误差需要我们来解决这个问题。<br>1.22日对该<code>project</code>又进行调试，解决了该bug，目前已经可以正常显示画面。</p><a id="more"></a><h4 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h4><ol><li><p>定义粒子：每个粒子都有6个基本的属性，粒子当前位置的<code>(rx,ry)</code>,粒子当前的速度<code>(vx,vy)</code>,粒子的质量<code>mass</code>,粒子的半径<code>radius</code>.<br>每个粒子在<code>t</code>时刻的位置，并以一定的速度匀速前进。两个粒子进行碰撞时，由于碰撞而产生一定的推力，改变两个粒子的运动方向，则利用牛顿第二定理来进行分解和计算出粒子碰撞后的速度。</p></li><li><p>但实际进行计算时，最难的关键点，在于如何确认检测碰撞的时间，如果检测碰撞设置时间太大或者太小，都会产生与实际状态不符合的情况。比如下面这种情况：<br><img src="https://s2.ax1x.com/2020/01/21/1kPZL9.png" alt="1"><br><img src="https://s2.ax1x.com/2020/01/21/1kPEM4.png" alt="2"></p></li><li>我们在实际进行计算时，则将每个粒子与其他粒子碰撞的事件和该粒子与x轴、y轴碰撞的事件按照时间大小进行排序，每次取时间最快发生的碰撞时间，然后跟新该粒子本身、碰撞粒子的速度，同时跟新在经过$\delta t$后所有粒子的位置。从优先级队列中取出最新的事件检测时，则会检测该粒子是否有过碰撞，如果之前有过碰撞则认为该事件无效。<br><img src="https://s2.ax1x.com/2020/01/21/1kPkzF.png" alt="3"></li><li>每次取出事件后，进行跟新状态，并同时更新所有球的位置,所有粒子的半径和颜色、位置、初始速度全部为随机。模拟系统运行显示如下：<br><img src="http://chuantu.xyz/t6/713/1579677694x2073530527.gif" alt="4"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">LIGHT = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">DARK = (<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>)      <span class="comment"># 蛇的颜色</span></span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)           <span class="comment"># 网格线颜色</span></span><br><span class="line">RED = (<span class="number">200</span>, <span class="number">30</span>, <span class="number">30</span>)         <span class="comment"># 红色，GAME OVER 的字体颜色</span></span><br><span class="line">BGCOLOR = (<span class="number">40</span>, <span class="number">40</span>, <span class="number">60</span>)      <span class="comment"># 背景色</span></span><br><span class="line">WIDTH = <span class="number">1000</span></span><br><span class="line">HEIGHT = <span class="number">800</span></span><br><span class="line">NUMBER = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Particle</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.radius = random.randint(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">        self.rx = random.uniform(self.radius,WIDTH)</span><br><span class="line">        self.ry = random.uniform(self.radius,HEIGHT)</span><br><span class="line">        self.vx = random.uniform(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">        self.vy = random.uniform(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.mass = <span class="number">0.5</span></span><br><span class="line">        r = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">        g = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">        b = random.randint(<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">        self.color = (r,g,b)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_argment</span><span class="params">(self,inRx,inRy,inVx,inVy,inradius,inMass,inColor)</span>:</span></span><br><span class="line">        self.rx = inRx</span><br><span class="line">        self.ry = inRy</span><br><span class="line">        self.vx = inVx</span><br><span class="line">        self.vy = inVy</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.radius = inradius</span><br><span class="line">        self.mass = inMass</span><br><span class="line">        self.color = inColor</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self,dt)</span>:</span></span><br><span class="line">        self.rx += self.vx*dt</span><br><span class="line">        self.ry += self.vy*dt</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.count</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">time_to_hit</span><span class="params">(self,that)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.rx == that.rx <span class="keyword">and</span> self.ry == that.ry:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">        dx = that.rx - self.rx</span><br><span class="line">        dy = that.ry - self.ry</span><br><span class="line">        dvx = that.vx - self.vx</span><br><span class="line">        dvy = that.vy - self.vy</span><br><span class="line">        dvdr = dx * dvx + dy * dvy</span><br><span class="line">        <span class="keyword">if</span> dvdr &gt; <span class="number">0.0</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">        dvdv = dvx * dvx + dvy * dvy</span><br><span class="line">        <span class="keyword">if</span> dvdv == <span class="number">0.0</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line">        drdr = dx * dx + dy * dy</span><br><span class="line">        sigma = self.radius + that.radius</span><br><span class="line">        d = (dvdr * dvdr) - dvdv * (drdr - sigma * sigma)</span><br><span class="line">        <span class="keyword">if</span> d &lt; <span class="number">0.0</span>: </span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line">        </span><br><span class="line">        time = -(dvdr + math.sqrt(d))/dvdv</span><br><span class="line">        <span class="keyword">if</span> time &lt;= <span class="number">0.2</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> time</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">time_to_hit_verticalwall</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.vx &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (WIDTH - self.radius - self.rx)/self.vx</span><br><span class="line">        <span class="keyword">elif</span> self.vx &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (self.radius - self.rx)/self.vx</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">time_to_hit_horizontalwall</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.vy &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (HEIGHT - self.radius - self.ry)/self.vy</span><br><span class="line">        <span class="keyword">elif</span> self.vy &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (self.radius - self.ry)/self.vy</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bounce_off</span><span class="params">(self,that)</span>:</span></span><br><span class="line">        dx = that.rx - self.rx</span><br><span class="line">        dy = that.ry - self.ry</span><br><span class="line">        dvx = that.vx - self.vx</span><br><span class="line">        dvy = that.vy - self.vy</span><br><span class="line">        <span class="comment"># dv dot dr</span></span><br><span class="line">        dvdr = dx * dvx + dy * dvy </span><br><span class="line">        <span class="comment"># distance between particle centers at collison            </span></span><br><span class="line">        dist = self.radius + that.radius       </span><br><span class="line"></span><br><span class="line">        <span class="comment"># magnitude of normal force</span></span><br><span class="line">        magnitude = <span class="number">2</span> * self.mass * that.mass * dvdr / ((self.mass + that.mass) * dist)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># normal force, and in x and y directions</span></span><br><span class="line">        fx = magnitude * dx / dist</span><br><span class="line">        fy = magnitude * dy / dist</span><br><span class="line"></span><br><span class="line">        <span class="comment"># update velocities according to normal force</span></span><br><span class="line">        self.vx += fx / self.mass</span><br><span class="line">        self.vy += fy / self.mass</span><br><span class="line">        that.vx -= fx / that.mass</span><br><span class="line">        that.vy -= fy / that.mass</span><br><span class="line"></span><br><span class="line">        <span class="comment"># update collision counts</span></span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">        that.count += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bounce_off_verticalwall</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.vx = -self.vx</span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bounce_off_horizontalwall</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.vy = -self.vy</span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kinetic_energy</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span>*self.mass * (self.vx * self.vx + self.vy * self.vy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,t,pa,pb,countA,countB)</span>:</span></span><br><span class="line">        self.countA = countA</span><br><span class="line">        self.countB = countB</span><br><span class="line">        self.a = pa</span><br><span class="line">        self.b = pb</span><br><span class="line">        self.time = t</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.time &gt; other.time</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.time &gt;= other.time</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.time &lt;= other.time</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self,other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.time &lt; other.time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollisionSystem</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,particles)</span>:</span></span><br><span class="line">        self.t = <span class="number">0.0</span></span><br><span class="line">        self.HZ = <span class="number">0.1</span></span><br><span class="line">        self.particles = []</span><br><span class="line">        self.pq = []</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> particles:</span><br><span class="line">            self.particles.append(p)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#init game</span></span><br><span class="line">        pygame.init()</span><br><span class="line">        self.screen = pygame.display.set_mode((WIDTH,HEIGHT))</span><br><span class="line">        pygame.display.set_caption(<span class="string">'Collision System'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self,event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.a &gt;= <span class="number">0</span> <span class="keyword">and</span> event.countA != self.particles[event.a].get_count():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> event.b &gt;= <span class="number">0</span> <span class="keyword">and</span> event.countB != self.particles[event.b].get_count():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self,index,limit)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= len(self.particles):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.particles)):</span><br><span class="line">            <span class="keyword">if</span> i == index:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            dt = self.particles[index].time_to_hit(self.particles[i])</span><br><span class="line">            <span class="keyword">if</span> self.t + dt &lt;= limit:</span><br><span class="line">                event = Event(self.t + dt,index,i,self.particles[index].get_count(), self.particles[i].get_count())</span><br><span class="line">                heappush(self.pq,event)</span><br><span class="line">        </span><br><span class="line">        dtx = self.particles[index].time_to_hit_verticalwall()</span><br><span class="line">        dty = self.particles[index].time_to_hit_horizontalwall()</span><br><span class="line">        <span class="keyword">if</span> dtx + self.t &lt;= limit:</span><br><span class="line">            event = Event(self.t + dtx,index,<span class="number">-1</span>,self.particles[index].get_count(),<span class="number">0</span>)</span><br><span class="line">            heappush(self.pq,event)</span><br><span class="line">        <span class="keyword">if</span> dty + self.t &lt;= limit:</span><br><span class="line">            event = Event(self.t + dty,<span class="number">-1</span>,index,<span class="number">0</span>,self.particles[index].get_count())</span><br><span class="line">            heappush(self.pq,event)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cycle_draw</span><span class="params">(self,particle)</span>:</span></span><br><span class="line">        pygame.draw.circle(self.screen,particle.color,((int)(particle.rx),(int)(particle.ry)),(int)(particle.radius))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">redraw</span><span class="params">(self,limit)</span>:</span></span><br><span class="line">        self.screen.fill(DARK)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.particles)):</span><br><span class="line">            self.cycle_draw(self.particles[i])</span><br><span class="line"></span><br><span class="line">        pygame.display.update()</span><br><span class="line">        self.delay()</span><br><span class="line">        <span class="keyword">if</span> self.t &lt; limit:</span><br><span class="line">            event = Event(self.t + <span class="number">1</span>/self.HZ,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            heappush(self.pq,event)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delay</span><span class="params">(self)</span>:</span></span><br><span class="line">        lasttime = time.time()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">                <span class="keyword">if</span> event.type == QUIT:</span><br><span class="line">                    sys.exit()</span><br><span class="line">            curTime = time.time()</span><br><span class="line">            <span class="keyword">if</span> curTime - lasttime &gt; <span class="number">0.05</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">simulate</span><span class="params">(self,limit)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.particles)):</span><br><span class="line">            self.predict(i,limit)</span><br><span class="line">        event = Event(<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        heappush(self.pq,event)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> self.pq:</span><br><span class="line">            curr = heappop(self.pq)</span><br><span class="line">            <span class="keyword">if</span> self.isValid(curr) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.particles)):</span><br><span class="line">                self.particles[i].move(curr.time - self.t)</span><br><span class="line">            </span><br><span class="line">            self.t = curr.time</span><br><span class="line">            px = curr.a</span><br><span class="line">            py = curr.b</span><br><span class="line">            <span class="keyword">if</span> px &gt;= <span class="number">0</span> <span class="keyword">and</span> py &gt;= <span class="number">0</span>:</span><br><span class="line">                self.particles[px].bounce_off(self.particles[py])</span><br><span class="line">            <span class="keyword">elif</span> px &gt;= <span class="number">0</span> <span class="keyword">and</span> py &lt; <span class="number">0</span>:</span><br><span class="line">                self.particles[px].bounce_off_verticalwall()</span><br><span class="line">            <span class="keyword">elif</span> px &lt; <span class="number">0</span>  <span class="keyword">and</span> py &gt;= <span class="number">0</span>:</span><br><span class="line">                self.particles[py].bounce_off_horizontalwall()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.redraw(limit)</span><br><span class="line">            </span><br><span class="line">            self.predict(px,limit)</span><br><span class="line">            self.predict(py,limit)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    particles = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(NUMBER):</span><br><span class="line">        particles.append(Particle())</span><br><span class="line">    cs = CollisionSystem(particles)</span><br><span class="line">    cs.simulate(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CollisionSystem&quot;&gt;&lt;a href=&quot;#CollisionSystem&quot; class=&quot;headerlink&quot; title=&quot;CollisionSystem&quot;&gt;&lt;/a&gt;CollisionSystem&lt;/h3&gt;&lt;p&gt;最近一直在学习&lt;code&gt;princeton&lt;/code&gt;的算法课程一，已经坚持刷了两个星期了，完成了四个&lt;code&gt;project&lt;/code&gt;整体感觉难度很大，比一般工作中遇到的&lt;code&gt;project&lt;/code&gt;难度大多了，让我这种工作了几年的老鸟，吭哧吭哧的啃了半天，一个&lt;code&gt;project&lt;/code&gt;也要花上两三天才能完成，感觉很多问题都想不到，感觉国外的课程还真是难的一比。&lt;br&gt;印象比较深的就是这个粒子碰撞仿真系统，这个星期弄了一个星期，先把&lt;code&gt;java&lt;/code&gt;版本的调好，然后把java版本的代码写了&lt;code&gt;python&lt;/code&gt;版本，基本上全部调试好了，但是碰撞时的计算由于是浮点数的计算，涉及到阈值的处理，没有处理好，所以一直有问题。&lt;br&gt;两个粒子在碰撞时，由于计算误差的原因，导致在很短的时间出现二次碰撞，因此计算时一直存在一定的误差需要我们来解决这个问题。&lt;br&gt;1.22日对该&lt;code&gt;project&lt;/code&gt;又进行调试，解决了该bug，目前已经可以正常显示画面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="coursera" scheme="http://yoursite.com/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 第 172 场周赛</title>
    <link href="http://yoursite.com/2020/01/19/124/"/>
    <id>http://yoursite.com/2020/01/19/124/</id>
    <published>2020-01-19T08:29:30.831Z</published>
    <updated>2020-01-19T08:32:36.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="172场双周比赛"><a href="#172场双周比赛" class="headerlink" title="172场双周比赛"></a>172场双周比赛</h1><p>最后一题还有意思意外，其余的题目都很水，特别是第二题，很奇葩。</p><h2 id="5143-maximum-69-number"><a href="#5143-maximum-69-number" class="headerlink" title="5143. maximum-69-number"></a>5143. maximum-69-number</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个仅由数字 6 和 9 组成的正整数 <code>num</code>。<br>你最多只能翻转一位数字，将 <code>6</code> 变成 9，或者把 9 变成 6 。<br>请返回你可以得到的最大数字。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">9669</span></span><br><span class="line">输出：<span class="number">9969</span></span><br><span class="line">解释：</span><br><span class="line">改变第一位数字可以得到 <span class="number">6669</span> 。</span><br><span class="line">改变第二位数字可以得到 <span class="number">9969</span> 。</span><br><span class="line">改变第三位数字可以得到 <span class="number">9699</span> 。</span><br><span class="line">改变第四位数字可以得到 <span class="number">9666</span> 。</span><br><span class="line">其中最大的数字是 <span class="number">9969</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">9996</span></span><br><span class="line">输出：<span class="number">9999</span></span><br><span class="line">解释：将最后一位从 <span class="number">6</span> 变到 <span class="number">9</span>，其结果 <span class="number">9999</span> 是最大的数。</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：num = <span class="number">9999</span></span><br><span class="line">输出：<span class="number">9999</span></span><br><span class="line">解释：无需改变就已经是最大的数字了。</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>1 &lt;= num &lt;= 10^4</li><li>num 每一位上的数字都是 6 或者 9 。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-69-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-69-number</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接循环</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>把第一个6替换成9即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximum69Number</span> <span class="params">(self, num: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> int(str(num).replace(<span class="string">'6'</span>,<span class="string">'9'</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="55316-竖直打印单词"><a href="#55316-竖直打印单词" class="headerlink" title="55316. 竖直打印单词"></a>55316. 竖直打印单词</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 s。请你按照单词在 s 中的出现顺序将它们全部竖直返回。<br>单词应该以字符串列表的形式返回，必要时用空格补位，但输出尾部的空格需要删除（不允许尾随空格）。<br>每个单词只能放在一列上，每一列中也只能有一个单词。</p><p>示例 1：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"HOW ARE YOU"</span></span><br><span class="line">输出：[<span class="string">"HAY"</span>,<span class="string">"ORO"</span>,<span class="string">"WEU"</span>]</span><br><span class="line">解释：每个单词都应该竖直打印。 </span><br><span class="line"> <span class="string">"HAY"</span></span><br><span class="line"> <span class="string">"ORO"</span></span><br><span class="line"> <span class="string">"WEU"</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"TO BE OR NOT TO BE"</span></span><br><span class="line">输出：[<span class="string">"TBONTB"</span>,<span class="string">"OEROOE"</span>,<span class="string">"   T"</span>]</span><br><span class="line">解释：题目允许使用空格补位，但不允许输出末尾出现空格。</span><br><span class="line"><span class="string">"TBONTB"</span></span><br><span class="line"><span class="string">"OEROOE"</span></span><br><span class="line"><span class="string">"   T"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"CONTEST IS COMING"</span></span><br><span class="line">输出：[<span class="string">"CIC"</span>,<span class="string">"OSO"</span>,<span class="string">"N M"</span>,<span class="string">"T I"</span>,<span class="string">"E N"</span>,<span class="string">"S G"</span>,<span class="string">"T"</span>]</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li>1 &lt;= s.length &lt;= 200</li><li>s 仅含大写英文字母。</li><li>题目数据保证两个单词之间只有一个空格。</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/print-words-vertically" target="_blank" rel="noopener">https://leetcode-cn.com/problems/print-words-vertically</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>题目就是细节处理而已<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; printVertically(<span class="built_in">string</span> s) &#123;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">        <span class="built_in">string</span> tmp;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs;</span><br><span class="line">        <span class="keyword">int</span> max_len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (getline(ss, tmp, <span class="string">' '</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                max_len = max(max_len, (<span class="keyword">int</span>)tmp.size());</span><br><span class="line">                vs.push_back(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vs.size(); i++) &#123;</span><br><span class="line">            tmp = vs[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp.size() &lt; max_len) &#123;</span><br><span class="line">                <span class="keyword">int</span> cs = max_len - tmp.size();</span><br><span class="line">                <span class="keyword">while</span> (cs--) vs[i] += <span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max_len; i++) &#123;</span><br><span class="line">            tmp = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vs.size(); j++) &#123;</span><br><span class="line">                tmp += vs[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> nm = tmp.size();</span><br><span class="line">            <span class="keyword">while</span> (nm &gt; <span class="number">0</span> &amp;&amp; tmp[nm - <span class="number">1</span>] == <span class="string">' '</span>) nm--;</span><br><span class="line">            tmp = tmp.substr(<span class="number">0</span>, nm);</span><br><span class="line">            </span><br><span class="line">            res.push_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5317-删除给定值的叶子节点"><a href="#5317-删除给定值的叶子节点" class="headerlink" title="5317. 删除给定值的叶子节点"></a>5317. 删除给定值的叶子节点</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一棵以 <code>root</code> 为根的二叉树和一个整数 target ，请你删除所有值为 <code>target</code> 的 叶子节点 。</p><p>注意，一旦删除值为 <code>target</code> 的叶子节点，它的父节点就可能变成叶子节点；如果新叶子节点的值恰好也是 target ，那么这个节点也应该被删除。</p><p>也就是说，你需要重复此过程直到不能继续删除。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">4</span>], target = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">4</span>]</span><br><span class="line">解释：</span><br><span class="line">上面左边的图中，绿色节点为叶子节点，且它们的值与 target 相同（同为 <span class="number">2</span> ），它们会被删除，得到中间的图。</span><br><span class="line">有一个新的节点变成了叶子节点且它的值与 target 相同，所以将再次进行删除，从而得到最右边的图。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>], target = <span class="number">3</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">2</span>], target = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1</span>]</span><br><span class="line">解释：每一步都删除一个绿色的叶子节点（值为 <span class="number">2</span>）。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], target = <span class="number">1</span></span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], target = <span class="number">1</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= target &lt;= 1000</li><li>每一棵树最多有 3000 个节点。</li><li>每一个节点值的范围是 [1, 1000] 。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/delete-leaves-with-a-given-value" target="_blank" rel="noopener">https://leetcode-cn.com/problems/delete-leaves-with-a-given-value</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>DFS.<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">removeLeafNodes</span><span class="params">(TreeNode* root, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">NULL</span>;        </span><br><span class="line">        root-&gt;left = removeLeafNodes(root-&gt;left,target);</span><br><span class="line">        root-&gt;right = removeLeafNodes(root-&gt;right,target);</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right &amp;&amp; root-&gt;val == target) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5318-灌溉花园的最少水龙头数目"><a href="#5318-灌溉花园的最少水龙头数目" class="headerlink" title="5318. 灌溉花园的最少水龙头数目"></a>5318. 灌溉花园的最少水龙头数目</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>在 x 轴上有一个一维的花园。花园长度为 n，从点 0 开始，到点 n 结束。</p><p>花园里总共有<code>n + 1</code>个水龙头，分别位于 <code>[0, 1, ..., n]</code> 。</p><p>给你一个整数 n 和一个长度为 n + 1 的整数数组<code>ranges</code> ，其中 <code>ranges[i]</code> （下标从 0 开始）表示：如果打开点 i 处的水龙头，可以灌溉的区域为 <code>[i -  ranges[i], i + ranges[i]]</code>。</p><p>请你返回可以灌溉整个花园的 最少水龙头数目 。如果花园始终存在无法灌溉到的地方，请你返回 -1 。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, ranges = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：</span><br><span class="line">点 <span class="number">0</span> 处的水龙头可以灌溉区间 [<span class="number">-3</span>,<span class="number">3</span>]</span><br><span class="line">点 <span class="number">1</span> 处的水龙头可以灌溉区间 [<span class="number">-3</span>,<span class="number">5</span>]</span><br><span class="line">点 <span class="number">2</span> 处的水龙头可以灌溉区间 [<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">点 <span class="number">3</span> 处的水龙头可以灌溉区间 [<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">点 <span class="number">4</span> 处的水龙头可以灌溉区间 [<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">点 <span class="number">5</span> 处的水龙头可以灌溉区间 [<span class="number">5</span>,<span class="number">5</span>]</span><br><span class="line">只需要打开点 <span class="number">1</span> 处的水龙头即可灌溉整个花园 [<span class="number">0</span>,<span class="number">5</span>] 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span>, ranges = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：即使打开所有水龙头，你也无法灌溉整个花园。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">7</span>, ranges = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">8</span>, ranges = [<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">8</span>, ranges = [<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= n &lt;= 10^4</li><li>ranges.length == n + 1</li><li>0 &lt;= ranges[i] &lt;= 100</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-number-of-taps-to-open-to-water-a-garden" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-number-of-taps-to-open-to-water-a-garden</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 字符串hash</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>此题即为线段覆盖问题，找出最少的线段覆盖区间为<code>[0,n]</code>;</li><li>设<code>dp[x]</code>表示覆盖从<code>[0,x]</code>最少需要多少个线段，<code>dp[0] = 0</code>,覆盖区间<code>[0,0]</code>只需要<code>0</code>个线段即可；</li><li>将所有的线段按照左端点大小进行排序。对于新加入的线段<code>[x,y]</code>,首先检查有右边界<code>y</code>有没有被覆盖，如果被覆盖，则改线段不需要再加入；检查左边界<code>x</code>有没有被覆盖，如果没有被则返回<code>-1</code>;<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minTaps</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ranges)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; seg;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cost;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            seg.push_back(&#123;i-ranges[i],i+ranges[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(seg.begin(),seg.end(),cmp);</span><br><span class="line">        cost[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : seg)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cost.rbegin()-&gt;first &gt;= v[<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(cost.rbegin()-&gt;first &lt; v[<span class="number">0</span>])  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            cost[v[<span class="number">1</span>]] = cost.lower_bound(v[<span class="number">0</span>])-&gt;second + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(v[<span class="number">1</span>] &gt;= n) <span class="keyword">return</span> cost[v[<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;172场双周比赛&quot;&gt;&lt;a href=&quot;#172场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;172场双周比赛&quot;&gt;&lt;/a&gt;172场双周比赛&lt;/h1&gt;&lt;p&gt;最后一题还有意思意外，其余的题目都很水，特别是第二题，很奇葩。&lt;/p&gt;&lt;h2 id=&quot;5143-maximum-69-number&quot;&gt;&lt;a href=&quot;#5143-maximum-69-number&quot; class=&quot;headerlink&quot; title=&quot;5143. maximum-69-number&quot;&gt;&lt;/a&gt;5143. maximum-69-number&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个仅由数字 6 和 9 组成的正整数 &lt;code&gt;num&lt;/code&gt;。&lt;br&gt;你最多只能翻转一位数字，将 &lt;code&gt;6&lt;/code&gt; 变成 9，或者把 9 变成 6 。&lt;br&gt;请返回你可以得到的最大数字。&lt;/p&gt;&lt;p&gt;示例 1：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：num = &lt;span class=&quot;number&quot;&gt;9669&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;9969&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;改变第一位数字可以得到 &lt;span class=&quot;number&quot;&gt;6669&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;改变第二位数字可以得到 &lt;span class=&quot;number&quot;&gt;9969&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;改变第三位数字可以得到 &lt;span class=&quot;number&quot;&gt;9699&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;改变第四位数字可以得到 &lt;span class=&quot;number&quot;&gt;9666&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;其中最大的数字是 &lt;span class=&quot;number&quot;&gt;9969&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;示例 2：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：num = &lt;span class=&quot;number&quot;&gt;9996&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;span class=&quot;number&quot;&gt;9999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：将最后一位从 &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; 变到 &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;，其结果 &lt;span class=&quot;number&quot;&gt;9999&lt;/span&gt; 是最大的数。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 17场双周比赛</title>
    <link href="http://yoursite.com/2020/01/13/123/"/>
    <id>http://yoursite.com/2020/01/13/123/</id>
    <published>2020-01-13T04:50:22.614Z</published>
    <updated>2020-01-13T04:58:22.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17场双周比赛"><a href="#17场双周比赛" class="headerlink" title="17场双周比赛"></a>17场双周比赛</h1><p>不如周赛题目经典</p><h2 id="5143-解压缩编码列表"><a href="#5143-解压缩编码列表" class="headerlink" title="5143. 解压缩编码列表"></a>5143. 解压缩编码列表</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个以行程长度编码压缩的整数列表 nums 。</p><p>考虑每相邻两个元素 <code>[a, b] = [nums[2*i], nums[2*i+1]]</code>（其中 i &gt;= 0 ），每一对都表示解压后有 a 个值为 b 的元素。</p><p>请你返回解压后的列表。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li>2 &lt;= nums.length &lt;= 100</li><li>nums.length % 2 == 0</li><li>1 &lt;= nums[i] &lt;= 100</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/decompress-run-length-encoded-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/decompress-run-length-encoded-list</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接循环</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接添加一定数量的数即可<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; decompressRLElist(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i += <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t(nums[i],nums[i+<span class="number">1</span>]);</span><br><span class="line">            res.insert(res.end(),t.begin(),t.end());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5144-矩阵区域和"><a href="#5144-矩阵区域和" class="headerlink" title="5144. 矩阵区域和"></a>5144. 矩阵区域和</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个 <code>m * n</code>的矩阵 mat 和一个整数 K ，请你返回一个矩阵 <code>answer</code>，其中每个 <code>answer[i][j]</code>是所有满足下述条件的元素<code>mat[r][c]</code>的和： </p><p><code>i - K &lt;= r &lt;= i + K, j - K &lt;= c &lt;= j + K</code><br><code>(r, c)</code>在矩阵内。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]], K = <span class="number">1</span></span><br><span class="line">输出：[[<span class="number">12</span>,<span class="number">21</span>,<span class="number">16</span>],[<span class="number">27</span>,<span class="number">45</span>,<span class="number">33</span>],[<span class="number">24</span>,<span class="number">39</span>,<span class="number">28</span>]]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]], K = <span class="number">2</span></span><br><span class="line">输出：[[<span class="number">45</span>,<span class="number">45</span>,<span class="number">45</span>],[<span class="number">45</span>,<span class="number">45</span>,<span class="number">45</span>],[<span class="number">45</span>,<span class="number">45</span>,<span class="number">45</span>]]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= m, n, K &lt;= 100</code></li><li><code>1 &lt;= mat[i][j] &lt;= 100</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/matrix-block-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/matrix-block-sum</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 利用或的特性即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>矩阵的前缀和，利用等式即可。<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; matrixBlockSum(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat, <span class="keyword">int</span> K) &#123;</span><br><span class="line">        <span class="keyword">int</span> r = mat.size();</span><br><span class="line">        <span class="keyword">int</span> c = mat[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; sum(r+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(c+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res(r,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(c,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c; ++j)&#123;</span><br><span class="line">                sum[i][j] = sum[i<span class="number">-1</span>][j] + sum[i][j<span class="number">-1</span>] - sum[i<span class="number">-1</span>][j<span class="number">-1</span>] + mat[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; ++j)&#123;</span><br><span class="line">                <span class="keyword">int</span> x1 = max(<span class="number">0</span>,i-K);</span><br><span class="line">                <span class="keyword">int</span> y1 = max(<span class="number">0</span>,j-K);</span><br><span class="line">                <span class="keyword">int</span> x2 = min(r<span class="number">-1</span>,i+K) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> y2 = min(c<span class="number">-1</span>,j+K) + <span class="number">1</span>;</span><br><span class="line">                res[i][j] = sum[x2][y2] - sum[x1][y2] - sum[x2][y1] + sum[x1][y1];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5145-祖父节点值为偶数的节点和"><a href="#5145-祖父节点值为偶数的节点和" class="headerlink" title="5145. 祖父节点值为偶数的节点和"></a>5145. 祖父节点值为偶数的节点和</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一棵二叉树，请你返回满足以下条件的所有节点的值之和：</p><p>该节点的祖父节点的值为偶数。（一个节点的祖父节点是指该节点的父节点的父节点。）<br>如果不存在祖父节点值为偶数的节点，那么返回 0 。</p><p>示例：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">18</span></span><br><span class="line">解释：图中红色节点的祖父节点的值为偶数，蓝色节点为这些红色节点的祖父节点。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>树中节点的数目在 1 到 10^4 之间。</li><li>每个节点的值在 1 到 100 之间。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/sum-of-nodes-with-even-valued-grandparent" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sum-of-nodes-with-even-valued-grandparent</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> DFS</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>DFS，将父亲节点和祖父节点都进行传递。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TreeNode * root,<span class="keyword">int</span> fa, <span class="keyword">int</span>  gfa,<span class="keyword">int</span> &amp;res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(gfa &gt; <span class="number">0</span> &amp;&amp; gfa%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            res += root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root-&gt;left,root-&gt;val,fa,res);</span><br><span class="line">        dfs(root-&gt;right,root-&gt;val,fa,res);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumEvenGrandparent</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        dfs(root,<span class="number">0</span>,<span class="number">0</span>,res);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5146-不同的循环子字符串"><a href="#5146-不同的循环子字符串" class="headerlink" title="5146. 不同的循环子字符串"></a>5146. 不同的循环子字符串</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 text ，请你返回满足下述条件的 不同 非空子字符串的数目：</p><p>可以写成某个字符串与其自身相连接的形式。<br>例如，abcabc 就是 abc 和它自身连接形成的。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text = <span class="string">"abcabcabc"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：<span class="number">3</span> 个子字符串分别为 <span class="string">"abcabc"</span> ， <span class="string">"bcabca"</span> 和 <span class="string">"cabcab"</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text = <span class="string">"leetcodeleetcode"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="number">2</span> 个子字符串为 <span class="string">"ee"</span> 和 <span class="string">"leetcodeleetcode"</span> 。</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= text.length &lt;= 2000</code></li><li><code>text 只包含小写英文字母。</code></li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/distinct-echo-substrings" target="_blank" rel="noopener">https://leetcode-cn.com/problems/distinct-echo-substrings</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 字符串hash</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>题目本身就需要进行<code>O(n^2)</code>次比较，但是关键在于如何优化比较字符串的算法。</li><li>如果按照常规的顺序比较的话，则时间复杂度为<code>O(n^3)</code>,我们需要可以通过快速的hash算法，可以在<code>O(1)</code>时间内对字符进行hash运算与比较。</li><li>关于字符串的hash算法，以前确实很少碰到，但是必须要对这种解法非常非常熟练，特别是hash函数的使用。</li><li>字符串的<code>hash</code>算法解释如下:</li></ol><ul><li>将字符串中的每一个字母都看做是一个数字（例：从a-z，视为1-26）；</li><li>选取两个合适的互质常数<code>B，H ( b &lt; h )</code>(互质，有用；b &lt; h,建议取 b和h均为质数);</li><li>定义哈希函数:<script type="math/tex; mode=display">hash(C)= (C_{1}*B^{m-1} + C_{2}*B^{m-2} + . . . + C_{0}*B^{0})mod(H)</script></li></ul></blockquote><ol><li>C代表一个字符串，用<code>C=c1 c2 c3 c4..cm</code>;表示该字符串，其中 ci 表示从前向后数的第 i 个字符；</li></ol><ul><li><p>方括号[ ]内的表达式：<code>c1*b^(m-1) + c2*b^(m-2) + . . . + c0*b^0</code>意为将字符串C当做 b进制数 来处理，b是基数；</p></li><li><p>关于对<code>h</code>取模，若<code>b，h</code>有公因子，那么不同的字符串取余之后的结果发生冲突的几率将大大大增加</p></li><li><p>计算上一步H(C)的过程是递归实现的：<code>H(i,j)</code>为从第<code>i</code>个字符到第<code>j</code>个字符构成的字符串的哈希值，<code>（i &lt;= j）</code>：</p><script type="math/tex; mode=display">H(i,j)= H(j) - H(i-1)*B^{j-i+1}</script></li></ul><ol><li>实际的计算过程如下：<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hash<span class="string">[L]</span> = hash<span class="string">[0]</span> * BASE^(L-<span class="number">1</span>) + hash<span class="string">[1]</span> * BASE^(L-<span class="number">2</span>) + ... + hash<span class="string">[L-1]</span> * BASE </span><br><span class="line">hash<span class="string">[r]</span> = hash<span class="string">[0]</span> * BASE^(r-<span class="number">1</span>) + hash<span class="string">[1]</span> * BASE^(r-<span class="number">2</span>) + ... + hash<span class="string">[L]</span> * BASE^(r-L) + ... + hash<span class="string">[r]</span> * BASE </span><br><span class="line">key(l,r) = hash<span class="string">[r]</span> - hash<span class="string">[L]</span> * pow<span class="string">[r - L]</span></span><br></pre></td></tr></table></figure><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll B = <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">distinctEchoSubstrings</span><span class="params">(<span class="built_in">string</span> text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = text.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt; h(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt; p(n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;ll&gt; same;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            h[i+<span class="number">1</span>] = (h[i]*B + text[i])%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            p[i+<span class="number">1</span>] = p[i]*B%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> get = [&amp;](<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;</span><br><span class="line">            <span class="keyword">return</span> (h[y] - h[x<span class="number">-1</span>]*p[y-x+<span class="number">1</span>]%MOD + MOD)%MOD;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= n; j += <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> len = (j-i+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> k = i + len - <span class="number">1</span>;</span><br><span class="line">                ll l = get(i,k);</span><br><span class="line">                ll r = get(k+<span class="number">1</span>,j);</span><br><span class="line">                <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">                    same.insert(l);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> same.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;17场双周比赛&quot;&gt;&lt;a href=&quot;#17场双周比赛&quot; class=&quot;headerlink&quot; title=&quot;17场双周比赛&quot;&gt;&lt;/a&gt;17场双周比赛&lt;/h1&gt;&lt;p&gt;不如周赛题目经典&lt;/p&gt;&lt;h2 id=&quot;5143-解压缩编码列表&quot;&gt;&lt;a href=&quot;#5143-解压缩编码列表&quot; class=&quot;headerlink&quot; title=&quot;5143. 解压缩编码列表&quot;&gt;&lt;/a&gt;5143. 解压缩编码列表&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个以行程长度编码压缩的整数列表 nums 。&lt;/p&gt;&lt;p&gt;考虑每相邻两个元素 &lt;code&gt;[a, b] = [nums[2*i], nums[2*i+1]]&lt;/code&gt;（其中 i &amp;gt;= 0 ），每一对都表示解压后有 a 个值为 b 的元素。&lt;/p&gt;&lt;p&gt;请你返回解压后的列表。&lt;/p&gt;&lt;p&gt;示例：&lt;br&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：nums = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 171周比赛</title>
    <link href="http://yoursite.com/2020/01/12/122/"/>
    <id>http://yoursite.com/2020/01/12/122/</id>
    <published>2020-01-12T15:46:02.882Z</published>
    <updated>2020-01-13T06:27:20.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="170比赛"><a href="#170比赛" class="headerlink" title="170比赛"></a>170比赛</h1><p>今天的题目非常不错，水平很高</p><h2 id="5307-将整数转换为两个无零整数的和"><a href="#5307-将整数转换为两个无零整数的和" class="headerlink" title="5307. 将整数转换为两个无零整数的和"></a>5307. 将整数转换为两个无零整数的和</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>「无零整数」是十进制表示中 不含任何 0 的正整数。</p><p>给你一个整数 n，请你返回一个 由两个整数组成的列表 [A, B]，满足：</p><p>A 和 B 都是无零整数，<code>A + B = n</code><br>题目数据保证至少有一个有效的解决方案。</p><p>如果存在多个有效解决方案，你可以返回其中任意一个。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">解释：A = <span class="number">1</span>, B = <span class="number">1.</span> A + B = n 并且 A 和 B 的十进制表示形式都不包含任何 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">11</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">10000</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">9999</span>]</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">69</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">68</span>]</span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1010</span></span><br><span class="line">输出：[<span class="number">11</span>,<span class="number">999</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>2 &lt;= n &lt;= 10^4</li><li>在真实的面试中遇到过这道题？</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 数据量很小，暴力解决即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>直接判断即可<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isNotZero</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n = n/<span class="number">10</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; getNoZeroIntegers(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n/<span class="number">2</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isNotZero(i)&amp;&amp;isNotZero(n-i))&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;i,n-i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5308-或运算的最小翻转次数"><a href="#5308-或运算的最小翻转次数" class="headerlink" title="5308. 或运算的最小翻转次数"></a>5308. 或运算的最小翻转次数</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你三个正整数 a、b 和 c。</p><p>你可以对 a 和 b 的二进制表示进行位翻转操作，返回能够使按位或运算   a OR b == c  成立的最小翻转次数。</p><p>「位翻转操作」是指将一个数的二进制表示任何单个位上的 1 变成 0 或者 0 变成 1 。</p><p>示例 1：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="selector-tag">a</span> = <span class="number">2</span>, <span class="selector-tag">b</span> = <span class="number">6</span>, c = <span class="number">5</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：翻转后 <span class="selector-tag">a</span> = <span class="number">1</span> , <span class="selector-tag">b</span> = <span class="number">4</span> , c = <span class="number">5</span> 使得 <span class="selector-tag">a</span> OR <span class="selector-tag">b</span> == c</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = <span class="number">4</span>, b = <span class="number">2</span>, c = <span class="number">7</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= a &lt;= 10^9</li><li>1 &lt;= b &lt;= 10^9</li><li>1 &lt;= c &lt;= 10^9</li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-flips-to-make-a-or-b-equal-to-c" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-flips-to-make-a-or-b-equal-to-c</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 利用或的特性即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>直接按位取即可，唯一需要注意的是，当或的结果为0时，要求两个数也必须都为0，则需要反转两次<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minFlips</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> bitC = ((c&amp;(<span class="number">1</span>&lt;&lt;i))&gt;&gt;i);</span><br><span class="line">            <span class="keyword">int</span> bitA = ((a&amp;(<span class="number">1</span>&lt;&lt;i))&gt;&gt;i);</span><br><span class="line">            <span class="keyword">int</span> bitB = ((b&amp;(<span class="number">1</span>&lt;&lt;i))&gt;&gt;i);</span><br><span class="line">            <span class="keyword">if</span>(bitC != (bitA|bitB))&#123;</span><br><span class="line">                <span class="keyword">if</span>(bitC == <span class="number">1</span>)&#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    res += bitA;</span><br><span class="line">                    res += bitB;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5309-连通网络的操作次数"><a href="#5309-连通网络的操作次数" class="headerlink" title="5309. 连通网络的操作次数"></a>5309. 连通网络的操作次数</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>用以太网线缆将 n 台计算机连接成一个网络，计算机的编号从 0 到 n-1。线缆用 connections 表示，其中 connections[i] = [a, b] 连接了计算机 a 和 b。</p><p>网络中的任何一台计算机都可以通过网络直接或者间接访问同一个网络中其他任意一台计算机。</p><p>给你这个计算机网络的初始布线 connections，你可以拔开任意两台直连计算机之间的线缆，并用它连接一对未直连的计算机。请你计算并返回使所有计算机都连通所需的最少操作次数。如果不可能，则返回 -1 。 </p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span>, connections = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：拔下计算机 <span class="number">1</span> 和 <span class="number">2</span> 之间的线缆，并将它插到计算机 <span class="number">1</span> 和 <span class="number">3</span> 上。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：n = <span class="number">6</span>, connections = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>]]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">6</span>, connections = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：线缆数量不足。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, connections = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>1 &lt;= n &lt;= 10^5</li><li>1 &lt;= connections.length &lt;= min(n*(n-1)/2, 10^5)</li><li>connections[i].length == 2</li><li>0 &lt;= connections[i][0], connections[i][1] &lt; n</li><li>connections[i][0] != connections[i][1]</li><li>没有重复的连接。</li><li>两台计算机不会通过多条线缆连接。</li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 并查集</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>将图分成几个集合，如果要求集合全部相连则需要集合的数目减一根线即可完成全部相连。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(x != f[x])&#123;</span><br><span class="line">            x = f[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">uni</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x1 = find(x,f);</span><br><span class="line">        <span class="keyword">int</span> y1 = find(y,f);</span><br><span class="line">        <span class="keyword">if</span>(x1 == y1)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        f[x1] = y1;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">makeConnected</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; connections)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f(n);</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; roots;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; c : connections)&#123;</span><br><span class="line">            uni(c[<span class="number">0</span>],c[<span class="number">1</span>],f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            roots.insert(find(i,f));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connections.size() &lt; n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> roots.size()<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5310-二指输入的的最小距离"><a href="#5310-二指输入的的最小距离" class="headerlink" title="5310. 二指输入的的最小距离"></a>5310. 二指输入的的最小距离</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>二指输入法定制键盘在 XY 平面上的布局如上图所示，其中每个大写英文字母都位于某个坐标处，例如字母 A 位于坐标 (0,0)，字母 B 位于坐标 (0,1)，字母 P 位于坐标 (2,3) 且字母 Z 位于坐标 (4,1)。</p><p>给你一个待输入字符串 word，请你计算并返回在仅使用两根手指的情况下，键入该字符串需要的最小移动总距离。坐标 (x1,y1) 和 (x2,y2) 之间的距离是 |x1 - x2| + |y1 - y2|。 </p><p>注意，两根手指的起始位置是零代价的，不计入移动总距离。你的两根手指的起始位置也不必从首字母或者前两个字母开始。</p><p>示例 1：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：word = <span class="string">"CAKE"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释： </span><br><span class="line">使用两根手指输入 <span class="string">"CAKE"</span> 的最佳方案之一是： </span><br><span class="line">手指 <span class="number">1</span> 在字母 <span class="string">'C'</span> 上 -&gt; 移动距离 = <span class="number">0</span> </span><br><span class="line">手指 <span class="number">1</span> 在字母 <span class="string">'A'</span> 上 -&gt; 移动距离 = 从字母 <span class="string">'C'</span> 到字母 <span class="string">'A'</span> 的距离 = <span class="number">2</span> </span><br><span class="line">手指 <span class="number">2</span> 在字母 <span class="string">'K'</span> 上 -&gt; 移动距离 = <span class="number">0</span> </span><br><span class="line">手指 <span class="number">2</span> 在字母 <span class="string">'E'</span> 上 -&gt; 移动距离 = 从字母 <span class="string">'K'</span> 到字母 <span class="string">'E'</span> 的距离  = <span class="number">1</span> </span><br><span class="line">总距离 = <span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：word = <span class="string">"HAPPY"</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释： </span><br><span class="line">使用两根手指输入 <span class="string">"HAPPY"</span> 的最佳方案之一是：</span><br><span class="line">手指 <span class="number">1</span> 在字母 <span class="string">'H'</span> 上 -&gt; 移动距离 = <span class="number">0</span></span><br><span class="line">手指 <span class="number">1</span> 在字母 <span class="string">'A'</span> 上 -&gt; 移动距离 = 从字母 <span class="string">'H'</span> 到字母 <span class="string">'A'</span> 的距离 = <span class="number">2</span></span><br><span class="line">手指 <span class="number">2</span> 在字母 <span class="string">'P'</span> 上 -&gt; 移动距离 = <span class="number">0</span></span><br><span class="line">手指 <span class="number">2</span> 在字母 <span class="string">'P'</span> 上 -&gt; 移动距离 = 从字母 <span class="string">'P'</span> 到字母 <span class="string">'P'</span> 的距离 = <span class="number">0</span></span><br><span class="line">手指 <span class="number">1</span> 在字母 <span class="string">'Y'</span> 上 -&gt; 移动距离 = 从字母 <span class="string">'A'</span> 到字母 <span class="string">'Y'</span> 的距离 = <span class="number">4</span></span><br><span class="line">总距离 = <span class="number">6</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">word</span> = <span class="string">"NEW"</span></span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">word</span> = <span class="string">"YEAR"</span></span><br><span class="line">输出：<span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li>2 &lt;= word.length &lt;= 300</li><li>每个 word[i] 都是一个大写英文字母。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-distance-to-type-a-word-using-two-fingers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-distance-to-type-a-word-using-two-fingers</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>本题的<code>dp</code>不错，思路很新颖，当时没做出来，下来之后想出来。</li><li>两种解法都非常典型。</li><li>设<code>dp[i][j]</code>代表当前已经输入到了前<code>i</code>个字符，这时其中有一个手指的最后位置位于<code>j</code>处，另外一个手指最后位置处于<code>i</code>处的位置到达终点的最小距离。</li><li>我们需要采用从最终状态往前推的算法，最终状态为已经全部输完了所有的字符，且其中有一个手指可能随机位于字符串的位置，我们设这些状态全部为<code>0</code>;</li><li>我们可以这样递推，比如当前已经输入了前<code>i</code>个字符，必然有一个手指位于第<code>i</code>处。假设第1个手指位于<code>i</code>处，第二个手指位于第<code>j</code>处，则我们下一个动作肯定会输入第<code>i+1</code>个字符，则这时第<code>i+1</code>个字符，可以由第<code>1</code>个手指来输入，可以由第<code>2</code>个手指仍然处于第<code>j</code>个位置，所需的花费即为从第<code>i</code>个字符到第<code>i+1</code>个字符的距离,则这时状态转移方程为：<script type="math/tex; mode=display">dp[i][j] = dp[i+1][j] + move[i][i+1]</script>可以由第<code>2</code>个手指来输入，可以由第<code>1</code>个手指处于第<code>i</code>个位置，第二个手指则从第<code>j</code>个位置转移到第<code>i+1</code>处，则所需的花费即为从第<code>j</code>个字符到第<code>i+1</code>个字符的距离,则这时状态转移方程为：<script type="math/tex; mode=display">dp[i][j] = dp[i+1][i] + move[j][i+1]</script></li><li>我们采用从后往前推，<code>n</code>个字符全部输入完成为最终状态，只有<code>1</code>个字符输入为初始状态，且有一个手指为未输入状态<code>0</code>,所以最终返回<script type="math/tex; mode=display">dp[1][0]</script></li><li>设<code>dp[k][l][r]</code>为输入<code>k</code>个字符，两个手指的最后的字符位置。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">char</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = x - <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">int</span> n = y - <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(m/<span class="number">6</span>-n/<span class="number">6</span>) + <span class="built_in">abs</span>((m%<span class="number">6</span>)-(n%<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = word.size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>,INT_MAX));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            dp[n][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">1</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">                dp[i][j] = min(dp[i][j],dp[i+<span class="number">1</span>][j] + move(word[i<span class="number">-1</span>],word[i]));</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j] = min(dp[i][j],dp[i+<span class="number">1</span>][i]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = min(dp[i][j],dp[i+<span class="number">1</span>][i] + move(word[j<span class="number">-1</span>],word[i]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = word.size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; move(<span class="number">30</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">30</span>,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; ++j)&#123;</span><br><span class="line">                move[i][j] = <span class="built_in">abs</span>((i/<span class="number">6</span>)-(j/<span class="number">6</span>)) + <span class="built_in">abs</span>((i%<span class="number">6</span>)-(j%<span class="number">6</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; ++i)&#123;</span><br><span class="line">            move[<span class="number">26</span>][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">26</span>][<span class="number">26</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">26</span>][<span class="number">26</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> idx = word[i<span class="number">-1</span>] - <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">26</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">26</span>; ++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j][k] != <span class="number">0x3f3f3f3f</span>)&#123;</span><br><span class="line">                        dp[i][idx][k] = min(dp[i][idx][k],dp[i<span class="number">-1</span>][j][k] + move[j][idx]);</span><br><span class="line">                        dp[i][j][idx] = min(dp[i][j][idx],dp[i<span class="number">-1</span>][j][k] + move[k][idx]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> last = word.back() - <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            res = min(res,min(dp[n][last][i],dp[n][i][last]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>参考lee的答案<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">step</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">26</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(x/<span class="number">6</span>-y/<span class="number">6</span>) + <span class="built_in">abs</span>((x%<span class="number">6</span>)-(y%<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = word.size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(<span class="number">27</span>,INT_MAX);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*initial state*/</span></span><br><span class="line">        dp[<span class="number">26</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = word[i<span class="number">-2</span>] - <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">int</span> y = word[i<span class="number">-1</span>] - <span class="string">'A'</span>;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp1(<span class="number">27</span>,INT_MAX);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">26</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j] != INT_MAX)&#123;</span><br><span class="line">                    dp1[j] = min(dp1[j],dp[j] + step(x,y));</span><br><span class="line">                    dp1[x] = min(dp1[x],dp[j] + step(j,y)); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp = dp1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            res = min(res,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">step</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">26</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(x/<span class="number">6</span>-y/<span class="number">6</span>) + <span class="built_in">abs</span>((x%<span class="number">6</span>)-(y%<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = word.size();</span><br><span class="line">        <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">27</span>,INT_MAX));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*initial state*/</span></span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">26</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = word[i<span class="number">-2</span>] - <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">int</span> y = word[i<span class="number">-1</span>] - <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">26</span>; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j] != INT_MAX)&#123;</span><br><span class="line">                    dp[i][j] = min(dp[i][j],dp[i<span class="number">-1</span>][j] + step(x,y));</span><br><span class="line">                    dp[i][x] = min(dp[i][x],dp[i<span class="number">-1</span>][j] + step(j,y)); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)&#123;</span><br><span class="line">            res = min(res,dp[n][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;170比赛&quot;&gt;&lt;a href=&quot;#170比赛&quot; class=&quot;headerlink&quot; title=&quot;170比赛&quot;&gt;&lt;/a&gt;170比赛&lt;/h1&gt;&lt;p&gt;今天的题目非常不错，水平很高&lt;/p&gt;&lt;h2 id=&quot;5307-将整数转换为两个无零整数的和&quot;&gt;&lt;a href=&quot;#5307-将整数转换为两个无零整数的和&quot; class=&quot;headerlink&quot; title=&quot;5307. 将整数转换为两个无零整数的和&quot;&gt;&lt;/a&gt;5307. 将整数转换为两个无零整数的和&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;「无零整数」是十进制表示中 不含任何 0 的正整数。&lt;/p&gt;&lt;p&gt;给你一个整数 n，请你返回一个 由两个整数组成的列表 [A, B]，满足：&lt;/p&gt;&lt;p&gt;A 和 B 都是无零整数，&lt;code&gt;A + B = n&lt;/code&gt;&lt;br&gt;题目数据保证至少有一个有效的解决方案。&lt;/p&gt;&lt;p&gt;如果存在多个有效解决方案，你可以返回其中任意一个。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Cousera】how to Learn</title>
    <link href="http://yoursite.com/2020/01/06/119/"/>
    <id>http://yoursite.com/2020/01/06/119/</id>
    <published>2020-01-06T15:33:57.869Z</published>
    <updated>2020-01-06T15:34:34.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《how-to-learn》课程总结"><a href="#《how-to-learn》课程总结" class="headerlink" title="《how to learn》课程总结"></a>《how to learn》课程总结</h2><ul><li>很久没有这么认真的去学习一门课程了，通过这样的持续的课程学习，对自己的心态和学习的方法突然有了很大的触动，对于学习的技巧上有了想法。现在想想为什么从小到大很少有国人去科学的了解大脑的学习过程，以及如何制定科学的学习计划。不管如何，学习能力对一个人的一生的影响时非常重大的，因为任何一个岗位都需要快速的学习能力和技巧的掌握能力，如何才能快速的掌握一门技能或者掌握一种知识都会对自身的职业生涯带来非常大的影响，在当今这个快速变化的社会，如何保持自身的竞争力，快速的学习能力是职场上必不可少的竞争力，而我们的学校和社会却很少开设这样的课程，非常庆幸能够生活在这样一个互联网时代，能够让人快速而又方便的获取知识。我觉得这样的科普知识非常的重要，而国内的学校和老师很少去灌输这样的技巧，全都靠学生们去自己摸索。</li></ul><a id="more"></a><h4 id="大脑的工作原理"><a href="#大脑的工作原理" class="headerlink" title="大脑的工作原理"></a>大脑的工作原理</h4><ul><li><code>两种思维方式</code>：研究发现大脑一般的思维有两种模式，一种为专注模式，一种为发散模式。专注模式适合处理数学计算、文字编辑、手工制作；发散模式适合处理艺术想象、科研、设计、创造等技巧；总的概括来说，专注模式适合需要注意力和经验的方式学习和工作，发散模式适合需要用创造性思维去解决问题的方式学习和工作。我们的大脑工作时，一般不可能同时工作在两种模式之下，但可以在不同的工作模式下进行切换，所以我们在学习时，如果遇到需要创造性思维去解决和理解一些很难的题目或者理论时，这时我们应当尽量的利用大脑的发散思维模式，处于发散思维模式下的大脑，创造力会非常强；而在专注模式下适合去处理一些机械性不需要技巧和学习的任务，比如运动、写作、计算等任务技巧。进入专注模式非常容易，比如我们在一个没有外界打扰的环境下，大脑很容易在短时间的25分钟内，很容易进入专注模式去工作，一旦进入专注模式，思维就不容易被外界打断，进入高效率的机械工作模式，我们在日常的学习中要习惯快速的去进入高效的专注模式，比如用噪声耳机防止外界打扰，或者用所谓的番茄计时法，倒计时25分钟左右，即可进入快速的专注模式进行快速的学习；当我们进行科研和艺术创造时，这时候发散思维就非常重要，因为此时可能遇到很难的问题一时间没有想到解法，或者需要灵感才能继续下去的时候，这时就需要充分的去发挥你的想象力和发散思维，这时候就需要进入发散模式下才能够解决出该问题和答案，这时我们进入发散模式的方法也有很多种，比如我们可以带着问题去外出进行散步或者运动，或者下午茶这种放松模式，或者我们带着问题进行稍微休息一下，十五到二十分钟足以，但是时间不宜过长。如何才能高效的利用大脑和开发大脑的功能，才能我们需要长时间去尝试的。课程中提到一个重要的观点即要注重劳逸结合的方式去工作和学习，因为一旦大脑用脑过度，反而很难进入发散模式去创造性的解决一些难题。在工作和学习时需要用脑子去做事情，而不是机械的像一个工具一样，不经思考和总结的人永远得不到成长。</li><li><code>大脑思考的方式</code>：本次课程中详细的描述了人的大脑的学习和思考的过程，大脑的结构其实类似于人一样倾向于惰性思维，遇到所谓的输入信息后，就像机器一样不加思索便得出结论，这种思考方式在被称为”zoombin”僵尸模式。所谓的固化思维便是如此，人的大脑的思考方式也是通过不断的学习新的事物，然后对新的事物进行加工，形成新的神经处理链路，然后固话在大脑的内部中，以方便未来遇到类似的事情或者信息输入时，直接使用已经固化的神经链路来进行机械化的处理即可，避免过度的思考而浪费能量，因为大脑本身思考的过程时需要消耗非常多的能量。这种所谓的固化思维模式可以带来很多好处，有时被我们称为所谓的直觉的东西就是大脑固化形成的思维链路而已，这样我们处理日常的工作时就根本不需要再进行思考进行，大脑只需要执行机械的思维模式指挥四肢运动即可，比如我们常简的穿衣服、打字、开车、做饭、吃饭、技能等动作方式，显而易见可以见到这种工作模式的带来的好处，我们所谓的常见的工作技能就是这些所谓的固化的神经链路而已；但是另一方面也有其不好的地方，就是人容易形成固化思维，由此也可能被成为所谓的固执，见到所有类似的事情都会采用相同的处理方法和方式，这也是为什么人到了一定年纪就会很容易形成固化思维而变得非常的固执。如何才能让人避免陷入这样的固化思维呢？常见的有两种方式，一是运动，科学发现通过运动，能够让人的大脑有二次发育，大脑内部会形成新的海马体，二时外界刺激，通过外界给予的刺激，让人不断的接触新的环境，学习新的东西，见识到新的事物，让大脑内部的神经链路更改或者产生新的神经链路取代旧的神经链路，从而会带来新的思考方式和看法，这也是为什么所谓的终生学习的好处。从小要教育自己的子女，要养成终生学习的好习惯，因为时代在发展，知识总是会过时，新生的事物在不断发展和产生。了解大脑的学习和思考的过程，有助于我们改变自己对事物产生偏见的根本原因。</li><li><code>习惯的形成</code>：书中重点讲述了习惯的形成由来以及拖延症的问题，首先讲述了习惯的形成，由几个必备条件组成，内心的暗示、奖励、信念等几个必要的条件，由于初次养成习惯的初期，因为好的习惯或者不好的习惯，身体或者心理得到了满足或者奖励，比如懒睡得习惯，就是由于因为懒睡身体得到了部分满足，久而久之就形成了习惯性得内心得暗示，比如懒睡发生时，自己内心再暗示身体可以再睡一下，以满足身体得需要，从而身体到了满足，久而久之就形成了好的习惯和坏得习惯，如果没有奖励或者心里暗示就不可能养成习惯。</li><li><code>拖延症</code>:拖延症得主要问题是人们面对一个很惧怕得成果，因为取得这个成果很难或者很痛苦，内心就在暗示自己不要去进行它，内心总是去关注结果，久而久之就觉得很困难很难完成，因而暗示自己再拖延一下，延迟自己得满足感。书中特意讲了如何对付拖延症，首先不要去关注事物本身得结果，因为关注结果，只会让自己感到越来越恐惧，越来越没有信心，更重要得是把这件看似很难得事情做好一个计划，分解成很多个小的子任务，定时完成每一阶段的任务，关注进展和进程本身，不管多么困难或者难办，每天前进一点，过一段时间就会发现，随着事情的进展，困难的事情似乎没有人们想象的那么艰难。对于一个人，他的心态和信心很重要，如何面对困难和解决困难都是一件值得让人深思的事情。</li><li><code>两种记忆模式</code>：短期记忆和长期记忆模式，短期记忆主要用于学习新的事物，接受新的观念，适合于处理工作。长期记忆适合于记忆和存储某些特定的事情。所有的推理学习都是先存放于短期记忆空间中。研究发现，人的短期工作记忆可以非常快的记住新生事物，但是也会非常快，并且短期记忆存储空间非常小，而人的长期工作记忆空间近乎无穷大，但是要从短期记忆空间转移到长期记忆空间不容易，需要进行反复的练习，课程提到了练习的技巧，通过短时间内高频率的定期快速的练习可以加强这种记忆，从而将其从短期记忆存储空间转到长期记忆空间。文中还提到了如何加强记忆的技巧，即通过特定的类比或者图形来加强记忆，人类的大脑总是喜欢直观的图形记忆，而对枯燥的数字和文字记忆实际不够擅长，我们可以通过联想一幅画面的形式来记住某些事，比如可以用特定的时间、地点、感受、如何发生等等类似的小技巧来记住某些特定的事物，加强自己的长期记忆。</li><li><code>假象现象</code>：所谓的假象模式，即是自己长期练习自己已经非常熟悉的区域和内容时，这时就会对自己的处理能力产生假象，以为自己可以处理所有的事情，实际上许多不熟悉或者很难得问题没有遇到，这时就需要自己主动去打破自己得认知，也即是所谓得打破所谓得舒适区。我们在学习过程中，需要经常接受挑战，主动去挑战难题或者自己不熟悉得领域，才能真正得学到东西，才能获得成长。<h4 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h4>书中也有几名非常知名得教授提到了他们如何学习得方法:</li><li><code>带着问题去学习</code>:首先需要自己去温习参考书，然后带着总结和理解，同时带着问题在课程上去学习。</li><li><code>练习</code>: 定期要学会练习，练习时记住要找自己不会得题目去做，对于自己已经非常熟悉得题目，不要再浪费时间。要对课后习题去多理解。一定要自己去弄明白习题.</li><li><code>与同行交流</code>:要学会与其他人进行交流，其次要去理解他人，尝试去理解他为什么会这么思考，因为站在他得角度去思考问题。</li><li><code>两种思维的切换</code>: 遇到难题或者不懂得地方要学会发散思维和专注模式两种思维方式得切换。</li><li><code>信息来源得筛选</code>: 现实世界首先的信息来源问题，如何才能验证好的与坏的。如果本身学的知识是错误得是一种可悲，建议要从权威得课程学起，而不是要去弄那些很偏得小道消息来源。这个问题其实很关键，现在的国人很多时候对于信息来源的正确性不能分辨真伪，但是我们作为一个有知识受过高等教育的青年人应当牢记这个核心问题，如何去找到有价值的学习资料，这也是种非常非常重要的能力。</li><li><code>树立良好得价值观和人生观</code>: 如何保持对学习的兴趣和动力?要有求知欲<br>建议要多去学习一些名人的人物传记，好好思考他们是怎么面对人生，怎样的价值观和人生观。大科学家传记阅读。传记或者自传类文学是很好的读物，忏悔录</li><li><code>学会倾听</code>: 尊重别人即为自己认真倾听别人的意见，其实并不一定需要赞同别人的观点，而是站在别人的角度上去帮别人思考他为什么会得到这样的决定和赞同，“我明白为什么你是对的？”，“我理解你为什么这样想的原因了？”，采用这种更容易让人接受的方式去沟通和交流反而能够让人去接受你，而不是简单粗暴强压自己的想法给别人，或者一上来就指出别人的想法的错误，那样会让人无法接受，并且让人觉得你并不尊重别人的想法。</li></ul><h4 id="如何复习"><a href="#如何复习" class="headerlink" title="如何复习"></a>如何复习</h4><ul><li><code>check1</code>:加入一个兴趣小组，通过大家的交流学习，相互促进；</li><li><code>check2</code>:考试时复习，并不是要重新学习课本，而是集中再主要去解决问题，做习题，带着问题取思考。把主要步骤和解题思路写出来；</li><li><code>check3</code>: 对于自己已经非常熟悉得题目，不要浪费时间；</li><li><code>check4</code>: 注重劳逸结合；</li></ul><h4 id="如何准备考试"><a href="#如何准备考试" class="headerlink" title="如何准备考试:"></a>如何准备考试:</h4><ol><li>Did you make a serious effort to understand the text?<br>（你是否真正得理解教科书?)</li><li>Did you work with classmates on homework problems?<br>(你是否与同学一起解决家庭作业问题)</li><li>Did you attempt to outline each homework question before discussing it with classmates?(在与同学进行讨论家庭作业时，你是否尝试过独立思考过每一个问题)</li><li>Did you participate actively in homework group discussions?（你是在组内讨论时是否积极活跃？）</li><li>Did you consult with the instructor/teach assistants when you were having trouble?<br>（你遇到问题时，是否向你得助教请教过？）</li><li>Did you understand all of your homework problem solutions before the assignment was handed in?（你是提交作业时是否详细理解你得家庭作业得每个问题得解法）</li><li>Did you ask in class for explanations of homework problems that were unclear to you?（你遇到不懂的家庭作业的问题时，是否向你的同学请教过？）</li><li>If you had a study guide, did you carefully go through it before the test and convince yourself you understood all of thematerial?（如果你在考试之前是否从头到尾详细阅读过学习引导，并且理解其中所有的学习材料？）</li><li>Did you attempt to outline lots of problem solutions quickly without spending time doing the algebra?（你是否不需要详细计算就能很快知道大部分问题的解法？）</li><li>Did you go over the study guide and problems with classmates and quiz one another?（你是否跟你的同学一起详细阅读过学习引导和问题，并向其中的部分同学进行过交流和询问？）</li><li>If there was a review session, did you attend and ask questions about any concepts or ideas that you were unsure of?<br>（如果有复习课程，你是否主动参与提问某些你不是很清楚的细节和解法？）</li><li>Did you get a reasonable night’s sleep before the test?<br>（在考试前一天晚上，你是否睡眠充足？）</li></ol><h4 id="如何书写总结"><a href="#如何书写总结" class="headerlink" title="如何书写总结"></a>如何书写总结</h4><p>课程种有一个哈佛大学的教写作的教授提到的几个观点，我认为非常有价值的值得去思考的，关于写作的技巧。</p><ul><li><code>表达清楚</code>:文中提到的很关键的问题，文章写的好的首要因素时要表达清楚，用简单明了的方式把事情直接表达出来，要用平淡和朴实的语句来表达，切记不要华丽的辞藻和长句子。</li><li><code>表达思想</code>:其次才是表达的思想，关于表达思想的问题，教授建议我们先不要急着去表达思想，先去看看别人表达的思想，再加上自己的思考，久而久之就能自然而然的表达出来自己的思想了。</li><li><code>学会写摘要</code>: 学会写摘要这个技巧，通过学习别人的书籍或者论文，用摘要的方式快速的写出来，一方面时能够快速的锻炼自己的写作能力，另外一方面是可以快速的学习知识，提升自己的总结和表达能力，让自己的写作更加具有逻辑性和连贯性，这是我们需要长期学习的。这也是国内很多专业的文字秘书的学习方法，值得我们去思考和思索。如果想要知道一个人内心什么想法，专门去研究他的讲话内容即可，从他的讲话内容种提炼出摘要，就知道他有什么样的思想。</li></ul><h4 id="如何考试时面对难题"><a href="#如何考试时面对难题" class="headerlink" title="如何考试时面对难题"></a>如何考试时面对难题</h4><ul><li><code>注重复习</code>：无论如何，考试之前一定要复习，否则再多的考试技巧也时白费，要注重复习的重要性。</li><li><code>思想认识</code>: 首先要有正确的认识，遇到难题或者不会的题目是大概率事件，这时你需要做的只是放松自己的心情，深呼吸几次，然后继续前行，作为自己放松避免自己进入紧张的状态。</li><li><code>发散思维模式</code>: 首先通读所有的题目，先难后易，先读懂难题，带着难题取做简单的题目，可能不经意间就会做出来题目；因为这样可以充分的利用发散思维去解决难得题目。</li></ul><h4 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h4><ul><li><p><code>困难任务得处理</code>:遇到觉得非常困难的事情如何处理：首先要为这件事情制定一个计划，分成很多个小目标，完成整个任务很难，但时完成一个小目标很容易，定期抽时间完成小目标，将一个一个小目标坚持完成，小目标完成后立即转回正常工作，最终发现完成整件非常困难的事情，其实没有那么的难。分解任务，分段完成，千万不要想着一次将事情全部完成，本身完成的目标其实很难；二是 一定要定期抽时间出来完成，因为如果放置时间过长就会出现困难。</p></li><li><p><code>避免偏见</code>:遇到问题时要学会交流与沟通，而不是置之不理。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《how-to-learn》课程总结&quot;&gt;&lt;a href=&quot;#《how-to-learn》课程总结&quot; class=&quot;headerlink&quot; title=&quot;《how to learn》课程总结&quot;&gt;&lt;/a&gt;《how to learn》课程总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;很久没有这么认真的去学习一门课程了，通过这样的持续的课程学习，对自己的心态和学习的方法突然有了很大的触动，对于学习的技巧上有了想法。现在想想为什么从小到大很少有国人去科学的了解大脑的学习过程，以及如何制定科学的学习计划。不管如何，学习能力对一个人的一生的影响时非常重大的，因为任何一个岗位都需要快速的学习能力和技巧的掌握能力，如何才能快速的掌握一门技能或者掌握一种知识都会对自身的职业生涯带来非常大的影响，在当今这个快速变化的社会，如何保持自身的竞争力，快速的学习能力是职场上必不可少的竞争力，而我们的学校和社会却很少开设这样的课程，非常庆幸能够生活在这样一个互联网时代，能够让人快速而又方便的获取知识。我觉得这样的科普知识非常的重要，而国内的学校和老师很少去灌输这样的技巧，全都靠学生们去自己摸索。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="coursera" scheme="http://yoursite.com/categories/coursera/"/>
    
    
      <category term="coursera" scheme="http://yoursite.com/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 895题</title>
    <link href="http://yoursite.com/2020/01/05/121/"/>
    <id>http://yoursite.com/2020/01/05/121/</id>
    <published>2020-01-05T07:37:14.189Z</published>
    <updated>2020-01-06T05:16:04.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="895-最大频率栈"><a href="#895-最大频率栈" class="headerlink" title="895. 最大频率栈"></a>895. 最大频率栈</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>实现 <code>FreqStack</code>，模拟类似栈的数据结构的操作的一个类。FreqStack 有两个函数：<br>push(int x)，将整数 x 推入栈中。<br>pop()，它移除并返回栈中出现最频繁的元素。<br>如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。</p><p>示例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">"FreqStack"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"push"</span>,<span class="string">"pop"</span>,<span class="string">"pop"</span>,<span class="string">"pop"</span>,<span class="string">"pop"</span>],</span><br><span class="line">[[],[<span class="number">5</span>],[<span class="number">7</span>],[<span class="number">5</span>],[<span class="number">7</span>],[<span class="number">4</span>],[<span class="number">5</span>],[],[],[],[]]</span><br><span class="line">输出：[null,null,null,null,null,null,null,<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">解释：</span><br><span class="line">执行六次 .push 操作后，栈自底向上为 [<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>]。然后：</span><br><span class="line"></span><br><span class="line">pop() -&gt; 返回 <span class="number">5</span>，因为 <span class="number">5</span> 是出现频率最高的。</span><br><span class="line">栈变成 [<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>]。</span><br><span class="line"></span><br><span class="line">pop() -&gt; 返回 <span class="number">7</span>，因为 <span class="number">5</span> 和 <span class="number">7</span> 都是频率最高的，但 <span class="number">7</span> 最接近栈顶。</span><br><span class="line">栈变成 [<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>]。</span><br><span class="line"></span><br><span class="line">pop() -&gt; 返回 <span class="number">5</span> 。</span><br><span class="line">栈变成 [<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>]。</span><br><span class="line"></span><br><span class="line">pop() -&gt; 返回 <span class="number">4</span> 。</span><br><span class="line">栈变成 [<span class="number">5</span>,<span class="number">7</span>]。</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>提示：</p><ul><li>对 <code>FreqStack.push(int x)</code> 的调用中 <code>0 &lt;= x &lt;= 10^9</code>。</li><li>如果栈的元素数目为零，则保证不会调用 <code>FreqStack.pop()</code>。</li><li>单个测试样例中，对 <code>FreqStack.push</code>的总调用次数不会超过 <code>10000</code>。</li><li>单个测试样例中，对 <code>FreqStack.pop</code>的总调用次数不会超过<code>10000</code>。</li><li>所有测试样例中，对 <code>FreqStack.push</code> 和 <code>FreqStack.pop</code> 的总调用次数不会超过 <code>150000</code>。</li></ul><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>显然，我们更关心元素的频率。令 <code>freq</code>作为<code>xx</code>到 <code>xx</code> 的出现次数的映射 <code>Map</code>。<br>此外，我们也（可能）关心 <code>maxfreq</code>，即栈中任意元素的当前最大频率。这是理所应当的事情，因为我们必须弹出频率最高的元素。<br>那么当前主要的问题就变成了：在具有相同的（最大）频率的元素中，怎么判断那个元素是最新的？我们可以使用栈来查询这一信息：靠近栈顶的元素总是相对更新一些。<br>为此，我们令<code>group</code>作为从频率到具有该频率的元素的映射。到目前，我们已经实现了<code>FreqStack</code>的所有必要的组件。<br>算法<br>实际上，作为实现层面上的一点细节，如果 x 的频率为 f，那么我们将获取在所有 <code>group[i] (i &lt;= f)</code>中的 x,而不仅仅是栈顶的那个。这是因为每个 <code>group[i]</code>都会存储与第 i 个 x 副本相关的信息。<br>此后，我们仅仅需要如上所述维护 <code>freq</code>，<code>group</code>，以及 <code>maxfreq</code>。</p><ol><li>解法中采用数组加链表的方式简单的写了一组<code>hash</code>函数，用来保存所有的值出现的次数统计；</li><li>所有的栈采用单链表维护，每次映射时加入头部即可。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH_MAX_NODE 10007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH(x) (x)%HASH_MAX_NODE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FREQ_MAX_NODE 10001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b) ((a) &gt;= (b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN(a,b) ((a) &lt;= (b)?(a):(b))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DuListNode</span> * <span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DuListNode</span> * <span class="title">prev</span>;</span></span><br><span class="line">&#125;DuListNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct ListNode&#123;</span></span><br><span class="line"><span class="comment">    int key;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode * next;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    DuListNode **table;</span><br><span class="line">&#125;HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    HashMap * freq;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> ** <span class="title">freqlist</span>;</span></span><br><span class="line">    <span class="keyword">int</span> maxFreq;</span><br><span class="line">&#125; FreqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*simple hash */</span></span><br><span class="line"><span class="function">HashMap* <span class="title">hashMapInit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashMapGet</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapPut</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key, <span class="keyword">int</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapRemove</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapFree</span><span class="params">(HashMap* pObj)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash init*/</span></span><br><span class="line"><span class="function">HashMap* <span class="title">hashMapInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HashMap *pObj = (HashMap *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashMap));</span><br><span class="line">    pObj-&gt;table = (DuListNode **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuListNode *)*HASH_MAX_NODE);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HASH_MAX_NODE; ++i)&#123;</span><br><span class="line">        pObj-&gt;table[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash value get*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashMapGet</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> keyId = <span class="number">0</span>;</span><br><span class="line">    DuListNode * curr = <span class="literal">NULL</span>;</span><br><span class="line">    DuListNode * next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    assert(pObj != <span class="literal">NULL</span>);</span><br><span class="line">    keyId = HASH(key);</span><br><span class="line">    curr = pObj-&gt;table[keyId];</span><br><span class="line">    <span class="keyword">while</span>(curr&amp;&amp;curr-&gt;key != key)&#123;</span><br><span class="line">        curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!curr)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> curr-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash value set*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapPut</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> keyId = <span class="number">0</span>;</span><br><span class="line">    DuListNode * curr = <span class="literal">NULL</span>;</span><br><span class="line">    DuListNode * next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    assert(pObj != <span class="literal">NULL</span>);</span><br><span class="line">    keyId = HASH(key);</span><br><span class="line">    curr = pObj-&gt;table[keyId];</span><br><span class="line">    <span class="keyword">while</span>(curr&amp;&amp;curr-&gt;key != key)&#123;</span><br><span class="line">        curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next = pObj-&gt;table[keyId];</span><br><span class="line">    <span class="keyword">if</span>(!curr)&#123;</span><br><span class="line">        curr = (DuListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuListNode));</span><br><span class="line">        curr-&gt;key = key;</span><br><span class="line">        curr-&gt;val = val; </span><br><span class="line">        curr-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">        curr-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        next = pObj-&gt;table[keyId];</span><br><span class="line">        pObj-&gt;table[keyId] = curr;</span><br><span class="line">        curr-&gt;next = next;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> != next)&#123;</span><br><span class="line">            next-&gt;prev = curr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        curr-&gt;val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash key remove*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapRemove</span><span class="params">(<span class="keyword">const</span> HashMap* pObj, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> keyId = <span class="number">0</span>;</span><br><span class="line">    DuListNode * curr = <span class="literal">NULL</span>;</span><br><span class="line">    DuListNode * next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    assert(pObj != <span class="literal">NULL</span>);</span><br><span class="line">    keyId = HASH(key);</span><br><span class="line">    curr = pObj-&gt;table[keyId];</span><br><span class="line">    <span class="keyword">while</span>(curr&amp;&amp;curr-&gt;key != key)&#123;</span><br><span class="line">        curr = curr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == curr)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == curr-&gt;prev)&#123;</span><br><span class="line">        pObj-&gt;table[keyId] = curr-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(curr-&gt;next)&#123;</span><br><span class="line">            curr-&gt;next-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(curr);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        curr-&gt;prev-&gt;next = curr-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(curr-&gt;next)&#123;</span><br><span class="line">            curr-&gt;next-&gt;prev = curr-&gt;prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(curr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash value debug*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapDebug</span><span class="params">(HashMap * pObj)</span></span>&#123;</span><br><span class="line">    DuListNode * curr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    assert(pObj != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HASH_MAX_NODE; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pObj-&gt;table[i])&#123;</span><br><span class="line">            curr = pObj-&gt;table[i];</span><br><span class="line">            <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d:%d  "</span>,curr-&gt;key,curr-&gt;val);</span><br><span class="line">                curr = curr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hash free*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hashMapFree</span><span class="params">(HashMap* pObj)</span> </span>&#123;</span><br><span class="line">    DuListNode * node = <span class="literal">NULL</span>;</span><br><span class="line">    DuListNode * curr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    assert(pObj != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; HASH_MAX_NODE; ++i)&#123;</span><br><span class="line">        curr = pObj-&gt;table[i];</span><br><span class="line">        <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">            node = curr;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">        pObj-&gt;table[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(pObj-&gt;table);</span><br><span class="line">    <span class="built_in">free</span>(pObj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FreqStack* <span class="title">freqStackCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FreqStack * pObj = (FreqStack *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(FreqStack));</span><br><span class="line">    pObj-&gt;freq = hashMapInit();</span><br><span class="line">    pObj-&gt;freqlist = (struct ListNode **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode *)*FREQ_MAX_NODE);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FREQ_MAX_NODE; ++i)&#123;</span><br><span class="line">        pObj-&gt;freqlist[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pObj-&gt;maxFreq = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freqStackPush</span><span class="params">(FreqStack* obj, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> freq = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> * <span class="title">curr</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">    assert(obj != <span class="literal">NULL</span>);</span><br><span class="line">    freq = hashMapGet(obj-&gt;freq,x);</span><br><span class="line">    freq++;</span><br><span class="line">    hashMapPut(obj-&gt;freq,x,freq);</span><br><span class="line">    obj-&gt;maxFreq = MAX(freq,obj-&gt;maxFreq);</span><br><span class="line">    curr = (struct ListNode * )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line">    curr-&gt;val = x;</span><br><span class="line">    curr-&gt;next = obj-&gt;freqlist[freq];</span><br><span class="line">    obj-&gt;freqlist[freq] = curr;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">freqStackPop</span><span class="params">(FreqStack* obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> freq = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> * <span class="title">curr</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">    assert(obj != <span class="literal">NULL</span>);</span><br><span class="line">    val = obj-&gt;freqlist[obj-&gt;maxFreq]-&gt;val;</span><br><span class="line">    curr = obj-&gt;freqlist[obj-&gt;maxFreq];</span><br><span class="line">    obj-&gt;freqlist[obj-&gt;maxFreq] = curr-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(obj-&gt;freqlist[obj-&gt;maxFreq] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        obj-&gt;maxFreq--;</span><br><span class="line">    &#125;</span><br><span class="line">    freq = hashMapGet(obj-&gt;freq,val);</span><br><span class="line">    hashMapPut(obj-&gt;freq,val,freq<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">free</span>(curr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freqStackFree</span><span class="params">(FreqStack* obj)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> * <span class="title">curr</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> * <span class="title">node</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">    assert(obj != <span class="literal">NULL</span>);</span><br><span class="line">    hashMapFree(obj-&gt;freq);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FREQ_MAX_NODE; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj-&gt;freqlist[i])&#123;</span><br><span class="line">            curr = obj-&gt;freqlist[i];</span><br><span class="line">            <span class="keyword">while</span>(curr)&#123;</span><br><span class="line">                node = curr;</span><br><span class="line">                curr = curr-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(node);</span><br><span class="line">            &#125;</span><br><span class="line">            obj-&gt;freqlist[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(obj-&gt;freqlist);</span><br><span class="line">    <span class="built_in">free</span>(obj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FreqStack struct will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FreqStack* obj = freqStackCreate();</span></span><br><span class="line"><span class="comment"> * freqStackPush(obj, x);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * int param_2 = freqStackPop(obj);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * freqStackFree(obj);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;895-最大频率栈&quot;&gt;&lt;a href=&quot;#895-最大频率栈&quot; class=&quot;headerlink&quot; title=&quot;895. 最大频率栈&quot;&gt;&lt;/a&gt;895. 最大频率栈&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;实现 &lt;code&gt;FreqStack&lt;/code&gt;，模拟类似栈的数据结构的操作的一个类。FreqStack 有两个函数：&lt;br&gt;push(int x)，将整数 x 推入栈中。&lt;br&gt;pop()，它移除并返回栈中出现最频繁的元素。&lt;br&gt;如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。&lt;/p&gt;&lt;p&gt;示例：&lt;br&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;FreqStack&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;pop&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;pop&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;pop&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;pop&quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[],[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],[],[],[],[]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[null,null,null,null,null,null,null,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;执行六次 .push 操作后，栈自底向上为 [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]。然后：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop() -&amp;gt; 返回 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;，因为 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; 是出现频率最高的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;栈变成 [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop() -&amp;gt; 返回 &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;，因为 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; 和 &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 都是频率最高的，但 &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; 最接近栈顶。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;栈变成 [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop() -&amp;gt; 返回 &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;栈变成 [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop() -&amp;gt; 返回 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;栈变成 [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】 170周比赛</title>
    <link href="http://yoursite.com/2020/01/05/120/"/>
    <id>http://yoursite.com/2020/01/05/120/</id>
    <published>2020-01-05T06:11:31.314Z</published>
    <updated>2020-01-05T06:11:31.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="170比赛"><a href="#170比赛" class="headerlink" title="170比赛"></a>170比赛</h1><p>本周题目比较简单，基本上都是常规题目。</p><h2 id="5303-解码字母到整数映射"><a href="#5303-解码字母到整数映射" class="headerlink" title="5303. 解码字母到整数映射"></a>5303. 解码字母到整数映射</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>s</code>，它由数字<code>（&#39;0&#39; - &#39;9&#39;）</code>和<code>&#39;#&#39;</code>组成。我们希望按下述规则将 s 映射为一些小写英文字符：</p><ul><li>字符<code>（&#39;a&#39; - &#39;i&#39;）</code>分别用<code>（&#39;1&#39; - &#39;9&#39;）</code>表示。</li><li>字符<code>（&#39;j&#39; - &#39;z&#39;）</code>分别用<code>（&#39;10#&#39; - &#39;26#&#39;）</code>表示。<br>返回映射之后形成的新字符串。<br>题目数据保证映射始终唯一。</li></ul><a id="more"></a><p>示例 1：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"10#11#12"</span></span><br><span class="line">输出：<span class="string">"jkab"</span></span><br><span class="line">解释：<span class="string">"j"</span> -&gt; <span class="string">"10#"</span> , <span class="string">"k"</span> -&gt; <span class="string">"11#"</span> , <span class="string">"a"</span> -&gt; <span class="string">"1"</span> , <span class="string">"b"</span> -&gt; <span class="string">"2"</span>.</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"1326#"</span></span><br><span class="line">输出：<span class="string">"acz"</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">"25#"</span></span><br><span class="line">输出：<span class="string">"y"</span></span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = "<span class="number">12345678910</span>#<span class="number">11#12#13#14</span>#<span class="number">15#16#17#18</span>#<span class="number">19#20#21#22</span>#<span class="number">23#24#25#26</span>#"</span><br><span class="line">输出："abcdefghijklmnopqrstuvwxyz"</span><br></pre></td></tr></table></figure><br>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s[i]</code> 只包含数字<code>（&#39;0&#39;-&#39;9&#39;）</code>和 <code>&#39;#&#39;</code>字符。</li><li><code>s</code>是映射始终存在的有效字符串。</li></ul><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/decrypt-string-from-alphabet-to-integer-mapping" target="_blank" rel="noopener">https://leetcode-cn.com/problems/decrypt-string-from-alphabet-to-integer-mapping</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 直接翻译即可</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>按照题目中规定的替换原则，如果替换时出现了<code>#</code>,则前两位的数字一定大于<code>9</code>;</li><li>我们只需要判断当前的字符串后面紧跟的第三位是否为<code>#</code>即可；<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">freqAlphabets</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size();)&#123;</span><br><span class="line">            <span class="keyword">if</span>((i+<span class="number">2</span>) &lt; n &amp;&amp; s[i+<span class="number">2</span>] == <span class="string">'#'</span>)&#123;</span><br><span class="line">                res.push_back(<span class="string">'a'</span> + stoi(s.substr(i,<span class="number">2</span>))<span class="number">-1</span>);</span><br><span class="line">                i += <span class="number">3</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.push_back(<span class="string">'a'</span> + stoi(s.substr(i,<span class="number">1</span>))<span class="number">-1</span>);</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5304-子数组异或查询"><a href="#5304-子数组异或查询" class="headerlink" title="5304. 子数组异或查询"></a>5304. 子数组异或查询</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>有一个正整数数组 <code>arr</code>，现给你一个对应的查询数组 <code>queries</code>，其中 <code>queries[i] = [Li, Ri]</code>。</p><p>对于每个查询 i，请你计算从<code>Li</code> 到<code>Ri</code> 的<code>XOR</code>值（即 <code>arr[Li] xor arr[Li+1] xor ... xor arr[Ri]</code>）作为本次查询的结果。</p><p>并返回一个包含给定查询 <code>queries</code>所有结果的数组。</p><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>], queries = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">3</span>]]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">8</span>] </span><br><span class="line">解释：</span><br><span class="line">数组中元素的二进制表示形式是：</span><br><span class="line"><span class="number">1</span> = <span class="number">0001</span> </span><br><span class="line"><span class="number">3</span> = <span class="number">0011</span> </span><br><span class="line"><span class="number">4</span> = <span class="number">0100</span> </span><br><span class="line"><span class="number">8</span> = <span class="number">1000</span> </span><br><span class="line">查询的 XOR 值为：</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>] = <span class="number">1</span> <span class="keyword">xor</span> <span class="number">3</span> = <span class="number">2</span> </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>] = <span class="number">3</span> <span class="keyword">xor</span> <span class="number">4</span> = <span class="number">7</span> </span><br><span class="line">[<span class="number">0</span>,<span class="number">3</span>] = <span class="number">1</span> <span class="keyword">xor</span> <span class="number">3</span> <span class="keyword">xor</span> <span class="number">4</span> <span class="keyword">xor</span> <span class="number">8</span> = <span class="number">14</span> </span><br><span class="line">[<span class="number">3</span>,<span class="number">3</span>] = <span class="number">8</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">4</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">10</span>], queries = [[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">3</span>]]</span><br><span class="line">输出：[<span class="number">8</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 3 * 10^4</code></li><li><code>1 &lt;= arr[i] &lt;= 10^9</code></li><li><code>1 &lt;= queries.length &lt;= 3 * 10^4</code></li><li><code>queries[i].length == 2</code></li><li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt; arr.length</code></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/xor-queries-of-a-subarray" target="_blank" rel="noopener">https://leetcode-cn.com/problems/xor-queries-of-a-subarray</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 利用异或的特性即可</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>利用异或的特性，<code>x^x = 0</code>,<code>x^0 = x</code>,只要知道异或的基本性质，本题非常简单;</li><li>利用前<code>n</code>项的异或即可，<code>xor[i][j] = xor[j]^xor[i-1]</code>;<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xorQueries(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; queries) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xo(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            xo[i+<span class="number">1</span>] = xo[i]^arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; query: queries)&#123;</span><br><span class="line">            res.push_back(xo[query[<span class="number">0</span>]]^xo[query[<span class="number">1</span>]+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5305-获取你好友已观看的视频"><a href="#5305-获取你好友已观看的视频" class="headerlink" title="5305. 获取你好友已观看的视频"></a>5305. 获取你好友已观看的视频</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>有<code>n</code>个人，每个人都有一个 <code>0</code>到 <code>n-1</code>的唯一<code>id</code> 。</p><p>给你数组 <code>watchedVideos</code> 和 <code>friends</code>，其中 <code>watchedVideos[i]</code> 和 <code>friends[i]</code>分别表示 <code>id = i</code> 的人观看过的视频列表和他的好友列表。</p><figure class="highlight plain"><figcaption><span>1 ```的视频包含所有你好友观看过的视频，```level 2 ```的视频包含所有你好友的好友观看过的视频，以此类推。一般的，```Level``` 为 ```k``` 的视频包含所有从你出发，最短距离为 k 的好友观看过的视频。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定你的 ```id ``` 和一个 level 值，请你找出所有指定 level 的视频，并将它们按观看频率升序返回。如果有频率相同的视频，请将它们按名字字典序从小到大排列。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br></pre></td></tr></table></figure><p>输入：watchedVideos = [[“A”,”B”],[“C”],[“B”,”C”],[“D”]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1<br>输出：[“B”,”C”]<br>解释：<br>你的 id 为 0 ，你的朋友包括：<br>id 为 1 -&gt; watchedVideos = [“C”]<br>id 为 2 -&gt; watchedVideos = [“B”,”C”]<br>你朋友观看过视频的频率为：<br>B -&gt; 1<br>C -&gt; 2<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br></pre></td></tr></table></figure><br>输入：watchedVideos = [[“A”,”B”],[“C”],[“B”,”C”],[“D”]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2<br>输出：[“D”]<br>解释：<br>你的 id 为 0 ，你朋友的朋友只有一个人，他的 id 为 3 . </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提示：</span><br><span class="line">+ ```n == watchedVideos.<span class="built_in">length</span> == friends.<span class="built_in">length</span></span><br></pre></td></tr></table></figure><ul><li><code>2 &lt;= n &lt;= 100</code></li><li><code>1 &lt;= watchedVideos[i].length &lt;= 100</code></li><li><code>1 &lt;= watchedVideos[i][j].length &lt;= 8</code></li><li><code>0 &lt;= friends[i].length &lt; n</code></li><li><code>0 &lt;= friends[i][j] &lt; n</code></li><li><code>0 &lt;= id &lt; n</code></li><li><code>1 &lt;= level &lt; n</code></li><li><code>如果 friends[i] 包含 j ，那么 friends[j] 包含 i</code></li></ul><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/get-watched-videos-by-your-friends" target="_blank" rel="noopener">https://leetcode-cn.com/problems/get-watched-videos-by-your-friends</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> BFS + 排序</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li><code>BFS</code>,获取最小距离为k的好友列表。</li><li>对所获取的好友列表中每个人喜欢观看的视频进行统计，然后按照字典序和次数进行排序即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; psi;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; watchedVideosByFriends(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;&amp; watchedVideos, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; friends, <span class="keyword">int</span> id, <span class="keyword">int</span> level) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = friends.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visit(n,<span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line">        </span><br><span class="line">        visit[id] = <span class="literal">true</span>;</span><br><span class="line">        qu.push(id);</span><br><span class="line">        <span class="keyword">while</span>(!qu.empty()&amp;&amp;level &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sz = qu.size();</span><br><span class="line">            <span class="built_in">list</span>.clear();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)&#123;</span><br><span class="line">                <span class="keyword">int</span> curr = qu.front();</span><br><span class="line">                qu.pop();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; neg: friends[curr])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!visit[neg])&#123;</span><br><span class="line">                        qu.push(neg);</span><br><span class="line">                        visit[neg] = <span class="literal">true</span>;</span><br><span class="line">                        <span class="built_in">list</span>.push_back(neg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            level--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&gt; videos;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; freq;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; p: <span class="built_in">list</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v: watchedVideos[p])&#123;</span><br><span class="line">                freq[v]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; it : freq)&#123;</span><br><span class="line">            videos.push_back(make_pair(it.first,it.second));</span><br><span class="line">        &#125;</span><br><span class="line">        sort(videos.begin(),videos.end(),[](<span class="keyword">const</span> psi &amp; a,<span class="keyword">const</span> psi &amp; b)&#123;</span><br><span class="line">           <span class="keyword">if</span>(a.second == b.second)&#123;</span><br><span class="line">               <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">           &#125; </span><br><span class="line">           <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; v : videos)&#123;</span><br><span class="line">            res.push_back(v.first);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="5306-让字符串成为回文串的最少插入次数"><a href="#5306-让字符串成为回文串的最少插入次数" class="headerlink" title="5306. 让字符串成为回文串的最少插入次数"></a>5306. 让字符串成为回文串的最少插入次数</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>给你一个字符串 <code>s</code> ，每一次操作你都可以在字符串的任意位置插入任意字符。请你返回让 <code>s</code> 成为回文串的 最少操作次数 。</p><p>「回文串」是正读和反读都相同的字符串。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"zzazz"</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：字符串 <span class="string">"zzazz"</span> 已经是回文串了，所以不需要做任何插入操作。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"mbadm"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：字符串可变为 <span class="string">"mbdadbm"</span> 或者 <span class="string">"mdbabdm"</span> 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"leetcode"</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：插入 <span class="number">5</span> 个字符后字符串变为 <span class="string">"leetcodocteel"</span> 。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"g"</span></span><br><span class="line">输出：<span class="number">0</span></span><br></pre></td></tr></table></figure><br>示例 5：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"no"</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 500</code></li><li>s 中所有字符都是小写字母。</li></ul><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/minimum-insertion-steps-to-make-a-string-palindrome" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-insertion-steps-to-make-a-string-palindrome</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> dp</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>本题变形的各种<code>dp</code>已经出现过很多次了，主要是那几个变形要熟悉：<script type="math/tex; mode=display">dp[i][j] = min(dp[i+1][j],dp[i][j-1]) + 1 \\dp[i][j] = min(dp[i][j],dp[i+1][j-1]) \quad if(s[i] == s[j])</script></li><li>熟练掌握几个<code>dp</code>的变形，本质还是一样的变换。<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minInsertions</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*intial*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j+i &lt; n; ++j)&#123;</span><br><span class="line">                dp[j][j+i] = min(dp[j][j+i<span class="number">-1</span>],dp[j+<span class="number">1</span>][j+i]) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(s[j] == s[j+i])&#123;</span><br><span class="line">                    dp[j][j+i] = min(dp[j][j+i],dp[j+<span class="number">1</span>][j+i<span class="number">-1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;170比赛&quot;&gt;&lt;a href=&quot;#170比赛&quot; class=&quot;headerlink&quot; title=&quot;170比赛&quot;&gt;&lt;/a&gt;170比赛&lt;/h1&gt;&lt;p&gt;本周题目比较简单，基本上都是常规题目。&lt;/p&gt;&lt;h2 id=&quot;5303-解码字母到整数映射&quot;&gt;&lt;a href=&quot;#5303-解码字母到整数映射&quot; class=&quot;headerlink&quot; title=&quot;5303. 解码字母到整数映射&quot;&gt;&lt;/a&gt;5303. 解码字母到整数映射&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt;，它由数字&lt;code&gt;（&amp;#39;0&amp;#39; - &amp;#39;9&amp;#39;）&lt;/code&gt;和&lt;code&gt;&amp;#39;#&amp;#39;&lt;/code&gt;组成。我们希望按下述规则将 s 映射为一些小写英文字符：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;字符&lt;code&gt;（&amp;#39;a&amp;#39; - &amp;#39;i&amp;#39;）&lt;/code&gt;分别用&lt;code&gt;（&amp;#39;1&amp;#39; - &amp;#39;9&amp;#39;）&lt;/code&gt;表示。&lt;/li&gt;
&lt;li&gt;字符&lt;code&gt;（&amp;#39;j&amp;#39; - &amp;#39;z&amp;#39;）&lt;/code&gt;分别用&lt;code&gt;（&amp;#39;10#&amp;#39; - &amp;#39;26#&amp;#39;）&lt;/code&gt;表示。&lt;br&gt;返回映射之后形成的新字符串。&lt;br&gt;题目数据保证映射始终唯一。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
