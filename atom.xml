<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blow in the wind</title>
  
  <subtitle>just code for fun</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-30T01:16:47.879Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mike meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Leetcode】一道概率题目</title>
    <link href="http://yoursite.com/2019/10/28/85/"/>
    <id>http://yoursite.com/2019/10/28/85/</id>
    <published>2019-10-28T02:08:50.090Z</published>
    <updated>2019-10-30T01:16:47.879Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个非常有意思的概率题，非常值得探讨的一道题目</p><h2 id="1227-Airplane-Seat-Assignment-Probability"><a href="#1227-Airplane-Seat-Assignment-Probability" class="headerlink" title="1227. Airplane Seat Assignment Probability"></a>1227. Airplane Seat Assignment Probability</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:</p><a id="more"></a><p>Take their own seat if it is still available,<br>Pick other seats randomly when they find their seat occupied<br>What is the probability that the n-th person can get his own seat?</p><p>Example 1:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Inpu<span class="variable">t:</span> n = <span class="number">1</span></span><br><span class="line">Outpu<span class="variable">t:</span> <span class="number">1.00000</span></span><br><span class="line">Explanation: The <span class="keyword">first</span> person can <span class="keyword">only</span> <span class="built_in">get</span> the <span class="keyword">first</span> seat.</span><br></pre></td></tr></table></figure><br>Example 2:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: n = <span class="number">2</span></span><br><span class="line">Output: <span class="number">0.50000</span></span><br><span class="line">Explanation: The <span class="keyword">second</span> person has <span class="keyword">a</span> probability <span class="keyword">of</span> <span class="number">0.5</span> <span class="built_in">to</span> <span class="built_in">get</span> <span class="keyword">the</span> <span class="keyword">second</span> seat (when <span class="keyword">first</span> person gets <span class="keyword">the</span> <span class="keyword">first</span> seat).</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode.com/problems/airplane-seat-assignment-probability/" target="_blank" rel="noopener">https://leetcode.com/problems/airplane-seat-assignment-probability/</a><br>&lt;/br&gt;<br>&nbsp;</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 求第n个人能够做到原本座位上的概率。<br>&nbsp;</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>第1个人如果坐在自己的座位上，那么第n个人肯定可以坐到自己的座位上，这时第1个人坐到第1个座位的概率为<code>1/n</code>.</li><li>第1个人未坐到自己的作为上，且第1个人坐到第n个座位上，则这时第n个人坐到第n个座位的概率为<code>0</code>;</li><li>第1个人坐到第<code>2~n-1</code>个座位上，比如坐到第<code>i</code>个座位上，<code>概率为</code>n-2/n<code>,后续的第</code>2~i-1个人都按照正常的座位进行坐，第i个人选的座位这时分为以下几种情况：<br>a) 第<code>i</code>个人坐到第1个座位上，则这时相当于第<code>i</code>个人与第1个人进行交换了座位，则这时第<code>n</code>个人会坐到第<code>n</code>个座位上，概率为1/n-1;<br>b)第<code>i</code>个人坐到第n个座位上，则这时第<code>n</code>个人会坐到第<code>n</code>个座位上，概率为0；<br>c)第<code>i</code>个人在第<code>i+1~n-1</code>选一个座位坐下，第<code>n</code>个人坐到第<code>n</code>个座位上，则这时的概率为((n-1)-2)/(n-1)，继续下一轮的循环；<br>递推公式为<code>f(n) = 1 / n + (n - 2) / n * f(n - 1)</code>;<br>用数学归纳法，即可证明<code>f(n) = 1/2  (n &gt; 1)</code></li></ol></blockquote><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span>                       // <span class="number">1</span>st person picks his own seat, probability = <span class="number">1</span>/<span class="built_in">n</span></span><br><span class="line">    + <span class="number">1</span>/<span class="built_in">n</span> * <span class="number">0</span>                    // <span class="number">1</span>st person picks last one's seat, probability = <span class="number">1</span>/<span class="built_in">n</span></span><br><span class="line">+ (<span class="built_in">n</span>-<span class="number">2</span>)/<span class="built_in">n</span> *                  // <span class="number">1</span>st person picks one of seat from <span class="number">2</span>nd to (<span class="built_in">n</span>-<span class="number">1</span>)th, probability = (<span class="built_in">n</span>-<span class="number">2</span>)/<span class="built_in">n</span></span><br><span class="line">    (</span><br><span class="line">    <span class="number">1</span>/(<span class="built_in">n</span>-<span class="number">2</span>) * f(<span class="built_in">n</span>-<span class="number">1</span>)         // <span class="number">1</span>st person pick <span class="number">2</span>nd's seat, <span class="number">2</span>nd person becomes the new <span class="string">"careless"</span> person, <span class="built_in">and</span> there are <span class="built_in">n</span>-<span class="number">1</span> seats left. it becomes subproblem of <span class="built_in">n</span>-<span class="number">1</span>.</span><br><span class="line">        <span class="number">1</span>/(<span class="built_in">n</span>-<span class="number">2</span>) * f(<span class="built_in">n</span>-<span class="number">2</span>)         // <span class="number">1</span>st person pick <span class="number">3</span>rd's seat, <span class="number">2</span>nd person will pick his own seat, <span class="number">3</span>nd person becomes the new <span class="string">"careless"</span> person, <span class="built_in">and</span> there are <span class="built_in">n</span>-<span class="number">2</span> seats left. it becomes subproblem of <span class="built_in">n</span>-<span class="number">2</span>.</span><br><span class="line">        ......</span><br><span class="line">        <span class="number">1</span>/(<span class="built_in">n</span>-<span class="number">2</span>) * f(<span class="number">2</span>)           // <span class="number">1</span>st person pick (<span class="built_in">n</span>-<span class="number">1</span>)th's seat, (<span class="built_in">n</span>-<span class="number">1</span>)th person becomes the new <span class="string">"careless"</span> person, there are <span class="number">2</span> seats left.</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">=&gt; f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span>                                                      &#123;when <span class="built_in">n</span> &lt;= <span class="number">2</span>&#125;</span><br><span class="line">   f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span> + <span class="number">1</span>/<span class="built_in">n</span> * ( f(<span class="built_in">n</span>-<span class="number">1</span>) + f(<span class="built_in">n</span>-<span class="number">2</span>) + f(<span class="built_in">n</span>-<span class="number">3</span>) + ... + f(<span class="number">2</span>) )    &#123;when <span class="built_in">n</span> &gt; <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span> + <span class="number">1</span>/<span class="built_in">n</span> * ( f(<span class="built_in">n</span>-<span class="number">1</span>) + f(<span class="built_in">n</span>-<span class="number">2</span>) + f(<span class="built_in">n</span>-<span class="number">3</span>) + ... + f(<span class="number">2</span>) )    </span><br><span class="line">=&gt;<span class="built_in">n</span> * f(<span class="built_in">n</span>) = <span class="number">1</span> + f(<span class="built_in">n</span>-<span class="number">1</span>) + f(<span class="built_in">n</span>-<span class="number">2</span>) + f(<span class="built_in">n</span>-<span class="number">3</span>) + ... + f(<span class="number">2</span>)</span><br><span class="line">=&gt;(<span class="built_in">n</span> + <span class="number">1</span>) * f(<span class="built_in">n</span>+<span class="number">1</span>) = <span class="number">1</span> + f(<span class="built_in">n</span>) + f(<span class="built_in">n</span>-<span class="number">1</span>) + f(<span class="built_in">n</span>-<span class="number">2</span>) + f(<span class="built_in">n</span>-<span class="number">3</span>) + ... + f(<span class="number">2</span>)</span><br><span class="line">=&gt;(<span class="built_in">n</span> + <span class="number">1</span>) * f(<span class="built_in">n</span>+<span class="number">1</span>) - <span class="built_in">n</span> * f(<span class="built_in">n</span>) = f(<span class="built_in">n</span>) </span><br><span class="line">=&gt;(<span class="built_in">n</span> + <span class="number">1</span>) * f(<span class="built_in">n</span>+<span class="number">1</span>) = (<span class="built_in">n</span> + <span class="number">1</span>) * f(<span class="built_in">n</span>) </span><br><span class="line">=&gt;f(<span class="built_in">n</span>+<span class="number">1</span>) = f(<span class="built_in">n</span>)  </span><br><span class="line"></span><br><span class="line">  f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span> + <span class="number">1</span>/<span class="built_in">n</span> * ( f(<span class="built_in">n</span>-<span class="number">1</span>) + f(<span class="built_in">n</span>-<span class="number">2</span>) + f(<span class="built_in">n</span>-<span class="number">3</span>) + ... + f(<span class="number">2</span>) )</span><br><span class="line">=&gt;f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span> + <span class="number">1</span>/<span class="built_in">n</span> * ( f(<span class="built_in">n</span>) + f(<span class="built_in">n</span>) + f(<span class="built_in">n</span>) + ... + f(<span class="built_in">n</span>) )</span><br><span class="line">=&gt;f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="built_in">n</span> + (<span class="built_in">n</span>-<span class="number">2</span>)/<span class="built_in">n</span> * f(<span class="built_in">n</span>)  </span><br><span class="line">=&gt;<span class="built_in">n</span> * f(<span class="built_in">n</span>) = <span class="number">1</span> + (<span class="built_in">n</span>-<span class="number">2</span>) * f(<span class="built_in">n</span>)</span><br><span class="line">=&gt;<span class="number">2</span> * f(<span class="built_in">n</span>) = <span class="number">1</span> </span><br><span class="line">=&gt;f(<span class="built_in">n</span>) = <span class="number">1</span>/<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">When n &lt;= <span class="number">2</span> </span><br><span class="line"> f(<span class="name">n</span>) = <span class="number">1</span>/n</span><br><span class="line">When n &gt; <span class="number">2</span> (<span class="name">all</span> these <span class="number">5</span> formulas are correct, we can choose any one of them)</span><br><span class="line"> f(<span class="name">n</span>) = <span class="number">1</span>/n + <span class="number">1</span>/n * ( <span class="name">f</span>(<span class="name">n-1</span>) + f(<span class="name">n-2</span>) + f(<span class="name">n-3</span>) + ... + f(<span class="number">2</span>) )  </span><br><span class="line"> f(<span class="name">n+1</span>) = f(<span class="name">n</span>)</span><br><span class="line"> f(<span class="name">n</span>) = <span class="number">1</span>/n + (<span class="name">n-2</span>)/n * f(<span class="name">n</span>)   </span><br><span class="line"> f(<span class="name">n</span>) = <span class="number">1</span>/n + (<span class="name">n-2</span>)/n * f(<span class="name">n-1</span>)  is correct too since f(<span class="name">n</span>) == f(<span class="name">n-1</span>)</span><br><span class="line"> f(<span class="name">n</span>) = <span class="number">1/2</span></span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码比较简单：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">double</span> nthPersonGetsNthSeat(<span class="built_in">int</span> n) &#123;</span><br><span class="line">       <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1.0</span>d;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>d / n + (n - <span class="number">2</span>d) / n * nthPersonGetsNthSeat(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天遇到一个非常有意思的概率题，非常值得探讨的一道题目&lt;/p&gt;&lt;h2 id=&quot;1227-Airplane-Seat-Assignment-Probability&quot;&gt;&lt;a href=&quot;#1227-Airplane-Seat-Assignment-Probability&quot; class=&quot;headerlink&quot; title=&quot;1227. Airplane Seat Assignment Probability&quot;&gt;&lt;/a&gt;1227. Airplane Seat Assignment Probability&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:&lt;/p&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】160比赛</title>
    <link href="http://yoursite.com/2019/10/28/90/"/>
    <id>http://yoursite.com/2019/10/28/90/</id>
    <published>2019-10-27T16:08:31.250Z</published>
    <updated>2019-10-29T01:02:16.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="160周比赛"><a href="#160周比赛" class="headerlink" title="160周比赛"></a>160周比赛</h1><p>今天学习到了gray的编写，非常不错的解法，又学习了一遍</p><h2 id="5238-找出给定方程的正整数解"><a href="#5238-找出给定方程的正整数解" class="headerlink" title="5238. 找出给定方程的正整数解"></a>5238. 找出给定方程的正整数解</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给出一个函数<code>f(x, y)</code> 和一个目标结果 <code>z</code>，请你计算方程<code>f(x,y) == z</code>所有可能的正整数 数对 <code>x</code>和 <code>y</code>。</p><p>给定函数是严格单调的，也就是说：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f(x, y) &lt; f(x + <span class="number">1</span>, y)</span><br><span class="line">f(x, y) &lt; f(x, y + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>函数接口定义如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface CustomFunction &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Returns positive integer f(x, y) for any given positive integer x and y.</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>如果你想自定义测试，你可以输入整数 function_id 和一个目标结果 z 作为输入，其中 function_id 表示一个隐藏函数列表中的一个函数编号，题目只会告诉你列表中的 2 个函数。  </p><p>你可以将满足条件的 结果数对 按任意顺序返回。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：function_id = <span class="number">1</span>, z = <span class="number">5</span></span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">1</span>]]</span><br><span class="line">解释：function_id = <span class="number">1</span> 表示 f(x, y) = x + y</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：function_id = <span class="number">2</span>, z = <span class="number">5</span></span><br><span class="line">输出：[[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">1</span>]]</span><br><span class="line">解释：function_id = <span class="number">2</span> 表示 f(x, y) = x * y</span><br></pre></td></tr></table></figure><br>提示：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;= function_id &lt;= <span class="number">9</span></span><br><span class="line"><span class="number">1</span> &lt;= z &lt;= <span class="number">100</span></span><br><span class="line">题目保证 f(x, y) == z 的解处于 <span class="number">1</span> &lt;= x, y &lt;= <span class="number">1000</span> 的范围内。</span><br><span class="line">在 <span class="number">1</span> &lt;= x, y &lt;= <span class="number">1000</span> 的前提下，题目保证 f(x, y) 是一个 <span class="number">32</span> 位有符号整数。</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/check-if-it-is-a-straight-line" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-if-it-is-a-straight-line</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 找出给定方程的解</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>题目比较简单，首先直接的想到用遍历的方法即可，时间复杂度为<code>O(n^2)</code>；</li><li>其次可以用二分查找的方法，固定遍历<code>x</code>,对<code>y</code>进行二分查找，时间复杂度为<code>O(lgn)</code>;</li><li>仔细观察我们记得在矩阵中进行搜索特定值时可以用双指针的办法，我们从矩阵的左下角和右上角进行搜索遍历，如果判断比<code>x</code>小，则进行<code>x-1</code>操作,<code>(x,y)</code>分别赋初值<code>(1,1000),(1000,1)</code>,双指针操作，记住如果得到相等的值则进行<code>x-1,y+1</code>或者<code>x+1,y-1</code>操作；</li></ol></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>双指针或者二分查找<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * // This is the custom function interface.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * class CustomFunction &#123;</span></span><br><span class="line"><span class="comment"> * public:</span></span><br><span class="line"><span class="comment"> *     // Returns f(x, y) for any given positive integers x and y.</span></span><br><span class="line"><span class="comment"> *     // Note that f(x, y) is increasing with respect to both x and y.</span></span><br><span class="line"><span class="comment"> *     // i.e. f(x, y) &lt; f(x + 1, y), f(x, y) &lt; f(x, y + 1)</span></span><br><span class="line"><span class="comment"> *     int f(int x, int y);</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; findSolution(CustomFunction&amp; customfunction, <span class="keyword">int</span> z) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">1000</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l &gt;= <span class="number">1</span> &amp;&amp; l &lt;= <span class="number">1000</span> &amp;&amp; r &gt;= <span class="number">1</span> &amp;&amp; r &lt;= <span class="number">1000</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(customfunction.f(l,r) == z)&#123;</span><br><span class="line">                res.push_back(&#123;l,r&#125;);</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(customfunction.f(l,r) &lt; z)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        l = <span class="number">1000</span>;</span><br><span class="line">        r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &gt;= <span class="number">1</span> &amp;&amp; l &lt;= <span class="number">1000</span> &amp;&amp; r &gt;= <span class="number">1</span> &amp;&amp; r &lt;= <span class="number">1000</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(customfunction.f(l,r) == z)&#123;</span><br><span class="line">                res.push_back(&#123;l,r&#125;);</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(customfunction.f(l,r) &lt; z)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * // This is the custom function interface.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * class CustomFunction &#123;</span></span><br><span class="line"><span class="comment"> * public:</span></span><br><span class="line"><span class="comment"> *     // Returns f(x, y) for any given positive integers x and y.</span></span><br><span class="line"><span class="comment"> *     // Note that f(x, y) is increasing with respect to both x and y.</span></span><br><span class="line"><span class="comment"> *     // i.e. f(x, y) &lt; f(x + 1, y), f(x, y) &lt; f(x, y + 1)</span></span><br><span class="line"><span class="comment"> *     int f(int x, int y);</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; findSolution(CustomFunction&amp; customfunction, <span class="keyword">int</span> z) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">1000</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; ++i)&#123;</span><br><span class="line">            l = <span class="number">1</span>;</span><br><span class="line">            r = <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> f = customfunction.f(i,mid);</span><br><span class="line">                <span class="keyword">if</span>(f == z)&#123;</span><br><span class="line">                    res.push_back(&#123;i,mid&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(f &lt; z)&#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">   This is the custom function interface.</span></span><br><span class="line"><span class="string">   You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="string">   class CustomFunction:</span></span><br><span class="line"><span class="string">       # Returns f(x, y) for any given positive integers x and y.</span></span><br><span class="line"><span class="string">       # Note that f(x, y) is increasing with respect to both x and y.</span></span><br><span class="line"><span class="string">       # i.e. f(x, y) &lt; f(x + 1, y), f(x, y) &lt; f(x, y + 1)</span></span><br><span class="line"><span class="string">       def f(self, x, y):</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSolution</span><span class="params">(self, customfunction: <span class="string">'CustomFunction'</span>, z: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        l = <span class="number">1</span></span><br><span class="line">        r = <span class="number">1000</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l &gt;=<span class="number">1</span> <span class="keyword">and</span> r &gt;= <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">              l &lt;= <span class="number">1000</span> <span class="keyword">and</span> r &lt;= <span class="number">1000</span>:</span><br><span class="line">            <span class="keyword">if</span> customfunction.f(l,r) == z:</span><br><span class="line">                res.append([l,r])</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> customfunction.f(l,r) &gt; z:</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        l = <span class="number">1000</span></span><br><span class="line">        r = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &gt;=<span class="number">1</span> <span class="keyword">and</span> r &gt;= <span class="number">1</span> <span class="keyword">and</span> \</span><br><span class="line">              l &lt;= <span class="number">1000</span> <span class="keyword">and</span> r &lt;= <span class="number">1000</span>:</span><br><span class="line">            <span class="keyword">if</span> customfunction.f(l,r) == z:</span><br><span class="line">                res.append([l,r])</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> customfunction.f(l,r) &gt; z:</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ol><h2 id="5239-循环码排列"><a href="#5239-循环码排列" class="headerlink" title="5239. 循环码排列"></a>5239. 循环码排列</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你两个整数 <code>n</code>和<code>start</code>。你的任务是返回任意 <code>(0,1,2,,...,2^n-1)</code>的排列<code>p</code>，并且满足：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>[<span class="number">0</span>] = start</span><br><span class="line"><span class="selector-tag">p</span>[i] 和 <span class="selector-tag">p</span>[i+<span class="number">1</span>] 的二进制表示形式只有一位不同</span><br><span class="line"><span class="selector-tag">p</span>[<span class="number">0</span>] 和 <span class="selector-tag">p</span>[<span class="number">2</span>^n -<span class="number">1</span>] 的二进制表示形式也只有一位不同</span><br></pre></td></tr></table></figure></p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, start = <span class="number">3</span></span><br><span class="line">输出：[<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">解释：这个排列的二进制表示是 (<span class="number">11</span>,<span class="number">10</span>,<span class="number">00</span>,<span class="number">01</span>)</span><br><span class="line">     所有的相邻元素都有一位是不同的，另一个有效的排列是 [<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出：n = <span class="number">3</span>, start = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">解释：这个排列的二进制表示是 (<span class="number">010</span>,<span class="number">110</span>,<span class="number">111</span>,<span class="number">101</span>,<span class="number">100</span>,<span class="number">000</span>,<span class="number">001</span>,<span class="number">011</span>)</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>&lt;= n &lt;= <span class="number">16</span></span><br><span class="line"><span class="symbol">0 </span>&lt;= start &lt; <span class="number">2</span>^n</span><br></pre></td></tr></table></figure><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/circular-permutation-in-binary-representation" target="_blank" rel="noopener">https://leetcode-cn.com/problems/circular-permutation-in-binary-representation</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 格雷码</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>最开始的解法，采用暴力破解，直接递归即可求出每一位的不同；</li><li>后来看了别人更好的解法求<code>gray</code>,步骤如下：<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a. 初始化序列&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">b, 第i次对序列逆序读取，并在为每个数加上前缀<span class="number">1</span>，即加上pow(<span class="number">2</span>,i);</span><br></pre></td></tr></table></figure></li><li>找到<code>gray</code>序列中等于<code>start</code>的索引，然后对数组进行移位操作即可;<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; circularPermutation(<span class="keyword">int</span> n, <span class="keyword">int</span> start) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = res.size()<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j)&#123;</span><br><span class="line">                res.push_back(res[j] + (<span class="number">1</span>&lt;&lt;i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; res.size(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res[i] == start)&#123;</span><br><span class="line">                l = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(res.begin(),res.end());</span><br><span class="line">        reverse(res.begin(),res.begin()+res.size()-l);</span><br><span class="line">        reverse(res.begin()+res.size()-l,res.end());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; circularPermutation(<span class="keyword">int</span> n, <span class="keyword">int</span> start) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class="line">            res.push_back(start^i^(i&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">circularPermutation</span><span class="params">(self, n: int, start: int)</span> -&gt; List[int]:</span></span><br><span class="line">        res = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            end = len(res)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(end,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">                res.append(res[j]+(<span class="number">1</span>&lt;&lt;i))</span><br><span class="line">        </span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(res)):</span><br><span class="line">            <span class="keyword">if</span> res[i] == start:</span><br><span class="line">                idx = i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res[idx:] + res[<span class="number">0</span>:idx]</span><br></pre></td></tr></table></figure><h2 id="5240-串联字符串的最大长度"><a href="#5240-串联字符串的最大长度" class="headerlink" title="5240. 串联字符串的最大长度"></a>5240. 串联字符串的最大长度</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给定一个字符串数组 arr，字符串 s 是将 arr 某一子序列字符串连接所得的字符串，如果 s 中的每一个字符都只出现过一次，那么它就是一个可行解。<br>请返回所有可行解 s 中最长长度。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="string">"un"</span>,<span class="string">"iq"</span>,<span class="string">"ue"</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：所有可能的串联组合是 <span class="string">""</span>,<span class="string">"un"</span>,<span class="string">"iq"</span>,<span class="string">"ue"</span>,<span class="string">"uniq"</span> 和 <span class="string">"ique"</span>，最大长度为 <span class="number">4</span>。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="string">"cha"</span>,<span class="string">"r"</span>,<span class="string">"act"</span>,<span class="string">"ers"</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：可能的解答有 <span class="string">"chaers"</span> 和 <span class="string">"acters"</span>。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="string">"abcdefghijklmnopqrstuvwxyz"</span>]</span><br><span class="line">输出：<span class="number">26</span></span><br></pre></td></tr></table></figure></p><p>提示:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;= arr.length &lt;= <span class="number">16</span></span><br><span class="line"><span class="number">1</span> &lt;= arr[i].length &lt;= <span class="number">26</span></span><br><span class="line">arr[i] 中只含有小写英文字母</span><br></pre></td></tr></table></figure><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 暴力加掩码</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>由于题目中的字符串只包含小写，字母，我们对字符串进行编码处理，转换为二进制掩码<code>mask</code>;</li><li>我们判断两个字符串是否包含有相同的字母，可以用掩码判断<code>mask1 &amp; mask2 == 0</code>,可以用该公式来进行判断；</li><li>如果两个字符串合并，则对掩码进行合并即可，则等式为<code>mask = mask1|mask2</code>;</li><li>暴力解决，遍历数组的所有组合，总共有<code>2^n</code>中组合，判断是否存在符合条件的组合即可。<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bitTest</span><span class="params">(<span class="keyword">int</span> mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((mask&amp;(<span class="number">1</span>&lt;&lt;n))&gt;&gt;n)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bitSet</span><span class="params">(<span class="keyword">int</span> &amp; mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        mask |= (<span class="number">1</span>&lt;&lt;n);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bitClr</span><span class="params">(<span class="keyword">int</span> &amp; mask,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        mask &amp;= (~(<span class="number">1</span>&lt;&lt;n));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isUnique</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mask = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bitTest(mask,c-<span class="string">'a'</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            bitSet(mask,c-<span class="string">'a'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strToMask</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mask = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c: s)&#123;</span><br><span class="line">            bitSet(mask,c-<span class="string">'a'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> mask;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countBit</span><span class="params">(<span class="keyword">int</span> mask)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(mask)&#123;</span><br><span class="line">            mask = mask&amp;(mask<span class="number">-1</span>);</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mask;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*detech unique string*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isUnique(arr[i]))&#123;</span><br><span class="line">                mask.push_back(strToMask(arr[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = mask.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">pow</span>(<span class="number">2</span>,m); ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> curr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">bool</span> isCan = <span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bitTest(i,j))&#123;</span><br><span class="line">                    <span class="keyword">if</span>((curr&amp;mask[j]) == <span class="number">0</span>)&#123;</span><br><span class="line">                        curr |= mask[j];</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        isCan = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(isCan)&#123;</span><br><span class="line">                res = max(res,countBit(curr));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxLength</span><span class="params">(self, arr: List[str])</span> -&gt; int:</span></span><br><span class="line">        arr = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> len(set(x)) == len(x)]</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">codec</span><span class="params">(str)</span>:</span></span><br><span class="line">            res = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> str:</span><br><span class="line">                res = res|(<span class="number">1</span>&lt;&lt;(ord(c)-ord(<span class="string">'a'</span>)))</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        mask = [[codec(x),len(x)] <span class="keyword">for</span> x <span class="keyword">in</span> arr]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>&lt;&lt;(len(arr))):</span><br><span class="line">            curr = <span class="number">0</span></span><br><span class="line">            l = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">                <span class="keyword">if</span> (i&amp;(<span class="number">1</span>&lt;&lt;j)) &gt; <span class="number">0</span> <span class="keyword">and</span> (curr&amp;mask[j][<span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line">                    curr = curr|mask[j][<span class="number">0</span>]</span><br><span class="line">                    l += mask[j][<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    l = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            res = max(res,l)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxLength</span><span class="params">(self, arr: List[str])</span> -&gt; int:</span></span><br><span class="line">        arr = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> len(x) == len(set(x))]</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">codec</span><span class="params">(str)</span>:</span></span><br><span class="line">            res = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> str:</span><br><span class="line">                res = res|(<span class="number">1</span>&lt;&lt;(ord(c)-ord(<span class="string">'a'</span>)))</span><br><span class="line">            <span class="keyword">return</span> (res,len(str))</span><br><span class="line">        </span><br><span class="line">        dp = [(<span class="number">0</span>,<span class="number">0</span>)]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line">            mask,l = codec(x)</span><br><span class="line">            <span class="keyword">for</span> m,c <span class="keyword">in</span> dp:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> mask&amp;m:</span><br><span class="line">                    dp.append((mask|m,l+c))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max(l <span class="keyword">for</span> m,l <span class="keyword">in</span> dp)</span><br></pre></td></tr></table></figure><h2 id="5241-铺瓷砖"><a href="#5241-铺瓷砖" class="headerlink" title="5241. 铺瓷砖"></a>5241. 铺瓷砖</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>你是一位施工队的工长，根据设计师的要求准备为一套设计风格独特的房子进行室内装修。</p><p>房子的客厅大小为 <code>n x m</code>，为保持极简的风格，需要使用尽可能少的 正方形 瓷砖来铺盖地面。</p><p>假设正方形瓷砖的规格不限，边长都是整数。</p><p>请你帮设计师计算一下，最少需要用到多少块方形瓷砖？</p><p>示例 1：<br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/25/sample_11_1592.png" alt="1"><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, m = <span class="number">3</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：<span class="number">3</span> 块地砖就可以铺满卧室。</span><br><span class="line">     <span class="number">2</span> 块 <span class="number">1</span>x1 地砖</span><br><span class="line">     <span class="number">1</span> 块 <span class="number">2</span>x2 地砖</span><br></pre></td></tr></table></figure><br>示例 2：<br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/25/sample_22_1592.png" alt="2"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">5</span>, m = <span class="number">8</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><p>示例 3：<br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/25/sample_33_1592.png" alt="3"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">11</span>, m = <span class="number">13</span></span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure><p>提示:<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>&lt;= n &lt;= <span class="number">13</span></span><br><span class="line"><span class="symbol">1 </span>&lt;= m &lt;= <span class="number">13</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/tiling-a-rectangle-with-the-fewest-squares" target="_blank" rel="noopener">https://leetcode-cn.com/problems/tiling-a-rectangle-with-the-fewest-squares</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>题目类似于脑筋急转弯，正规的程序设计中比较少见的题目；</li><li>我们定义dp[i][j]表示组成i*j大小的矩形所用最小正方形的个数。<br>我们考虑如何将问题化为规模更小的问题，其实就是以下三种情况：<br>a.竖直切割，将矩形分成左右两块。<br><img src="90-1.jpg" alt="1"><br>b.水平切割，将矩形分成上下两块。<br><img src="90-2.jpg" alt="2"><br>c.中间挖走了一块，导致需要将剩下的矩形分成4块，共5块。<br><img src="90-3.jpg" alt="3"><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">14</span>][<span class="number">14</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">tilingRectangle</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                f[i][j] = <span class="number">999999</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= min(i, j); ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    f[i][j] = min(f[i][j], f[i - k][j] + f[k][j - k] + <span class="number">1</span>);</span><br><span class="line">                    f[i][j] = min(f[i][j], f[i - k][k] + f[i][j - k] + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">1</span>; z &lt;= min(k - <span class="number">1</span>, j - k); ++z)</span><br><span class="line">                    &#123;</span><br><span class="line">                        f[i][j] = min(f[i][j], f[i - k][k + z] + f[i - k + z][j - k - z] + f[k - z][j - k] + <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> f[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;160周比赛&quot;&gt;&lt;a href=&quot;#160周比赛&quot; class=&quot;headerlink&quot; title=&quot;160周比赛&quot;&gt;&lt;/a&gt;160周比赛&lt;/h1&gt;&lt;p&gt;今天学习到了gray的编写，非常不错的解法，又学习了一遍&lt;/p&gt;&lt;h2 id=&quot;5238-找出给定方程的正整数解&quot;&gt;&lt;a href=&quot;#5238-找出给定方程的正整数解&quot; class=&quot;headerlink&quot; title=&quot;5238. 找出给定方程的正整数解&quot;&gt;&lt;/a&gt;5238. 找出给定方程的正整数解&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给出一个函数&lt;code&gt;f(x, y)&lt;/code&gt; 和一个目标结果 &lt;code&gt;z&lt;/code&gt;，请你计算方程&lt;code&gt;f(x,y) == z&lt;/code&gt;所有可能的正整数 数对 &lt;code&gt;x&lt;/code&gt;和 &lt;code&gt;y&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;给定函数是严格单调的，也就是说：&lt;/p&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f(x, y) &amp;lt; f(x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f(x, y) &amp;lt; f(x, y + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="http://yoursite.com/2019/10/24/88/"/>
    <id>http://yoursite.com/2019/10/24/88/</id>
    <published>2019-10-24T06:32:18.314Z</published>
    <updated>2019-10-24T06:35:11.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分查找-lower-bound-与-upper-bound"><a href="#二分查找-lower-bound-与-upper-bound" class="headerlink" title="二分查找 lower_bound 与 upper_bound"></a>二分查找 lower_bound 与 upper_bound</h1><h2 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个算法中，first是最终要返回的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> size, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0</span>, middle;</span><br><span class="line">    <span class="keyword">int</span> half, len;</span><br><span class="line">    len = size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        half = len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        middle = first + half;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">array</span>[middle] &lt; key) &#123;     </span><br><span class="line">            first = middle + <span class="number">1</span>;          </span><br><span class="line">            len = len-half<span class="number">-1</span>;       <span class="comment">//在右边子序列中查找</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            len = half;            <span class="comment">//在左边子序列（包含middle）中查找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> size, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0</span>, len = size<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> half, middle;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        half = len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        middle = first + half;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">array</span>[middle] &gt; key)     <span class="comment">//中位数大于key,在包含last的左半边序列中查找。</span></span><br><span class="line">            len = half;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            first = middle + <span class="number">1</span>;    <span class="comment">//中位数小于等于key,在右半边序列中查找。</span></span><br><span class="line">            len = len - half - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二分查找-lower-bound-与-upper-bound&quot;&gt;&lt;a href=&quot;#二分查找-lower-bound-与-upper-bound&quot; class=&quot;headerlink&quot; title=&quot;二分查找 lower_bound 与 upper_bound&quot;&gt;&lt;/a&gt;二分查找 lower_bound 与 upper_bound&lt;/h1&gt;&lt;h2 id=&quot;lower-bound&quot;&gt;&lt;a href=&quot;#lower-bound&quot; class=&quot;headerlink&quot; title=&quot;lower_bound&quot;&gt;&lt;/a&gt;lower_bound&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这个算法中，first是最终要返回的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lower_bound&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; first = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; half, len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    len = size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(len &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        half = len &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        middle = first + half;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;[middle] &amp;lt; key) &amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            first = middle + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            len = len-half&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;       &lt;span class=&quot;comment&quot;&gt;//在右边子序列中查找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            len = half;            &lt;span class=&quot;comment&quot;&gt;//在左边子序列（包含middle）中查找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; first;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>线性模型</title>
    <link href="http://yoursite.com/2019/10/23/%E3%80%90leetcode%E3%80%9157/"/>
    <id>http://yoursite.com/2019/10/23/【leetcode】57/</id>
    <published>2019-10-23T09:06:39.489Z</published>
    <updated>2019-10-23T15:57:31.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-线性模型"><a href="#1-线性模型" class="headerlink" title="1.线性模型"></a>1.线性模型</h2><p>给定n个属性描述属性的特征 <script type="math/tex">x = (x_1,x_2,x_3,...,x_n)</script>,其中$x_i$表示第$i$个特征，线性模型试图通过一个特征值的线性组合来表示最终的模型，即最终的预测函数:</p><script type="math/tex; mode=display">f(x) = \omega_{1}x_{1} + \omega_{2}x_{2} + ... + \omega_{n}x_{n} + b  \tag{1-1}</script><a id="more"></a><p>如果采用向量表示则：</p><script type="math/tex; mode=display">f(x) = \omega^{T}x + b  \tag{1-2}</script><p>其中$\omega = (\omega_{1},\omega_{2},\omega_{3}…\omega_{n})$,我们只需要求出$\omega$ 和 $b$，就可以求出预测函数，得到最终的模型。<br>我们常见的可以通过线性回归(linear regression)试图学得一个线性模式，使得给定特征值，尽可能的准确的预测输出与实际值接近的结果。<br>我们已知$f(x) = \omega^{T}x + b $，</p><h3 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h3><p>我们知道欧几里得距离可以表示两个值的差异，可以使用均方差来度量，应当尽可能的保证均方差最小。假设我们有m个样本，<br>$x_{i}$代表每个样本的特征值，$y_{i}$代表实际每个样本的实际结果.</p><script type="math/tex; mode=display">\sum_{l=1}^{n}(f(x_{i})-y_{i})^{2} \tag{1-3}</script><p>我们应当保证均方差尽可能的最小。我们用矩阵表示所有的样本</p><script type="math/tex; mode=display">X =  \left[\begin{matrix} x_{11} & x_{12} & \cdots & x_{1n} & 1  \\ x_{21} & x_{22} & \cdots & x_{2n} & 1  \\ \vdots & \vdots & \ddots & \vdots & \vdots \\ x_{m1} & x_{m2} & \cdots & x_{mn} & 1  \\\end{matrix}\right] =  \left[\begin{matrix} x_{1}^{T} & 1  \\ x_{2}^{T} & 1  \\ \vdots & \vdots \\ x_{m}^{T} & 1  \\\end{matrix}\right]   \tag{1-4}</script><p>我们把实际的结果也用向量形式表示则</p><script type="math/tex; mode=display">Y =\left[\begin{matrix}y_{1} \\y_{2} \\\vdots \\y_{m}  \\\end{matrix}\right]  \tag{1-5}</script><p>则应尽量使得均方差最小$arg min(y-X\omega-b)^{T}(y-X\omega-b)  \tag{1-6}$.</p><p>我们令$E_{\omega} = (y-X\omega)^{T}(y-X\omega)$。实际上将$x \omega b$代入公式得到</p><script type="math/tex; mode=display">E = \sum_{i=1}^{m}(f(x_{i})-y_{i})^{2}  = \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2} \tag{1-7}</script><p>如式（7）所示，我们知道如果使的E最小，则在导数方向应该是最小，则我们分别$\omega$、$b$进行求导.<br>则可知：</p><script type="math/tex; mode=display">\frac{\partial E}{\partial \omega} = 0 \tag{1-8}</script><script type="math/tex; mode=display">\frac{\partial E}{\partial b} = 0 \tag{1-9}</script><p>我们将其方程8与方程9代入数据，可知</p><script type="math/tex; mode=display">\frac{\partial E}{\partial \omega_{1}} = 0 \\\frac{\partial E}{\partial \omega_{2}} = 0 \\\frac{\partial E}{\partial \omega_{3}} = 0 \\\vdots                                        \\\frac{\partial E}{\partial \omega_{n}} = 0 \\\frac{\partial E}{\partial b} = 0</script><p>我们将E的值代入即可得到</p><script type="math/tex; mode=display">\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{1}} = 0 \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{2}} = 0 \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{3}} = 0 \\\vdots  \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial \omega_{n}} = 0 \\\frac{\partial \sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i})^{2}}{\partial b} = 0 \\</script><p>求导数后可得如下：</p><script type="math/tex; mode=display">\begin{equation}\begin{cases}2\sum_{i=1}^{m}x_{i1}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\2\sum_{i=1}^{m}x_{i2}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\2\sum_{i=1}^{m}x_{i3}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\\vdots \\2\sum_{i=1}^{m}x_{in}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\2\sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b - y_{i}) = 0 \\\end{cases}\end{equation}</script><p>将方程进行化解后可得:</p><script type="math/tex; mode=display">\begin{equation}\begin{cases}\sum_{i=1}^{m}x_{i1}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{i1}y_{i} \\\sum_{i=1}^{m}x_{i2}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{i2}y_{i} \\\sum_{i=1}^{m}x_{i3}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{i3}y_{i} \\\vdots     \\\sum_{i=1}^{m}x_{in}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}x_{in}y_{i} \\\sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij} + b) = \sum_{i=1}^{m}y_{i} \\\end{cases}\end{equation}</script><p>我们令$\omega_{0} = b$将其转换为矩阵的乘法为</p><script type="math/tex; mode=display">E = \left[\begin{matrix}\omega_{1} & \omega_{2} & \omega_{3} & \cdots & \omega_{n} & b\end{matrix}\right]\left[\begin{matrix}x_{11} & x_{21} & x_{31}  & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32}  & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33}  & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots & \vdots  \\x_{1n} & x_{2n} & x_{3n}  & \cdots & x_{mn} \\1 & 1 & 1  & 1 & 1 \\\end{matrix}\right]\left[\begin{matrix}x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} & 1\\x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} & 1\\x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} & 1\\\vdots  & \vdots  & \vdots   & \ddots & \vdots & \vdots \\x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} & 1\\\end{matrix}\right] \\= \left[\begin{matrix}x_{11} & x_{21} & x_{31} & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32} & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33} & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots  & \vdots \\x_{1n} & x_{2n} & x_{3n} & \cdots & x_{mn} \\1 & 1 & 1  & 1 & 1 \\\end{matrix}\right]\left[\begin{matrix}y_{1} \\y_{2} \\y_{3} \\\cdots \\y_{m}  \\\end{matrix}\right]</script><p>我们令</p><script type="math/tex; mode=display">A = \left[\begin{matrix}x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} & 1\\x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} & 1\\x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} & 1\\\vdots  & \vdots  & \vdots   & \ddots & \vdots & \vdots \\x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} & 1\\\end{matrix}\right] \\</script><p>则上述等式可以化简为</p><script type="math/tex; mode=display">\omega^{T}A^{T}A = A^{T}Y \\</script><script type="math/tex; mode=display">\omega^{T}A^{T} = A^{T}YA^{-1} \\</script><script type="math/tex; mode=display">\omega^{T} = A^{T}YA^{-1}(A^{T})^{-1}\\</script><p>即可求出$\omega$的值，所得结果。</p><h3 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h3><p>如果方差最小，我们也知道的偏离大小。我们知道离散变量的期望为取平均值。<br>我们假设<script type="math/tex">f(x) = \omega_{0} + \omega_{1}x_{1} + \omega_{2}x_{2} + \cdots + \omega_{n}x_{n}</script></p><script type="math/tex; mode=display">E = \frac{y_{1}+y_{2}+y_{3}+\cdots+y_{m}}{m} = \overline{y}D(x) = \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-E)^{2} = \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}</script><p>如果使得$D(x)$在不同的$\omega$下取值最小，按照极限原理，应当是导数为0时，可能取得极值，即最小值，因此我们对$D(x)$对$\omega$进行求导。</p><script type="math/tex; mode=display">\frac{\partial D(x)}{\partial \omega} = 0 \tag{1-10}</script><p>将（1-10）进行展开则:</p><script type="math/tex; mode=display">\frac{\partial D(x)}{\partial \omega_{1}} = 0 \\\frac{\partial D(x)}{\partial \omega_{2}} = 0 \\\frac{\partial D(x)}{\partial \omega_{3}} = 0 \\\vdots \\\frac{\partial D(x)}{\partial \omega_{n}} = 0 \\</script><p>分开展开来看</p><script type="math/tex; mode=display">\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{0}} = 0 \\\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{1}} = 0 \\\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{2}} = 0 \\\vdots \\\frac{\partial \frac{1}{m}\sum_{i=1}^{m}(f(x_{i})-\overline{y})^{2}}{\partial \omega_{n}} = 0 \\</script><p>将上述公式全部进行求导后可得:</p><script type="math/tex; mode=display">\begin{equation}\begin{cases}\sum_{i=1}^{m}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}\overline{y} \\\sum_{i=1}^{m}x_{i1}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{i1}\overline{y}\\\sum_{i=1}^{m}x_{i2}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{i2}\overline{y} \\\sum_{i=1}^{m}x_{i3}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{i3}\overline{y} \\\vdots     \\\sum_{i=1}^{m}x_{in}(\sum_{j=1}^{n}\omega_{j}x_{ij}+\omega_{0}) = \sum_{i=1}^{m}x_{in}\overline{y} \\\end{cases}\end{equation}</script><p>将其转化为矩阵即为如下：</p><script type="math/tex; mode=display">\left[\begin{matrix}\omega_{0} & \omega_{1} & \omega_{2} & \omega_{3} & \cdots & \omega_{n}\end{matrix}\right]\left[\begin{matrix}1 & 1 & 1  & 1 & 1 \\x_{11} & x_{21} & x_{31}  & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32}  & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33}  & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots & \vdots  \\x_{1n} & x_{2n} & x_{3n}  & \cdots & x_{mn} \\\end{matrix}\right]\left[\begin{matrix}1 & x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} \\1 & x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} \\1 & x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} \\1 & \vdots  & \vdots  & \vdots   & \ddots & \vdots \\1 & x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} \\\end{matrix}\right] \\= \left[\begin{matrix}1 & 1 & 1  & 1 & 1 \\x_{11} & x_{21} & x_{31} & \cdots & x_{m1} \\x_{12} & x_{22} & x_{32} & \cdots & x_{m2} \\x_{13} & x_{23} & x_{33} & \cdots & x_{m3} \\\vdots  & \vdots  & \vdots   & \ddots  & \vdots \\x_{1n} & x_{2n} & x_{3n} & \cdots & x_{mn} \\\end{matrix}\right]\left[\begin{matrix}\overline{y}  \\\overline{y}  \\\overline{y}  \\\overline{y}  \\\overline{y}  \\\end{matrix}\right]</script><p>在此我们令举证</p><script type="math/tex; mode=display">A = \left[\begin{matrix}1 & x_{11} & x_{12} & x_{13}  & \cdots & x_{1n} \\1 & x_{21} & x_{22} & x_{23}  & \cdots & x_{2n} \\1 & x_{31} & x_{32} & x_{33}  & \cdots & x_{3n} \\1 & \vdots  & \vdots  & \vdots   & \ddots & \vdots \\1 & x_{m1} & x_{m2} & x_{m3}  & \cdots & x_{mn} \\\end{matrix}\right] \\</script><p>则上述等式可以简化为</p><script type="math/tex; mode=display">\omega^{T}A^{T}A = A^{T}\overline{Y} \\</script><script type="math/tex; mode=display">\omega^{T}A^{T} = A^{T}YA^{-1}\overline{Y}\\</script><script type="math/tex; mode=display">\omega^{T} = A^{T}YA^{-1}(A^{T})^{-1}\overline{Y}\\</script><p>最终我们可以通过矩阵的计算即可求出所有的$\omega$的值，即为最终的结果。<br>以上为一般为常见的线性规划的求解过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-线性模型&quot;&gt;&lt;a href=&quot;#1-线性模型&quot; class=&quot;headerlink&quot; title=&quot;1.线性模型&quot;&gt;&lt;/a&gt;1.线性模型&lt;/h2&gt;&lt;p&gt;给定n个属性描述属性的特征 &lt;script type=&quot;math/tex&quot;&gt;x = (x_1,x_2,x_3,...,x_n)&lt;/script&gt;,其中$x_i$表示第$i$个特征，线性模型试图通过一个特征值的线性组合来表示最终的模型，即最终的预测函数:&lt;/p&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f(x) = \omega_{1}x_{1} + \omega_{2}x_{2} + ... + \omega_{n}x_{n} + b  \tag{1-1}&lt;/script&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ml" scheme="http://yoursite.com/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】130比赛</title>
    <link href="http://yoursite.com/2019/10/23/%E3%80%90leetcode%E3%80%91130%E5%91%A8%E6%AF%94%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/10/23/【leetcode】130周比赛/</id>
    <published>2019-10-23T05:22:43.809Z</published>
    <updated>2019-10-23T16:15:14.336Z</updated>
    
    <content type="html"><![CDATA[<p>上午忙着在家带小孩，没有参加比赛，周一上班抽时间将四道题目全部做一遍，总的来说四道题目都不是特别难，但是两道hard级别的题目需要耐心去解答，许多细节需要注意。</p><h1 id="130周周赛"><a href="#130周周赛" class="headerlink" title="130周周赛"></a>130周周赛</h1><h2 id="大样本统计"><a href="#大样本统计" class="headerlink" title="大样本统计"></a>大样本统计</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>我们对<code>0</code>到 <code>255</code> 之间的整数进行采样，并将结果存储在数组<code>count</code> 中,<code>count[k]</code>就是整数<code>k</code>的采样个数。我们以 浮点数 数组的形式，分别返回样本的最小值、最大值、平均值、中位数和众数。其中，众数是保证唯一的。<br>网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><a id="more"></a><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/statistics-from-a-large-sample/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/statistics-from-a-large-sample/</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目本身不太难,关键节点在于理解采样数据，本题中采样范围为<code>0~255</code>，每个采样的次数存储在<code>count[i]</code>数据中，需要掌握<code>count</code>数组即可。</p><ol><li>最小值：满足<code>count[i]</code>大于<code>0</code>的最小i值</li><li>最大值：满足<code>count[i]</code>大于<code>0</code>的最大i值</li><li>平均值：计算出采样的总和除以采样的次数即可</li><li>中位数：如果采样次数为偶数，在采样值排名靠中间的两个值取平均和即可，如果采样次数为奇数，则去排名中间的数即可。</li><li>众数:找到<code>count[i]</code>的最大值，取i即可。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findNth</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; count,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count.size(); ++i)&#123;</span><br><span class="line">            n = n - count[i];</span><br><span class="line">            <span class="keyword">if</span>(n &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; sampleStats(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; count) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> n = count.size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> samples = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> minNum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> maxNum = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> average = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> medium = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> mode = <span class="number">0.0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            sum += count[i]*i;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; maxCnt)&#123;</span><br><span class="line">                maxCnt = count[i];</span><br><span class="line">                mode = i;</span><br><span class="line">            &#125;</span><br><span class="line">            samples += count[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                minNum = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>;i &gt;= <span class="number">0</span>; --i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                maxNum = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span>(samples%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> l1 = findNth(count,samples/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> l2 = findNth(count,samples/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            medium = <span class="keyword">double</span>(l1+l2)/<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> l1 = findNth(count,samples/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">            medium = <span class="keyword">double</span>(l1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*min*/</span></span><br><span class="line">        ans.push_back(minNum);</span><br><span class="line">        ans.push_back(maxNum);</span><br><span class="line">        ans.push_back(<span class="keyword">double</span>(sum)/samples);</span><br><span class="line">        ans.push_back(medium);</span><br><span class="line">        ans.push_back(mode);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-拼车"><a href="#2-拼车" class="headerlink" title="2.拼车"></a>2.拼车</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>顺风车司机按照乘客上车的顺序，能否满足所有的乘客乘车需求</p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/car-pooling/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/car-pooling/</a></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>初有<code>capacity</code> 个空座位可以用来载客。能否满足<code>trips</code>数组要求。<br>这儿有一份行程计划表 <code>trips[][]</code>，其中 <code>trips[i] = [num_passengers, start_location, end_location]</code>包含了你的第 <code>i</code>次行程信息：</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>我们假设在一个直线上，车辆在<code>start_location</code>处会增加<code>num_passengers</code>个乘客，在<code>end_location</code>处会减少num_passengers个乘客，乘客下车肯定会满足乘车要求，我们只需要满足车辆在<code>start_location</code>处有大于等于<code>num_passengers</code>个空位即可。我们用rest来标识车辆在x处有多少个空座位，按照乘车距离进行排序，如果<code>rest</code>小于0则表示车辆座位不足，此时则不能满足要求。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">carPooling</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; trips, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; carry;</span><br><span class="line">        <span class="keyword">int</span> n = trips.size();</span><br><span class="line">        <span class="keyword">int</span> rest = capacity;</span><br><span class="line">        </span><br><span class="line">        sort(trips.begin(),trips.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            carry[trips[i][<span class="number">1</span>]] -= trips[i][<span class="number">0</span>];</span><br><span class="line">            carry[trips[i][<span class="number">2</span>]] += trips[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> t: carry)&#123;</span><br><span class="line">            rest = rest + t.second;</span><br><span class="line">            <span class="keyword">if</span>(rest &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上午忙着在家带小孩，没有参加比赛，周一上班抽时间将四道题目全部做一遍，总的来说四道题目都不是特别难，但是两道hard级别的题目需要耐心去解答，许多细节需要注意。&lt;/p&gt;&lt;h1 id=&quot;130周周赛&quot;&gt;&lt;a href=&quot;#130周周赛&quot; class=&quot;headerlink&quot; title=&quot;130周周赛&quot;&gt;&lt;/a&gt;130周周赛&lt;/h1&gt;&lt;h2 id=&quot;大样本统计&quot;&gt;&lt;a href=&quot;#大样本统计&quot; class=&quot;headerlink&quot; title=&quot;大样本统计&quot;&gt;&lt;/a&gt;大样本统计&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;我们对&lt;code&gt;0&lt;/code&gt;到 &lt;code&gt;255&lt;/code&gt; 之间的整数进行采样，并将结果存储在数组&lt;code&gt;count&lt;/code&gt; 中,&lt;code&gt;count[k]&lt;/code&gt;就是整数&lt;code&gt;k&lt;/code&gt;的采样个数。我们以 浮点数 数组的形式，分别返回样本的最小值、最大值、平均值、中位数和众数。其中，众数是保证唯一的。&lt;br&gt;网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【Leetcode】159比赛</title>
    <link href="http://yoursite.com/2019/10/23/%E3%80%90leetcode%E3%80%91159%E5%91%A8%E6%AF%94%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/10/23/【leetcode】159周比赛/</id>
    <published>2019-10-23T05:01:31.928Z</published>
    <updated>2019-10-23T16:15:56.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="159周比赛"><a href="#159周比赛" class="headerlink" title="159周比赛"></a>159周比赛</h1><p>今天时间太紧张了，时间根本不够用。两道题目的目标没有达成。</p><h2 id="5230-缀点成线"><a href="#5230-缀点成线" class="headerlink" title="5230. 缀点成线"></a>5230. 缀点成线</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在一个 XY 坐标系中有一些点，我们用数组<code>coordinates</code>来分别记录它们的坐标，其中<code>coordinates[i] = [x, y]</code>表示横坐标为<code>x</code>、纵坐标为<code>y</code>的点。</p><p>请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 <code>true</code>，否则请返回<code>false</code>。</p><a id="more"></a><p>示例 1：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coordinates = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">6</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>示例 2：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coordinates = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">7</span>]]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>提示：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> &lt;= coordinates.length &lt;= <span class="number">1000</span></span><br><span class="line">coordinates[i].length == <span class="number">2</span></span><br><span class="line"><span class="number">-10</span>^<span class="number">4</span> &lt;= coordinates[i][<span class="number">0</span>], coordinates[i][<span class="number">1</span>] &lt;= <span class="number">10</span>^<span class="number">4</span></span><br><span class="line">coordinates 中不含重复的点</span><br></pre></td></tr></table></figure></p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/check-if-it-is-a-straight-line" target="_blank" rel="noopener">https://leetcode-cn.com/problems/check-if-it-is-a-straight-line</a>                </p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 给定点的集合是否在一条直线上</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>依次比较相邻三个点构成的斜率是否相等，因为相邻的两个点有公共的交点，如果斜率相等，则认为其在一条直线上。</li><li>由于可能存在斜率无限大的情况，这时我们避免用除法，斜率用<code>(x,y)</code>表示，如果两个斜率相等则可以用等式判断<code>x1y2 == x2y1</code>.</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkStraightLine</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; coordinates)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = coordinates.size();         </span><br><span class="line">        <span class="keyword">int</span> x = coordinates[<span class="number">1</span>][<span class="number">0</span>] - coordinates[<span class="number">0</span>][<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">int</span> y = coordinates[<span class="number">1</span>][<span class="number">1</span>] - coordinates[<span class="number">0</span>][<span class="number">1</span>]; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = coordinates[i][<span class="number">0</span>] - coordinates[i<span class="number">-1</span>][<span class="number">0</span>]; </span><br><span class="line">            <span class="keyword">int</span> y1 = coordinates[i][<span class="number">1</span>] - coordinates[i<span class="number">-1</span>][<span class="number">1</span>]; </span><br><span class="line">            <span class="keyword">if</span>(y1*x != x1*y)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5231-删除子文件夹"><a href="#5231-删除子文件夹" class="headerlink" title="5231. 删除子文件夹"></a>5231. 删除子文件夹</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>你是一位系统管理员，手里有一份文件夹列表<code>folder</code>，你的任务是要删除该列表中的所有 子文件夹，并以 任意顺序 返回剩下的文件夹。</p><p>我们这样定义「子文件夹」：<br>如果文件夹<code>folder[i]</code>位于另一个文件夹 <code>folder[j]</code>下，那么<code>folder[i]</code>就是 <code>folder[j]</code> 的子文件夹。<br>文件夹的「路径」是由一个或多个按以下格式串联形成的字符串：<br>/ 后跟一个或者多个小写英文字母。<br>例如，<code>/leetcode</code>和<code>/leetcode/problems</code>都是有效的路径，而空字符串和 / 不是。</p><p>示例 1：<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：folder = [<span class="comment">"/a"</span>,<span class="comment">"/a/b"</span>,<span class="comment">"/c/d"</span>,<span class="comment">"/c/d/e"</span>,<span class="comment">"/c/f"</span>]</span><br><span class="line">输出：[<span class="comment">"/a"</span>,<span class="comment">"/c/d"</span>,<span class="comment">"/c/f"</span>]</span><br><span class="line">解释：<span class="comment">"/a/b/"</span> 是 <span class="comment">"/a"</span> 的子文件夹，而 <span class="comment">"/c/d/e"</span> 是 <span class="comment">"/c/d"</span> 的子文件夹。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：folder = [<span class="comment">"/a"</span>,<span class="comment">"/a/b/c"</span>,<span class="comment">"/a/b/d"</span>]</span><br><span class="line">输出：[<span class="comment">"/a"</span>]</span><br><span class="line">解释：文件夹 <span class="comment">"/a/b/c"</span> 和 <span class="comment">"/a/b/d/"</span> 都会被删除，因为它们都是 <span class="comment">"/a"</span> 的子文件夹。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：folder = [<span class="comment">"/a/b/c"</span>,<span class="comment">"/a/b/d"</span>,<span class="comment">"/a/b/ca"</span>]</span><br><span class="line">输出：[<span class="comment">"/a/b/c"</span>,<span class="comment">"/a/b/ca"</span>,<span class="comment">"/a/b/d"</span>]</span><br></pre></td></tr></table></figure></p><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem</a></p><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 删除子文件夹</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li>本题首先看到题目可以用trie树来解决，仔细分析一下，题目中明确说明了全部为小写字母和’\’,也比平常的trie树多了一个字符而已；</li><li>将文件夹名称按照字典序进行排序，这样保证根文件夹最先插入到字典树中，这样我们就可以保证子文件在进行查询时，能够判断是否存在父文件夹。</li><li>利用trie的特性，标记每个文件夹的结束。当进行插入操作时，发现当前遇到的前缀中存在文件夹时，则这时认为当前的文件为子文件，需要进行删除。</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">cstruct TrieNode&#123;</span><br><span class="line">    <span class="keyword">bool</span> isfolder;</span><br><span class="line">    TrieNode * next[<span class="number">27</span>];</span><br><span class="line">    TrieNode()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;isfolder = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">27</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;next[i] = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertTrie</span><span class="params">(TrieNode * root,<span class="built_in">string</span> word)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TrieNode * node = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : word)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'/'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[<span class="number">26</span>])&#123;</span><br><span class="line">                node-&gt;next[<span class="number">26</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[<span class="number">26</span>]; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[c-<span class="string">'a'</span>])&#123;</span><br><span class="line">                node-&gt;next[c-<span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[c-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    node-&gt;isfolder = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSubFolder</span><span class="params">(TrieNode * root,<span class="built_in">string</span> folder)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TrieNode * node = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; folder.size(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(folder[i] == <span class="string">'/'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[<span class="number">26</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[<span class="number">26</span>]; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!node-&gt;next[folder[i]-<span class="string">'a'</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[folder[i]-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;isfolder &amp;&amp; folder[i+<span class="number">1</span>] == <span class="string">'/'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; removeSubfolders(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; folder) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        sort(folder.begin(),folder.end());</span><br><span class="line">        </span><br><span class="line">        TrieNode * root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> s : folder)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!isSubFolder(root,s))&#123;</span><br><span class="line">                res.push_back(s);</span><br><span class="line">                insertTrie(root,s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5232-替换子串得到平衡字符串"><a href="#5232-替换子串得到平衡字符串" class="headerlink" title="5232. 替换子串得到平衡字符串"></a>5232. 替换子串得到平衡字符串</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>有一个只含有 <code>&#39;Q&#39;, &#39;W&#39;, &#39;E&#39;, &#39;R&#39;</code>四种字符，且长度为 n 的字符串。<br>假如在该字符串中，这四个字符都恰好出现 n/4 次，那么它就是一个「平衡字符串」。给你一个这样的字符串 s，请通过「替换子串」的方式，使原字符串 s 变成一个「平衡字符串」。你可以用和「待替换子串」长度相同的 任何 其他字符串来完成替换。<br>请返回待替换子串的最小可能长度。如果原字符串自身就是一个平衡字符串，则返回 0。</p><p>示例 1：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QWER"</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：s 已经是平衡的了。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QQWE"</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：我们需要把一个 'Q' 替换成 'R'，这样得到的 <span class="string">"RQWE"</span> (或 <span class="string">"QRWE"</span>) 是平衡的。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QQQW"</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：我们可以把前面的 <span class="string">"QQ"</span> 替换成 <span class="string">"ER"</span>。</span><br></pre></td></tr></table></figure><br>示例 4：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">"QQQQ"</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：我们可以替换后 <span class="number">3</span> 个 'Q'，使 s = <span class="string">"QWER"</span>。</span><br></pre></td></tr></table></figure></p><h3 id="地址-2"><a href="#地址-2" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/replace-the-substring-for-balanced-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/replace-the-substring-for-balanced-string</a></p><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 滑动窗口</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>这个题目非常不错且非常典型的滑动窗口.</li><li>我们通过滑动窗口，保证在窗口外部的字符串统计数字都小于平均数，通过双指针算法进行逐步扩展即可。</li></ol></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">balancedString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.size();</span><br><span class="line">        <span class="keyword">int</span> aver = n/<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> res = n;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)&#123;</span><br><span class="line">            cnt[s[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> balance = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : cnt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c.second &gt; aver)&#123;</span><br><span class="line">                balance = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(balance)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(r = <span class="number">0</span> ; r &lt; n; ++r)&#123;</span><br><span class="line">            cnt[s[r]]--;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(l &lt; n &amp;&amp; l &lt;= r &amp;&amp;</span><br><span class="line">                   cnt[<span class="string">'Q'</span>] &lt;= aver&amp;&amp; \</span><br><span class="line">                   cnt[<span class="string">'W'</span>] &lt;= aver&amp;&amp; \</span><br><span class="line">                   cnt[<span class="string">'E'</span>] &lt;= aver&amp;&amp; \</span><br><span class="line">                   cnt[<span class="string">'R'</span>] &lt;= aver)&#123;</span><br><span class="line">                   res = min(res,r-l+<span class="number">1</span>);</span><br><span class="line">                   cnt[s[l]]++;</span><br><span class="line">                   l++;           </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5233-规划兼职工作"><a href="#5233-规划兼职工作" class="headerlink" title="5233. 规划兼职工作"></a>5233. 规划兼职工作</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>你打算利用空闲时间来做兼职工作赚些零花钱。</p><p>这里有 n 份兼职工作，每份工作预计从 <code>startTime[i]</code> 开始到 <code>endTime[i]</code>结束，报酬为 <code>profit[i]</code>。</p><p>给你一份兼职工作表，包含开始时间<code>startTime</code>，结束时间<code>endTime</code>和预计报酬 <code>profit</code>三个数组，请你计算并返回可以获得的最大报酬。</p><p>注意，时间上出现重叠的 2 份工作不能同时进行。</p><p>如果你选择的工作在时间 X 结束，那么你可以立刻进行在时间 X 开始的下一份工作。</p><p>示例 1：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：startTime = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>], endTime = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], profit = [<span class="number">50</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">70</span>]</span><br><span class="line">输出：<span class="number">120</span></span><br><span class="line">解释：</span><br><span class="line">我们选出第 <span class="number">1</span> 份和第 <span class="number">4</span> 份工作， </span><br><span class="line">时间范围是 [<span class="number">1</span><span class="number">-3</span>]+[<span class="number">3</span><span class="number">-6</span>]，共获得报酬 <span class="number">120</span> = <span class="number">50</span> + <span class="number">70</span>。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">输入：startTime = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>], endTime = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>], profit = [<span class="number">20</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">70</span>,<span class="number">60</span>]</span><br><span class="line">输出：<span class="number">150</span></span><br><span class="line">解释：</span><br><span class="line">我们选择第 <span class="number">1</span>，<span class="number">4</span>，<span class="number">5</span> 份工作。 </span><br><span class="line">共获得报酬 <span class="number">150</span> = <span class="number">20</span> + <span class="number">70</span> + <span class="number">60</span>。</span><br></pre></td></tr></table></figure><p>示例 3：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：startTime = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], endTime = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], profit = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure></p><h3 id="地址-3"><a href="#地址-3" class="headerlink" title="地址"></a>地址</h3><p><a href="https://leetcode-cn.com/problems/maximum-profit-in-job-scheduling" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-profit-in-job-scheduling</a></p><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><blockquote><p> 动态规划</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ol><li>按照开始时间的大小进行排序,开始时间大的在前面,并且收益高的工作排序在前；</li><li>设置动态规划递推公式<code>dp[t]</code>,代表从时间<code>t</code>开始工作能够取得的最大收益.</li><li>递推公式如下,对于工作<code>i</code>花费的时间为<code>job[i]</code>,取得收益为<code>profit[i]</code>,则递推公式为:<code>dp[t] = max(dp[t],dp[t-job[i]] + profit[i])</code>.</li><li>可以利用TreeMap的特性，进行二分查找，总的时间复杂度为<code>O(nlgn)</code>.</li></ol></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp; a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] == b[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">2</span>] &gt; b[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jobScheduling</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; startTime, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; endTime, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; profit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = startTime.size();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; work(n);</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; dp;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i)&#123;</span><br><span class="line">            work[i].push_back(startTime[i]);</span><br><span class="line">            work[i].push_back(endTime[i]);</span><br><span class="line">            work[i].push_back(profit[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*start time sort*/</span></span><br><span class="line">        sort(work.begin(),work.end(),cmp);</span><br><span class="line">        <span class="comment">/*dp*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">auto</span> it1 = dp.lower_bound(work[i][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">auto</span> it2 = dp.lower_bound(work[i][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(it1 != dp.end())&#123;</span><br><span class="line">                dp[work[i][<span class="number">0</span>]] = max(it1-&gt;second,work[i][<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(it2 != dp.end())&#123;</span><br><span class="line">                dp[work[i][<span class="number">0</span>]] = max(dp[work[i][<span class="number">0</span>]],it2-&gt;second+work[i][<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[work[i][<span class="number">0</span>]] = max(work[i][<span class="number">2</span>],dp[work[i][<span class="number">0</span>]]);</span><br><span class="line">            res = max(res,dp[work[i][<span class="number">0</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外附上lee215的解答，需要仔细的消化和吸收.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jobScheduling</span><span class="params">(self, startTime, endTime, profit)</span>:</span></span><br><span class="line">        jobs = sorted(zip(startTime, endTime, profit), key=<span class="keyword">lambda</span> v: v[<span class="number">1</span>])</span><br><span class="line">        dp = [[<span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">for</span> s, e, p <span class="keyword">in</span> jobs:</span><br><span class="line">            i = bisect.bisect(dp, [s + <span class="number">1</span>]) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dp[i][<span class="number">1</span>] + p &gt; dp[<span class="number">-1</span>][<span class="number">1</span>]:</span><br><span class="line">                dp.append([e, dp[i][<span class="number">1</span>] + p])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;159周比赛&quot;&gt;&lt;a href=&quot;#159周比赛&quot; class=&quot;headerlink&quot; title=&quot;159周比赛&quot;&gt;&lt;/a&gt;159周比赛&lt;/h1&gt;&lt;p&gt;今天时间太紧张了，时间根本不够用。两道题目的目标没有达成。&lt;/p&gt;&lt;h2 id=&quot;5230-缀点成线&quot;&gt;&lt;a href=&quot;#5230-缀点成线&quot; class=&quot;headerlink&quot; title=&quot;5230. 缀点成线&quot;&gt;&lt;/a&gt;5230. 缀点成线&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;在一个 XY 坐标系中有一些点，我们用数组&lt;code&gt;coordinates&lt;/code&gt;来分别记录它们的坐标，其中&lt;code&gt;coordinates[i] = [x, y]&lt;/code&gt;表示横坐标为&lt;code&gt;x&lt;/code&gt;、纵坐标为&lt;code&gt;y&lt;/code&gt;的点。&lt;/p&gt;&lt;p&gt;请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 &lt;code&gt;true&lt;/code&gt;，否则请返回&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
